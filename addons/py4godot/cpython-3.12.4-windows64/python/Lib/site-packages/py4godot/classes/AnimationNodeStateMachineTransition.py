# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Curve as py4godot_curve 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPAnimationNodeStateMachineTransitionWrapper

class SwitchMode:
  SWITCH_MODE_IMMEDIATE = 0
  SWITCH_MODE_SYNC = 1
  SWITCH_MODE_AT_END = 2
class AdvanceMode:
  ADVANCE_MODE_DISABLED = 0
  ADVANCE_MODE_ENABLED = 1
  ADVANCE_MODE_AUTO = 2


class AnimationNodeStateMachineTransition(py4godot_resource.Resource):
  r'''
		The path generated when using `AnimationNodeStateMachinePlayback.travel` is limited to the nodes connected by `AnimationNodeStateMachineTransition`.
		You can set the timing and conditions of the transition in detail.
	'''

  @staticmethod
  def constructor():
    class_ = AnimationNodeStateMachineTransition.construct_without_init()
    class_._ptr = constructor(89,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeStateMachineTransition.construct_without_init()
    class_._ptr = constructor(89,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeStateMachineTransitionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(89,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeStateMachineTransitionWrapper()
  def init_signals(self):
    super().init_signals()
    advance_condition_changed_name = utils.py_string_to_string_name("advance_condition_changed")
    self.advance_condition_changed = signals.BuiltinSignal(self, advance_condition_changed_name)

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeStateMachineTransition.__new__(AnimationNodeStateMachineTransition)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeStateMachineTransition'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeStateMachineTransition.construct_without_init()
    cls._ptr = CPPAnimationNodeStateMachineTransitionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeStateMachineTransition.construct_without_init()
    cls._ptr = CPPAnimationNodeStateMachineTransitionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def xfade_time(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_xfade_time()
    return _ret
  @xfade_time.setter
  def xfade_time(self,  value:'float'):
    self.set_xfade_time(value)
  @property
  def xfade_curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''
    _ret = self. get_xfade_curve()
    return _ret
  @xfade_curve.setter
  def xfade_curve(self,  value:'py4godot_object.Object'):
    self.set_xfade_curve(value)
  @property
  def break_loop_at_end(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_loop_broken_at_end()
    return _ret
  @break_loop_at_end.setter
  def break_loop_at_end(self,  value:'bool'):
    self.set_break_loop_at_end(value)
  @property
  def reset(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_reset()
    return _ret
  @reset.setter
  def reset(self,  value:'bool'):
    self.set_reset(value)
  @property
  def priority(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_priority()
    return _ret
  @priority.setter
  def priority(self,  value:'int'):
    self.set_priority(value)
  @property
  def switch_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_switch_mode()
    return _ret
  @switch_mode.setter
  def switch_mode(self,  value:'int'):
    self.set_switch_mode(value)
  @property
  def advance_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_advance_mode()
    return _ret
  @advance_mode.setter
  def advance_mode(self,  value:'int'):
    self.set_advance_mode(value)
  @property
  def advance_condition(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_advance_condition()
    return _ret
  @advance_condition.setter
  def advance_condition(self,  value:'object'):
    self.set_advance_condition(value)
  @property
  def advance_expression(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_advance_expression()
    return _ret
  @advance_expression.setter
  def advance_expression(self,  value:'str'):
    self.set_advance_expression(value)
  @functools.native_method
  def set_switch_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__switch_mode = mode






    self._ptr.call_with_return(77,tuple([mode]))

  @functools.native_method
  def get_switch_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_advance_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__advance_mode = mode






    self._ptr.call_with_return(79,tuple([mode]))

  @functools.native_method
  def get_advance_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_advance_condition(self, name:'object'   ) -> None:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'

    self.py__advance_condition = name



    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)


    self._ptr.call_with_return(81,tuple([py_stringname_name._ptr]))

  @functools.native_method
  def get_advance_condition(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_xfade_time(self, secs:'float'   ) -> None:
    r''''''

    assert isinstance(secs, (int, float)), 'secs must be int or float'

    self.py__xfade_time = secs






    self._ptr.call_with_return(83,tuple([secs]))

  @functools.native_method
  def get_xfade_time(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_xfade_curve(self, curve:'py4godot_curve.Curve'   ) -> None:
    r''''''

    assert(not curve is None)
    assert isinstance(curve, get_class('Curve')), 'curve must be Curve'

    self.py__xfade_curve = curve






    self._ptr.call_with_return(85,tuple([curve._ptr]))

  @functools.native_method
  def get_xfade_curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Curve
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_break_loop_at_end(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__break_loop_at_end = enable






    self._ptr.call_with_return(87,tuple([enable]))

  @functools.native_method
  def is_loop_broken_at_end(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_reset(self, reset:'bool'   ) -> None:
    r''''''

    assert isinstance(reset, bool), 'reset must be bool'

    self.py__reset = reset






    self._ptr.call_with_return(89,tuple([reset]))

  @functools.native_method
  def is_reset(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_priority(self, priority:'int'   ) -> None:
    r''''''

    assert isinstance(priority, (int, float)), 'priority must be int or float'

    self.py__priority = priority






    self._ptr.call_with_return(91,tuple([priority]))

  @functools.native_method
  def get_priority(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))

    return _ret


  @functools.native_method
  def set_advance_expression(self, text:'str'   ) -> None:
    r''''''

    assert(not text is None)
    assert isinstance(text, (str, String)), 'text must be str or String'

    self.py__advance_expression = text



    assert(isinstance(text, (str, String)))
    py_string_text = text if isinstance(text, StringName) else c_utils.py_string_to_string(text)

    py__string_text = utils.py_string_to_string(text)
    py__string_text.shouldBeDeleted = False


    self._ptr.call_with_return(93,tuple([py__string_text._ptr]))

  @functools.native_method
  def get_advance_expression(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return utils.gd_string_to_py_string(_ret)



register_cast_function('AnimationNodeStateMachineTransition', AnimationNodeStateMachineTransition.cast)
register_class('AnimationNodeStateMachineTransition', AnimationNodeStateMachineTransition)
