# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Container as py4godot_container 
from py4godot.wrappers.wrappers import CPPMarginContainerWrapper


class MarginContainer(py4godot_container.Container):
  r'''
		`MarginContainer` adds an adjustable margin on each side of its child controls. The margins are added around all children, not around each individual one. To control the `MarginContainer`'s margins, use the `margin_*` theme properties listed below.
		**Note:** The margin sizes are theme overrides, not normal properties. This is an example of how to change them in code:
		
		```gdscript
		# This code sample assumes the current script is extending MarginContainer.
		var margin_value = 100
		add_theme_constant_override("margin_top", margin_value)
		add_theme_constant_override("margin_left", margin_value)
		add_theme_constant_override("margin_bottom", margin_value)
		add_theme_constant_override("margin_right", margin_value)
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = MarginContainer.construct_without_init()
    class_._ptr = constructor(463,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MarginContainer.construct_without_init()
    class_._ptr = constructor(463,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMarginContainerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(463,0, ())


  def generate_wrapper(self):
    return CPPMarginContainerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = MarginContainer.__new__(MarginContainer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MarginContainer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MarginContainer.construct_without_init()
    cls._ptr = CPPMarginContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MarginContainer.construct_without_init()
    cls._ptr = CPPMarginContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('MarginContainer', MarginContainer.cast)
register_class('MarginContainer', MarginContainer)
