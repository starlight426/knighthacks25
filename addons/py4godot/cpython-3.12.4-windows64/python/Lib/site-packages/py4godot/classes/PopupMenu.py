# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.MissingNode as py4godot_missingnode 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.DampedSpringJoint2D as py4godot_dampedspringjoint2d 
  import py4godot.classes.XRAnchor3D as py4godot_xranchor3d 
  import py4godot.classes.Light2D as py4godot_light2d 
  import py4godot.classes.Area3D as py4godot_area3d 
  import py4godot.classes.CollisionShape3D as py4godot_collisionshape3d 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.CSGPolygon3D as py4godot_csgpolygon3d 
  import py4godot.classes.PathFollow3D as py4godot_pathfollow3d 
  import py4godot.classes.CanvasGroup as py4godot_canvasgroup 
  import py4godot.classes.SpringBoneCollision3D as py4godot_springbonecollision3d 
  import py4godot.classes.AnimationTree as py4godot_animationtree 
  import py4godot.classes.ImporterMeshInstance3D as py4godot_importermeshinstance3d 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.EditorResourcePreview as py4godot_editorresourcepreview 
  import py4godot.classes.SpringBoneCollisionPlane3D as py4godot_springbonecollisionplane3d 
  import py4godot.classes.RemoteTransform2D as py4godot_remotetransform2d 
  import py4godot.classes.MultiMeshInstance2D as py4godot_multimeshinstance2d 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CollisionPolygon2D as py4godot_collisionpolygon2d 
  import py4godot.classes.SoftBody3D as py4godot_softbody3d 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.CanvasItem as py4godot_canvasitem 
  import py4godot.classes.SpringBoneCollisionCapsule3D as py4godot_springbonecollisioncapsule3d 
  import py4godot.classes.GPUParticlesCollisionHeightField3D as py4godot_gpuparticlescollisionheightfield3d 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.Marker2D as py4godot_marker2d 
  import py4godot.classes.Node2D as py4godot_node2d 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.SpotLight3D as py4godot_spotlight3d 
  import py4godot.classes.CSGTorus3D as py4godot_csgtorus3d 
  import py4godot.classes.MeshInstance3D as py4godot_meshinstance3d 
  import py4godot.classes.RayCast3D as py4godot_raycast3d 
  import py4godot.classes.GeometryInstance3D as py4godot_geometryinstance3d 
  import py4godot.classes.EditorCommandPalette as py4godot_editorcommandpalette 
  import py4godot.classes.NativeMenu as py4godot_nativemenu 
  import py4godot.classes.CollisionPolygon3D as py4godot_collisionpolygon3d 
  import py4godot.classes.Line2D as py4godot_line2d 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.ResourcePreloader as py4godot_resourcepreloader 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.GPUParticlesCollisionSphere3D as py4godot_gpuparticlescollisionsphere3d 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.HingeJoint3D as py4godot_hingejoint3d 
  import py4godot.classes.OpenXRCompositionLayerEquirect as py4godot_openxrcompositionlayerequirect 
  import py4godot.classes.SpringBoneCollisionSphere3D as py4godot_springbonecollisionsphere3d 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.OpenXRCompositionLayerQuad as py4godot_openxrcompositionlayerquad 
  import py4godot.classes.EditorFileDialog as py4godot_editorfiledialog 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DirectionalLight3D as py4godot_directionallight3d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.Parallax2D as py4godot_parallax2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
  import py4godot.classes.PhysicsBody2D as py4godot_physicsbody2d 
  import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
  import py4godot.classes.ShaderGlobalsOverride as py4godot_shaderglobalsoverride 
  import py4godot.classes.FileDialog as py4godot_filedialog 
  import py4godot.classes.MultiplayerSpawner as py4godot_multiplayerspawner 
  import py4godot.classes.CPUParticles3D as py4godot_cpuparticles3d 
  import py4godot.classes.LightmapProbe as py4godot_lightmapprobe 
  import py4godot.classes.CPUParticles2D as py4godot_cpuparticles2d 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.InputEvent as py4godot_inputevent 
  import py4godot.classes.Camera3D as py4godot_camera3d 
  import py4godot.classes.SpriteBase3D as py4godot_spritebase3d 
  import py4godot.classes.XRNode3D as py4godot_xrnode3d 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.MultiplayerSynchronizer as py4godot_multiplayersynchronizer 
  import py4godot.classes.PhysicalBoneSimulator3D as py4godot_physicalbonesimulator3d 
  import py4godot.classes.AimModifier3D as py4godot_aimmodifier3d 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.ScriptCreateDialog as py4godot_scriptcreatedialog 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.XRController3D as py4godot_xrcontroller3d 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.OpenXRVisibilityMask as py4godot_openxrvisibilitymask 
  import py4godot.classes.AudioListener3D as py4godot_audiolistener3d 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.VehicleBody3D as py4godot_vehiclebody3d 
  import py4godot.classes.VisibleOnScreenEnabler2D as py4godot_visibleonscreenenabler2d 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ShapeCast3D as py4godot_shapecast3d 
  import py4godot.classes.XRCamera3D as py4godot_xrcamera3d 
  import py4godot.classes.CSGShape3D as py4godot_csgshape3d 
  import py4godot.classes.LightmapGI as py4godot_lightmapgi 
  import py4godot.classes.VoxelGI as py4godot_voxelgi 
  import py4godot.classes.XRFaceModifier3D as py4godot_xrfacemodifier3d 
  import py4godot.classes.ConfirmationDialog as py4godot_confirmationdialog 
  import py4godot.classes.PhysicalBone3D as py4godot_physicalbone3d 
  import py4godot.classes.ConeTwistJoint3D as py4godot_conetwistjoint3d 
  import py4godot.classes.CollisionObject2D as py4godot_collisionobject2d 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.Timer as py4godot_timer 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.Polygon2D as py4godot_polygon2d 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.VisibleOnScreenNotifier3D as py4godot_visibleonscreennotifier3d 
  import py4godot.classes.RigidBody2D as py4godot_rigidbody2d 
  import py4godot.classes.Marker3D as py4godot_marker3d 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.AnimatedSprite3D as py4godot_animatedsprite3d 
  import py4godot.classes.LightOccluder2D as py4godot_lightoccluder2d 
  import py4godot.classes.TouchScreenButton as py4godot_touchscreenbutton 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.TileMap as py4godot_tilemap 
  import py4godot.classes.Joint3D as py4godot_joint3d 
  import py4godot.classes.Viewport as py4godot_viewport 
  import py4godot.classes.XRBodyModifier3D as py4godot_xrbodymodifier3d 
  import py4godot.classes.ParallaxLayer as py4godot_parallaxlayer 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.NavigationRegion2D as py4godot_navigationregion2d 
  import py4godot.classes.AnimatableBody2D as py4godot_animatablebody2d 
  import py4godot.classes.CSGCylinder3D as py4godot_csgcylinder3d 
  import py4godot.classes.LookAtModifier3D as py4godot_lookatmodifier3d 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.NavigationRegion3D as py4godot_navigationregion3d 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.NavigationObstacle3D as py4godot_navigationobstacle3d 
  import py4godot.classes.Joint2D as py4godot_joint2d 
  import py4godot.classes.GridMapEditorPlugin as py4godot_gridmapeditorplugin 
  import py4godot.classes.ConvertTransformModifier3D as py4godot_converttransformmodifier3d 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.Area2D as py4godot_area2d 
  import py4godot.classes.Decal as py4godot_decal 
  import py4godot.classes.Path3D as py4godot_path3d 
  import py4godot.classes.AudioStreamPlayer as py4godot_audiostreamplayer 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.XROrigin3D as py4godot_xrorigin3d 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.RemoteTransform3D as py4godot_remotetransform3d 
  import py4godot.classes.GPUParticles2D as py4godot_gpuparticles2d 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
  import py4godot.classes.DirectionalLight2D as py4godot_directionallight2d 
  import py4godot.classes.EditorPlugin as py4godot_editorplugin 
  import py4godot.classes.VisibleOnScreenEnabler3D as py4godot_visibleonscreenenabler3d 
  import py4godot.classes.BackBufferCopy as py4godot_backbuffercopy 
  import py4godot.classes.NavigationAgent3D as py4godot_navigationagent3d 
  import py4godot.classes.PhysicsBody3D as py4godot_physicsbody3d 
  import py4godot.classes.MultiMeshInstance3D as py4godot_multimeshinstance3d 
  import py4godot.classes.CanvasLayer as py4godot_canvaslayer 
  import py4godot.classes.PhysicalBone2D as py4godot_physicalbone2d 
  import py4godot.classes.SkeletonIK3D as py4godot_skeletonik3d 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CopyTransformModifier3D as py4godot_copytransformmodifier3d 
  import py4godot.classes.GPUParticlesCollisionSDF3D as py4godot_gpuparticlescollisionsdf3d 
  import py4godot.classes.RetargetModifier3D as py4godot_retargetmodifier3d 
  import py4godot.classes.GPUParticlesCollision3D as py4godot_gpuparticlescollision3d 
  import py4godot.classes.Path2D as py4godot_path2d 
  import py4godot.classes.GPUParticles3D as py4godot_gpuparticles3d 
  import py4godot.classes.SpringArm3D as py4godot_springarm3d 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.SpringBoneSimulator3D as py4godot_springbonesimulator3d 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.CSGBox3D as py4godot_csgbox3d 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.ParallaxBackground as py4godot_parallaxbackground 
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.PathFollow2D as py4godot_pathfollow2d 
  import py4godot.classes.CollisionObject3D as py4godot_collisionobject3d 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.StatusIndicator as py4godot_statusindicator 
  import py4godot.classes.Label3D as py4godot_label3d 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
  import py4godot.classes.CSGSphere3D as py4godot_csgsphere3d 
  import py4godot.classes.PinJoint3D as py4godot_pinjoint3d 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.GridMap as py4godot_gridmap 
  import py4godot.classes.ModifierBoneTarget3D as py4godot_modifierbonetarget3d 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.CharacterBody2D as py4godot_characterbody2d 
  import py4godot.classes.WorldEnvironment as py4godot_worldenvironment 
  import py4godot.classes.VisibleOnScreenNotifier2D as py4godot_visibleonscreennotifier2d 
  import py4godot.classes.StaticBody3D as py4godot_staticbody3d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.SliderJoint3D as py4godot_sliderjoint3d 
  import py4godot.classes.NavigationAgent2D as py4godot_navigationagent2d 
  import py4godot.classes.AnimatableBody3D as py4godot_animatablebody3d 
  import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.ReflectionProbe as py4godot_reflectionprobe 
  import py4godot.classes.NavigationLink3D as py4godot_navigationlink3d 
  import py4godot.classes.NavigationLink2D as py4godot_navigationlink2d 
  import py4godot.classes.GPUParticlesAttractorBox3D as py4godot_gpuparticlesattractorbox3d 
  import py4godot.classes.RootMotionView as py4godot_rootmotionview 
  import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
  import py4godot.classes.Skeleton2D as py4godot_skeleton2d 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.CSGCombiner3D as py4godot_csgcombiner3d 
  import py4godot.classes.OccluderInstance3D as py4godot_occluderinstance3d 
  import py4godot.classes.FogVolume as py4godot_fogvolume 
  import py4godot.classes.Bone2D as py4godot_bone2d 
  import py4godot.classes.AudioStreamPlayer3D as py4godot_audiostreamplayer3d 
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.Sprite3D as py4godot_sprite3d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.MeshInstance2D as py4godot_meshinstance2d 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.GPUParticlesCollisionBox3D as py4godot_gpuparticlescollisionbox3d 
  import py4godot.classes.GPUParticlesAttractor3D as py4godot_gpuparticlesattractor3d 
  import py4godot.classes.XRHandModifier3D as py4godot_xrhandmodifier3d 
  import py4godot.classes.Camera2D as py4godot_camera2d 
  import py4godot.classes.SubViewport as py4godot_subviewport 
  import py4godot.classes.Window as py4godot_window 
  import py4godot.classes.StaticBody2D as py4godot_staticbody2d 
  import py4godot.classes.ShapeCast2D as py4godot_shapecast2d 
  import py4godot.classes.Sprite2D as py4godot_sprite2d 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.Node3D as py4godot_node3d 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.HTTPRequest as py4godot_httprequest 
  import py4godot.classes.VehicleWheel3D as py4godot_vehiclewheel3d 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.Node as py4godot_node 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.AnimationMixer as py4godot_animationmixer 
  import py4godot.classes.GPUParticlesAttractorVectorField3D as py4godot_gpuparticlesattractorvectorfield3d 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.OpenXRCompositionLayerCylinder as py4godot_openxrcompositionlayercylinder 
  import py4godot.classes.CharacterBody3D as py4godot_characterbody3d 
  import py4godot.classes.AudioStreamPlayer2D as py4godot_audiostreamplayer2d 
  import py4godot.classes.TileMapLayer as py4godot_tilemaplayer 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.AudioListener2D as py4godot_audiolistener2d 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.RayCast2D as py4godot_raycast2d 
  import py4godot.classes.CanvasModulate as py4godot_canvasmodulate 
  import py4godot.classes.CollisionShape2D as py4godot_collisionshape2d 
  import py4godot.classes.NavigationObstacle2D as py4godot_navigationobstacle2d 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.InstancePlaceholder as py4godot_instanceplaceholder 
  import py4godot.classes.OpenXRHand as py4godot_openxrhand 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.Generic6DOFJoint3D as py4godot_generic6dofjoint3d 
  import py4godot.classes.RigidBody3D as py4godot_rigidbody3d 
  import py4godot.classes.Light3D as py4godot_light3d 
  import py4godot.classes.AcceptDialog as py4godot_acceptdialog 
  import py4godot.classes.OpenXRRenderModel as py4godot_openxrrendermodel 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.PinJoint2D as py4godot_pinjoint2d 
  import py4godot.classes.EditorFileSystem as py4godot_editorfilesystem 
  import py4godot.classes.OpenXRCompositionLayer as py4godot_openxrcompositionlayer 
  import py4godot.classes.AnimationPlayer as py4godot_animationplayer 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.OpenXRRenderModelManager as py4godot_openxrrendermodelmanager 
  import py4godot.classes.PointLight2D as py4godot_pointlight2d 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.AnimatedSprite2D as py4godot_animatedsprite2d 
  import py4godot.classes.OmniLight3D as py4godot_omnilight3d 
  import py4godot.classes.CSGMesh3D as py4godot_csgmesh3d 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.BoneAttachment3D as py4godot_boneattachment3d 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.PopupPanel as py4godot_popuppanel 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.GrooveJoint2D as py4godot_groovejoint2d 
  import py4godot.classes.GPUParticlesAttractorSphere3D as py4godot_gpuparticlesattractorsphere3d 
  import py4godot.classes.Shortcut as py4godot_shortcut 
import py4godot.classes.Popup as py4godot_popup 
from py4godot.wrappers.wrappers import CPPPopupMenuWrapper


class PopupMenu(py4godot_popup.Popup):
  r'''
		`PopupMenu` is a modal window used to display a list of options. Useful for toolbars and context menus.
		The size of a `PopupMenu` can be limited by using `Window.max_size`. If the height of the list of items is larger than the maximum height of the `PopupMenu`, a `ScrollContainer` within the popup will allow the user to scroll the contents. If no maximum size is set, or if it is set to `0`, the `PopupMenu` height will be limited by its parent rect.
		All `set_*` methods allow negative item indices, i.e. `-1` to access the last item, `-2` to select the second-to-last item, and so on.
		**Incremental search:** Like `ItemList` and `Tree`, `PopupMenu` supports searching within the list while the control is focused. Press a key that matches the first letter of an item's name to select the first item starting with the given letter. After that point, there are two ways to perform incremental search: 1) Press the same key again before the timeout duration to select the next item starting with the same letter. 2) Press letter keys that match the rest of the word before the timeout duration to match to select the item in question directly. Both of these actions will be reset to the beginning of the list if the timeout duration has passed since the last keystroke was registered. You can adjust the timeout duration by changing `ProjectSettings.gui/timers/incremental_search_max_interval_msec`.
		**Note:** The ID values used for items are limited to 32 bits, not full 64 bits of `int`. This has a range of `-2^32` to `2^32 - 1`, i.e. `-2147483648` to `2147483647`.
	'''

  @staticmethod
  def constructor():
    class_ = PopupMenu.construct_without_init()
    class_._ptr = constructor(634,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PopupMenu.construct_without_init()
    class_._ptr = constructor(634,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPopupMenuWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(634,0, ())


  def generate_wrapper(self):
    return CPPPopupMenuWrapper()
  def init_signals(self):
    super().init_signals()
    id_pressed_name = utils.py_string_to_string_name("id_pressed")
    self.id_pressed = signals.BuiltinSignal(self, id_pressed_name)
    id_focused_name = utils.py_string_to_string_name("id_focused")
    self.id_focused = signals.BuiltinSignal(self, id_focused_name)
    index_pressed_name = utils.py_string_to_string_name("index_pressed")
    self.index_pressed = signals.BuiltinSignal(self, index_pressed_name)
    menu_changed_name = utils.py_string_to_string_name("menu_changed")
    self.menu_changed = signals.BuiltinSignal(self, menu_changed_name)

  @staticmethod
  def construct_without_init():
    cls = PopupMenu.__new__(PopupMenu)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PopupMenu'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PopupMenu.construct_without_init()
    cls._ptr = CPPPopupMenuWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PopupMenu.construct_without_init()
    cls._ptr = CPPPopupMenuWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def hide_on_item_selection(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_hide_on_item_selection()
    return _ret
  @hide_on_item_selection.setter
  def hide_on_item_selection(self,  value:'bool'):
    self.set_hide_on_item_selection(value)
  @property
  def hide_on_checkable_item_selection(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_hide_on_checkable_item_selection()
    return _ret
  @hide_on_checkable_item_selection.setter
  def hide_on_checkable_item_selection(self,  value:'bool'):
    self.set_hide_on_checkable_item_selection(value)
  @property
  def hide_on_state_item_selection(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_hide_on_state_item_selection()
    return _ret
  @hide_on_state_item_selection.setter
  def hide_on_state_item_selection(self,  value:'bool'):
    self.set_hide_on_state_item_selection(value)
  @property
  def submenu_popup_delay(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_submenu_popup_delay()
    return _ret
  @submenu_popup_delay.setter
  def submenu_popup_delay(self,  value:'float'):
    self.set_submenu_popup_delay(value)
  @property
  def allow_search(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_allow_search()
    return _ret
  @allow_search.setter
  def allow_search(self,  value:'bool'):
    self.set_allow_search(value)
  @property
  def system_menu_id(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_system_menu()
    return _ret
  @system_menu_id.setter
  def system_menu_id(self,  value:'int'):
    self.set_system_menu(value)
  @property
  def prefer_native_menu(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_prefer_native_menu()
    return _ret
  @prefer_native_menu.setter
  def prefer_native_menu(self,  value:'bool'):
    self.set_prefer_native_menu(value)
  @property
  def item_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_item_count()
    return _ret
  @item_count.setter
  def item_count(self,  value:'int'):
    self.set_item_count(value)
  @functools.native_method
  def activate_item_by_event(self, event:'py4godot_inputevent.InputEvent'   , for_global_only:'bool' =False  ) -> typing.Union[bool]:
    r'''
				Checks the provided `event` against the `PopupMenu`'s shortcuts and accelerators, and activates the first item with matching events. If `for_global_only` is `true`, only shortcuts and accelerators with `global` set to `true` will be called.
				Returns `true` if an item was successfully activated.
				**Note:** Certain `Control`s, such as `MenuButton`, will call this method automatically.
			'''

    assert(not event is None)
    assert isinstance(event, get_class('InputEvent')), 'event must be InputEvent'
    assert isinstance(for_global_only, bool), 'for_global_only must be bool'







    _ret = 0
    _ret = self._ptr.call_with_return(434,tuple([event._ptr, for_global_only]))
    return _ret


  @functools.native_method
  def set_prefer_native_menu(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__prefer_native_menu = enabled






    self._ptr.call_with_return(435,tuple([enabled]))

  @functools.native_method
  def is_prefer_native_menu(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(436,tuple([]))

    return _ret


  @functools.native_method
  def is_native_menu(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the system native menu is supported and currently used by this `PopupMenu`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(437,tuple([]))
    return _ret


  @functools.native_method
  def add_item(self, label:'str'   , id:'int' =-1  , accel:'int'  =0) -> None:
    r'''
				Adds a new item with text `label`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				**Note:** The provided `id` is used only in `signal id_pressed` and `signal id_focused` signals. It's not related to the `index` arguments in e.g. `set_item_checked`.
			'''



    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(accel, (int, float)), 'accel must be int or float'




    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)



    self._ptr.call_with_return(438,tuple([py_string_label._ptr, id, accel]))

  @functools.native_method
  def add_icon_item(self, texture:'py4godot_texture2d.Texture2D'   , label:'str'   , id:'int' =-1  , accel:'int'  =0) -> None:
    r'''
				Adds a new item with text `label` and icon `texture`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
			'''



    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'
    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(accel, (int, float)), 'accel must be int or float'





    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)



    self._ptr.call_with_return(439,tuple([texture._ptr, py_string_label._ptr, id, accel]))

  @functools.native_method
  def add_check_item(self, label:'str'   , id:'int' =-1  , accel:'int'  =0) -> None:
    r'''
				Adds a new checkable item with text `label`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			'''



    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(accel, (int, float)), 'accel must be int or float'




    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)



    self._ptr.call_with_return(440,tuple([py_string_label._ptr, id, accel]))

  @functools.native_method
  def add_icon_check_item(self, texture:'py4godot_texture2d.Texture2D'   , label:'str'   , id:'int' =-1  , accel:'int'  =0) -> None:
    r'''
				Adds a new checkable item with text `label` and icon `texture`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			'''



    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'
    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(accel, (int, float)), 'accel must be int or float'





    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)



    self._ptr.call_with_return(441,tuple([texture._ptr, py_string_label._ptr, id, accel]))

  @functools.native_method
  def add_radio_check_item(self, label:'str'   , id:'int' =-1  , accel:'int'  =0) -> None:
    r'''
				Adds a new radio check button with text `label`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			'''



    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(accel, (int, float)), 'accel must be int or float'




    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)



    self._ptr.call_with_return(442,tuple([py_string_label._ptr, id, accel]))

  @functools.native_method
  def add_icon_radio_check_item(self, texture:'py4godot_texture2d.Texture2D'   , label:'str'   , id:'int' =-1  , accel:'int'  =0) -> None:
    r'''
				Same as `add_icon_check_item`, but uses a radio check button.
			'''



    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'
    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(accel, (int, float)), 'accel must be int or float'





    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)



    self._ptr.call_with_return(443,tuple([texture._ptr, py_string_label._ptr, id, accel]))

  @functools.native_method
  def add_multistate_item(self, label:'str'   , max_states:'int'   , default_state:'int' =0  , id:'int' =-1  , accel:'int'  =0) -> None:
    r'''
				Adds a new multistate item with text `label`.
				Contrarily to normal binary items, multistate items can have more than two states, as defined by `max_states`. The default value is defined by `default_state`.
				An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided, then the default value of 0 (corresponding to `constant @GlobalScope.KEY_NONE`) will be assigned to the item (which means it won't have any accelerator). See `get_item_accelerator` for more info on accelerators.
				```gdscript
				func _ready():
					add_multistate_item("Item", 3, 0)

					index_pressed.connect(func(index: int):
							toggle_item_multistate(index)
							match get_item_multistate(index):
								0:
									print("First state")
								1:
									print("Second state")
								2:
									print("Third state")
						)
				```
				**Note:** Multistate items don't update their state automatically and must be done manually. See `toggle_item_multistate`, `set_item_multistate` and `get_item_multistate` for more info on how to control it.
			'''



    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'
    assert isinstance(max_states, (int, float)), 'max_states must be int or float'
    assert isinstance(default_state, (int, float)), 'default_state must be int or float'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(accel, (int, float)), 'accel must be int or float'




    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)





    self._ptr.call_with_return(444,tuple([py_string_label._ptr, max_states, default_state, id, accel]))

  @functools.native_method
  def add_shortcut(self, shortcut:'py4godot_shortcut.Shortcut'   , id:'int' =-1  , global_:'bool' =False  , allow_echo:'bool' =False  ) -> None:
    r'''
				Adds a `Shortcut`.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				If `allow_echo` is `true`, the shortcut can be activated with echo events.
			'''

    assert(not shortcut is None)
    assert isinstance(shortcut, get_class('Shortcut')), 'shortcut must be Shortcut'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(global_, bool), 'global_ must be bool'
    assert isinstance(allow_echo, bool), 'allow_echo must be bool'









    self._ptr.call_with_return(445,tuple([shortcut._ptr, id, global_, allow_echo]))

  @functools.native_method
  def add_icon_shortcut(self, texture:'py4godot_texture2d.Texture2D'   , shortcut:'py4godot_shortcut.Shortcut'   , id:'int' =-1  , global_:'bool' =False  , allow_echo:'bool' =False  ) -> None:
    r'''
				Adds a new item and assigns the specified `Shortcut` and icon `texture` to it. Sets the label of the checkbox to the `Shortcut`'s name.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				If `allow_echo` is `true`, the shortcut can be activated with echo events.
			'''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'
    assert(not shortcut is None)
    assert isinstance(shortcut, get_class('Shortcut')), 'shortcut must be Shortcut'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(global_, bool), 'global_ must be bool'
    assert isinstance(allow_echo, bool), 'allow_echo must be bool'










    self._ptr.call_with_return(446,tuple([texture._ptr, shortcut._ptr, id, global_, allow_echo]))

  @functools.native_method
  def add_check_shortcut(self, shortcut:'py4godot_shortcut.Shortcut'   , id:'int' =-1  , global_:'bool' =False  ) -> None:
    r'''
				Adds a new checkable item and assigns the specified `Shortcut` to it. Sets the label of the checkbox to the `Shortcut`'s name.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			'''

    assert(not shortcut is None)
    assert isinstance(shortcut, get_class('Shortcut')), 'shortcut must be Shortcut'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(global_, bool), 'global_ must be bool'








    self._ptr.call_with_return(447,tuple([shortcut._ptr, id, global_]))

  @functools.native_method
  def add_icon_check_shortcut(self, texture:'py4godot_texture2d.Texture2D'   , shortcut:'py4godot_shortcut.Shortcut'   , id:'int' =-1  , global_:'bool' =False  ) -> None:
    r'''
				Adds a new checkable item and assigns the specified `Shortcut` and icon `texture` to it. Sets the label of the checkbox to the `Shortcut`'s name.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			'''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'
    assert(not shortcut is None)
    assert isinstance(shortcut, get_class('Shortcut')), 'shortcut must be Shortcut'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(global_, bool), 'global_ must be bool'









    self._ptr.call_with_return(448,tuple([texture._ptr, shortcut._ptr, id, global_]))

  @functools.native_method
  def add_radio_check_shortcut(self, shortcut:'py4godot_shortcut.Shortcut'   , id:'int' =-1  , global_:'bool' =False  ) -> None:
    r'''
				Adds a new radio check button and assigns a `Shortcut` to it. Sets the label of the checkbox to the `Shortcut`'s name.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it.
			'''

    assert(not shortcut is None)
    assert isinstance(shortcut, get_class('Shortcut')), 'shortcut must be Shortcut'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(global_, bool), 'global_ must be bool'








    self._ptr.call_with_return(449,tuple([shortcut._ptr, id, global_]))

  @functools.native_method
  def add_icon_radio_check_shortcut(self, texture:'py4godot_texture2d.Texture2D'   , shortcut:'py4godot_shortcut.Shortcut'   , id:'int' =-1  , global_:'bool' =False  ) -> None:
    r'''
				Same as `add_icon_check_shortcut`, but uses a radio check button.
			'''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'
    assert(not shortcut is None)
    assert isinstance(shortcut, get_class('Shortcut')), 'shortcut must be Shortcut'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(global_, bool), 'global_ must be bool'









    self._ptr.call_with_return(450,tuple([texture._ptr, shortcut._ptr, id, global_]))

  @functools.native_method
  def add_submenu_item(self, label:'str'   , submenu:'str'   , id:'int' =-1  ) -> None:
    r'''
				Adds an item that will act as a submenu of the parent `PopupMenu` node when clicked. The `submenu` argument must be the name of an existing `PopupMenu` that has been added as a child to this node. This submenu will be shown when the item is clicked, hovered for long enough, or activated using the `ui_select` or `ui_right` input actions.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
			'''

    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'
    assert(not submenu is None)
    assert isinstance(submenu, (str, String)), 'submenu must be str or String'
    assert isinstance(id, (int, float)), 'id must be int or float'




    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)
    assert(isinstance(submenu, (str, String)))
    py_string_submenu = submenu if isinstance(submenu, StringName) else c_utils.py_string_to_string(submenu)


    self._ptr.call_with_return(451,tuple([py_string_label._ptr, py_string_submenu._ptr, id]))

  @functools.native_method
  def add_submenu_node_item(self, label:'str'   , submenu:'PopupMenu'   , id:'int' =-1  ) -> None:
    r'''
				Adds an item that will act as a submenu of the parent `PopupMenu` node when clicked. This submenu will be shown when the item is clicked, hovered for long enough, or activated using the `ui_select` or `ui_right` input actions.
				`submenu` must be either child of this `PopupMenu` or has no parent node (in which case it will be automatically added as a child). If the `submenu` popup has another parent, this method will fail.
				An `id` can optionally be provided. If no `id` is provided, one will be created from the index.
			'''

    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'
    assert(not submenu is None)
    assert isinstance(submenu, get_class('PopupMenu')), 'submenu must be PopupMenu'
    assert isinstance(id, (int, float)), 'id must be int or float'




    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)



    self._ptr.call_with_return(452,tuple([py_string_label._ptr, submenu._ptr, id]))

  @functools.native_method
  def set_item_text(self, index:'int'   , text:'str'   ) -> None:
    r'''
				Sets the text of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not text is None)
    assert isinstance(text, (str, String)), 'text must be str or String'





    assert(isinstance(text, (str, String)))
    py_string_text = text if isinstance(text, StringName) else c_utils.py_string_to_string(text)

    self._ptr.call_with_return(453,tuple([index, py_string_text._ptr]))

  @functools.native_method
  def set_item_text_direction(self, index:'int'   , direction:'int'  ) -> None:
    r'''
				Sets item's text base writing direction.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(direction, (int, float)), 'direction must be int or float'







    self._ptr.call_with_return(454,tuple([index, direction]))

  @functools.native_method
  def set_item_language(self, index:'int'   , language:'str'   ) -> None:
    r'''
				Sets language code of item's text used for line-breaking and text shaping algorithms, if left empty current locale is used instead.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not language is None)
    assert isinstance(language, (str, String)), 'language must be str or String'





    assert(isinstance(language, (str, String)))
    py_string_language = language if isinstance(language, StringName) else c_utils.py_string_to_string(language)

    self._ptr.call_with_return(455,tuple([index, py_string_language._ptr]))

  @functools.native_method
  def set_item_auto_translate_mode(self, index:'int'   , mode:'int'  ) -> None:
    r'''
				Sets the auto translate mode of the item at the given `index`.
				Items use `constant Node.AUTO_TRANSLATE_MODE_INHERIT` by default, which uses the same auto translate mode as the `PopupMenu` itself.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(mode, (int, float)), 'mode must be int or float'







    self._ptr.call_with_return(456,tuple([index, mode]))

  @functools.native_method
  def set_item_icon(self, index:'int'   , icon:'py4godot_texture2d.Texture2D'   ) -> None:
    r'''
				Replaces the `Texture2D` icon of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not icon is None)
    assert isinstance(icon, get_class('Texture2D')), 'icon must be Texture2D'







    self._ptr.call_with_return(457,tuple([index, icon._ptr]))

  @functools.native_method
  def set_item_icon_max_width(self, index:'int'   , width:'int'   ) -> None:
    r'''
				Sets the maximum allowed width of the icon for the item at the given `index`. This limit is applied on top of the default size of the icon and on top of `theme_item icon_max_width`. The height is adjusted according to the icon's ratio.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(width, (int, float)), 'width must be int or float'







    self._ptr.call_with_return(458,tuple([index, width]))

  @functools.native_method
  def set_item_icon_modulate(self, index:'int'   , modulate:'Color'   ) -> None:
    r'''
				Sets a modulating `Color` of the item's icon at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not modulate is None)
    assert isinstance(modulate, Color), 'modulate must be Color'







    self._ptr.call_with_return(459,tuple([index, modulate._ptr]))

  @functools.native_method
  def set_item_checked(self, index:'int'   , checked:'bool'   ) -> None:
    r'''
				Sets the checkstate status of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(checked, bool), 'checked must be bool'







    self._ptr.call_with_return(460,tuple([index, checked]))

  @functools.native_method
  def set_item_id(self, index:'int'   , id:'int'   ) -> None:
    r'''
				Sets the `id` of the item at the given `index`.
				The `id` is used in `signal id_pressed` and `signal id_focused` signals.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(id, (int, float)), 'id must be int or float'







    self._ptr.call_with_return(461,tuple([index, id]))

  @functools.native_method
  def set_item_accelerator(self, index:'int'   , accel:'int'  ) -> None:
    r'''
				Sets the accelerator of the item at the given `index`. An accelerator is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. `accel` is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`).
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(accel, (int, float)), 'accel must be int or float'







    self._ptr.call_with_return(462,tuple([index, accel]))

  @functools.native_method
  def set_item_metadata(self, index:'int'   , metadata:'object'   ) -> None:
    r'''
				Sets the metadata of an item, which may be of any type. You can later get it with `get_item_metadata`, which provides a simple way of assigning context data to items.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    







    self._ptr.call_with_return(463,tuple([index, metadata]))

  @functools.native_method
  def set_item_disabled(self, index:'int'   , disabled:'bool'   ) -> None:
    r'''
				Enables/disables the item at the given `index`. When it is disabled, it can't be selected and its action can't be invoked.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(disabled, bool), 'disabled must be bool'







    self._ptr.call_with_return(464,tuple([index, disabled]))

  @functools.native_method
  def set_item_submenu(self, index:'int'   , submenu:'str'   ) -> None:
    r'''
				Sets the submenu of the item at the given `index`. The submenu is the name of a child `PopupMenu` node that would be shown when the item is clicked.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not submenu is None)
    assert isinstance(submenu, (str, String)), 'submenu must be str or String'





    assert(isinstance(submenu, (str, String)))
    py_string_submenu = submenu if isinstance(submenu, StringName) else c_utils.py_string_to_string(submenu)

    self._ptr.call_with_return(465,tuple([index, py_string_submenu._ptr]))

  @functools.native_method
  def set_item_submenu_node(self, index:'int'   , submenu:'PopupMenu'   ) -> None:
    r'''
				Sets the submenu of the item at the given `index`. The submenu is a `PopupMenu` node that would be shown when the item is clicked. It must either be a child of this `PopupMenu` or has no parent (in which case it will be automatically added as a child). If the `submenu` popup has another parent, this method will fail.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not submenu is None)
    assert isinstance(submenu, get_class('PopupMenu')), 'submenu must be PopupMenu'







    self._ptr.call_with_return(466,tuple([index, submenu._ptr]))

  @functools.native_method
  def set_item_as_separator(self, index:'int'   , enable:'bool'   ) -> None:
    r'''
				Mark the item at the given `index` as a separator, which means that it would be displayed as a line. If `false`, sets the type of the item to plain text.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enable, bool), 'enable must be bool'







    self._ptr.call_with_return(467,tuple([index, enable]))

  @functools.native_method
  def set_item_as_checkable(self, index:'int'   , enable:'bool'   ) -> None:
    r'''
				Sets whether the item at the given `index` has a checkbox. If `false`, sets the type of the item to plain text.
				**Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enable, bool), 'enable must be bool'







    self._ptr.call_with_return(468,tuple([index, enable]))

  @functools.native_method
  def set_item_as_radio_checkable(self, index:'int'   , enable:'bool'   ) -> None:
    r'''
				Sets the type of the item at the given `index` to radio button. If `false`, sets the type of the item to plain text.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enable, bool), 'enable must be bool'







    self._ptr.call_with_return(469,tuple([index, enable]))

  @functools.native_method
  def set_item_tooltip(self, index:'int'   , tooltip:'str'   ) -> None:
    r'''
				Sets the `String` tooltip of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not tooltip is None)
    assert isinstance(tooltip, (str, String)), 'tooltip must be str or String'





    assert(isinstance(tooltip, (str, String)))
    py_string_tooltip = tooltip if isinstance(tooltip, StringName) else c_utils.py_string_to_string(tooltip)

    self._ptr.call_with_return(470,tuple([index, py_string_tooltip._ptr]))

  @functools.native_method
  def set_item_shortcut(self, index:'int'   , shortcut:'py4godot_shortcut.Shortcut'   , global_:'bool' =False  ) -> None:
    r'''
				Sets a `Shortcut` for the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not shortcut is None)
    assert isinstance(shortcut, get_class('Shortcut')), 'shortcut must be Shortcut'
    assert isinstance(global_, bool), 'global_ must be bool'








    self._ptr.call_with_return(471,tuple([index, shortcut._ptr, global_]))

  @functools.native_method
  def set_item_indent(self, index:'int'   , indent:'int'   ) -> None:
    r'''
				Sets the horizontal offset of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(indent, (int, float)), 'indent must be int or float'







    self._ptr.call_with_return(472,tuple([index, indent]))

  @functools.native_method
  def set_item_multistate(self, index:'int'   , state:'int'   ) -> None:
    r'''
				Sets the state of a multistate item. See `add_multistate_item` for details.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(state, (int, float)), 'state must be int or float'







    self._ptr.call_with_return(473,tuple([index, state]))

  @functools.native_method
  def set_item_multistate_max(self, index:'int'   , max_states:'int'   ) -> None:
    r'''
				Sets the max states of a multistate item. See `add_multistate_item` for details.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(max_states, (int, float)), 'max_states must be int or float'







    self._ptr.call_with_return(474,tuple([index, max_states]))

  @functools.native_method
  def set_item_shortcut_disabled(self, index:'int'   , disabled:'bool'   ) -> None:
    r'''
				Disables the `Shortcut` of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(disabled, bool), 'disabled must be bool'







    self._ptr.call_with_return(475,tuple([index, disabled]))

  @functools.native_method
  def toggle_item_checked(self, index:'int'   ) -> None:
    r'''
				Toggles the check state of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(476,tuple([index]))

  @functools.native_method
  def toggle_item_multistate(self, index:'int'   ) -> None:
    r'''
				Cycle to the next state of a multistate item. See `add_multistate_item` for details.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(477,tuple([index]))

  @functools.native_method
  def get_item_text(self, index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the text of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(478,tuple([index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_item_text_direction(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns item's text base writing direction.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(479,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_language(self, index:'int'   ) -> typing.Union[str]:
    r'''
				Returns item's text language code.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(480,tuple([index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_item_auto_translate_mode(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the auto translate mode of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(481,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_icon(self, index:'int'   ) -> typing.Any:
    r'''
				Returns the icon of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(482,tuple([index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_item_icon_max_width(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the maximum allowed width of the icon for the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(483,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_icon_modulate(self, index:'int'   ) -> typing.Union['Color']:
    r'''
				Returns a `Color` modulating the item's icon at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(484,tuple([index]))
    return _ret


  @functools.native_method
  def is_item_checked(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the item at the given `index` is checked.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(485,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_id(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the ID of the item at the given `index`. `id` can be manually assigned, while index can not.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(486,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_index(self, id:'int'   ) -> typing.Union[int]:
    r'''
				Returns the index of the item containing the specified `id`. Index is automatically assigned to each item by the engine and can not be set manually.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(487,tuple([id]))
    return _ret


  @functools.native_method
  def get_item_accelerator(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the accelerator of the item at the given `index`. An accelerator is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The return value is an integer which is generally a combination of `enum KeyModifierMask`s and `enum Key`s using bitwise OR such as `KEY_MASK_CTRL | KEY_A` (`kbd`Ctrl + A`/kbd`). If no accelerator is defined for the specified `index`, `get_item_accelerator` returns `0` (corresponding to `constant @GlobalScope.KEY_NONE`).
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(488,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_metadata(self, index:'int'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the metadata of the specified item, which might be of any type. You can set it with `set_item_metadata`, which provides a simple way of assigning context data to items.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = None
    _ret = self._ptr.call_with_return(489,tuple([index]))
    return _ret


  @functools.native_method
  def is_item_disabled(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the item at the given `index` is disabled. When it is disabled it can't be selected, or its action invoked.
				See `set_item_disabled` for more info on how to disable an item.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(490,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_submenu(self, index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the submenu name of the item at the given `index`. See `add_submenu_item` for more info on how to add a submenu.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(491,tuple([index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_item_submenu_node(self, index:'int'   ) -> typing.Union['typing.Self']:
    r'''
				Returns the submenu of the item at the given `index`, or `null` if no submenu was added. See `add_submenu_node_item` for more info on how to add a submenu.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = PopupMenu.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(492,tuple([index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def is_item_separator(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the item is a separator. If it is, it will be displayed as a line. See `add_separator` for more info on how to add a separator.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(493,tuple([index]))
    return _ret


  @functools.native_method
  def is_item_checkable(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the item at the given `index` is checkable in some way, i.e. if it has a checkbox or radio button.
				**Note:** Checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(494,tuple([index]))
    return _ret


  @functools.native_method
  def is_item_radio_checkable(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the item at the given `index` has radio button-style checkability.
				**Note:** This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(495,tuple([index]))
    return _ret


  @functools.native_method
  def is_item_shortcut_disabled(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the specified item's shortcut is disabled.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(496,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_tooltip(self, index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the tooltip associated with the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(497,tuple([index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_item_shortcut(self, index:'int'   ) -> typing.Union['py4godot_shortcut.Shortcut']:
    r'''
				Returns the `Shortcut` associated with the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Shortcut
    _ret._ptr = self._ptr.call_with_return(498,tuple([index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_item_indent(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the horizontal offset of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(499,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_multistate_max(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the max states of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(500,tuple([index]))
    return _ret


  @functools.native_method
  def get_item_multistate(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the state of the item at the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(501,tuple([index]))
    return _ret


  @functools.native_method
  def set_focused_item(self, index:'int'   ) -> None:
    r'''
				Sets the currently focused item as the given `index`.
				Passing `-1` as the index makes so that no item is focused.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(502,tuple([index]))

  @functools.native_method
  def get_focused_item(self) -> typing.Union[int]:
    r'''
				Returns the index of the currently focused item. Returns `-1` if no item is focused.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(503,tuple([]))
    return _ret


  @functools.native_method
  def set_item_count(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__item_count = count






    self._ptr.call_with_return(504,tuple([count]))

  @functools.native_method
  def get_item_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(505,tuple([]))

    return _ret


  @functools.native_method
  def scroll_to_item(self, index:'int'   ) -> None:
    r'''
				Moves the scroll view to make the item at the given `index` visible.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(506,tuple([index]))

  @functools.native_method
  def remove_item(self, index:'int'   ) -> None:
    r'''
				Removes the item at the given `index` from the menu.
				**Note:** The indices of items after the removed item will be shifted by one.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(507,tuple([index]))

  @functools.native_method
  def add_separator(self, label:'str' =""  , id:'int' =-1  ) -> None:
    r'''
				Adds a separator between items. Separators also occupy an index, which you can set by using the `id` parameter.
				A `label` can optionally be provided, which will appear at the center of the separator.
			'''
    if label is None:
      label = String.new0()
    if label is None:
      label = String.new0()

    assert isinstance(id, (int, float)), 'id must be int or float'




    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)


    self._ptr.call_with_return(508,tuple([py_string_label._ptr, id]))

  @functools.native_method
  def clear(self, free_submenus:'bool' =False  ) -> None:
    r'''
				Removes all items from the `PopupMenu`. If `free_submenus` is `true`, the submenu nodes are automatically freed.
			'''

    assert isinstance(free_submenus, bool), 'free_submenus must be bool'






    self._ptr.call_with_return(509,tuple([free_submenus]))

  @functools.native_method
  def set_hide_on_item_selection(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__hide_on_item_selection = enable






    self._ptr.call_with_return(510,tuple([enable]))

  @functools.native_method
  def is_hide_on_item_selection(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(511,tuple([]))

    return _ret


  @functools.native_method
  def set_hide_on_checkable_item_selection(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__hide_on_checkable_item_selection = enable






    self._ptr.call_with_return(512,tuple([enable]))

  @functools.native_method
  def is_hide_on_checkable_item_selection(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(513,tuple([]))

    return _ret


  @functools.native_method
  def set_hide_on_state_item_selection(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__hide_on_state_item_selection = enable






    self._ptr.call_with_return(514,tuple([enable]))

  @functools.native_method
  def is_hide_on_state_item_selection(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(515,tuple([]))

    return _ret


  @functools.native_method
  def set_submenu_popup_delay(self, seconds:'float'   ) -> None:
    r''''''

    assert isinstance(seconds, (int, float)), 'seconds must be int or float'

    self.py__submenu_popup_delay = seconds






    self._ptr.call_with_return(516,tuple([seconds]))

  @functools.native_method
  def get_submenu_popup_delay(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(517,tuple([]))

    return _ret


  @functools.native_method
  def set_allow_search(self, allow:'bool'   ) -> None:
    r''''''

    assert isinstance(allow, bool), 'allow must be bool'

    self.py__allow_search = allow






    self._ptr.call_with_return(518,tuple([allow]))

  @functools.native_method
  def get_allow_search(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(519,tuple([]))

    return _ret


  @functools.native_method
  def is_system_menu(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the menu is bound to the special system menu.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(520,tuple([]))
    return _ret


  @functools.native_method
  def set_system_menu(self, system_menu_id:'int'  ) -> None:
    r''''''

    assert isinstance(system_menu_id, (int, float)), 'system_menu_id must be int or float'

    self.py__system_menu_id = system_menu_id






    self._ptr.call_with_return(521,tuple([system_menu_id]))

  @functools.native_method
  def get_system_menu(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(522,tuple([]))

    return _ret



register_cast_function('PopupMenu', PopupMenu.cast)
register_class('PopupMenu', PopupMenu)
