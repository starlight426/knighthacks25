# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.SystemFont as py4godot_systemfont 
  import py4godot.classes.FontFile as py4godot_fontfile 
  import py4godot.classes.Font as py4godot_font 
  import py4godot.classes.FontVariation as py4godot_fontvariation 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPLabelSettingsWrapper


class LabelSettings(py4godot_resource.Resource):
  r'''
		`LabelSettings` is a resource that provides common settings to customize the text in a `Label`. It will take priority over the properties defined in `Control.theme`. The resource can be shared between multiple labels and changed on the fly, so it's convenient and flexible way to setup text style.
	'''

  @staticmethod
  def constructor():
    class_ = LabelSettings.construct_without_init()
    class_._ptr = constructor(448,0, ())
    return class_
  @staticmethod
  def new():
    class_ = LabelSettings.construct_without_init()
    class_._ptr = constructor(448,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPLabelSettingsWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(448,0, ())


  def generate_wrapper(self):
    return CPPLabelSettingsWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = LabelSettings.__new__(LabelSettings)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'LabelSettings'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = LabelSettings.construct_without_init()
    cls._ptr = CPPLabelSettingsWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = LabelSettings.construct_without_init()
    cls._ptr = CPPLabelSettingsWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def line_spacing(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_line_spacing()
    return _ret
  @line_spacing.setter
  def line_spacing(self,  value:'float'):
    self.set_line_spacing(value)
  @property
  def paragraph_spacing(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_paragraph_spacing()
    return _ret
  @paragraph_spacing.setter
  def paragraph_spacing(self,  value:'float'):
    self.set_paragraph_spacing(value)
  @property
  def font(self) -> typing.Union['py4godot_font.Font','py4godot_systemfont.SystemFont','py4godot_fontfile.FontFile','py4godot_fontvariation.FontVariation']:
    r''''''
    _ret = self. get_font()
    return _ret
  @font.setter
  def font(self,  value:'py4godot_object.Object'):
    self.set_font(value)
  @property
  def font_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_font_size()
    return _ret
  @font_size.setter
  def font_size(self,  value:'int'):
    self.set_font_size(value)
  @property
  def font_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_font_color()
    return _ret
  @font_color.setter
  def font_color(self,  value:'Color'):
    self.set_font_color(value)
  @property
  def outline_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_outline_size()
    return _ret
  @outline_size.setter
  def outline_size(self,  value:'int'):
    self.set_outline_size(value)
  @property
  def outline_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_outline_color()
    return _ret
  @outline_color.setter
  def outline_color(self,  value:'Color'):
    self.set_outline_color(value)
  @property
  def shadow_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_shadow_size()
    return _ret
  @shadow_size.setter
  def shadow_size(self,  value:'int'):
    self.set_shadow_size(value)
  @property
  def shadow_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_shadow_color()
    return _ret
  @shadow_color.setter
  def shadow_color(self,  value:'Color'):
    self.set_shadow_color(value)
  @property
  def shadow_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_shadow_offset()
    return _ret
  @shadow_offset.setter
  def shadow_offset(self,  value:'Vector2'):
    self.set_shadow_offset(value)
  @property
  def stacked_outline_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stacked_outline_count()
    return _ret
  @stacked_outline_count.setter
  def stacked_outline_count(self,  value:'int'):
    self.set_stacked_outline_count(value)
  @property
  def stacked_shadow_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stacked_shadow_count()
    return _ret
  @stacked_shadow_count.setter
  def stacked_shadow_count(self,  value:'int'):
    self.set_stacked_shadow_count(value)
  @functools.native_method
  def set_line_spacing(self, spacing:'float'   ) -> None:
    r''''''

    assert isinstance(spacing, (int, float)), 'spacing must be int or float'

    self.py__line_spacing = spacing






    self._ptr.call_with_return(77,tuple([spacing]))

  @functools.native_method
  def get_line_spacing(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_paragraph_spacing(self, spacing:'float'   ) -> None:
    r''''''

    assert isinstance(spacing, (int, float)), 'spacing must be int or float'

    self.py__paragraph_spacing = spacing






    self._ptr.call_with_return(79,tuple([spacing]))

  @functools.native_method
  def get_paragraph_spacing(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_font(self, font:'py4godot_font.Font'   ) -> None:
    r''''''

    assert(not font is None)
    assert isinstance(font, get_class('Font')), 'font must be Font'

    self.py__font = font






    self._ptr.call_with_return(81,tuple([font._ptr]))

  @functools.native_method
  def get_font(self) -> typing.Union['py4godot_font.Font','py4godot_systemfont.SystemFont','py4godot_fontfile.FontFile','py4godot_fontvariation.FontVariation']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Font
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_font_size(self, size:'int'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__font_size = size






    self._ptr.call_with_return(83,tuple([size]))

  @functools.native_method
  def get_font_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_font_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__font_color = color






    self._ptr.call_with_return(85,tuple([color._ptr]))

  @functools.native_method
  def get_font_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_outline_size(self, size:'int'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__outline_size = size






    self._ptr.call_with_return(87,tuple([size]))

  @functools.native_method
  def get_outline_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_outline_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__outline_color = color






    self._ptr.call_with_return(89,tuple([color._ptr]))

  @functools.native_method
  def get_outline_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_shadow_size(self, size:'int'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__shadow_size = size






    self._ptr.call_with_return(91,tuple([size]))

  @functools.native_method
  def get_shadow_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))

    return _ret


  @functools.native_method
  def set_shadow_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__shadow_color = color






    self._ptr.call_with_return(93,tuple([color._ptr]))

  @functools.native_method
  def get_shadow_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_shadow_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__shadow_offset = offset






    self._ptr.call_with_return(95,tuple([offset._ptr]))

  @functools.native_method
  def get_shadow_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def get_stacked_outline_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_stacked_outline_count(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__stacked_outline_count = count






    self._ptr.call_with_return(98,tuple([count]))

  @functools.native_method
  def add_stacked_outline(self, index:'int' =-1  ) -> None:
    r'''
				Adds a new stacked outline to the label at the given `index`. If `index` is `-1`, the new stacked outline will be added at the end of the list.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(99,tuple([index]))

  @functools.native_method
  def move_stacked_outline(self, from_index:'int'   , to_position:'int'   ) -> None:
    r'''
				Moves the stacked outline at index `from_index` to the given position `to_position` in the array.
			'''

    assert isinstance(from_index, (int, float)), 'from_index must be int or float'
    assert isinstance(to_position, (int, float)), 'to_position must be int or float'







    self._ptr.call_with_return(100,tuple([from_index, to_position]))

  @functools.native_method
  def remove_stacked_outline(self, index:'int'   ) -> None:
    r'''
				Removes the stacked outline at index `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(101,tuple([index]))

  @functools.native_method
  def set_stacked_outline_size(self, index:'int'   , size:'int'   ) -> None:
    r'''
				Sets the size of the stacked outline identified by the given `index` to `size`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(size, (int, float)), 'size must be int or float'







    self._ptr.call_with_return(102,tuple([index, size]))

  @functools.native_method
  def get_stacked_outline_size(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the size of the stacked outline at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(103,tuple([index]))
    return _ret


  @functools.native_method
  def set_stacked_outline_color(self, index:'int'   , color:'Color'   ) -> None:
    r'''
				Sets the color of the stacked outline identified by the given `index` to `color`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'







    self._ptr.call_with_return(104,tuple([index, color._ptr]))

  @functools.native_method
  def get_stacked_outline_color(self, index:'int'   ) -> typing.Union['Color']:
    r'''
				Returns the color of the stacked outline at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(105,tuple([index]))
    return _ret


  @functools.native_method
  def get_stacked_shadow_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(106,tuple([]))

    return _ret


  @functools.native_method
  def set_stacked_shadow_count(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__stacked_shadow_count = count






    self._ptr.call_with_return(107,tuple([count]))

  @functools.native_method
  def add_stacked_shadow(self, index:'int' =-1  ) -> None:
    r'''
				Adds a new stacked shadow to the label at the given `index`. If `index` is `-1`, the new stacked shadow will be added at the end of the list.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(108,tuple([index]))

  @functools.native_method
  def move_stacked_shadow(self, from_index:'int'   , to_position:'int'   ) -> None:
    r'''
				Moves the stacked shadow at index `from_index` to the given position `to_position` in the array.
			'''

    assert isinstance(from_index, (int, float)), 'from_index must be int or float'
    assert isinstance(to_position, (int, float)), 'to_position must be int or float'







    self._ptr.call_with_return(109,tuple([from_index, to_position]))

  @functools.native_method
  def remove_stacked_shadow(self, index:'int'   ) -> None:
    r'''
				Removes the stacked shadow at index `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(110,tuple([index]))

  @functools.native_method
  def set_stacked_shadow_offset(self, index:'int'   , offset:'Vector2'   ) -> None:
    r'''
				Sets the offset of the stacked shadow identified by the given `index` to `offset`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'







    self._ptr.call_with_return(111,tuple([index, offset._ptr]))

  @functools.native_method
  def get_stacked_shadow_offset(self, index:'int'   ) -> typing.Union['Vector2']:
    r'''
				Returns the offset of the stacked shadow at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(112,tuple([index]))
    return _ret


  @functools.native_method
  def set_stacked_shadow_color(self, index:'int'   , color:'Color'   ) -> None:
    r'''
				Sets the color of the stacked shadow identified by the given `index` to `color`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'







    self._ptr.call_with_return(113,tuple([index, color._ptr]))

  @functools.native_method
  def get_stacked_shadow_color(self, index:'int'   ) -> typing.Union['Color']:
    r'''
				Returns the color of the stacked shadow at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(114,tuple([index]))
    return _ret


  @functools.native_method
  def set_stacked_shadow_outline_size(self, index:'int'   , size:'int'   ) -> None:
    r'''
				Sets the outline size of the stacked shadow identified by the given `index` to `size`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(size, (int, float)), 'size must be int or float'







    self._ptr.call_with_return(115,tuple([index, size]))

  @functools.native_method
  def get_stacked_shadow_outline_size(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the outline size of the stacked shadow at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(116,tuple([index]))
    return _ret



register_cast_function('LabelSettings', LabelSettings.cast)
register_class('LabelSettings', LabelSettings)
