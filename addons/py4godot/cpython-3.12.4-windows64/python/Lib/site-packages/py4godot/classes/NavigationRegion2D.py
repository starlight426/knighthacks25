# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.NavigationPolygon as py4godot_navigationpolygon 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPNavigationRegion2DWrapper


class NavigationRegion2D(py4godot_node2d.Node2D):
  r'''
		A traversable 2D region based on a `NavigationPolygon` that `NavigationAgent2D`s can use for pathfinding.
		Two regions can be connected to each other if they share a similar edge. You can set the minimum distance between two vertices required to connect two edges by using `NavigationServer2D.map_set_edge_connection_margin`.
		**Note:** Overlapping two regions' navigation polygons is not enough for connecting two regions. They must share a similar edge.
		The pathfinding cost of entering a region from another region can be controlled with the `enter_cost` value.
		**Note:** This value is not added to the path cost when the start position is already inside this region.
		The pathfinding cost of traveling distances inside this region can be controlled with the `travel_cost` multiplier.
		**Note:** This node caches changes to its properties, so if you make changes to the underlying region `RID` in `NavigationServer2D`, they will not be reflected in this node's properties.
	'''

  @staticmethod
  def constructor():
    class_ = NavigationRegion2D.construct_without_init()
    class_._ptr = constructor(509,0, ())
    return class_
  @staticmethod
  def new():
    class_ = NavigationRegion2D.construct_without_init()
    class_._ptr = constructor(509,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPNavigationRegion2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(509,0, ())


  def generate_wrapper(self):
    return CPPNavigationRegion2DWrapper()
  def init_signals(self):
    super().init_signals()
    navigation_polygon_changed_name = utils.py_string_to_string_name("navigation_polygon_changed")
    self.navigation_polygon_changed = signals.BuiltinSignal(self, navigation_polygon_changed_name)
    bake_finished_name = utils.py_string_to_string_name("bake_finished")
    self.bake_finished = signals.BuiltinSignal(self, bake_finished_name)

  @staticmethod
  def construct_without_init():
    cls = NavigationRegion2D.__new__(NavigationRegion2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'NavigationRegion2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = NavigationRegion2D.construct_without_init()
    cls._ptr = CPPNavigationRegion2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = NavigationRegion2D.construct_without_init()
    cls._ptr = CPPNavigationRegion2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def navigation_polygon(self) -> typing.Union['py4godot_navigationpolygon.NavigationPolygon']:
    r''''''
    _ret = self. get_navigation_polygon()
    return _ret
  @navigation_polygon.setter
  def navigation_polygon(self,  value:'py4godot_object.Object'):
    self.set_navigation_polygon(value)
  @property
  def enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_enabled()
    return _ret
  @enabled.setter
  def enabled(self,  value:'bool'):
    self.set_enabled(value)
  @property
  def use_edge_connections(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_use_edge_connections()
    return _ret
  @use_edge_connections.setter
  def use_edge_connections(self,  value:'bool'):
    self.set_use_edge_connections(value)
  @property
  def navigation_layers(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_navigation_layers()
    return _ret
  @navigation_layers.setter
  def navigation_layers(self,  value:'int'):
    self.set_navigation_layers(value)
  @property
  def enter_cost(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_enter_cost()
    return _ret
  @enter_cost.setter
  def enter_cost(self,  value:'float'):
    self.set_enter_cost(value)
  @property
  def travel_cost(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_travel_cost()
    return _ret
  @travel_cost.setter
  def travel_cost(self,  value:'float'):
    self.set_travel_cost(value)
  @functools.native_method
  def get_rid(self) -> typing.Union['RID']:
    r'''
				Returns the `RID` of this region on the `NavigationServer2D`. Combined with `NavigationServer2D.map_get_closest_point_owner` can be used to identify the `NavigationRegion2D` closest to a point on the merged navigation map.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(303,tuple([]))
    return _ret


  @functools.native_method
  def set_navigation_polygon(self, navigation_polygon:'py4godot_navigationpolygon.NavigationPolygon'   ) -> None:
    r''''''

    assert(not navigation_polygon is None)
    assert isinstance(navigation_polygon, get_class('NavigationPolygon')), 'navigation_polygon must be NavigationPolygon'

    self.py__navigation_polygon = navigation_polygon






    self._ptr.call_with_return(304,tuple([navigation_polygon._ptr]))

  @functools.native_method
  def get_navigation_polygon(self) -> typing.Union['py4godot_navigationpolygon.NavigationPolygon']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: NavigationPolygon
    _ret._ptr = self._ptr.call_with_return(305,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__enabled = enabled






    self._ptr.call_with_return(306,tuple([enabled]))

  @functools.native_method
  def is_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(307,tuple([]))

    return _ret


  @functools.native_method
  def set_navigation_map(self, navigation_map:'RID'   ) -> None:
    r'''
				Sets the `RID` of the navigation map this region should use. By default the region will automatically join the `World2D` default navigation map so this function is only required to override the default map.
			'''

    assert(not navigation_map is None)
    assert isinstance(navigation_map, RID), 'navigation_map must be RID'






    self._ptr.call_with_return(308,tuple([navigation_map._ptr]))

  @functools.native_method
  def get_navigation_map(self) -> typing.Union['RID']:
    r'''
				Returns the current navigation map `RID` used by this region.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(309,tuple([]))
    return _ret


  @functools.native_method
  def set_use_edge_connections(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__use_edge_connections = enabled






    self._ptr.call_with_return(310,tuple([enabled]))

  @functools.native_method
  def get_use_edge_connections(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(311,tuple([]))

    return _ret


  @functools.native_method
  def set_navigation_layers(self, navigation_layers:'int'   ) -> None:
    r''''''

    assert isinstance(navigation_layers, (int, float)), 'navigation_layers must be int or float'

    self.py__navigation_layers = navigation_layers






    self._ptr.call_with_return(312,tuple([navigation_layers]))

  @functools.native_method
  def get_navigation_layers(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(313,tuple([]))

    return _ret


  @functools.native_method
  def set_navigation_layer_value(self, layer_number:'int'   , value:'bool'   ) -> None:
    r'''
				Based on `value`, enables or disables the specified layer in the `navigation_layers` bitmask, given a `layer_number` between 1 and 32.
			'''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'
    assert isinstance(value, bool), 'value must be bool'







    self._ptr.call_with_return(314,tuple([layer_number, value]))

  @functools.native_method
  def get_navigation_layer_value(self, layer_number:'int'   ) -> typing.Union[bool]:
    r'''
				Returns whether or not the specified layer of the `navigation_layers` bitmask is enabled, given a `layer_number` between 1 and 32.
			'''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(315,tuple([layer_number]))
    return _ret


  @functools.native_method
  def get_region_rid(self) -> typing.Union['RID']:
    r'''
				Returns the `RID` of this region on the `NavigationServer2D`.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(316,tuple([]))
    return _ret


  @functools.native_method
  def set_enter_cost(self, enter_cost:'float'   ) -> None:
    r''''''

    assert isinstance(enter_cost, (int, float)), 'enter_cost must be int or float'

    self.py__enter_cost = enter_cost






    self._ptr.call_with_return(317,tuple([enter_cost]))

  @functools.native_method
  def get_enter_cost(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(318,tuple([]))

    return _ret


  @functools.native_method
  def set_travel_cost(self, travel_cost:'float'   ) -> None:
    r''''''

    assert isinstance(travel_cost, (int, float)), 'travel_cost must be int or float'

    self.py__travel_cost = travel_cost






    self._ptr.call_with_return(319,tuple([travel_cost]))

  @functools.native_method
  def get_travel_cost(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(320,tuple([]))

    return _ret


  @functools.native_method
  def bake_navigation_polygon(self, on_thread:'bool' =True  ) -> None:
    r'''
				Bakes the `NavigationPolygon`. If `on_thread` is set to `true` (default), the baking is done on a separate thread.
			'''

    assert isinstance(on_thread, bool), 'on_thread must be bool'






    self._ptr.call_with_return(321,tuple([on_thread]))

  @functools.native_method
  def is_baking(self) -> typing.Union[bool]:
    r'''
				Returns `true` when the `NavigationPolygon` is being baked on a background thread.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(322,tuple([]))
    return _ret


  @functools.native_method
  def get_bounds(self) -> typing.Union['Rect2']:
    r'''
				Returns the axis-aligned rectangle for the region's transformed navigation mesh.
			'''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(323,tuple([]))
    return _ret



register_cast_function('NavigationRegion2D', NavigationRegion2D.cast)
register_class('NavigationRegion2D', NavigationRegion2D)
