# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.MissingNode as py4godot_missingnode 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.DampedSpringJoint2D as py4godot_dampedspringjoint2d 
  import py4godot.classes.XRAnchor3D as py4godot_xranchor3d 
  import py4godot.classes.Light2D as py4godot_light2d 
  import py4godot.classes.Area3D as py4godot_area3d 
  import py4godot.classes.CollisionShape3D as py4godot_collisionshape3d 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.CSGPolygon3D as py4godot_csgpolygon3d 
  import py4godot.classes.PathFollow3D as py4godot_pathfollow3d 
  import py4godot.classes.CanvasGroup as py4godot_canvasgroup 
  import py4godot.classes.SpringBoneCollision3D as py4godot_springbonecollision3d 
  import py4godot.classes.AnimationTree as py4godot_animationtree 
  import py4godot.classes.ImporterMeshInstance3D as py4godot_importermeshinstance3d 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.EditorResourcePreview as py4godot_editorresourcepreview 
  import py4godot.classes.SpringBoneCollisionPlane3D as py4godot_springbonecollisionplane3d 
  import py4godot.classes.RemoteTransform2D as py4godot_remotetransform2d 
  import py4godot.classes.MultiMeshInstance2D as py4godot_multimeshinstance2d 
  import py4godot.classes.FBXDocument as py4godot_fbxdocument 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CollisionPolygon2D as py4godot_collisionpolygon2d 
  import py4godot.classes.SoftBody3D as py4godot_softbody3d 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.CanvasItem as py4godot_canvasitem 
  import py4godot.classes.SpringBoneCollisionCapsule3D as py4godot_springbonecollisioncapsule3d 
  import py4godot.classes.GPUParticlesCollisionHeightField3D as py4godot_gpuparticlescollisionheightfield3d 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.Marker2D as py4godot_marker2d 
  import py4godot.classes.Node2D as py4godot_node2d 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.SpotLight3D as py4godot_spotlight3d 
  import py4godot.classes.GLTFDocumentExtension as py4godot_gltfdocumentextension 
  import py4godot.classes.CSGTorus3D as py4godot_csgtorus3d 
  import py4godot.classes.MeshInstance3D as py4godot_meshinstance3d 
  import py4godot.classes.RayCast3D as py4godot_raycast3d 
  import py4godot.classes.GeometryInstance3D as py4godot_geometryinstance3d 
  import py4godot.classes.EditorCommandPalette as py4godot_editorcommandpalette 
  import py4godot.classes.CollisionPolygon3D as py4godot_collisionpolygon3d 
  import py4godot.classes.Line2D as py4godot_line2d 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.ResourcePreloader as py4godot_resourcepreloader 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.GPUParticlesCollisionSphere3D as py4godot_gpuparticlescollisionsphere3d 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.HingeJoint3D as py4godot_hingejoint3d 
  import py4godot.classes.OpenXRCompositionLayerEquirect as py4godot_openxrcompositionlayerequirect 
  import py4godot.classes.SpringBoneCollisionSphere3D as py4godot_springbonecollisionsphere3d 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.OpenXRCompositionLayerQuad as py4godot_openxrcompositionlayerquad 
  import py4godot.classes.EditorFileDialog as py4godot_editorfiledialog 
  import py4godot.classes.Popup as py4godot_popup 
  import py4godot.classes.DirectionalLight3D as py4godot_directionallight3d 
  import py4godot.classes.Parallax2D as py4godot_parallax2d 
  import py4godot.classes.PhysicsBody2D as py4godot_physicsbody2d 
  import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
  import py4godot.classes.ShaderGlobalsOverride as py4godot_shaderglobalsoverride 
  import py4godot.classes.FileDialog as py4godot_filedialog 
  import py4godot.classes.MultiplayerSpawner as py4godot_multiplayerspawner 
  import py4godot.classes.CPUParticles3D as py4godot_cpuparticles3d 
  import py4godot.classes.LightmapProbe as py4godot_lightmapprobe 
  import py4godot.classes.CPUParticles2D as py4godot_cpuparticles2d 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.Camera3D as py4godot_camera3d 
  import py4godot.classes.SpriteBase3D as py4godot_spritebase3d 
  import py4godot.classes.XRNode3D as py4godot_xrnode3d 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.MultiplayerSynchronizer as py4godot_multiplayersynchronizer 
  import py4godot.classes.PhysicalBoneSimulator3D as py4godot_physicalbonesimulator3d 
  import py4godot.classes.AimModifier3D as py4godot_aimmodifier3d 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.ScriptCreateDialog as py4godot_scriptcreatedialog 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.XRController3D as py4godot_xrcontroller3d 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.OpenXRVisibilityMask as py4godot_openxrvisibilitymask 
  import py4godot.classes.AudioListener3D as py4godot_audiolistener3d 
  import py4godot.classes.VehicleBody3D as py4godot_vehiclebody3d 
  import py4godot.classes.VisibleOnScreenEnabler2D as py4godot_visibleonscreenenabler2d 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ShapeCast3D as py4godot_shapecast3d 
  import py4godot.classes.XRCamera3D as py4godot_xrcamera3d 
  import py4godot.classes.CSGShape3D as py4godot_csgshape3d 
  import py4godot.classes.LightmapGI as py4godot_lightmapgi 
  import py4godot.classes.VoxelGI as py4godot_voxelgi 
  import py4godot.classes.XRFaceModifier3D as py4godot_xrfacemodifier3d 
  import py4godot.classes.ConfirmationDialog as py4godot_confirmationdialog 
  import py4godot.classes.PhysicalBone3D as py4godot_physicalbone3d 
  import py4godot.classes.ConeTwistJoint3D as py4godot_conetwistjoint3d 
  import py4godot.classes.CollisionObject2D as py4godot_collisionobject2d 
  import py4godot.classes.Timer as py4godot_timer 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.Polygon2D as py4godot_polygon2d 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.VisibleOnScreenNotifier3D as py4godot_visibleonscreennotifier3d 
  import py4godot.classes.RigidBody2D as py4godot_rigidbody2d 
  import py4godot.classes.Marker3D as py4godot_marker3d 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.AnimatedSprite3D as py4godot_animatedsprite3d 
  import py4godot.classes.LightOccluder2D as py4godot_lightoccluder2d 
  import py4godot.classes.TouchScreenButton as py4godot_touchscreenbutton 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.TileMap as py4godot_tilemap 
  import py4godot.classes.Joint3D as py4godot_joint3d 
  import py4godot.classes.Viewport as py4godot_viewport 
  import py4godot.classes.XRBodyModifier3D as py4godot_xrbodymodifier3d 
  import py4godot.classes.ParallaxLayer as py4godot_parallaxlayer 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.NavigationRegion2D as py4godot_navigationregion2d 
  import py4godot.classes.AnimatableBody2D as py4godot_animatablebody2d 
  import py4godot.classes.CSGCylinder3D as py4godot_csgcylinder3d 
  import py4godot.classes.LookAtModifier3D as py4godot_lookatmodifier3d 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.NavigationRegion3D as py4godot_navigationregion3d 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.NavigationObstacle3D as py4godot_navigationobstacle3d 
  import py4godot.classes.GridMapEditorPlugin as py4godot_gridmapeditorplugin 
  import py4godot.classes.ConvertTransformModifier3D as py4godot_converttransformmodifier3d 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.Area2D as py4godot_area2d 
  import py4godot.classes.Decal as py4godot_decal 
  import py4godot.classes.Path3D as py4godot_path3d 
  import py4godot.classes.AudioStreamPlayer as py4godot_audiostreamplayer 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.XROrigin3D as py4godot_xrorigin3d 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.RemoteTransform3D as py4godot_remotetransform3d 
  import py4godot.classes.GPUParticles2D as py4godot_gpuparticles2d 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
  import py4godot.classes.DirectionalLight2D as py4godot_directionallight2d 
  import py4godot.classes.EditorPlugin as py4godot_editorplugin 
  import py4godot.classes.VisibleOnScreenEnabler3D as py4godot_visibleonscreenenabler3d 
  import py4godot.classes.BackBufferCopy as py4godot_backbuffercopy 
  import py4godot.classes.NavigationAgent3D as py4godot_navigationagent3d 
  import py4godot.classes.PhysicsBody3D as py4godot_physicsbody3d 
  import py4godot.classes.MultiMeshInstance3D as py4godot_multimeshinstance3d 
  import py4godot.classes.CanvasLayer as py4godot_canvaslayer 
  import py4godot.classes.PhysicalBone2D as py4godot_physicalbone2d 
  import py4godot.classes.SkeletonIK3D as py4godot_skeletonik3d 
  import py4godot.classes.CopyTransformModifier3D as py4godot_copytransformmodifier3d 
  import py4godot.classes.GPUParticlesCollisionSDF3D as py4godot_gpuparticlescollisionsdf3d 
  import py4godot.classes.RetargetModifier3D as py4godot_retargetmodifier3d 
  import py4godot.classes.GPUParticlesCollision3D as py4godot_gpuparticlescollision3d 
  import py4godot.classes.Path2D as py4godot_path2d 
  import py4godot.classes.GPUParticles3D as py4godot_gpuparticles3d 
  import py4godot.classes.SpringArm3D as py4godot_springarm3d 
  import py4godot.classes.SpringBoneSimulator3D as py4godot_springbonesimulator3d 
  import py4godot.classes.PopupMenu as py4godot_popupmenu 
  import py4godot.classes.CSGBox3D as py4godot_csgbox3d 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.ParallaxBackground as py4godot_parallaxbackground 
  import py4godot.classes.PathFollow2D as py4godot_pathfollow2d 
  import py4godot.classes.CollisionObject3D as py4godot_collisionobject3d 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.StatusIndicator as py4godot_statusindicator 
  import py4godot.classes.Label3D as py4godot_label3d 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
  import py4godot.classes.CSGSphere3D as py4godot_csgsphere3d 
  import py4godot.classes.PinJoint3D as py4godot_pinjoint3d 
  import py4godot.classes.GridMap as py4godot_gridmap 
  import py4godot.classes.ModifierBoneTarget3D as py4godot_modifierbonetarget3d 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.CharacterBody2D as py4godot_characterbody2d 
  import py4godot.classes.WorldEnvironment as py4godot_worldenvironment 
  import py4godot.classes.VisibleOnScreenNotifier2D as py4godot_visibleonscreennotifier2d 
  import py4godot.classes.StaticBody3D as py4godot_staticbody3d 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.SliderJoint3D as py4godot_sliderjoint3d 
  import py4godot.classes.NavigationAgent2D as py4godot_navigationagent2d 
  import py4godot.classes.AnimatableBody3D as py4godot_animatablebody3d 
  import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
  import py4godot.classes.GLTFObjectModelProperty as py4godot_gltfobjectmodelproperty 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.ReflectionProbe as py4godot_reflectionprobe 
  import py4godot.classes.NavigationLink3D as py4godot_navigationlink3d 
  import py4godot.classes.NavigationLink2D as py4godot_navigationlink2d 
  import py4godot.classes.GPUParticlesAttractorBox3D as py4godot_gpuparticlesattractorbox3d 
  import py4godot.classes.RootMotionView as py4godot_rootmotionview 
  import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
  import py4godot.classes.Skeleton2D as py4godot_skeleton2d 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.GLTFState as py4godot_gltfstate 
  import py4godot.classes.CSGCombiner3D as py4godot_csgcombiner3d 
  import py4godot.classes.OccluderInstance3D as py4godot_occluderinstance3d 
  import py4godot.classes.FogVolume as py4godot_fogvolume 
  import py4godot.classes.Bone2D as py4godot_bone2d 
  import py4godot.classes.AudioStreamPlayer3D as py4godot_audiostreamplayer3d 
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.Sprite3D as py4godot_sprite3d 
  import py4godot.classes.MeshInstance2D as py4godot_meshinstance2d 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.GPUParticlesCollisionBox3D as py4godot_gpuparticlescollisionbox3d 
  import py4godot.classes.GPUParticlesAttractor3D as py4godot_gpuparticlesattractor3d 
  import py4godot.classes.XRHandModifier3D as py4godot_xrhandmodifier3d 
  import py4godot.classes.Camera2D as py4godot_camera2d 
  import py4godot.classes.SubViewport as py4godot_subviewport 
  import py4godot.classes.Window as py4godot_window 
  import py4godot.classes.StaticBody2D as py4godot_staticbody2d 
  import py4godot.classes.ShapeCast2D as py4godot_shapecast2d 
  import py4godot.classes.Sprite2D as py4godot_sprite2d 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.Node3D as py4godot_node3d 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.HTTPRequest as py4godot_httprequest 
  import py4godot.classes.VehicleWheel3D as py4godot_vehiclewheel3d 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.Node as py4godot_node 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.AnimationMixer as py4godot_animationmixer 
  import py4godot.classes.GPUParticlesAttractorVectorField3D as py4godot_gpuparticlesattractorvectorfield3d 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.OpenXRCompositionLayerCylinder as py4godot_openxrcompositionlayercylinder 
  import py4godot.classes.CharacterBody3D as py4godot_characterbody3d 
  import py4godot.classes.AudioStreamPlayer2D as py4godot_audiostreamplayer2d 
  import py4godot.classes.TileMapLayer as py4godot_tilemaplayer 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.AudioListener2D as py4godot_audiolistener2d 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.RayCast2D as py4godot_raycast2d 
  import py4godot.classes.CanvasModulate as py4godot_canvasmodulate 
  import py4godot.classes.CollisionShape2D as py4godot_collisionshape2d 
  import py4godot.classes.NavigationObstacle2D as py4godot_navigationobstacle2d 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.InstancePlaceholder as py4godot_instanceplaceholder 
  import py4godot.classes.OpenXRHand as py4godot_openxrhand 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.Generic6DOFJoint3D as py4godot_generic6dofjoint3d 
  import py4godot.classes.RigidBody3D as py4godot_rigidbody3d 
  import py4godot.classes.Light3D as py4godot_light3d 
  import py4godot.classes.AcceptDialog as py4godot_acceptdialog 
  import py4godot.classes.OpenXRRenderModel as py4godot_openxrrendermodel 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.PinJoint2D as py4godot_pinjoint2d 
  import py4godot.classes.EditorFileSystem as py4godot_editorfilesystem 
  import py4godot.classes.OpenXRCompositionLayer as py4godot_openxrcompositionlayer 
  import py4godot.classes.AnimationPlayer as py4godot_animationplayer 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.OpenXRRenderModelManager as py4godot_openxrrendermodelmanager 
  import py4godot.classes.PointLight2D as py4godot_pointlight2d 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.AnimatedSprite2D as py4godot_animatedsprite2d 
  import py4godot.classes.OmniLight3D as py4godot_omnilight3d 
  import py4godot.classes.CSGMesh3D as py4godot_csgmesh3d 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.BoneAttachment3D as py4godot_boneattachment3d 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.PopupPanel as py4godot_popuppanel 
  import py4godot.classes.Joint2D as py4godot_joint2d 
  import py4godot.classes.GrooveJoint2D as py4godot_groovejoint2d 
  import py4godot.classes.GPUParticlesAttractorSphere3D as py4godot_gpuparticlesattractorsphere3d 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFDocumentWrapper

class RootNodeMode:
  ROOT_NODE_MODE_SINGLE_ROOT = 0
  ROOT_NODE_MODE_KEEP_ROOT = 1
  ROOT_NODE_MODE_MULTI_ROOT = 2
class VisibilityMode:
  VISIBILITY_MODE_INCLUDE_REQUIRED = 0
  VISIBILITY_MODE_INCLUDE_OPTIONAL = 1
  VISIBILITY_MODE_EXCLUDE = 2


class GLTFDocument(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFDocument.construct_without_init()
    class_._ptr = constructor(349,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFDocument.construct_without_init()
    class_._ptr = constructor(349,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFDocumentWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(349,0, ())


  def generate_wrapper(self):
    return CPPGLTFDocumentWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFDocument.__new__(GLTFDocument)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFDocument'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFDocument.construct_without_init()
    cls._ptr = CPPGLTFDocumentWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFDocument.construct_without_init()
    cls._ptr = CPPGLTFDocumentWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def image_format(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_image_format()
    return _ret
  @image_format.setter
  def image_format(self,  value:'str'):
    self.set_image_format(value)
  @property
  def lossy_quality(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_lossy_quality()
    return _ret
  @lossy_quality.setter
  def lossy_quality(self,  value:'float'):
    self.set_lossy_quality(value)
  @property
  def fallback_image_format(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_fallback_image_format()
    return _ret
  @fallback_image_format.setter
  def fallback_image_format(self,  value:'str'):
    self.set_fallback_image_format(value)
  @property
  def fallback_image_quality(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_fallback_image_quality()
    return _ret
  @fallback_image_quality.setter
  def fallback_image_quality(self,  value:'float'):
    self.set_fallback_image_quality(value)
  @property
  def root_node_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_root_node_mode()
    return _ret
  @root_node_mode.setter
  def root_node_mode(self,  value:'int'):
    self.set_root_node_mode(value)
  @property
  def visibility_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_visibility_mode()
    return _ret
  @visibility_mode.setter
  def visibility_mode(self,  value:'int'):
    self.set_visibility_mode(value)
  @functools.native_method
  def set_image_format(self, image_format:'str'   ) -> None:
    r''''''

    assert(not image_format is None)
    assert isinstance(image_format, (str, String)), 'image_format must be str or String'

    self.py__image_format = image_format



    assert(isinstance(image_format, (str, String)))
    py_string_image_format = image_format if isinstance(image_format, StringName) else c_utils.py_string_to_string(image_format)

    py__string_image_format = utils.py_string_to_string(image_format)
    py__string_image_format.shouldBeDeleted = False


    self._ptr.call_with_return(77,tuple([py__string_image_format._ptr]))

  @functools.native_method
  def get_image_format(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_lossy_quality(self, lossy_quality:'float'   ) -> None:
    r''''''

    assert isinstance(lossy_quality, (int, float)), 'lossy_quality must be int or float'

    self.py__lossy_quality = lossy_quality






    self._ptr.call_with_return(79,tuple([lossy_quality]))

  @functools.native_method
  def get_lossy_quality(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_fallback_image_format(self, fallback_image_format:'str'   ) -> None:
    r''''''

    assert(not fallback_image_format is None)
    assert isinstance(fallback_image_format, (str, String)), 'fallback_image_format must be str or String'

    self.py__fallback_image_format = fallback_image_format



    assert(isinstance(fallback_image_format, (str, String)))
    py_string_fallback_image_format = fallback_image_format if isinstance(fallback_image_format, StringName) else c_utils.py_string_to_string(fallback_image_format)

    py__string_fallback_image_format = utils.py_string_to_string(fallback_image_format)
    py__string_fallback_image_format.shouldBeDeleted = False


    self._ptr.call_with_return(81,tuple([py__string_fallback_image_format._ptr]))

  @functools.native_method
  def get_fallback_image_format(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_fallback_image_quality(self, fallback_image_quality:'float'   ) -> None:
    r''''''

    assert isinstance(fallback_image_quality, (int, float)), 'fallback_image_quality must be int or float'

    self.py__fallback_image_quality = fallback_image_quality






    self._ptr.call_with_return(83,tuple([fallback_image_quality]))

  @functools.native_method
  def get_fallback_image_quality(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_root_node_mode(self, root_node_mode:'int'  ) -> None:
    r''''''

    assert isinstance(root_node_mode, (int, float)), 'root_node_mode must be int or float'

    self.py__root_node_mode = root_node_mode






    self._ptr.call_with_return(85,tuple([root_node_mode]))

  @functools.native_method
  def get_root_node_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_visibility_mode(self, visibility_mode:'int'  ) -> None:
    r''''''

    assert isinstance(visibility_mode, (int, float)), 'visibility_mode must be int or float'

    self.py__visibility_mode = visibility_mode






    self._ptr.call_with_return(87,tuple([visibility_mode]))

  @functools.native_method
  def get_visibility_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def append_from_file(self, path:'str'   , state:'py4godot_gltfstate.GLTFState'   , flags:'int' =0  , base_path:'str' =""  ) -> typing.Union[int]:
    r''''''
    if base_path is None:
      base_path = String.new0()
    if base_path is None:
      base_path = String.new0()

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert isinstance(flags, (int, float)), 'flags must be int or float'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    assert(isinstance(base_path, (str, String)))
    py_string_base_path = base_path if isinstance(base_path, StringName) else c_utils.py_string_to_string(base_path)

    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([py_string_path._ptr, state._ptr, flags, py_string_base_path._ptr]))
    return _ret


  @functools.native_method
  def append_from_buffer(self, bytes:'PackedByteArray'   , base_path:'str'   , state:'py4godot_gltfstate.GLTFState'   , flags:'int' =0  ) -> typing.Union[int]:
    r''''''

    assert(not bytes is None)
    assert isinstance(bytes, PackedByteArray), 'bytes must be PackedByteArray'
    assert(not base_path is None)
    assert isinstance(base_path, (str, String)), 'base_path must be str or String'
    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert isinstance(flags, (int, float)), 'flags must be int or float'





    assert(isinstance(base_path, (str, String)))
    py_string_base_path = base_path if isinstance(base_path, StringName) else c_utils.py_string_to_string(base_path)



    _ret:int
    _ret = self._ptr.call_with_return(90,tuple([bytes._ptr, py_string_base_path._ptr, state._ptr, flags]))
    return _ret


  @functools.native_method
  def append_from_scene(self, node:'py4godot_node.Node'   , state:'py4godot_gltfstate.GLTFState'   , flags:'int' =0  ) -> typing.Union[int]:
    r''''''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'
    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert isinstance(flags, (int, float)), 'flags must be int or float'








    _ret:int
    _ret = self._ptr.call_with_return(91,tuple([node._ptr, state._ptr, flags]))
    return _ret


  @functools.native_method
  def generate_scene(self, state:'py4godot_gltfstate.GLTFState'   , bake_fps:'float' =30  , trimming:'bool' =False  , remove_immutable_tracks:'bool' =True  ) -> typing.Any:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert isinstance(bake_fps, (int, float)), 'bake_fps must be int or float'
    assert isinstance(trimming, bool), 'trimming must be bool'
    assert isinstance(remove_immutable_tracks, bool), 'remove_immutable_tracks must be bool'









    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Node
    _ret._ptr = self._ptr.call_with_return(92,tuple([state._ptr, bake_fps, trimming, remove_immutable_tracks]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def generate_buffer(self, state:'py4godot_gltfstate.GLTFState'   ) -> typing.Union['PackedByteArray']:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'






    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(93,tuple([state._ptr]))
    return _ret


  @functools.native_method
  def write_to_filesystem(self, state:'py4godot_gltfstate.GLTFState'   , path:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'





    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(94,tuple([state._ptr, py_string_path._ptr]))
    return _ret


  @staticmethod
  def import_object_model_property(state:'py4godot_gltfstate.GLTFState'   , json_pointer:'str'   ) -> typing.Union['py4godot_gltfobjectmodelproperty.GLTFObjectModelProperty']:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not json_pointer is None)
    assert isinstance(json_pointer, (str, String)), 'json_pointer must be str or String'





    assert(isinstance(json_pointer, (str, String)))
    py_string_json_pointer = json_pointer if isinstance(json_pointer, StringName) else c_utils.py_string_to_string(json_pointer)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: GLTFObjectModelProperty
    _ret._ptr = static_method(349,1,tuple([state._ptr, py_string_json_pointer._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def export_object_model_property(state:'py4godot_gltfstate.GLTFState'   , node_path:'object'   , godot_node:'py4godot_node.Node'   , gltf_node_index:'int'   ) -> typing.Union['py4godot_gltfobjectmodelproperty.GLTFObjectModelProperty']:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not node_path is None)
    assert isinstance(node_path, (str, NodePath)), 'node_path must be str or NodePath'
    assert(not godot_node is None)
    assert isinstance(godot_node, get_class('Node')), 'godot_node must be Node'
    assert isinstance(gltf_node_index, (int, float)), 'gltf_node_index must be int or float'





    assert(isinstance(node_path, (str, NodePath)))
    py_nodepath_node_path = node_path if isinstance(node_path,NodePath) else NodePath.new2(node_path)



    _ret = classes.Object.Object.construct_without_init() #Smart casted to: GLTFObjectModelProperty
    _ret._ptr = static_method(349,2,tuple([state._ptr, py_nodepath_node_path._ptr, godot_node._ptr, gltf_node_index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def register_gltf_document_extension(extension:'py4godot_gltfdocumentextension.GLTFDocumentExtension'   , first_priority:'bool' =False  ) -> None:
    r''''''

    assert(not extension is None)
    assert isinstance(extension, get_class('GLTFDocumentExtension')), 'extension must be GLTFDocumentExtension'
    assert isinstance(first_priority, bool), 'first_priority must be bool'







    static_method(349,3,tuple([extension._ptr, first_priority]))

  @staticmethod
  def unregister_gltf_document_extension(extension:'py4godot_gltfdocumentextension.GLTFDocumentExtension'   ) -> None:
    r''''''

    assert(not extension is None)
    assert isinstance(extension, get_class('GLTFDocumentExtension')), 'extension must be GLTFDocumentExtension'






    static_method(349,4,tuple([extension._ptr]))

  @staticmethod
  def get_supported_gltf_extensions() -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = static_method(349,5,tuple([]))
    return _ret



register_cast_function('GLTFDocument', GLTFDocument.cast)
register_class('GLTFDocument', GLTFDocument)
