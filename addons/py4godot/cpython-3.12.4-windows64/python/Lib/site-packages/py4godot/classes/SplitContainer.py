# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
import py4godot.classes.Container as py4godot_container 
from py4godot.wrappers.wrappers import CPPSplitContainerWrapper

class DraggerVisibility:
  DRAGGER_VISIBLE = 0
  DRAGGER_HIDDEN = 1
  DRAGGER_HIDDEN_COLLAPSED = 2


class SplitContainer(py4godot_container.Container):
  r'''
		A container that accepts only two child controls, then arranges them horizontally or vertically and creates a divisor between them. The divisor can be dragged around to change the size relation between the child controls.
	'''

  @staticmethod
  def constructor():
    class_ = SplitContainer.construct_without_init()
    class_._ptr = constructor(771,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SplitContainer.construct_without_init()
    class_._ptr = constructor(771,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSplitContainerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(771,0, ())


  def generate_wrapper(self):
    return CPPSplitContainerWrapper()
  def init_signals(self):
    super().init_signals()
    dragged_name = utils.py_string_to_string_name("dragged")
    self.dragged = signals.BuiltinSignal(self, dragged_name)
    drag_started_name = utils.py_string_to_string_name("drag_started")
    self.drag_started = signals.BuiltinSignal(self, drag_started_name)
    drag_ended_name = utils.py_string_to_string_name("drag_ended")
    self.drag_ended = signals.BuiltinSignal(self, drag_ended_name)

  @staticmethod
  def construct_without_init():
    cls = SplitContainer.__new__(SplitContainer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SplitContainer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SplitContainer.construct_without_init()
    cls._ptr = CPPSplitContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SplitContainer.construct_without_init()
    cls._ptr = CPPSplitContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def split_offset(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_split_offset()
    return _ret
  @split_offset.setter
  def split_offset(self,  value:'int'):
    self.set_split_offset(value)
  @property
  def collapsed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_collapsed()
    return _ret
  @collapsed.setter
  def collapsed(self,  value:'bool'):
    self.set_collapsed(value)
  @property
  def dragging_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_dragging_enabled()
    return _ret
  @dragging_enabled.setter
  def dragging_enabled(self,  value:'bool'):
    self.set_dragging_enabled(value)
  @property
  def dragger_visibility(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_dragger_visibility()
    return _ret
  @dragger_visibility.setter
  def dragger_visibility(self,  value:'int'):
    self.set_dragger_visibility(value)
  @property
  def vertical(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_vertical()
    return _ret
  @vertical.setter
  def vertical(self,  value:'bool'):
    self.set_vertical(value)
  @property
  def touch_dragger_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_touch_dragger_enabled()
    return _ret
  @touch_dragger_enabled.setter
  def touch_dragger_enabled(self,  value:'bool'):
    self.set_touch_dragger_enabled(value)
  @property
  def drag_area_margin_begin(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_drag_area_margin_begin()
    return _ret
  @drag_area_margin_begin.setter
  def drag_area_margin_begin(self,  value:'int'):
    self.set_drag_area_margin_begin(value)
  @property
  def drag_area_margin_end(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_drag_area_margin_end()
    return _ret
  @drag_area_margin_end.setter
  def drag_area_margin_end(self,  value:'int'):
    self.set_drag_area_margin_end(value)
  @property
  def drag_area_offset(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_drag_area_offset()
    return _ret
  @drag_area_offset.setter
  def drag_area_offset(self,  value:'int'):
    self.set_drag_area_offset(value)
  @property
  def drag_area_highlight_in_editor(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_drag_area_highlight_in_editor_enabled()
    return _ret
  @drag_area_highlight_in_editor.setter
  def drag_area_highlight_in_editor(self,  value:'bool'):
    self.set_drag_area_highlight_in_editor(value)
  @functools.native_method
  def set_split_offset(self, offset:'int'   ) -> None:
    r''''''

    assert isinstance(offset, (int, float)), 'offset must be int or float'

    self.py__split_offset = offset






    self._ptr.call_with_return(437,tuple([offset]))

  @functools.native_method
  def get_split_offset(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(438,tuple([]))

    return _ret


  @functools.native_method
  def clamp_split_offset(self) -> None:
    r'''
				Clamps the `split_offset` value to not go outside the currently possible minimal and maximum values.
			'''




    self._ptr.call_with_return(439,tuple([]))

  @functools.native_method
  def set_collapsed(self, collapsed:'bool'   ) -> None:
    r''''''

    assert isinstance(collapsed, bool), 'collapsed must be bool'

    self.py__collapsed = collapsed






    self._ptr.call_with_return(440,tuple([collapsed]))

  @functools.native_method
  def is_collapsed(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(441,tuple([]))

    return _ret


  @functools.native_method
  def set_dragger_visibility(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__dragger_visibility = mode






    self._ptr.call_with_return(442,tuple([mode]))

  @functools.native_method
  def get_dragger_visibility(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(443,tuple([]))

    return _ret


  @functools.native_method
  def set_vertical(self, vertical:'bool'   ) -> None:
    r''''''

    assert isinstance(vertical, bool), 'vertical must be bool'

    self.py__vertical = vertical






    self._ptr.call_with_return(444,tuple([vertical]))

  @functools.native_method
  def is_vertical(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(445,tuple([]))

    return _ret


  @functools.native_method
  def set_dragging_enabled(self, dragging_enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(dragging_enabled, bool), 'dragging_enabled must be bool'

    self.py__dragging_enabled = dragging_enabled






    self._ptr.call_with_return(446,tuple([dragging_enabled]))

  @functools.native_method
  def is_dragging_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(447,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_area_margin_begin(self, margin:'int'   ) -> None:
    r''''''

    assert isinstance(margin, (int, float)), 'margin must be int or float'

    self.py__drag_area_margin_begin = margin






    self._ptr.call_with_return(448,tuple([margin]))

  @functools.native_method
  def get_drag_area_margin_begin(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(449,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_area_margin_end(self, margin:'int'   ) -> None:
    r''''''

    assert isinstance(margin, (int, float)), 'margin must be int or float'

    self.py__drag_area_margin_end = margin






    self._ptr.call_with_return(450,tuple([margin]))

  @functools.native_method
  def get_drag_area_margin_end(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(451,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_area_offset(self, offset:'int'   ) -> None:
    r''''''

    assert isinstance(offset, (int, float)), 'offset must be int or float'

    self.py__drag_area_offset = offset






    self._ptr.call_with_return(452,tuple([offset]))

  @functools.native_method
  def get_drag_area_offset(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(453,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_area_highlight_in_editor(self, drag_area_highlight_in_editor:'bool'   ) -> None:
    r''''''

    assert isinstance(drag_area_highlight_in_editor, bool), 'drag_area_highlight_in_editor must be bool'

    self.py__drag_area_highlight_in_editor = drag_area_highlight_in_editor






    self._ptr.call_with_return(454,tuple([drag_area_highlight_in_editor]))

  @functools.native_method
  def is_drag_area_highlight_in_editor_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(455,tuple([]))

    return _ret


  @functools.native_method
  def get_drag_area_control(self) -> typing.Any:
    r'''
				Returns the drag area `Control`. For example, you can move a pre-configured button into the drag area `Control` so that it rides along with the split bar. Try setting the `Button` anchors to `center` prior to the `reparent()` call.
				```gdscript
				$BarnacleButton.reparent($SplitContainer.get_drag_area_control())
				```
				**Note:** The drag area `Control` is drawn over the `SplitContainer`'s children, so `CanvasItem` draw objects called from the `Control` and children added to the `Control` will also appear over the `SplitContainer`'s children. Try setting `Control.mouse_filter` of custom children to `constant Control.MOUSE_FILTER_IGNORE` to prevent blocking the mouse from dragging if desired.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Control
    _ret._ptr = self._ptr.call_with_return(456,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_touch_dragger_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__touch_dragger_enabled = enabled






    self._ptr.call_with_return(457,tuple([enabled]))

  @functools.native_method
  def is_touch_dragger_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(458,tuple([]))

    return _ret



register_cast_function('SplitContainer', SplitContainer.cast)
register_class('SplitContainer', SplitContainer)
