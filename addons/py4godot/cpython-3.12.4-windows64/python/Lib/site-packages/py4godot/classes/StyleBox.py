# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Bone2D as py4godot_bone2d 
  import py4godot.classes.DirectionalLight2D as py4godot_directionallight2d 
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.BackBufferCopy as py4godot_backbuffercopy 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.MeshInstance2D as py4godot_meshinstance2d 
  import py4godot.classes.DampedSpringJoint2D as py4godot_dampedspringjoint2d 
  import py4godot.classes.Light2D as py4godot_light2d 
  import py4godot.classes.CPUParticles2D as py4godot_cpuparticles2d 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.Camera2D as py4godot_camera2d 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.PhysicalBone2D as py4godot_physicalbone2d 
  import py4godot.classes.CanvasGroup as py4godot_canvasgroup 
  import py4godot.classes.StaticBody2D as py4godot_staticbody2d 
  import py4godot.classes.ShapeCast2D as py4godot_shapecast2d 
  import py4godot.classes.Sprite2D as py4godot_sprite2d 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.Path2D as py4godot_path2d 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.RemoteTransform2D as py4godot_remotetransform2d 
  import py4godot.classes.MultiMeshInstance2D as py4godot_multimeshinstance2d 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.CollisionPolygon2D as py4godot_collisionpolygon2d 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.VisibleOnScreenEnabler2D as py4godot_visibleonscreenenabler2d 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.CanvasItem as py4godot_canvasitem 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.AudioStreamPlayer2D as py4godot_audiostreamplayer2d 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.TileMapLayer as py4godot_tilemaplayer 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.AudioListener2D as py4godot_audiolistener2d 
  import py4godot.classes.CollisionObject2D as py4godot_collisionobject2d 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.PathFollow2D as py4godot_pathfollow2d 
  import py4godot.classes.Polygon2D as py4godot_polygon2d 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.RayCast2D as py4godot_raycast2d 
  import py4godot.classes.Marker2D as py4godot_marker2d 
  import py4godot.classes.Node2D as py4godot_node2d 
  import py4godot.classes.CanvasModulate as py4godot_canvasmodulate 
  import py4godot.classes.RigidBody2D as py4godot_rigidbody2d 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.CollisionShape2D as py4godot_collisionshape2d 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.NavigationObstacle2D as py4godot_navigationobstacle2d 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.LightOccluder2D as py4godot_lightoccluder2d 
  import py4godot.classes.TouchScreenButton as py4godot_touchscreenbutton 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.TileMap as py4godot_tilemap 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.ParallaxLayer as py4godot_parallaxlayer 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.NavigationRegion2D as py4godot_navigationregion2d 
  import py4godot.classes.AnimatableBody2D as py4godot_animatablebody2d 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.Line2D as py4godot_line2d 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.PinJoint2D as py4godot_pinjoint2d 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.CharacterBody2D as py4godot_characterbody2d 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.VisibleOnScreenNotifier2D as py4godot_visibleonscreennotifier2d 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.PointLight2D as py4godot_pointlight2d 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.Area2D as py4godot_area2d 
  import py4godot.classes.NavigationLink2D as py4godot_navigationlink2d 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.AnimatedSprite2D as py4godot_animatedsprite2d 
  import py4godot.classes.Skeleton2D as py4godot_skeleton2d 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.Parallax2D as py4godot_parallax2d 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.Joint2D as py4godot_joint2d 
  import py4godot.classes.PhysicsBody2D as py4godot_physicsbody2d 
  import py4godot.classes.GrooveJoint2D as py4godot_groovejoint2d 
  import py4godot.classes.GPUParticles2D as py4godot_gpuparticles2d 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPStyleBoxWrapper


class StyleBox(py4godot_resource.Resource):
  r'''
		`StyleBox` is an abstract base class for drawing stylized boxes for UI elements. It is used for panels, buttons, `LineEdit` backgrounds, `Tree` backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a `StyleBox` assigned as mask to a control, clicks and motion signals will go through it to the one below.
		**Note:** For control nodes that have _Theme Properties_, the `focus` `StyleBox` is displayed over the `normal`, `hover` or `pressed` `StyleBox`. This makes the `focus` `StyleBox` more reusable across different nodes.
	'''

  @staticmethod
  def constructor():
    class_ = StyleBox.construct_without_init()
    class_._ptr = constructor(793,0, ())
    return class_
  @staticmethod
  def new():
    class_ = StyleBox.construct_without_init()
    class_._ptr = constructor(793,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPStyleBoxWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(793,0, ())


  def generate_wrapper(self):
    return CPPStyleBoxWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = StyleBox.__new__(StyleBox)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'StyleBox'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = StyleBox.construct_without_init()
    cls._ptr = CPPStyleBoxWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = StyleBox.construct_without_init()
    cls._ptr = CPPStyleBoxWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def content_margin_left(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_content_margin(0)
    return _ret
  @content_margin_left.setter
  def content_margin_left(self,  value:'float'):
    self.set_content_margin(value)
  @property
  def content_margin_top(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_content_margin(1)
    return _ret
  @content_margin_top.setter
  def content_margin_top(self,  value:'float'):
    self.set_content_margin(value)
  @property
  def content_margin_right(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_content_margin(2)
    return _ret
  @content_margin_right.setter
  def content_margin_right(self,  value:'float'):
    self.set_content_margin(value)
  @property
  def content_margin_bottom(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_content_margin(3)
    return _ret
  @content_margin_bottom.setter
  def content_margin_bottom(self,  value:'float'):
    self.set_content_margin(value)
  @functools.native_method
  def _draw(self, to_canvas_item:'RID'   , rect:'Rect2'   ) -> None:
    r'''
'''

    assert(not to_canvas_item is None)
    assert isinstance(to_canvas_item, RID), 'to_canvas_item must be RID'
    assert(not rect is None)
    assert isinstance(rect, Rect2), 'rect must be Rect2'







    self._ptr.call_with_return(77,tuple([to_canvas_item._ptr, rect._ptr]))

  @functools.native_method
  def _get_draw_rect(self, rect:'Rect2'   ) -> typing.Union['Rect2']:
    r'''
'''

    assert(not rect is None)
    assert isinstance(rect, Rect2), 'rect must be Rect2'






    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([rect._ptr]))
    return _ret


  @functools.native_method
  def _get_minimum_size(self) -> typing.Union['Vector2']:
    r'''
				Virtual method to be implemented by the user. Returns a custom minimum size that the stylebox must respect when drawing. By default `get_minimum_size` only takes content margins into account. This method can be overridden to add another size restriction. A combination of the default behavior and the output of this method will be used, to account for both sizes.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def _test_mask(self, point:'Vector2'   , rect:'Rect2'   ) -> typing.Union[bool]:
    r'''
'''

    assert(not point is None)
    assert isinstance(point, Vector2), 'point must be Vector2'
    assert(not rect is None)
    assert isinstance(rect, Rect2), 'rect must be Rect2'







    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([point._ptr, rect._ptr]))
    return _ret


  @functools.native_method
  def get_minimum_size(self) -> typing.Union['Vector2']:
    r'''
				Returns the minimum size that this stylebox can be shrunk to.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([]))
    return _ret


  @functools.native_method
  def set_content_margin(self, margin:'int'  , offset:'float'   ) -> None:
    r'''
				Sets the default value of the specified `enum Side` to `offset` pixels.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'
    assert isinstance(offset, (int, float)), 'offset must be int or float'

    self.py__content_margin_left = margin







    self._ptr.call_with_return(82,tuple([margin, offset]))

  @functools.native_method
  def set_content_margin_all(self, offset:'float'   ) -> None:
    r'''
				Sets the default margin to `offset` pixels for all sides.
			'''

    assert isinstance(offset, (int, float)), 'offset must be int or float'






    self._ptr.call_with_return(83,tuple([offset]))

  @functools.native_method
  def get_content_margin(self, margin:'int'  ) -> typing.Union[float]:
    r'''
				Returns the default margin of the specified `enum Side`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([margin]))

    return _ret


  @functools.native_method
  def get_margin(self, margin:'int'  ) -> typing.Union[float]:
    r'''
				Returns the content margin offset for the specified `enum Side`.
				Positive values reduce size inwards, unlike `Control`'s margin values.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([margin]))
    return _ret


  @functools.native_method
  def get_offset(self) -> typing.Union['Vector2']:
    r'''
				Returns the "offset" of a stylebox. This helper function returns a value equivalent to `Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))`.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))
    return _ret


  @functools.native_method
  def draw(self, canvas_item:'RID'   , rect:'Rect2'   ) -> None:
    r'''
				Draws this stylebox using a canvas item identified by the given `RID`.
				The `RID` value can either be the result of `CanvasItem.get_canvas_item` called on an existing `CanvasItem`-derived node, or directly from creating a canvas item in the `RenderingServer` with `RenderingServer.canvas_item_create`.
			'''

    assert(not canvas_item is None)
    assert isinstance(canvas_item, RID), 'canvas_item must be RID'
    assert(not rect is None)
    assert isinstance(rect, Rect2), 'rect must be Rect2'







    self._ptr.call_with_return(87,tuple([canvas_item._ptr, rect._ptr]))

  @functools.native_method
  def get_current_item_drawn(self) -> typing.Any:
    r'''
				Returns the `CanvasItem` that handles its `constant CanvasItem.NOTIFICATION_DRAW` or `CanvasItem._draw` callback at this moment.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: CanvasItem
    _ret._ptr = self._ptr.call_with_return(88,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def test_mask(self, point:'Vector2'   , rect:'Rect2'   ) -> typing.Union[bool]:
    r'''
				Test a position in a rectangle, return whether it passes the mask test.
			'''

    assert(not point is None)
    assert isinstance(point, Vector2), 'point must be Vector2'
    assert(not rect is None)
    assert isinstance(rect, Rect2), 'rect must be Rect2'







    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([point._ptr, rect._ptr]))
    return _ret



register_cast_function('StyleBox', StyleBox.cast)
register_class('StyleBox', StyleBox)
