# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.GPUParticlesCollision3D as py4godot_gpuparticlescollision3d 
from py4godot.wrappers.wrappers import CPPGPUParticlesCollisionHeightField3DWrapper

class Resolution:
  RESOLUTION_256 = 0
  RESOLUTION_512 = 1
  RESOLUTION_1024 = 2
  RESOLUTION_2048 = 3
  RESOLUTION_4096 = 4
  RESOLUTION_8192 = 5
  RESOLUTION_MAX = 6
class UpdateMode:
  UPDATE_MODE_WHEN_MOVED = 0
  UPDATE_MODE_ALWAYS = 1


class GPUParticlesCollisionHeightField3D(py4godot_gpuparticlescollision3d.GPUParticlesCollision3D):
  r'''
		A real-time heightmap-shaped 3D particle collision shape affecting `GPUParticles3D` nodes.
		Heightmap shapes allow for efficiently representing collisions for convex and concave objects with a single "floor" (such as terrain). This is less flexible than `GPUParticlesCollisionSDF3D`, but it doesn't require a baking step.
		`GPUParticlesCollisionHeightField3D` can also be regenerated in real-time when it is moved, when the camera moves, or even continuously. This makes `GPUParticlesCollisionHeightField3D` a good choice for weather effects such as rain and snow and games with highly dynamic geometry. However, this class is limited since heightmaps cannot represent overhangs (e.g. indoors or caves).
		**Note:** `ParticleProcessMaterial.collision_mode` must be `true` on the `GPUParticles3D`'s process material for collision to work.
		**Note:** Particle collision only affects `GPUParticles3D`, not `CPUParticles3D`.
	'''

  @staticmethod
  def constructor():
    class_ = GPUParticlesCollisionHeightField3D.construct_without_init()
    class_._ptr = constructor(372,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GPUParticlesCollisionHeightField3D.construct_without_init()
    class_._ptr = constructor(372,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGPUParticlesCollisionHeightField3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(372,0, ())


  def generate_wrapper(self):
    return CPPGPUParticlesCollisionHeightField3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GPUParticlesCollisionHeightField3D.__new__(GPUParticlesCollisionHeightField3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GPUParticlesCollisionHeightField3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GPUParticlesCollisionHeightField3D.construct_without_init()
    cls._ptr = CPPGPUParticlesCollisionHeightField3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GPUParticlesCollisionHeightField3D.construct_without_init()
    cls._ptr = CPPGPUParticlesCollisionHeightField3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def size(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector3'):
    self.set_size(value)
  @property
  def resolution(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_resolution()
    return _ret
  @resolution.setter
  def resolution(self,  value:'int'):
    self.set_resolution(value)
  @property
  def update_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_update_mode()
    return _ret
  @update_mode.setter
  def update_mode(self,  value:'int'):
    self.set_update_mode(value)
  @property
  def follow_camera_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_follow_camera_enabled()
    return _ret
  @follow_camera_enabled.setter
  def follow_camera_enabled(self,  value:'bool'):
    self.set_follow_camera_enabled(value)
  @property
  def heightfield_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_heightfield_mask()
    return _ret
  @heightfield_mask.setter
  def heightfield_mask(self,  value:'int'):
    self.set_heightfield_mask(value)
  @functools.native_method
  def set_size(self, size:'Vector3'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector3), 'size must be Vector3'

    self.py__size = size






    self._ptr.call_with_return(266,tuple([size._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(267,tuple([]))

    return _ret


  @functools.native_method
  def set_resolution(self, resolution:'int'  ) -> None:
    r''''''

    assert isinstance(resolution, (int, float)), 'resolution must be int or float'

    self.py__resolution = resolution






    self._ptr.call_with_return(268,tuple([resolution]))

  @functools.native_method
  def get_resolution(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(269,tuple([]))

    return _ret


  @functools.native_method
  def set_update_mode(self, update_mode:'int'  ) -> None:
    r''''''

    assert isinstance(update_mode, (int, float)), 'update_mode must be int or float'

    self.py__update_mode = update_mode






    self._ptr.call_with_return(270,tuple([update_mode]))

  @functools.native_method
  def get_update_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(271,tuple([]))

    return _ret


  @functools.native_method
  def set_heightfield_mask(self, heightfield_mask:'int'   ) -> None:
    r''''''

    assert isinstance(heightfield_mask, (int, float)), 'heightfield_mask must be int or float'

    self.py__heightfield_mask = heightfield_mask






    self._ptr.call_with_return(272,tuple([heightfield_mask]))

  @functools.native_method
  def get_heightfield_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(273,tuple([]))

    return _ret


  @functools.native_method
  def set_heightfield_mask_value(self, layer_number:'int'   , value:'bool'   ) -> None:
    r'''
				Based on `value`, enables or disables the specified layer in the `heightfield_mask`, given a `layer_number` between `1` and `20`, inclusive.
			'''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'
    assert isinstance(value, bool), 'value must be bool'







    self._ptr.call_with_return(274,tuple([layer_number, value]))

  @functools.native_method
  def get_heightfield_mask_value(self, layer_number:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the specified layer of the `heightfield_mask` is enabled, given a `layer_number` between `1` and `20`, inclusive.
			'''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(275,tuple([layer_number]))
    return _ret


  @functools.native_method
  def set_follow_camera_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__follow_camera_enabled = enabled






    self._ptr.call_with_return(276,tuple([enabled]))

  @functools.native_method
  def is_follow_camera_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(277,tuple([]))

    return _ret



register_cast_function('GPUParticlesCollisionHeightField3D', GPUParticlesCollisionHeightField3D.cast)
register_class('GPUParticlesCollisionHeightField3D', GPUParticlesCollisionHeightField3D)
