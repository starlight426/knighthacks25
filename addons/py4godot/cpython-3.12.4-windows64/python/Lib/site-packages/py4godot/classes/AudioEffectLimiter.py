# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectLimiterWrapper


class AudioEffectLimiter(py4godot_audioeffect.AudioEffect):
  r'''
		A limiter is similar to a compressor, but it's less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master bus is always recommended to reduce the effects of clipping.
		Soft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectLimiter.construct_without_init()
    class_._ptr = constructor(123,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectLimiter.construct_without_init()
    class_._ptr = constructor(123,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectLimiterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(123,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectLimiterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectLimiter.__new__(AudioEffectLimiter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectLimiter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectLimiter.construct_without_init()
    cls._ptr = CPPAudioEffectLimiterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectLimiter.construct_without_init()
    cls._ptr = CPPAudioEffectLimiterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def ceiling_db(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_ceiling_db()
    return _ret
  @ceiling_db.setter
  def ceiling_db(self,  value:'float'):
    self.set_ceiling_db(value)
  @property
  def threshold_db(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_threshold_db()
    return _ret
  @threshold_db.setter
  def threshold_db(self,  value:'float'):
    self.set_threshold_db(value)
  @property
  def soft_clip_db(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_soft_clip_db()
    return _ret
  @soft_clip_db.setter
  def soft_clip_db(self,  value:'float'):
    self.set_soft_clip_db(value)
  @property
  def soft_clip_ratio(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_soft_clip_ratio()
    return _ret
  @soft_clip_ratio.setter
  def soft_clip_ratio(self,  value:'float'):
    self.set_soft_clip_ratio(value)
  @functools.native_method
  def set_ceiling_db(self, ceiling:'float'   ) -> None:
    r''''''

    assert isinstance(ceiling, (int, float)), 'ceiling must be int or float'

    self.py__ceiling_db = ceiling






    self._ptr.call_with_return(78,tuple([ceiling]))

  @functools.native_method
  def get_ceiling_db(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_threshold_db(self, threshold:'float'   ) -> None:
    r''''''

    assert isinstance(threshold, (int, float)), 'threshold must be int or float'

    self.py__threshold_db = threshold






    self._ptr.call_with_return(80,tuple([threshold]))

  @functools.native_method
  def get_threshold_db(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_soft_clip_db(self, soft_clip:'float'   ) -> None:
    r''''''

    assert isinstance(soft_clip, (int, float)), 'soft_clip must be int or float'

    self.py__soft_clip_db = soft_clip






    self._ptr.call_with_return(82,tuple([soft_clip]))

  @functools.native_method
  def get_soft_clip_db(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_soft_clip_ratio(self, soft_clip:'float'   ) -> None:
    r''''''

    assert isinstance(soft_clip, (int, float)), 'soft_clip must be int or float'

    self.py__soft_clip_ratio = soft_clip






    self._ptr.call_with_return(84,tuple([soft_clip]))

  @functools.native_method
  def get_soft_clip_ratio(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret



register_cast_function('AudioEffectLimiter', AudioEffectLimiter.cast)
register_class('AudioEffectLimiter', AudioEffectLimiter)
