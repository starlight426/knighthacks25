# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Material as py4godot_material 
import py4godot.classes.Mesh as py4godot_mesh 
from py4godot.wrappers.wrappers import CPPImmediateMeshWrapper


class ImmediateMesh(py4godot_mesh.Mesh):
  r'''
		A mesh type optimized for creating geometry manually, similar to OpenGL 1.x immediate mode.
		Here's a sample on how to generate a triangular face:
		
		```gdscript
		var mesh = ImmediateMesh.new()
		mesh.surface_begin(Mesh.PRIMITIVE_TRIANGLES)
		mesh.surface_add_vertex(Vector3.LEFT)
		mesh.surface_add_vertex(Vector3.FORWARD)
		mesh.surface_add_vertex(Vector3.ZERO)
		mesh.surface_end()
		```
		
		
		**Note:** Generating complex geometries with `ImmediateMesh` is highly inefficient. Instead, it is designed to generate simple geometry that changes often.
	'''

  @staticmethod
  def constructor():
    class_ = ImmediateMesh.construct_without_init()
    class_._ptr = constructor(409,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ImmediateMesh.construct_without_init()
    class_._ptr = constructor(409,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPImmediateMeshWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(409,0, ())


  def generate_wrapper(self):
    return CPPImmediateMeshWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ImmediateMesh.__new__(ImmediateMesh)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ImmediateMesh'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImmediateMesh.construct_without_init()
    cls._ptr = CPPImmediateMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImmediateMesh.construct_without_init()
    cls._ptr = CPPImmediateMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def surface_begin(self, primitive:'int'  , material:'py4godot_material.Material' = None  ) -> None:
    r'''
				Begin a new surface.
			'''
    if material is None:
      material = c_utils.empty_object
    if material is None:
      material = c_utils.empty_object

    assert isinstance(primitive, (int, float)), 'primitive must be int or float'







    self._ptr.call_with_return(105,tuple([primitive, material._ptr]))

  @functools.native_method
  def surface_set_color(self, color:'Color'   ) -> None:
    r'''
				Set the color attribute that will be pushed with the next vertex.
			'''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'






    self._ptr.call_with_return(106,tuple([color._ptr]))

  @functools.native_method
  def surface_set_normal(self, normal:'Vector3'   ) -> None:
    r'''
				Set the normal attribute that will be pushed with the next vertex.
			'''

    assert(not normal is None)
    assert isinstance(normal, Vector3), 'normal must be Vector3'






    self._ptr.call_with_return(107,tuple([normal._ptr]))

  @functools.native_method
  def surface_set_tangent(self, tangent:'Plane'   ) -> None:
    r'''
				Set the tangent attribute that will be pushed with the next vertex.
			'''

    assert(not tangent is None)
    assert isinstance(tangent, Plane), 'tangent must be Plane'






    self._ptr.call_with_return(108,tuple([tangent._ptr]))

  @functools.native_method
  def surface_set_uv(self, uv:'Vector2'   ) -> None:
    r'''
				Set the UV attribute that will be pushed with the next vertex.
			'''

    assert(not uv is None)
    assert isinstance(uv, Vector2), 'uv must be Vector2'






    self._ptr.call_with_return(109,tuple([uv._ptr]))

  @functools.native_method
  def surface_set_uv2(self, uv2:'Vector2'   ) -> None:
    r'''
				Set the UV2 attribute that will be pushed with the next vertex.
			'''

    assert(not uv2 is None)
    assert isinstance(uv2, Vector2), 'uv2 must be Vector2'






    self._ptr.call_with_return(110,tuple([uv2._ptr]))

  @functools.native_method
  def surface_add_vertex(self, vertex:'Vector3'   ) -> None:
    r'''
				Add a 3D vertex using the current attributes previously set.
			'''

    assert(not vertex is None)
    assert isinstance(vertex, Vector3), 'vertex must be Vector3'






    self._ptr.call_with_return(111,tuple([vertex._ptr]))

  @functools.native_method
  def surface_add_vertex_2d(self, vertex:'Vector2'   ) -> None:
    r'''
				Add a 2D vertex using the current attributes previously set.
			'''

    assert(not vertex is None)
    assert isinstance(vertex, Vector2), 'vertex must be Vector2'






    self._ptr.call_with_return(112,tuple([vertex._ptr]))

  @functools.native_method
  def surface_end(self) -> None:
    r'''
				End and commit current surface. Note that surface being created will not be visible until this function is called.
			'''




    self._ptr.call_with_return(113,tuple([]))

  @functools.native_method
  def clear_surfaces(self) -> None:
    r'''
				Clear all surfaces.
			'''




    self._ptr.call_with_return(114,tuple([]))


register_cast_function('ImmediateMesh', ImmediateMesh.cast)
register_class('ImmediateMesh', ImmediateMesh)
