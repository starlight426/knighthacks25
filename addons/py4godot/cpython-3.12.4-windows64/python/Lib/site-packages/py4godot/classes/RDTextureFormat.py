# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDTextureFormatWrapper


class RDTextureFormat(py4godot_refcounted.RefCounted):
  r'''
		This object is used by `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDTextureFormat.construct_without_init()
    class_._ptr = constructor(657,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDTextureFormat.construct_without_init()
    class_._ptr = constructor(657,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDTextureFormatWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(657,0, ())


  def generate_wrapper(self):
    return CPPRDTextureFormatWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDTextureFormat.__new__(RDTextureFormat)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDTextureFormat'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDTextureFormat.construct_without_init()
    cls._ptr = CPPRDTextureFormatWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDTextureFormat.construct_without_init()
    cls._ptr = CPPRDTextureFormatWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def format(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_format()
    return _ret
  @format.setter
  def format(self,  value:'int'):
    self.set_format(value)
  @property
  def width(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_width()
    return _ret
  @width.setter
  def width(self,  value:'int'):
    self.set_width(value)
  @property
  def height(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'int'):
    self.set_height(value)
  @property
  def depth(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_depth()
    return _ret
  @depth.setter
  def depth(self,  value:'int'):
    self.set_depth(value)
  @property
  def array_layers(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_array_layers()
    return _ret
  @array_layers.setter
  def array_layers(self,  value:'int'):
    self.set_array_layers(value)
  @property
  def mipmaps(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mipmaps()
    return _ret
  @mipmaps.setter
  def mipmaps(self,  value:'int'):
    self.set_mipmaps(value)
  @property
  def texture_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_type()
    return _ret
  @texture_type.setter
  def texture_type(self,  value:'int'):
    self.set_texture_type(value)
  @property
  def samples(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_samples()
    return _ret
  @samples.setter
  def samples(self,  value:'int'):
    self.set_samples(value)
  @property
  def usage_bits(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_usage_bits()
    return _ret
  @usage_bits.setter
  def usage_bits(self,  value:'int'):
    self.set_usage_bits(value)
  @property
  def is_resolve_buffer(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_is_resolve_buffer()
    return _ret
  @is_resolve_buffer.setter
  def is_resolve_buffer(self,  value:'bool'):
    self.set_is_resolve_buffer(value)
  @property
  def is_discardable(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_is_discardable()
    return _ret
  @is_discardable.setter
  def is_discardable(self,  value:'bool'):
    self.set_is_discardable(value)
  @functools.native_method
  def set_format(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__format = p_member






    self._ptr.call_with_return(53,tuple([p_member]))

  @functools.native_method
  def get_format(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_width(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__width = p_member






    self._ptr.call_with_return(55,tuple([p_member]))

  @functools.native_method
  def get_width(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_height(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__height = p_member






    self._ptr.call_with_return(57,tuple([p_member]))

  @functools.native_method
  def get_height(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_depth(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__depth = p_member






    self._ptr.call_with_return(59,tuple([p_member]))

  @functools.native_method
  def get_depth(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_array_layers(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__array_layers = p_member






    self._ptr.call_with_return(61,tuple([p_member]))

  @functools.native_method
  def get_array_layers(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def set_mipmaps(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__mipmaps = p_member






    self._ptr.call_with_return(63,tuple([p_member]))

  @functools.native_method
  def get_mipmaps(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([]))

    return _ret


  @functools.native_method
  def set_texture_type(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__texture_type = p_member






    self._ptr.call_with_return(65,tuple([p_member]))

  @functools.native_method
  def get_texture_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(66,tuple([]))

    return _ret


  @functools.native_method
  def set_samples(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__samples = p_member






    self._ptr.call_with_return(67,tuple([p_member]))

  @functools.native_method
  def get_samples(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(68,tuple([]))

    return _ret


  @functools.native_method
  def set_usage_bits(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__usage_bits = p_member






    self._ptr.call_with_return(69,tuple([p_member]))

  @functools.native_method
  def get_usage_bits(self) -> typing.Union[int]:
    r''''''




    _ret
    _ret = self._ptr.call_with_return(70,tuple([]))

    return _ret


  @functools.native_method
  def set_is_resolve_buffer(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__is_resolve_buffer = p_member






    self._ptr.call_with_return(71,tuple([p_member]))

  @functools.native_method
  def get_is_resolve_buffer(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(72,tuple([]))

    return _ret


  @functools.native_method
  def set_is_discardable(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__is_discardable = p_member






    self._ptr.call_with_return(73,tuple([p_member]))

  @functools.native_method
  def get_is_discardable(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(74,tuple([]))

    return _ret


  @functools.native_method
  def add_shareable_format(self, format:'int'  ) -> None:
    r'''
				Adds `format` as a valid format for the corresponding `RDTextureView`'s `RDTextureView.format_override` property. If any format is added as shareable, then the main `format` must also be added.
			'''

    assert isinstance(format, (int, float)), 'format must be int or float'






    self._ptr.call_with_return(75,tuple([format]))

  @functools.native_method
  def remove_shareable_format(self, format:'int'  ) -> None:
    r'''
				Removes `format` from the list of valid formats that the corresponding `RDTextureView`'s `RDTextureView.format_override` property can be set to.
			'''

    assert isinstance(format, (int, float)), 'format must be int or float'






    self._ptr.call_with_return(76,tuple([format]))


register_cast_function('RDTextureFormat', RDTextureFormat.cast)
register_class('RDTextureFormat', RDTextureFormat)
