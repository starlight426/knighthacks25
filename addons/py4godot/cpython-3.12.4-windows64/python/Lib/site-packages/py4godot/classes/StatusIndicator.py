# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Node as py4godot_node 
from py4godot.wrappers.wrappers import CPPStatusIndicatorWrapper


class StatusIndicator(py4godot_node.Node):
  r'''
'''

  @staticmethod
  def constructor():
    class_ = StatusIndicator.construct_without_init()
    class_._ptr = constructor(786,0, ())
    return class_
  @staticmethod
  def new():
    class_ = StatusIndicator.construct_without_init()
    class_._ptr = constructor(786,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPStatusIndicatorWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(786,0, ())


  def generate_wrapper(self):
    return CPPStatusIndicatorWrapper()
  def init_signals(self):
    super().init_signals()
    pressed_name = utils.py_string_to_string_name("pressed")
    self.pressed = signals.BuiltinSignal(self, pressed_name)

  @staticmethod
  def construct_without_init():
    cls = StatusIndicator.__new__(StatusIndicator)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'StatusIndicator'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = StatusIndicator.construct_without_init()
    cls._ptr = CPPStatusIndicatorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = StatusIndicator.construct_without_init()
    cls._ptr = CPPStatusIndicatorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def tooltip(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_tooltip()
    return _ret
  @tooltip.setter
  def tooltip(self,  value:'str'):
    self.set_tooltip(value)
  @property
  def icon(self) -> typing.Any:
    r''''''
    _ret = self. get_icon()
    return _ret
  @icon.setter
  def icon(self,  value:'py4godot_object.Object'):
    self.set_icon(value)
  @property
  def menu(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_menu()
    return _ret
  @menu.setter
  def menu(self,  value:'object'):
    self.set_menu(value)
  @property
  def visible(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_visible()
    return _ret
  @visible.setter
  def visible(self,  value:'bool'):
    self.set_visible(value)
  @functools.native_method
  def set_tooltip(self, tooltip:'str'   ) -> None:
    r''''''

    assert(not tooltip is None)
    assert isinstance(tooltip, (str, String)), 'tooltip must be str or String'

    self.py__tooltip = tooltip



    assert(isinstance(tooltip, (str, String)))
    py_string_tooltip = tooltip if isinstance(tooltip, StringName) else c_utils.py_string_to_string(tooltip)

    py__string_tooltip = utils.py_string_to_string(tooltip)
    py__string_tooltip.shouldBeDeleted = False


    self._ptr.call_with_return(180,tuple([py__string_tooltip._ptr]))

  @functools.native_method
  def get_tooltip(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(181,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_icon(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__icon = texture






    self._ptr.call_with_return(182,tuple([texture._ptr]))

  @functools.native_method
  def get_icon(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(183,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_visible(self, visible:'bool'   ) -> None:
    r''''''

    assert isinstance(visible, bool), 'visible must be bool'

    self.py__visible = visible






    self._ptr.call_with_return(184,tuple([visible]))

  @functools.native_method
  def is_visible(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(185,tuple([]))

    return _ret


  @functools.native_method
  def set_menu(self, menu:'object'   ) -> None:
    r''''''

    assert(not menu is None)
    assert isinstance(menu, (str, NodePath)), 'menu must be str or NodePath'

    self.py__menu = menu



    assert(isinstance(menu, (str, NodePath)))
    py_nodepath_menu = menu if isinstance(menu,NodePath) else NodePath.new2(menu)


    self._ptr.call_with_return(186,tuple([py_nodepath_menu._ptr]))

  @functools.native_method
  def get_menu(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(187,tuple([]))

    return _ret


  @functools.native_method
  def get_rect(self) -> typing.Union['Rect2']:
    r'''
				Returns the status indicator rectangle in screen coordinates. If this status indicator is not visible, returns an empty `Rect2`.
			'''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(188,tuple([]))
    return _ret



register_cast_function('StatusIndicator', StatusIndicator.cast)
register_class('StatusIndicator', StatusIndicator)
