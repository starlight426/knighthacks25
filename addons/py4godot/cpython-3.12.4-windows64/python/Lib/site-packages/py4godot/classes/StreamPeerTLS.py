# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.StreamPeerBuffer as py4godot_streampeerbuffer 
  import py4godot.classes.TLSOptions as py4godot_tlsoptions 
  import py4godot.classes.StreamPeerExtension as py4godot_streampeerextension 
  import py4godot.classes.StreamPeerTCP as py4godot_streampeertcp 
  import py4godot.classes.StreamPeerGZIP as py4godot_streampeergzip 
import py4godot.classes.StreamPeer as py4godot_streampeer 
from py4godot.wrappers.wrappers import CPPStreamPeerTLSWrapper

class Status:
  STATUS_DISCONNECTED = 0
  STATUS_HANDSHAKING = 1
  STATUS_CONNECTED = 2
  STATUS_ERROR = 3
  STATUS_ERROR_HOSTNAME_MISMATCH = 4


class StreamPeerTLS(py4godot_streampeer.StreamPeer):
  r'''
		A stream peer that handles TLS connections. This object can be used to connect to a TLS server or accept a single TLS client connection.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	'''

  @staticmethod
  def constructor():
    class_ = StreamPeerTLS.construct_without_init()
    class_._ptr = constructor(792,0, ())
    return class_
  @staticmethod
  def new():
    class_ = StreamPeerTLS.construct_without_init()
    class_._ptr = constructor(792,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPStreamPeerTLSWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(792,0, ())


  def generate_wrapper(self):
    return CPPStreamPeerTLSWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = StreamPeerTLS.__new__(StreamPeerTLS)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'StreamPeerTLS'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = StreamPeerTLS.construct_without_init()
    cls._ptr = CPPStreamPeerTLSWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = StreamPeerTLS.construct_without_init()
    cls._ptr = CPPStreamPeerTLSWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def poll(self) -> None:
    r'''
				Poll the connection to check for incoming bytes. Call this right before `StreamPeer.get_available_bytes` for it to work properly.
			'''




    self._ptr.call_with_return(88,tuple([]))

  @functools.native_method
  def accept_stream(self, stream:'py4godot_streampeer.StreamPeer'   , server_options:'py4godot_tlsoptions.TLSOptions'   ) -> typing.Union[int]:
    r'''
				Accepts a peer connection as a server using the given `server_options`. See `TLSOptions.server`.
			'''

    assert(not stream is None)
    assert isinstance(stream, get_class('StreamPeer')), 'stream must be StreamPeer'
    assert(not server_options is None)
    assert isinstance(server_options, get_class('TLSOptions')), 'server_options must be TLSOptions'







    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([stream._ptr, server_options._ptr]))
    return _ret


  @functools.native_method
  def connect_to_stream(self, stream:'py4godot_streampeer.StreamPeer'   , common_name:'str'   , client_options:'py4godot_tlsoptions.TLSOptions' = None  ) -> typing.Union[int]:
    r'''
				Connects to a peer using an underlying `StreamPeer` `stream` and verifying the remote certificate is correctly signed for the given `common_name`. You can pass the optional `client_options` parameter to customize the trusted certification authorities, or disable the common name verification. See `TLSOptions.client` and `TLSOptions.client_unsafe`.
			'''
    if client_options is None:
      client_options = c_utils.empty_object
    if client_options is None:
      client_options = c_utils.empty_object

    assert(not stream is None)
    assert isinstance(stream, get_class('StreamPeer')), 'stream must be StreamPeer'
    assert(not common_name is None)
    assert isinstance(common_name, (str, String)), 'common_name must be str or String'





    assert(isinstance(common_name, (str, String)))
    py_string_common_name = common_name if isinstance(common_name, StringName) else c_utils.py_string_to_string(common_name)


    _ret:int
    _ret = self._ptr.call_with_return(90,tuple([stream._ptr, py_string_common_name._ptr, client_options._ptr]))
    return _ret


  @functools.native_method
  def get_status(self) -> typing.Union[int]:
    r'''
				Returns the status of the connection.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(91,tuple([]))
    return _ret


  @functools.native_method
  def get_stream(self) -> typing.Any:
    r'''
				Returns the underlying `StreamPeer` connection, used in `accept_stream` or `connect_to_stream`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: StreamPeer
    _ret._ptr = self._ptr.call_with_return(92,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def disconnect_from_stream(self) -> None:
    r'''
				Disconnects from host.
			'''




    self._ptr.call_with_return(93,tuple([]))


register_cast_function('StreamPeerTLS', StreamPeerTLS.cast)
register_class('StreamPeerTLS', StreamPeerTLS)
