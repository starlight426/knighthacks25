# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderSceneBuffersConfiguration as py4godot_renderscenebuffersconfiguration 
import py4godot.classes.RenderSceneBuffers as py4godot_renderscenebuffers 
from py4godot.wrappers.wrappers import CPPRenderSceneBuffersExtensionWrapper


class RenderSceneBuffersExtension(py4godot_renderscenebuffers.RenderSceneBuffers):
  r'''
		This class allows for a RenderSceneBuffer implementation to be made in GDExtension.
	'''

  @staticmethod
  def constructor():
    class_ = RenderSceneBuffersExtension.construct_without_init()
    class_._ptr = constructor(678,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RenderSceneBuffersExtension.construct_without_init()
    class_._ptr = constructor(678,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRenderSceneBuffersExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(678,0, ())


  def generate_wrapper(self):
    return CPPRenderSceneBuffersExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RenderSceneBuffersExtension.__new__(RenderSceneBuffersExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RenderSceneBuffersExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderSceneBuffersExtension.construct_without_init()
    cls._ptr = CPPRenderSceneBuffersExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderSceneBuffersExtension.construct_without_init()
    cls._ptr = CPPRenderSceneBuffersExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _configure(self, config:'py4godot_renderscenebuffersconfiguration.RenderSceneBuffersConfiguration'   ) -> None:
    r'''
				Implement this in GDExtension to handle the (re)sizing of a viewport.
			'''

    assert(not config is None)
    assert isinstance(config, get_class('RenderSceneBuffersConfiguration')), 'config must be RenderSceneBuffersConfiguration'






    self._ptr.call_with_return(54,tuple([config._ptr]))

  @functools.native_method
  def _set_fsr_sharpness(self, fsr_sharpness:'float'   ) -> None:
    r'''
				Implement this in GDExtension to record a new FSR sharpness value.
			'''

    assert isinstance(fsr_sharpness, (int, float)), 'fsr_sharpness must be int or float'






    self._ptr.call_with_return(55,tuple([fsr_sharpness]))

  @functools.native_method
  def _set_texture_mipmap_bias(self, texture_mipmap_bias:'float'   ) -> None:
    r'''
				Implement this in GDExtension to change the texture mipmap bias.
			'''

    assert isinstance(texture_mipmap_bias, (int, float)), 'texture_mipmap_bias must be int or float'






    self._ptr.call_with_return(56,tuple([texture_mipmap_bias]))

  @functools.native_method
  def _set_anisotropic_filtering_level(self, anisotropic_filtering_level:'int'   ) -> None:
    r'''
				Implement this in GDExtension to change the anisotropic filtering level.
			'''

    assert isinstance(anisotropic_filtering_level, (int, float)), 'anisotropic_filtering_level must be int or float'






    self._ptr.call_with_return(57,tuple([anisotropic_filtering_level]))

  @functools.native_method
  def _set_use_debanding(self, use_debanding:'bool'   ) -> None:
    r'''
				Implement this in GDExtension to react to the debanding flag changing.
			'''

    assert isinstance(use_debanding, bool), 'use_debanding must be bool'






    self._ptr.call_with_return(58,tuple([use_debanding]))


register_cast_function('RenderSceneBuffersExtension', RenderSceneBuffersExtension.cast)
register_class('RenderSceneBuffersExtension', RenderSceneBuffersExtension)
