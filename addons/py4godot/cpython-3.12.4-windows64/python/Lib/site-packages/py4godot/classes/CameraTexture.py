# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CameraServer as py4godot_cameraserver 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPCameraTextureWrapper


class CameraTexture(py4godot_texture2d.Texture2D):
  r'''
		This texture gives access to the camera texture provided by a `CameraFeed`.
		**Note:** Many cameras supply YCbCr images which need to be converted in a shader.
	'''

  @staticmethod
  def constructor():
    class_ = CameraTexture.construct_without_init()
    class_._ptr = constructor(195,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CameraTexture.construct_without_init()
    class_._ptr = constructor(195,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCameraTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(195,0, ())


  def generate_wrapper(self):
    return CPPCameraTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CameraTexture.__new__(CameraTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CameraTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CameraTexture.construct_without_init()
    cls._ptr = CPPCameraTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CameraTexture.construct_without_init()
    cls._ptr = CPPCameraTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def camera_feed_id(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_camera_feed_id()
    return _ret
  @camera_feed_id.setter
  def camera_feed_id(self,  value:'int'):
    self.set_camera_feed_id(value)
  @property
  def which_feed(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_which_feed()
    return _ret
  @which_feed.setter
  def which_feed(self,  value:'int'):
    self.set_which_feed(value)
  @property
  def camera_is_active(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_camera_active()
    return _ret
  @camera_is_active.setter
  def camera_is_active(self,  value:'bool'):
    self.set_camera_active(value)
  @functools.native_method
  def set_camera_feed_id(self, feed_id:'int'   ) -> None:
    r''''''

    assert isinstance(feed_id, (int, float)), 'feed_id must be int or float'

    self.py__camera_feed_id = feed_id






    self._ptr.call_with_return(93,tuple([feed_id]))

  @functools.native_method
  def get_camera_feed_id(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_which_feed(self, which_feed:'int'  ) -> None:
    r''''''

    assert isinstance(which_feed, (int, float)), 'which_feed must be int or float'

    self.py__which_feed = which_feed






    self._ptr.call_with_return(95,tuple([which_feed]))

  @functools.native_method
  def get_which_feed(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_camera_active(self, active:'bool'   ) -> None:
    r''''''

    assert isinstance(active, bool), 'active must be bool'

    self.py__camera_is_active = active






    self._ptr.call_with_return(97,tuple([active]))

  @functools.native_method
  def get_camera_active(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([]))

    return _ret



register_cast_function('CameraTexture', CameraTexture.cast)
register_class('CameraTexture', CameraTexture)
