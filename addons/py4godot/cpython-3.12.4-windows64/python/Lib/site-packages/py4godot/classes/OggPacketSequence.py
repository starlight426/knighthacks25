# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ArrayTypedArray as py4godot_arraytypedarray 
import py4godot.classes.Resource as py4godot_resource 
import py4godot.classes.ArrayTypedArray as py4godot_arraytypedarray 
from py4godot.wrappers.wrappers import CPPOggPacketSequenceWrapper


class OggPacketSequence(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = OggPacketSequence.construct_without_init()
    class_._ptr = constructor(528,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OggPacketSequence.construct_without_init()
    class_._ptr = constructor(528,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOggPacketSequenceWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(528,0, ())


  def generate_wrapper(self):
    return CPPOggPacketSequenceWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OggPacketSequence.__new__(OggPacketSequence)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OggPacketSequence'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OggPacketSequence.construct_without_init()
    cls._ptr = CPPOggPacketSequenceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OggPacketSequence.construct_without_init()
    cls._ptr = CPPOggPacketSequenceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def packet_data(self) -> typing.Union['py4godot_packedbytearraytypedarray.PackedByteArrayTypedArray']:
    r''''''
    _ret = self. get_packet_data()
    return _ret
  @packet_data.setter
  def packet_data(self, value:'Array'):
    self.set_packet_data(value)
  @property
  def granule_positions(self) -> typing.Union['PackedInt64Array']:
    r''''''
    _ret = self. get_packet_granule_positions()
    return _ret
  @granule_positions.setter
  def granule_positions(self,  value:'PackedInt64Array'):
    self.set_packet_granule_positions(value)
  @property
  def sampling_rate(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_sampling_rate()
    return _ret
  @sampling_rate.setter
  def sampling_rate(self,  value:'float'):
    self.set_sampling_rate(value)
  @functools.native_method
  def set_packet_data(self, packet_data:'py4godot_arraytypedarray.ArrayTypedArray'   ) -> None:
    r''''''

    assert isinstance(packet_data, get_class('ArrayTypedArray')), 'packet_data must be ArrayTypedArray'

    self.py__packet_data = packet_data






    self._ptr.call_with_return(77,tuple([packet_data._ptr]))

  @functools.native_method
  def get_packet_data(self) -> typing.Union['py4godot_arraytypedarray.ArrayTypedArray']:
    r''''''




    _ret = py4godot_arraytypedarray.ArrayTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_packet_granule_positions(self, granule_positions:'PackedInt64Array'   ) -> None:
    r''''''

    assert(not granule_positions is None)
    assert isinstance(granule_positions, PackedInt64Array), 'granule_positions must be PackedInt64Array'

    self.py__granule_positions = granule_positions






    self._ptr.call_with_return(79,tuple([granule_positions._ptr]))

  @functools.native_method
  def get_packet_granule_positions(self) -> typing.Union['PackedInt64Array']:
    r''''''




    _ret = PackedInt64Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_sampling_rate(self, sampling_rate:'float'   ) -> None:
    r''''''

    assert isinstance(sampling_rate, (int, float)), 'sampling_rate must be int or float'

    self.py__sampling_rate = sampling_rate






    self._ptr.call_with_return(81,tuple([sampling_rate]))

  @functools.native_method
  def get_sampling_rate(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def get_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))
    return _ret



register_cast_function('OggPacketSequence', OggPacketSequence.cast)
register_class('OggPacketSequence', OggPacketSequence)
