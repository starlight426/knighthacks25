# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ButtonGroup as py4godot_buttongroup 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.Shortcut as py4godot_shortcut 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
import py4godot.classes.Control as py4godot_control 
from py4godot.wrappers.wrappers import CPPBaseButtonWrapper

class DrawMode:
  DRAW_NORMAL = 0
  DRAW_PRESSED = 1
  DRAW_HOVER = 2
  DRAW_DISABLED = 3
  DRAW_HOVER_PRESSED = 4
class ActionMode:
  ACTION_MODE_BUTTON_PRESS = 0
  ACTION_MODE_BUTTON_RELEASE = 1


class BaseButton(py4godot_control.Control):
  r'''
		`BaseButton` is an abstract base class for GUI buttons. It doesn't display anything by itself.
	'''

  @staticmethod
  def constructor():
    class_ = BaseButton.construct_without_init()
    class_._ptr = constructor(163,0, ())
    return class_
  @staticmethod
  def new():
    class_ = BaseButton.construct_without_init()
    class_._ptr = constructor(163,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPBaseButtonWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(163,0, ())


  def generate_wrapper(self):
    return CPPBaseButtonWrapper()
  def init_signals(self):
    super().init_signals()
    pressed_name = utils.py_string_to_string_name("pressed")
    self.pressed = signals.BuiltinSignal(self, pressed_name)
    button_up_name = utils.py_string_to_string_name("button_up")
    self.button_up = signals.BuiltinSignal(self, button_up_name)
    button_down_name = utils.py_string_to_string_name("button_down")
    self.button_down = signals.BuiltinSignal(self, button_down_name)
    toggled_name = utils.py_string_to_string_name("toggled")
    self.toggled = signals.BuiltinSignal(self, toggled_name)

  @staticmethod
  def construct_without_init():
    cls = BaseButton.__new__(BaseButton)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'BaseButton'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = BaseButton.construct_without_init()
    cls._ptr = CPPBaseButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = BaseButton.construct_without_init()
    cls._ptr = CPPBaseButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def disabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_disabled()
    return _ret
  @disabled.setter
  def disabled(self,  value:'bool'):
    self.set_disabled(value)
  @property
  def toggle_mode(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_toggle_mode()
    return _ret
  @toggle_mode.setter
  def toggle_mode(self,  value:'bool'):
    self.set_toggle_mode(value)
  @property
  def button_pressed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_pressed()
    return _ret
  @button_pressed.setter
  def button_pressed(self,  value:'bool'):
    self.set_pressed(value)
  @property
  def action_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_action_mode()
    return _ret
  @action_mode.setter
  def action_mode(self,  value:'int'):
    self.set_action_mode(value)
  @property
  def button_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_button_mask()
    return _ret
  @button_mask.setter
  def button_mask(self,  value:'int'):
    self.set_button_mask(value)
  @property
  def keep_pressed_outside(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_keep_pressed_outside()
    return _ret
  @keep_pressed_outside.setter
  def keep_pressed_outside(self,  value:'bool'):
    self.set_keep_pressed_outside(value)
  @property
  def button_group(self) -> typing.Union['py4godot_buttongroup.ButtonGroup']:
    r''''''
    _ret = self. get_button_group()
    return _ret
  @button_group.setter
  def button_group(self,  value:'py4godot_object.Object'):
    self.set_button_group(value)
  @property
  def shortcut(self) -> typing.Union['py4godot_shortcut.Shortcut']:
    r''''''
    _ret = self. get_shortcut()
    return _ret
  @shortcut.setter
  def shortcut(self,  value:'py4godot_object.Object'):
    self.set_shortcut(value)
  @property
  def shortcut_feedback(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_shortcut_feedback()
    return _ret
  @shortcut_feedback.setter
  def shortcut_feedback(self,  value:'bool'):
    self.set_shortcut_feedback(value)
  @property
  def shortcut_in_tooltip(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_shortcut_in_tooltip_enabled()
    return _ret
  @shortcut_in_tooltip.setter
  def shortcut_in_tooltip(self,  value:'bool'):
    self.set_shortcut_in_tooltip(value)
  @functools.native_method
  def _pressed(self) -> None:
    r'''
				Called when the button is pressed. If you need to know the button's pressed state (and `toggle_mode` is active), use `_toggled` instead.
			'''




    self._ptr.call_with_return(433,tuple([]))

  @functools.native_method
  def _toggled(self, toggled_on:'bool'   ) -> None:
    r'''
				Called when the button is toggled (only if `toggle_mode` is active).
			'''

    assert isinstance(toggled_on, bool), 'toggled_on must be bool'






    self._ptr.call_with_return(434,tuple([toggled_on]))

  @functools.native_method
  def set_pressed(self, pressed:'bool'   ) -> None:
    r''''''

    assert isinstance(pressed, bool), 'pressed must be bool'

    self.py__button_pressed = pressed






    self._ptr.call_with_return(435,tuple([pressed]))

  @functools.native_method
  def is_pressed(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(436,tuple([]))

    return _ret


  @functools.native_method
  def set_pressed_no_signal(self, pressed:'bool'   ) -> None:
    r'''
				Changes the `button_pressed` state of the button, without emitting `signal toggled`. Use when you just want to change the state of the button without sending the pressed event (e.g. when initializing scene). Only works if `toggle_mode` is `true`.
				**Note:** This method doesn't unpress other buttons in `button_group`.
			'''

    assert isinstance(pressed, bool), 'pressed must be bool'






    self._ptr.call_with_return(437,tuple([pressed]))

  @functools.native_method
  def is_hovered(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the mouse has entered the button and has not left it yet.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(438,tuple([]))
    return _ret


  @functools.native_method
  def set_toggle_mode(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__toggle_mode = enabled






    self._ptr.call_with_return(439,tuple([enabled]))

  @functools.native_method
  def is_toggle_mode(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(440,tuple([]))

    return _ret


  @functools.native_method
  def set_shortcut_in_tooltip(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__shortcut_in_tooltip = enabled






    self._ptr.call_with_return(441,tuple([enabled]))

  @functools.native_method
  def is_shortcut_in_tooltip_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(442,tuple([]))

    return _ret


  @functools.native_method
  def set_disabled(self, disabled:'bool'   ) -> None:
    r''''''

    assert isinstance(disabled, bool), 'disabled must be bool'

    self.py__disabled = disabled






    self._ptr.call_with_return(443,tuple([disabled]))

  @functools.native_method
  def is_disabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(444,tuple([]))

    return _ret


  @functools.native_method
  def set_action_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__action_mode = mode






    self._ptr.call_with_return(445,tuple([mode]))

  @functools.native_method
  def get_action_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(446,tuple([]))

    return _ret


  @functools.native_method
  def set_button_mask(self, mask:'int'   ) -> None:
    r''''''

    assert isinstance(mask, get_class('bitfield::MouseButtonMask')), 'mask must be bitfield::MouseButtonMask'

    self.py__button_mask = mask






    self._ptr.call_with_return(447,tuple([mask]))

  @functools.native_method
  def get_button_mask(self) -> typing.Union[int]:
    r''''''




    _ret
    _ret = self._ptr.call_with_return(448,tuple([]))

    return _ret


  @functools.native_method
  def get_draw_mode(self) -> typing.Union[int]:
    r'''
				Returns the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to "draw" signal. The visual state of the button is defined by the `enum DrawMode` enum.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(449,tuple([]))
    return _ret


  @functools.native_method
  def set_keep_pressed_outside(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__keep_pressed_outside = enabled






    self._ptr.call_with_return(450,tuple([enabled]))

  @functools.native_method
  def is_keep_pressed_outside(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(451,tuple([]))

    return _ret


  @functools.native_method
  def set_shortcut_feedback(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__shortcut_feedback = enabled






    self._ptr.call_with_return(452,tuple([enabled]))

  @functools.native_method
  def is_shortcut_feedback(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(453,tuple([]))

    return _ret


  @functools.native_method
  def set_shortcut(self, shortcut:'py4godot_shortcut.Shortcut'   ) -> None:
    r''''''

    assert(not shortcut is None)
    assert isinstance(shortcut, get_class('Shortcut')), 'shortcut must be Shortcut'

    self.py__shortcut = shortcut






    self._ptr.call_with_return(454,tuple([shortcut._ptr]))

  @functools.native_method
  def get_shortcut(self) -> typing.Union['py4godot_shortcut.Shortcut']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Shortcut
    _ret._ptr = self._ptr.call_with_return(455,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_button_group(self, button_group:'py4godot_buttongroup.ButtonGroup'   ) -> None:
    r''''''

    assert(not button_group is None)
    assert isinstance(button_group, get_class('ButtonGroup')), 'button_group must be ButtonGroup'

    self.py__button_group = button_group






    self._ptr.call_with_return(456,tuple([button_group._ptr]))

  @functools.native_method
  def get_button_group(self) -> typing.Union['py4godot_buttongroup.ButtonGroup']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ButtonGroup
    _ret._ptr = self._ptr.call_with_return(457,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('BaseButton', BaseButton.cast)
register_class('BaseButton', BaseButton)
