# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPOpenXRFutureResultWrapper

class ResultStatus:
  RESULT_RUNNING = 0
  RESULT_FINISHED = 1
  RESULT_CANCELLED = 2


class OpenXRFutureResult(py4godot_refcounted.RefCounted):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRFutureResult.construct_without_init()
    class_._ptr = constructor(547,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRFutureResult.construct_without_init()
    class_._ptr = constructor(547,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRFutureResultWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(547,0, ())


  def generate_wrapper(self):
    return CPPOpenXRFutureResultWrapper()
  def init_signals(self):
    super().init_signals()
    completed_name = utils.py_string_to_string_name("completed")
    self.completed = signals.BuiltinSignal(self, completed_name)

  @staticmethod
  def construct_without_init():
    cls = OpenXRFutureResult.__new__(OpenXRFutureResult)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRFutureResult'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRFutureResult.construct_without_init()
    cls._ptr = CPPOpenXRFutureResultWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRFutureResult.construct_without_init()
    cls._ptr = CPPOpenXRFutureResultWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_status(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def get_future(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def cancel_future(self) -> None:
    r''''''




    self._ptr.call_with_return(55,tuple([]))

  @functools.native_method
  def set_result_value(self, result_value:'object'   ) -> None:
    r''''''

    






    self._ptr.call_with_return(56,tuple([result_value]))

  @functools.native_method
  def get_result_value(self) -> typing.Union[typing.Any]:
    r''''''




    _ret = None
    _ret = self._ptr.call_with_return(57,tuple([]))
    return _ret



register_cast_function('OpenXRFutureResult', OpenXRFutureResult.cast)
register_class('OpenXRFutureResult', OpenXRFutureResult)
