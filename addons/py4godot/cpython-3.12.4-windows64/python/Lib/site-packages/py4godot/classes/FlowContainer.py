# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
import py4godot.classes.Container as py4godot_container 
from py4godot.wrappers.wrappers import CPPFlowContainerWrapper

class AlignmentMode:
  ALIGNMENT_BEGIN = 0
  ALIGNMENT_CENTER = 1
  ALIGNMENT_END = 2
class LastWrapAlignmentMode:
  LAST_WRAP_ALIGNMENT_INHERIT = 0
  LAST_WRAP_ALIGNMENT_BEGIN = 1
  LAST_WRAP_ALIGNMENT_CENTER = 2
  LAST_WRAP_ALIGNMENT_END = 3


class FlowContainer(py4godot_container.Container):
  r'''
		A container that arranges its child controls horizontally or vertically and wraps them around at the borders. This is similar to how text in a book wraps around when no more words can fit on a line.
	'''

  @staticmethod
  def constructor():
    class_ = FlowContainer.construct_without_init()
    class_._ptr = constructor(332,0, ())
    return class_
  @staticmethod
  def new():
    class_ = FlowContainer.construct_without_init()
    class_._ptr = constructor(332,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPFlowContainerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(332,0, ())


  def generate_wrapper(self):
    return CPPFlowContainerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = FlowContainer.__new__(FlowContainer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'FlowContainer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = FlowContainer.construct_without_init()
    cls._ptr = CPPFlowContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = FlowContainer.construct_without_init()
    cls._ptr = CPPFlowContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def alignment(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_alignment()
    return _ret
  @alignment.setter
  def alignment(self,  value:'int'):
    self.set_alignment(value)
  @property
  def last_wrap_alignment(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_last_wrap_alignment()
    return _ret
  @last_wrap_alignment.setter
  def last_wrap_alignment(self,  value:'int'):
    self.set_last_wrap_alignment(value)
  @property
  def vertical(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_vertical()
    return _ret
  @vertical.setter
  def vertical(self,  value:'bool'):
    self.set_vertical(value)
  @property
  def reverse_fill(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_reverse_fill()
    return _ret
  @reverse_fill.setter
  def reverse_fill(self,  value:'bool'):
    self.set_reverse_fill(value)
  @functools.native_method
  def get_line_count(self) -> typing.Union[int]:
    r'''
				Returns the current line count.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(437,tuple([]))
    return _ret


  @functools.native_method
  def set_alignment(self, alignment:'int'  ) -> None:
    r''''''

    assert isinstance(alignment, (int, float)), 'alignment must be int or float'

    self.py__alignment = alignment






    self._ptr.call_with_return(438,tuple([alignment]))

  @functools.native_method
  def get_alignment(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(439,tuple([]))

    return _ret


  @functools.native_method
  def set_last_wrap_alignment(self, last_wrap_alignment:'int'  ) -> None:
    r''''''

    assert isinstance(last_wrap_alignment, (int, float)), 'last_wrap_alignment must be int or float'

    self.py__last_wrap_alignment = last_wrap_alignment






    self._ptr.call_with_return(440,tuple([last_wrap_alignment]))

  @functools.native_method
  def get_last_wrap_alignment(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(441,tuple([]))

    return _ret


  @functools.native_method
  def set_vertical(self, vertical:'bool'   ) -> None:
    r''''''

    assert isinstance(vertical, bool), 'vertical must be bool'

    self.py__vertical = vertical






    self._ptr.call_with_return(442,tuple([vertical]))

  @functools.native_method
  def is_vertical(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(443,tuple([]))

    return _ret


  @functools.native_method
  def set_reverse_fill(self, reverse_fill:'bool'   ) -> None:
    r''''''

    assert isinstance(reverse_fill, bool), 'reverse_fill must be bool'

    self.py__reverse_fill = reverse_fill






    self._ptr.call_with_return(444,tuple([reverse_fill]))

  @functools.native_method
  def is_reverse_fill(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(445,tuple([]))

    return _ret



register_cast_function('FlowContainer', FlowContainer.cast)
register_class('FlowContainer', FlowContainer)
