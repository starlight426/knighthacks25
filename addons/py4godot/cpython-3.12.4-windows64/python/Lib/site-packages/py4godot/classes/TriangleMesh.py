# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPTriangleMeshWrapper


class TriangleMesh(py4godot_refcounted.RefCounted):
  r'''
		Creates a bounding volume hierarchy (BVH) tree structure around triangle geometry.
		The triangle BVH tree can be used for efficient intersection queries without involving a physics engine.
		For example, this can be used in editor tools to select objects with complex shapes based on the mouse cursor position.
		**Performance:** Creating the BVH tree for complex geometry is a slow process and best done in a background thread.
	'''

  @staticmethod
  def constructor():
    class_ = TriangleMesh.construct_without_init()
    class_._ptr = constructor(851,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TriangleMesh.construct_without_init()
    class_._ptr = constructor(851,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTriangleMeshWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(851,0, ())


  def generate_wrapper(self):
    return CPPTriangleMeshWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = TriangleMesh.__new__(TriangleMesh)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TriangleMesh'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TriangleMesh.construct_without_init()
    cls._ptr = CPPTriangleMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TriangleMesh.construct_without_init()
    cls._ptr = CPPTriangleMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def create_from_faces(self, faces:'PackedVector3Array'   ) -> typing.Union[bool]:
    r'''
				Creates the BVH tree from an array of faces. Each 3 vertices of the input `faces` array represent one triangle (face).
				Returns `true` if the tree is successfully built, `false` otherwise.
			'''

    assert(not faces is None)
    assert isinstance(faces, PackedVector3Array), 'faces must be PackedVector3Array'






    _ret = 0
    _ret = self._ptr.call_with_return(53,tuple([faces._ptr]))
    return _ret


  @functools.native_method
  def get_faces(self) -> typing.Union['PackedVector3Array']:
    r'''
				Returns a copy of the geometry faces. Each 3 vertices of the array represent one triangle (face).
			'''




    _ret = PackedVector3Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def intersect_segment(self, begin:'Vector3'   , end:'Vector3'   ) -> typing.Union['Dictionary']:
    r'''
				Tests for intersection with a segment going from `begin` to `end`.
				If an intersection with a triangle happens returns a `Dictionary` with the following fields:
				`position`: The position on the intersected triangle.
				`normal`: The normal of the intersected triangle.
				`face_index`: The index of the intersected triangle.
				Returns an empty `Dictionary` if no intersection happens.
				See also `intersect_ray`, which is similar but uses an infinite-length ray.
			'''

    assert(not begin is None)
    assert isinstance(begin, Vector3), 'begin must be Vector3'
    assert(not end is None)
    assert isinstance(end, Vector3), 'end must be Vector3'







    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([begin._ptr, end._ptr]))
    return _ret


  @functools.native_method
  def intersect_ray(self, begin:'Vector3'   , dir:'Vector3'   ) -> typing.Union['Dictionary']:
    r'''
				Tests for intersection with a ray starting at `begin` and facing `dir` and extending toward infinity.
				If an intersection with a triangle happens, returns a `Dictionary` with the following fields:
				`position`: The position on the intersected triangle.
				`normal`: The normal of the intersected triangle.
				`face_index`: The index of the intersected triangle.
				Returns an empty `Dictionary` if no intersection happens.
				See also `intersect_segment`, which is similar but uses a finite-length segment.
			'''

    assert(not begin is None)
    assert isinstance(begin, Vector3), 'begin must be Vector3'
    assert(not dir is None)
    assert isinstance(dir, Vector3), 'dir must be Vector3'







    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([begin._ptr, dir._ptr]))
    return _ret



register_cast_function('TriangleMesh', TriangleMesh.cast)
register_class('TriangleMesh', TriangleMesh)
