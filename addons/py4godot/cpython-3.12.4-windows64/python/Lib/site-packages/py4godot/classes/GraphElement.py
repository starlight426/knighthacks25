# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Container as py4godot_container 
from py4godot.wrappers.wrappers import CPPGraphElementWrapper


class GraphElement(py4godot_container.Container):
  r'''
		`GraphElement` allows to create custom elements for a `GraphEdit` graph. By default such elements can be selected, resized, and repositioned, but they cannot be connected. For a graph element that allows for connections see `GraphNode`.
	'''

  @staticmethod
  def constructor():
    class_ = GraphElement.construct_without_init()
    class_._ptr = constructor(383,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GraphElement.construct_without_init()
    class_._ptr = constructor(383,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGraphElementWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(383,0, ())


  def generate_wrapper(self):
    return CPPGraphElementWrapper()
  def init_signals(self):
    super().init_signals()
    node_selected_name = utils.py_string_to_string_name("node_selected")
    self.node_selected = signals.BuiltinSignal(self, node_selected_name)
    node_deselected_name = utils.py_string_to_string_name("node_deselected")
    self.node_deselected = signals.BuiltinSignal(self, node_deselected_name)
    raise_request_name = utils.py_string_to_string_name("raise_request")
    self.raise_request = signals.BuiltinSignal(self, raise_request_name)
    delete_request_name = utils.py_string_to_string_name("delete_request")
    self.delete_request = signals.BuiltinSignal(self, delete_request_name)
    resize_request_name = utils.py_string_to_string_name("resize_request")
    self.resize_request = signals.BuiltinSignal(self, resize_request_name)
    resize_end_name = utils.py_string_to_string_name("resize_end")
    self.resize_end = signals.BuiltinSignal(self, resize_end_name)
    dragged_name = utils.py_string_to_string_name("dragged")
    self.dragged = signals.BuiltinSignal(self, dragged_name)
    position_offset_changed_name = utils.py_string_to_string_name("position_offset_changed")
    self.position_offset_changed = signals.BuiltinSignal(self, position_offset_changed_name)

  @staticmethod
  def construct_without_init():
    cls = GraphElement.__new__(GraphElement)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GraphElement'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GraphElement.construct_without_init()
    cls._ptr = CPPGraphElementWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GraphElement.construct_without_init()
    cls._ptr = CPPGraphElementWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def position_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_position_offset()
    return _ret
  @position_offset.setter
  def position_offset(self,  value:'Vector2'):
    self.set_position_offset(value)
  @property
  def resizable(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_resizable()
    return _ret
  @resizable.setter
  def resizable(self,  value:'bool'):
    self.set_resizable(value)
  @property
  def draggable(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_draggable()
    return _ret
  @draggable.setter
  def draggable(self,  value:'bool'):
    self.set_draggable(value)
  @property
  def selectable(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_selectable()
    return _ret
  @selectable.setter
  def selectable(self,  value:'bool'):
    self.set_selectable(value)
  @property
  def selected(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_selected()
    return _ret
  @selected.setter
  def selected(self,  value:'bool'):
    self.set_selected(value)
  @functools.native_method
  def set_resizable(self, resizable:'bool'   ) -> None:
    r''''''

    assert isinstance(resizable, bool), 'resizable must be bool'

    self.py__resizable = resizable






    self._ptr.call_with_return(437,tuple([resizable]))

  @functools.native_method
  def is_resizable(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(438,tuple([]))

    return _ret


  @functools.native_method
  def set_draggable(self, draggable:'bool'   ) -> None:
    r''''''

    assert isinstance(draggable, bool), 'draggable must be bool'

    self.py__draggable = draggable






    self._ptr.call_with_return(439,tuple([draggable]))

  @functools.native_method
  def is_draggable(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(440,tuple([]))

    return _ret


  @functools.native_method
  def set_selectable(self, selectable:'bool'   ) -> None:
    r''''''

    assert isinstance(selectable, bool), 'selectable must be bool'

    self.py__selectable = selectable






    self._ptr.call_with_return(441,tuple([selectable]))

  @functools.native_method
  def is_selectable(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(442,tuple([]))

    return _ret


  @functools.native_method
  def set_selected(self, selected:'bool'   ) -> None:
    r''''''

    assert isinstance(selected, bool), 'selected must be bool'

    self.py__selected = selected






    self._ptr.call_with_return(443,tuple([selected]))

  @functools.native_method
  def is_selected(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(444,tuple([]))

    return _ret


  @functools.native_method
  def set_position_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__position_offset = offset






    self._ptr.call_with_return(445,tuple([offset._ptr]))

  @functools.native_method
  def get_position_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(446,tuple([]))

    return _ret



register_cast_function('GraphElement', GraphElement.cast)
register_class('GraphElement', GraphElement)
