# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node as py4godot_node 
from py4godot.wrappers.wrappers import CPPMissingNodeWrapper


class MissingNode(py4godot_node.Node):
  r'''
		This is an internal editor class intended for keeping data of nodes of unknown type (most likely this type was supplied by an extension that is no longer loaded). It can't be manually instantiated or placed in a scene.
		**Warning:** Ignore missing nodes unless you know what you are doing. Existing properties on a missing node can be freely modified in code, regardless of the type they are intended to be.
	'''

  @staticmethod
  def constructor():
    class_ = MissingNode.construct_without_init()
    class_._ptr = constructor(478,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MissingNode.construct_without_init()
    class_._ptr = constructor(478,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMissingNodeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(478,0, ())


  def generate_wrapper(self):
    return CPPMissingNodeWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = MissingNode.__new__(MissingNode)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MissingNode'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MissingNode.construct_without_init()
    cls._ptr = CPPMissingNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MissingNode.construct_without_init()
    cls._ptr = CPPMissingNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def original_class(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_original_class()
    return _ret
  @original_class.setter
  def original_class(self,  value:'str'):
    self.set_original_class(value)
  @property
  def original_scene(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_original_scene()
    return _ret
  @original_scene.setter
  def original_scene(self,  value:'str'):
    self.set_original_scene(value)
  @property
  def recording_properties(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_recording_properties()
    return _ret
  @recording_properties.setter
  def recording_properties(self,  value:'bool'):
    self.set_recording_properties(value)
  @functools.native_method
  def set_original_class(self, name:'str'   ) -> None:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'

    self.py__original_class = name



    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    py__string_name = utils.py_string_to_string(name)
    py__string_name.shouldBeDeleted = False


    self._ptr.call_with_return(180,tuple([py__string_name._ptr]))

  @functools.native_method
  def get_original_class(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(181,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_original_scene(self, name:'str'   ) -> None:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'

    self.py__original_scene = name



    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    py__string_name = utils.py_string_to_string(name)
    py__string_name.shouldBeDeleted = False


    self._ptr.call_with_return(182,tuple([py__string_name._ptr]))

  @functools.native_method
  def get_original_scene(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(183,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_recording_properties(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__recording_properties = enable






    self._ptr.call_with_return(184,tuple([enable]))

  @functools.native_method
  def is_recording_properties(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(185,tuple([]))

    return _ret



register_cast_function('MissingNode', MissingNode.cast)
register_class('MissingNode', MissingNode)
