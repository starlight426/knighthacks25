# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Vector2iTypedArray as py4godot_vector2itypedarray 
import py4godot.classes.Vector2iTypedArray as py4godot_vector2itypedarray 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPTileMapPatternWrapper


class TileMapPattern(py4godot_resource.Resource):
  r'''
		This resource holds a set of cells to help bulk manipulations of `TileMap`.
		A pattern always starts at the `(0, 0)` coordinates and cannot have cells with negative coordinates.
	'''

  @staticmethod
  def constructor():
    class_ = TileMapPattern.construct_without_init()
    class_._ptr = constructor(837,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TileMapPattern.construct_without_init()
    class_._ptr = constructor(837,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTileMapPatternWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(837,0, ())


  def generate_wrapper(self):
    return CPPTileMapPatternWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = TileMapPattern.__new__(TileMapPattern)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TileMapPattern'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TileMapPattern.construct_without_init()
    cls._ptr = CPPTileMapPatternWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TileMapPattern.construct_without_init()
    cls._ptr = CPPTileMapPatternWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_cell(self, coords:'Vector2i'   , source_id:'int' =-1  , atlas_coords:'Vector2i' = None  , alternative_tile:'int' =-1  ) -> None:
    r'''
				Sets the tile identifiers for the cell at coordinates `coords`. See `TileMap.set_cell`.
			'''
    if atlas_coords is None:
      atlas_coords = Vector2i.new0()
    if atlas_coords is None:
      atlas_coords = Vector2i.new0()

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'
    assert isinstance(source_id, (int, float)), 'source_id must be int or float'
    assert isinstance(alternative_tile, (int, float)), 'alternative_tile must be int or float'









    self._ptr.call_with_return(77,tuple([coords._ptr, source_id, atlas_coords._ptr, alternative_tile]))

  @functools.native_method
  def has_cell(self, coords:'Vector2i'   ) -> typing.Union[bool]:
    r'''
				Returns whether the pattern has a tile at the given coordinates.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def remove_cell(self, coords:'Vector2i'   , update_size:'bool'   ) -> None:
    r'''
				Remove the cell at the given coordinates.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'
    assert isinstance(update_size, bool), 'update_size must be bool'







    self._ptr.call_with_return(79,tuple([coords._ptr, update_size]))

  @functools.native_method
  def get_cell_source_id(self, coords:'Vector2i'   ) -> typing.Union[int]:
    r'''
				Returns the tile source ID of the cell at `coords`.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def get_cell_atlas_coords(self, coords:'Vector2i'   ) -> typing.Union['Vector2i']:
    r'''
				Returns the tile atlas coordinates ID of the cell at `coords`.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def get_cell_alternative_tile(self, coords:'Vector2i'   ) -> typing.Union[int]:
    r'''
				Returns the tile alternative ID of the cell at `coords`.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def get_used_cells(self) -> typing.Union['py4godot_vector2itypedarray.Vector2iTypedArray']:
    r'''
				Returns the list of used cell coordinates in the pattern.
			'''




    _ret = py4godot_vector2itypedarray.Vector2iTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))
    return _ret


  @functools.native_method
  def get_size(self) -> typing.Union['Vector2i']:
    r'''
				Returns the size, in cells, of the pattern.
			'''




    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([]))
    return _ret


  @functools.native_method
  def set_size(self, size:'Vector2i'   ) -> None:
    r'''
				Sets the size of the pattern.
			'''

    assert(not size is None)
    assert isinstance(size, Vector2i), 'size must be Vector2i'






    self._ptr.call_with_return(85,tuple([size._ptr]))

  @functools.native_method
  def is_empty(self) -> typing.Union[bool]:
    r'''
				Returns whether the pattern is empty or not.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))
    return _ret



register_cast_function('TileMapPattern', TileMapPattern.cast)
register_class('TileMapPattern', TileMapPattern)
