# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectCompressorWrapper


class AudioEffectCompressor(py4godot_audioeffect.AudioEffect):
  r'''
		Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).
		Compressor has many uses in the mix:
		- In the Master bus to compress the whole output (although an `AudioEffectHardLimiter` is probably better).
		- In voice channels to ensure they sound as balanced as possible.
		- Sidechained. This can reduce the sound level sidechained with another audio bus for threshold detection. This technique is common in video game mixing to the level of music and SFX while voices are being heard.
		- Accentuates transients by using a wider attack, making effects sound more punchy.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectCompressor.construct_without_init()
    class_._ptr = constructor(111,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectCompressor.construct_without_init()
    class_._ptr = constructor(111,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectCompressorWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(111,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectCompressorWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectCompressor.__new__(AudioEffectCompressor)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectCompressor'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectCompressor.construct_without_init()
    cls._ptr = CPPAudioEffectCompressorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectCompressor.construct_without_init()
    cls._ptr = CPPAudioEffectCompressorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def threshold(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_threshold()
    return _ret
  @threshold.setter
  def threshold(self,  value:'float'):
    self.set_threshold(value)
  @property
  def ratio(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_ratio()
    return _ret
  @ratio.setter
  def ratio(self,  value:'float'):
    self.set_ratio(value)
  @property
  def gain(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_gain()
    return _ret
  @gain.setter
  def gain(self,  value:'float'):
    self.set_gain(value)
  @property
  def attack_us(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_attack_us()
    return _ret
  @attack_us.setter
  def attack_us(self,  value:'float'):
    self.set_attack_us(value)
  @property
  def release_ms(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_release_ms()
    return _ret
  @release_ms.setter
  def release_ms(self,  value:'float'):
    self.set_release_ms(value)
  @property
  def mix(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_mix()
    return _ret
  @mix.setter
  def mix(self,  value:'float'):
    self.set_mix(value)
  @property
  def sidechain(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_sidechain()
    return _ret
  @sidechain.setter
  def sidechain(self,  value:'object'):
    self.set_sidechain(value)
  @functools.native_method
  def set_threshold(self, threshold:'float'   ) -> None:
    r''''''

    assert isinstance(threshold, (int, float)), 'threshold must be int or float'

    self.py__threshold = threshold






    self._ptr.call_with_return(78,tuple([threshold]))

  @functools.native_method
  def get_threshold(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_ratio(self, ratio:'float'   ) -> None:
    r''''''

    assert isinstance(ratio, (int, float)), 'ratio must be int or float'

    self.py__ratio = ratio






    self._ptr.call_with_return(80,tuple([ratio]))

  @functools.native_method
  def get_ratio(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_gain(self, gain:'float'   ) -> None:
    r''''''

    assert isinstance(gain, (int, float)), 'gain must be int or float'

    self.py__gain = gain






    self._ptr.call_with_return(82,tuple([gain]))

  @functools.native_method
  def get_gain(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_attack_us(self, attack_us:'float'   ) -> None:
    r''''''

    assert isinstance(attack_us, (int, float)), 'attack_us must be int or float'

    self.py__attack_us = attack_us






    self._ptr.call_with_return(84,tuple([attack_us]))

  @functools.native_method
  def get_attack_us(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_release_ms(self, release_ms:'float'   ) -> None:
    r''''''

    assert isinstance(release_ms, (int, float)), 'release_ms must be int or float'

    self.py__release_ms = release_ms






    self._ptr.call_with_return(86,tuple([release_ms]))

  @functools.native_method
  def get_release_ms(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_mix(self, mix:'float'   ) -> None:
    r''''''

    assert isinstance(mix, (int, float)), 'mix must be int or float'

    self.py__mix = mix






    self._ptr.call_with_return(88,tuple([mix]))

  @functools.native_method
  def get_mix(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_sidechain(self, sidechain:'object'   ) -> None:
    r''''''

    assert(not sidechain is None)
    assert isinstance(sidechain, (str, StringName)), 'sidechain must be str or StringName'

    self.py__sidechain = sidechain



    assert(isinstance(sidechain, (str, StringName)))
    py_stringname_sidechain = sidechain if isinstance(sidechain, StringName) else c_utils.py_string_to_string_name(sidechain)


    self._ptr.call_with_return(90,tuple([py_stringname_sidechain._ptr]))

  @functools.native_method
  def get_sidechain(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return _ret



register_cast_function('AudioEffectCompressor', AudioEffectCompressor.cast)
register_class('AudioEffectCompressor', AudioEffectCompressor)
