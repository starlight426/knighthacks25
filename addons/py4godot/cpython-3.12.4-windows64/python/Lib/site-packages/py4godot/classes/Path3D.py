# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Curve3D as py4godot_curve3d 
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPPath3DWrapper


class Path3D(py4godot_node3d.Node3D):
  r'''
		Can have `PathFollow3D` child nodes moving along the `Curve3D`. See `PathFollow3D` for more information on the usage.
		Note that the path is considered as relative to the moved nodes (children of `PathFollow3D`). As such, the curve should usually start with a zero vector `(0, 0, 0)`.
	'''

  @staticmethod
  def constructor():
    class_ = Path3D.construct_without_init()
    class_._ptr = constructor(581,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Path3D.construct_without_init()
    class_._ptr = constructor(581,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPath3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(581,0, ())


  def generate_wrapper(self):
    return CPPPath3DWrapper()
  def init_signals(self):
    super().init_signals()
    curve_changed_name = utils.py_string_to_string_name("curve_changed")
    self.curve_changed = signals.BuiltinSignal(self, curve_changed_name)
    debug_color_changed_name = utils.py_string_to_string_name("debug_color_changed")
    self.debug_color_changed = signals.BuiltinSignal(self, debug_color_changed_name)

  @staticmethod
  def construct_without_init():
    cls = Path3D.__new__(Path3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Path3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Path3D.construct_without_init()
    cls._ptr = CPPPath3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Path3D.construct_without_init()
    cls._ptr = CPPPath3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def curve(self) -> typing.Union['py4godot_curve3d.Curve3D']:
    r''''''
    _ret = self. get_curve()
    return _ret
  @curve.setter
  def curve(self,  value:'py4godot_object.Object'):
    self.set_curve(value)
  @property
  def debug_custom_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_debug_custom_color()
    return _ret
  @debug_custom_color.setter
  def debug_custom_color(self,  value:'Color'):
    self.set_debug_custom_color(value)
  @functools.native_method
  def set_curve(self, curve:'py4godot_curve3d.Curve3D'   ) -> None:
    r''''''

    assert(not curve is None)
    assert isinstance(curve, get_class('Curve3D')), 'curve must be Curve3D'

    self.py__curve = curve






    self._ptr.call_with_return(251,tuple([curve._ptr]))

  @functools.native_method
  def get_curve(self) -> typing.Union['py4godot_curve3d.Curve3D']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Curve3D
    _ret._ptr = self._ptr.call_with_return(252,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_debug_custom_color(self, debug_custom_color:'Color'   ) -> None:
    r''''''

    assert(not debug_custom_color is None)
    assert isinstance(debug_custom_color, Color), 'debug_custom_color must be Color'

    self.py__debug_custom_color = debug_custom_color






    self._ptr.call_with_return(253,tuple([debug_custom_color._ptr]))

  @functools.native_method
  def get_debug_custom_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(254,tuple([]))

    return _ret



register_cast_function('Path3D', Path3D.cast)
register_class('Path3D', Path3D)
