# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisibleOnScreenNotifier2D as py4godot_visibleonscreennotifier2d 
from py4godot.wrappers.wrappers import CPPVisibleOnScreenEnabler2DWrapper

class EnableMode:
  ENABLE_MODE_INHERIT = 0
  ENABLE_MODE_ALWAYS = 1
  ENABLE_MODE_WHEN_PAUSED = 2


class VisibleOnScreenEnabler2D(py4godot_visibleonscreennotifier2d.VisibleOnScreenNotifier2D):
  r'''
		`VisibleOnScreenEnabler2D` contains a rectangular region of 2D space and a target node. The target node will be automatically enabled (via its `Node.process_mode` property) when any part of this region becomes visible on the screen, and automatically disabled otherwise. This can for example be used to activate enemies only when the player approaches them.
		See `VisibleOnScreenNotifier2D` if you only want to be notified when the region is visible on screen.
		**Note:** `VisibleOnScreenEnabler2D` uses the render culling code to determine whether it's visible on screen, so it won't function unless `CanvasItem.visible` is set to `true`.
	'''

  @staticmethod
  def constructor():
    class_ = VisibleOnScreenEnabler2D.construct_without_init()
    class_._ptr = constructor(874,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisibleOnScreenEnabler2D.construct_without_init()
    class_._ptr = constructor(874,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisibleOnScreenEnabler2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(874,0, ())


  def generate_wrapper(self):
    return CPPVisibleOnScreenEnabler2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisibleOnScreenEnabler2D.__new__(VisibleOnScreenEnabler2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisibleOnScreenEnabler2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisibleOnScreenEnabler2D.construct_without_init()
    cls._ptr = CPPVisibleOnScreenEnabler2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisibleOnScreenEnabler2D.construct_without_init()
    cls._ptr = CPPVisibleOnScreenEnabler2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def enable_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_enable_mode()
    return _ret
  @enable_mode.setter
  def enable_mode(self,  value:'int'):
    self.set_enable_mode(value)
  @property
  def enable_node_path(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_enable_node_path()
    return _ret
  @enable_node_path.setter
  def enable_node_path(self,  value:'object'):
    self.set_enable_node_path(value)
  @functools.native_method
  def set_enable_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__enable_mode = mode






    self._ptr.call_with_return(308,tuple([mode]))

  @functools.native_method
  def get_enable_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(309,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_node_path(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__enable_node_path = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(310,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_enable_node_path(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(311,tuple([]))

    return _ret



register_cast_function('VisibleOnScreenEnabler2D', VisibleOnScreenEnabler2D.cast)
register_class('VisibleOnScreenEnabler2D', VisibleOnScreenEnabler2D)
