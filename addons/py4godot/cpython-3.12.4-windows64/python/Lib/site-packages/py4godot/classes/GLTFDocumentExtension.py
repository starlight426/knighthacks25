# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.FogVolume as py4godot_fogvolume 
  import py4godot.classes.AudioStreamPlayer3D as py4godot_audiostreamplayer3d 
  import py4godot.classes.Sprite3D as py4godot_sprite3d 
  import py4godot.classes.Object as py4godot_object 
  import py4godot.classes.VisibleOnScreenEnabler3D as py4godot_visibleonscreenenabler3d 
  import py4godot.classes.XRAnchor3D as py4godot_xranchor3d 
  import py4godot.classes.GPUParticlesCollisionBox3D as py4godot_gpuparticlescollisionbox3d 
  import py4godot.classes.CPUParticles3D as py4godot_cpuparticles3d 
  import py4godot.classes.LightmapProbe as py4godot_lightmapprobe 
  import py4godot.classes.GPUParticlesAttractor3D as py4godot_gpuparticlesattractor3d 
  import py4godot.classes.Area3D as py4godot_area3d 
  import py4godot.classes.Camera3D as py4godot_camera3d 
  import py4godot.classes.SpriteBase3D as py4godot_spritebase3d 
  import py4godot.classes.CollisionShape3D as py4godot_collisionshape3d 
  import py4godot.classes.XRHandModifier3D as py4godot_xrhandmodifier3d 
  import py4godot.classes.XRNode3D as py4godot_xrnode3d 
  import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
  import py4godot.classes.PhysicsBody3D as py4godot_physicsbody3d 
  import py4godot.classes.CSGPolygon3D as py4godot_csgpolygon3d 
  import py4godot.classes.MultiMeshInstance3D as py4godot_multimeshinstance3d 
  import py4godot.classes.PathFollow3D as py4godot_pathfollow3d 
  import py4godot.classes.SkeletonIK3D as py4godot_skeletonik3d 
  import py4godot.classes.PhysicalBoneSimulator3D as py4godot_physicalbonesimulator3d 
  import py4godot.classes.SpringBoneCollision3D as py4godot_springbonecollision3d 
  import py4godot.classes.ImporterMeshInstance3D as py4godot_importermeshinstance3d 
  import py4godot.classes.CopyTransformModifier3D as py4godot_copytransformmodifier3d 
  import py4godot.classes.AimModifier3D as py4godot_aimmodifier3d 
  import py4godot.classes.GPUParticlesCollisionSDF3D as py4godot_gpuparticlescollisionsdf3d 
  import py4godot.classes.RetargetModifier3D as py4godot_retargetmodifier3d 
  import py4godot.classes.XRController3D as py4godot_xrcontroller3d 
  import py4godot.classes.GPUParticlesCollision3D as py4godot_gpuparticlescollision3d 
  import py4godot.classes.Node3D as py4godot_node3d 
  import py4godot.classes.OpenXRVisibilityMask as py4godot_openxrvisibilitymask 
  import py4godot.classes.GPUParticles3D as py4godot_gpuparticles3d 
  import py4godot.classes.SpringArm3D as py4godot_springarm3d 
  import py4godot.classes.AudioListener3D as py4godot_audiolistener3d 
  import py4godot.classes.SpringBoneCollisionPlane3D as py4godot_springbonecollisionplane3d 
  import py4godot.classes.VehicleWheel3D as py4godot_vehiclewheel3d 
  import py4godot.classes.VehicleBody3D as py4godot_vehiclebody3d 
  import py4godot.classes.SpringBoneSimulator3D as py4godot_springbonesimulator3d 
  import py4godot.classes.NodePathTypedArray as py4godot_nodepathtypedarray 
  import py4godot.classes.SoftBody3D as py4godot_softbody3d 
  import py4godot.classes.Node as py4godot_node 
  import py4godot.classes.GPUParticlesAttractorVectorField3D as py4godot_gpuparticlesattractorvectorfield3d 
  import py4godot.classes.CSGBox3D as py4godot_csgbox3d 
  import py4godot.classes.OpenXRCompositionLayerCylinder as py4godot_openxrcompositionlayercylinder 
  import py4godot.classes.CharacterBody3D as py4godot_characterbody3d 
  import py4godot.classes.ShapeCast3D as py4godot_shapecast3d 
  import py4godot.classes.XRCamera3D as py4godot_xrcamera3d 
  import py4godot.classes.CSGShape3D as py4godot_csgshape3d 
  import py4godot.classes.SpringBoneCollisionCapsule3D as py4godot_springbonecollisioncapsule3d 
  import py4godot.classes.LightmapGI as py4godot_lightmapgi 
  import py4godot.classes.VoxelGI as py4godot_voxelgi 
  import py4godot.classes.XRFaceModifier3D as py4godot_xrfacemodifier3d 
  import py4godot.classes.GPUParticlesCollisionHeightField3D as py4godot_gpuparticlescollisionheightfield3d 
  import py4godot.classes.PhysicalBone3D as py4godot_physicalbone3d 
  import py4godot.classes.ConeTwistJoint3D as py4godot_conetwistjoint3d 
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
  import py4godot.classes.VisibleOnScreenNotifier3D as py4godot_visibleonscreennotifier3d 
  import py4godot.classes.GLTFTexture as py4godot_gltftexture 
  import py4godot.classes.CollisionObject3D as py4godot_collisionobject3d 
  import py4godot.classes.SpotLight3D as py4godot_spotlight3d 
  import py4godot.classes.Image as py4godot_image 
  import py4godot.classes.Marker3D as py4godot_marker3d 
  import py4godot.classes.AnimatedSprite3D as py4godot_animatedsprite3d 
  import py4godot.classes.CSGTorus3D as py4godot_csgtorus3d 
  import py4godot.classes.OpenXRHand as py4godot_openxrhand 
  import py4godot.classes.Generic6DOFJoint3D as py4godot_generic6dofjoint3d 
  import py4godot.classes.MeshInstance3D as py4godot_meshinstance3d 
  import py4godot.classes.Joint3D as py4godot_joint3d 
  import py4godot.classes.RigidBody3D as py4godot_rigidbody3d 
  import py4godot.classes.RayCast3D as py4godot_raycast3d 
  import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
  import py4godot.classes.XRBodyModifier3D as py4godot_xrbodymodifier3d 
  import py4godot.classes.CollisionPolygon3D as py4godot_collisionpolygon3d 
  import py4godot.classes.PinJoint3D as py4godot_pinjoint3d 
  import py4godot.classes.GeometryInstance3D as py4godot_geometryinstance3d 
  import py4godot.classes.Label3D as py4godot_label3d 
  import py4godot.classes.CSGSphere3D as py4godot_csgsphere3d 
  import py4godot.classes.OpenXRRenderModel as py4godot_openxrrendermodel 
  import py4godot.classes.GridMap as py4godot_gridmap 
  import py4godot.classes.ModifierBoneTarget3D as py4godot_modifierbonetarget3d 
  import py4godot.classes.CSGCylinder3D as py4godot_csgcylinder3d 
  import py4godot.classes.OpenXRCompositionLayer as py4godot_openxrcompositionlayer 
  import py4godot.classes.LookAtModifier3D as py4godot_lookatmodifier3d 
  import py4godot.classes.NavigationRegion3D as py4godot_navigationregion3d 
  import py4godot.classes.GPUParticlesCollisionSphere3D as py4godot_gpuparticlescollisionsphere3d 
  import py4godot.classes.GLTFNode as py4godot_gltfnode 
  import py4godot.classes.NavigationObstacle3D as py4godot_navigationobstacle3d 
  import py4godot.classes.StaticBody3D as py4godot_staticbody3d 
  import py4godot.classes.HingeJoint3D as py4godot_hingejoint3d 
  import py4godot.classes.OpenXRCompositionLayerEquirect as py4godot_openxrcompositionlayerequirect 
  import py4godot.classes.SpringBoneCollisionSphere3D as py4godot_springbonecollisionsphere3d 
  import py4godot.classes.SliderJoint3D as py4godot_sliderjoint3d 
  import py4godot.classes.ConvertTransformModifier3D as py4godot_converttransformmodifier3d 
  import py4godot.classes.AnimatableBody3D as py4godot_animatablebody3d 
  import py4godot.classes.OpenXRCompositionLayerQuad as py4godot_openxrcompositionlayerquad 
  import py4godot.classes.GLTFObjectModelProperty as py4godot_gltfobjectmodelproperty 
  import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
  import py4godot.classes.ReflectionProbe as py4godot_reflectionprobe 
  import py4godot.classes.OpenXRRenderModelManager as py4godot_openxrrendermodelmanager 
  import py4godot.classes.NavigationLink3D as py4godot_navigationlink3d 
  import py4godot.classes.Decal as py4godot_decal 
  import py4godot.classes.GPUParticlesAttractorBox3D as py4godot_gpuparticlesattractorbox3d 
  import py4godot.classes.DirectionalLight3D as py4godot_directionallight3d 
  import py4godot.classes.Path3D as py4godot_path3d 
  import py4godot.classes.OmniLight3D as py4godot_omnilight3d 
  import py4godot.classes.RootMotionView as py4godot_rootmotionview 
  import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
  import py4godot.classes.CSGMesh3D as py4godot_csgmesh3d 
  import py4godot.classes.GLTFState as py4godot_gltfstate 
  import py4godot.classes.XROrigin3D as py4godot_xrorigin3d 
  import py4godot.classes.Light3D as py4godot_light3d 
  import py4godot.classes.BoneAttachment3D as py4godot_boneattachment3d 
  import py4godot.classes.RemoteTransform3D as py4godot_remotetransform3d 
  import py4godot.classes.CSGCombiner3D as py4godot_csgcombiner3d 
  import py4godot.classes.GPUParticlesAttractorSphere3D as py4godot_gpuparticlesattractorsphere3d 
  import py4godot.classes.OccluderInstance3D as py4godot_occluderinstance3d 
import py4godot.classes.Resource as py4godot_resource 
import py4godot.classes.NodePathTypedArray as py4godot_nodepathtypedarray 
from py4godot.wrappers.wrappers import CPPGLTFDocumentExtensionWrapper


class GLTFDocumentExtension(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFDocumentExtension.construct_without_init()
    class_._ptr = constructor(350,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFDocumentExtension.construct_without_init()
    class_._ptr = constructor(350,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFDocumentExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(350,0, ())


  def generate_wrapper(self):
    return CPPGLTFDocumentExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFDocumentExtension.__new__(GLTFDocumentExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFDocumentExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFDocumentExtension.construct_without_init()
    cls._ptr = CPPGLTFDocumentExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFDocumentExtension.construct_without_init()
    cls._ptr = CPPGLTFDocumentExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _import_preflight(self, state:'py4godot_gltfstate.GLTFState'   , extensions:'PackedStringArray'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not extensions is None)
    assert isinstance(extensions, PackedStringArray), 'extensions must be PackedStringArray'







    _ret:int
    _ret = self._ptr.call_with_return(77,tuple([state._ptr, extensions._ptr]))
    return _ret


  @functools.native_method
  def _get_supported_extensions(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))
    return _ret


  @functools.native_method
  def _parse_node_extensions(self, state:'py4godot_gltfstate.GLTFState'   , gltf_node:'py4godot_gltfnode.GLTFNode'   , extensions:'Dictionary'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not gltf_node is None)
    assert isinstance(gltf_node, get_class('GLTFNode')), 'gltf_node must be GLTFNode'
    assert(not extensions is None)
    assert isinstance(extensions, Dictionary), 'extensions must be Dictionary'








    _ret:int
    _ret = self._ptr.call_with_return(79,tuple([state._ptr, gltf_node._ptr, extensions._ptr]))
    return _ret


  @functools.native_method
  def _parse_image_data(self, state:'py4godot_gltfstate.GLTFState'   , image_data:'PackedByteArray'   , mime_type:'str'   , ret_image:'py4godot_image.Image'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not image_data is None)
    assert isinstance(image_data, PackedByteArray), 'image_data must be PackedByteArray'
    assert(not mime_type is None)
    assert isinstance(mime_type, (str, String)), 'mime_type must be str or String'
    assert(not ret_image is None)
    assert isinstance(ret_image, get_class('Image')), 'ret_image must be Image'






    assert(isinstance(mime_type, (str, String)))
    py_string_mime_type = mime_type if isinstance(mime_type, StringName) else c_utils.py_string_to_string(mime_type)


    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([state._ptr, image_data._ptr, py_string_mime_type._ptr, ret_image._ptr]))
    return _ret


  @functools.native_method
  def _get_image_file_extension(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _parse_texture_json(self, state:'py4godot_gltfstate.GLTFState'   , texture_json:'Dictionary'   , ret_gltf_texture:'py4godot_gltftexture.GLTFTexture'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not texture_json is None)
    assert isinstance(texture_json, Dictionary), 'texture_json must be Dictionary'
    assert(not ret_gltf_texture is None)
    assert isinstance(ret_gltf_texture, get_class('GLTFTexture')), 'ret_gltf_texture must be GLTFTexture'








    _ret:int
    _ret = self._ptr.call_with_return(82,tuple([state._ptr, texture_json._ptr, ret_gltf_texture._ptr]))
    return _ret


  @functools.native_method
  def _import_object_model_property(self, state:'py4godot_gltfstate.GLTFState'   , split_json_pointer:'PackedStringArray'   , partial_paths:'py4godot_nodepathtypedarray.NodePathTypedArray'   ) -> typing.Union['py4godot_gltfobjectmodelproperty.GLTFObjectModelProperty']:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not split_json_pointer is None)
    assert isinstance(split_json_pointer, PackedStringArray), 'split_json_pointer must be PackedStringArray'
    assert isinstance(partial_paths, get_class('NodePathTypedArray')), 'partial_paths must be NodePathTypedArray'








    _ret = classes.Object.Object.construct_without_init() #Smart casted to: GLTFObjectModelProperty
    _ret._ptr = self._ptr.call_with_return(83,tuple([state._ptr, split_json_pointer._ptr, partial_paths._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _import_post_parse(self, state:'py4godot_gltfstate.GLTFState'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'






    _ret:int
    _ret = self._ptr.call_with_return(84,tuple([state._ptr]))
    return _ret


  @functools.native_method
  def _import_pre_generate(self, state:'py4godot_gltfstate.GLTFState'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'






    _ret:int
    _ret = self._ptr.call_with_return(85,tuple([state._ptr]))
    return _ret


  @functools.native_method
  def _generate_scene_node(self, state:'py4godot_gltfstate.GLTFState'   , gltf_node:'py4godot_gltfnode.GLTFNode'   , scene_parent:'py4godot_node.Node'   ) -> typing.Any:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not gltf_node is None)
    assert isinstance(gltf_node, get_class('GLTFNode')), 'gltf_node must be GLTFNode'
    assert(not scene_parent is None)
    assert isinstance(scene_parent, get_class('Node')), 'scene_parent must be Node'








    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Node3D
    _ret._ptr = self._ptr.call_with_return(86,tuple([state._ptr, gltf_node._ptr, scene_parent._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _import_node(self, state:'py4godot_gltfstate.GLTFState'   , gltf_node:'py4godot_gltfnode.GLTFNode'   , json:'Dictionary'   , node:'py4godot_node.Node'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not gltf_node is None)
    assert isinstance(gltf_node, get_class('GLTFNode')), 'gltf_node must be GLTFNode'
    assert(not json is None)
    assert isinstance(json, Dictionary), 'json must be Dictionary'
    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'









    _ret:int
    _ret = self._ptr.call_with_return(87,tuple([state._ptr, gltf_node._ptr, json._ptr, node._ptr]))
    return _ret


  @functools.native_method
  def _import_post(self, state:'py4godot_gltfstate.GLTFState'   , root:'py4godot_node.Node'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not root is None)
    assert isinstance(root, get_class('Node')), 'root must be Node'







    _ret:int
    _ret = self._ptr.call_with_return(88,tuple([state._ptr, root._ptr]))
    return _ret


  @functools.native_method
  def _export_preflight(self, state:'py4godot_gltfstate.GLTFState'   , root:'py4godot_node.Node'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not root is None)
    assert isinstance(root, get_class('Node')), 'root must be Node'







    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([state._ptr, root._ptr]))
    return _ret


  @functools.native_method
  def _convert_scene_node(self, state:'py4godot_gltfstate.GLTFState'   , gltf_node:'py4godot_gltfnode.GLTFNode'   , scene_node:'py4godot_node.Node'   ) -> None:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not gltf_node is None)
    assert isinstance(gltf_node, get_class('GLTFNode')), 'gltf_node must be GLTFNode'
    assert(not scene_node is None)
    assert isinstance(scene_node, get_class('Node')), 'scene_node must be Node'








    self._ptr.call_with_return(90,tuple([state._ptr, gltf_node._ptr, scene_node._ptr]))

  @functools.native_method
  def _export_post_convert(self, state:'py4godot_gltfstate.GLTFState'   , root:'py4godot_node.Node'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not root is None)
    assert isinstance(root, get_class('Node')), 'root must be Node'







    _ret:int
    _ret = self._ptr.call_with_return(91,tuple([state._ptr, root._ptr]))
    return _ret


  @functools.native_method
  def _export_preserialize(self, state:'py4godot_gltfstate.GLTFState'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'






    _ret:int
    _ret = self._ptr.call_with_return(92,tuple([state._ptr]))
    return _ret


  @functools.native_method
  def _export_object_model_property(self, state:'py4godot_gltfstate.GLTFState'   , node_path:'object'   , godot_node:'py4godot_node.Node'   , gltf_node_index:'int'   , target_object:'py4godot_object.Object'   , target_depth:'int'   ) -> typing.Union['py4godot_gltfobjectmodelproperty.GLTFObjectModelProperty']:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not node_path is None)
    assert isinstance(node_path, (str, NodePath)), 'node_path must be str or NodePath'
    assert(not godot_node is None)
    assert isinstance(godot_node, get_class('Node')), 'godot_node must be Node'
    assert isinstance(gltf_node_index, (int, float)), 'gltf_node_index must be int or float'
    assert(not target_object is None)
    assert isinstance(target_object, get_class('Object')), 'target_object must be Object'
    assert isinstance(target_depth, (int, float)), 'target_depth must be int or float'





    assert(isinstance(node_path, (str, NodePath)))
    py_nodepath_node_path = node_path if isinstance(node_path,NodePath) else NodePath.new2(node_path)





    _ret = classes.Object.Object.construct_without_init() #Smart casted to: GLTFObjectModelProperty
    _ret._ptr = self._ptr.call_with_return(93,tuple([state._ptr, py_nodepath_node_path._ptr, godot_node._ptr, gltf_node_index, target_object._ptr, target_depth]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _get_saveable_image_formats(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))
    return _ret


  @functools.native_method
  def _serialize_image_to_bytes(self, state:'py4godot_gltfstate.GLTFState'   , image:'py4godot_image.Image'   , image_dict:'Dictionary'   , image_format:'str'   , lossy_quality:'float'   ) -> typing.Union['PackedByteArray']:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not image is None)
    assert isinstance(image, get_class('Image')), 'image must be Image'
    assert(not image_dict is None)
    assert isinstance(image_dict, Dictionary), 'image_dict must be Dictionary'
    assert(not image_format is None)
    assert isinstance(image_format, (str, String)), 'image_format must be str or String'
    assert isinstance(lossy_quality, (int, float)), 'lossy_quality must be int or float'







    assert(isinstance(image_format, (str, String)))
    py_string_image_format = image_format if isinstance(image_format, StringName) else c_utils.py_string_to_string(image_format)


    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(95,tuple([state._ptr, image._ptr, image_dict._ptr, py_string_image_format._ptr, lossy_quality]))
    return _ret


  @functools.native_method
  def _save_image_at_path(self, state:'py4godot_gltfstate.GLTFState'   , image:'py4godot_image.Image'   , file_path:'str'   , image_format:'str'   , lossy_quality:'float'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not image is None)
    assert isinstance(image, get_class('Image')), 'image must be Image'
    assert(not file_path is None)
    assert isinstance(file_path, (str, String)), 'file_path must be str or String'
    assert(not image_format is None)
    assert isinstance(image_format, (str, String)), 'image_format must be str or String'
    assert isinstance(lossy_quality, (int, float)), 'lossy_quality must be int or float'






    assert(isinstance(file_path, (str, String)))
    py_string_file_path = file_path if isinstance(file_path, StringName) else c_utils.py_string_to_string(file_path)
    assert(isinstance(image_format, (str, String)))
    py_string_image_format = image_format if isinstance(image_format, StringName) else c_utils.py_string_to_string(image_format)


    _ret:int
    _ret = self._ptr.call_with_return(96,tuple([state._ptr, image._ptr, py_string_file_path._ptr, py_string_image_format._ptr, lossy_quality]))
    return _ret


  @functools.native_method
  def _serialize_texture_json(self, state:'py4godot_gltfstate.GLTFState'   , texture_json:'Dictionary'   , gltf_texture:'py4godot_gltftexture.GLTFTexture'   , image_format:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not texture_json is None)
    assert isinstance(texture_json, Dictionary), 'texture_json must be Dictionary'
    assert(not gltf_texture is None)
    assert isinstance(gltf_texture, get_class('GLTFTexture')), 'gltf_texture must be GLTFTexture'
    assert(not image_format is None)
    assert isinstance(image_format, (str, String)), 'image_format must be str or String'







    assert(isinstance(image_format, (str, String)))
    py_string_image_format = image_format if isinstance(image_format, StringName) else c_utils.py_string_to_string(image_format)

    _ret:int
    _ret = self._ptr.call_with_return(97,tuple([state._ptr, texture_json._ptr, gltf_texture._ptr, py_string_image_format._ptr]))
    return _ret


  @functools.native_method
  def _export_node(self, state:'py4godot_gltfstate.GLTFState'   , gltf_node:'py4godot_gltfnode.GLTFNode'   , json:'Dictionary'   , node:'py4godot_node.Node'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'
    assert(not gltf_node is None)
    assert isinstance(gltf_node, get_class('GLTFNode')), 'gltf_node must be GLTFNode'
    assert(not json is None)
    assert isinstance(json, Dictionary), 'json must be Dictionary'
    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'









    _ret:int
    _ret = self._ptr.call_with_return(98,tuple([state._ptr, gltf_node._ptr, json._ptr, node._ptr]))
    return _ret


  @functools.native_method
  def _export_post(self, state:'py4godot_gltfstate.GLTFState'   ) -> typing.Union[int]:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'






    _ret:int
    _ret = self._ptr.call_with_return(99,tuple([state._ptr]))
    return _ret



register_cast_function('GLTFDocumentExtension', GLTFDocumentExtension.cast)
register_class('GLTFDocumentExtension', GLTFDocumentExtension)
