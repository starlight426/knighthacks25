# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectAmplifyWrapper


class AudioEffectAmplify(py4godot_audioeffect.AudioEffect):
  r'''
		Increases or decreases the volume being routed through the audio bus.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectAmplify.construct_without_init()
    class_._ptr = constructor(106,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectAmplify.construct_without_init()
    class_._ptr = constructor(106,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectAmplifyWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(106,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectAmplifyWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectAmplify.__new__(AudioEffectAmplify)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectAmplify'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectAmplify.construct_without_init()
    cls._ptr = CPPAudioEffectAmplifyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectAmplify.construct_without_init()
    cls._ptr = CPPAudioEffectAmplifyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def volume_db(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_volume_db()
    return _ret
  @volume_db.setter
  def volume_db(self,  value:'float'):
    self.set_volume_db(value)
  @property
  def volume_linear(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_volume_linear()
    return _ret
  @volume_linear.setter
  def volume_linear(self,  value:'float'):
    self.set_volume_linear(value)
  @functools.native_method
  def set_volume_db(self, volume:'float'   ) -> None:
    r''''''

    assert isinstance(volume, (int, float)), 'volume must be int or float'

    self.py__volume_db = volume






    self._ptr.call_with_return(78,tuple([volume]))

  @functools.native_method
  def get_volume_db(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_volume_linear(self, volume:'float'   ) -> None:
    r''''''

    assert isinstance(volume, (int, float)), 'volume must be int or float'

    self.py__volume_linear = volume






    self._ptr.call_with_return(80,tuple([volume]))

  @functools.native_method
  def get_volume_linear(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret



register_cast_function('AudioEffectAmplify', AudioEffectAmplify.cast)
register_class('AudioEffectAmplify', AudioEffectAmplify)
