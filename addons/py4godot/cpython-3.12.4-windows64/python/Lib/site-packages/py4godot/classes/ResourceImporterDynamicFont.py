# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.ResourceImporter as py4godot_resourceimporter 
from py4godot.wrappers.wrappers import CPPResourceImporterDynamicFontWrapper


class ResourceImporterDynamicFont(py4godot_resourceimporter.ResourceImporter):
  r'''
		Unlike bitmap fonts, dynamic fonts can be resized to any size and still look crisp. Dynamic fonts also optionally support MSDF font rendering, which allows for run-time scale changes with no re-rasterization cost.
		While WOFF and especially WOFF2 tend to result in smaller file sizes, there is no universally "better" font format. In most situations, it's recommended to use the font format that was shipped on the font developer's website.
		See also `ResourceImporterBMFont` and `ResourceImporterImageFont`.
	'''

  @staticmethod
  def constructor():
    class_ = ResourceImporterDynamicFont.construct_without_init()
    class_._ptr = constructor(692,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ResourceImporterDynamicFont.construct_without_init()
    class_._ptr = constructor(692,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPResourceImporterDynamicFontWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(692,0, ())


  def generate_wrapper(self):
    return CPPResourceImporterDynamicFontWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ResourceImporterDynamicFont.__new__(ResourceImporterDynamicFont)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ResourceImporterDynamicFont'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceImporterDynamicFont.construct_without_init()
    cls._ptr = CPPResourceImporterDynamicFontWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceImporterDynamicFont.construct_without_init()
    cls._ptr = CPPResourceImporterDynamicFontWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('ResourceImporterDynamicFont', ResourceImporterDynamicFont.cast)
register_class('ResourceImporterDynamicFont', ResourceImporterDynamicFont)
