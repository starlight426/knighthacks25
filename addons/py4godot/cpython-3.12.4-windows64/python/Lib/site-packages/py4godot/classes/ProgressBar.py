# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Range as py4godot_range 
from py4godot.wrappers.wrappers import CPPProgressBarWrapper

class FillMode:
  FILL_BEGIN_TO_END = 0
  FILL_END_TO_BEGIN = 1
  FILL_TOP_TO_BOTTOM = 2
  FILL_BOTTOM_TO_TOP = 3


class ProgressBar(py4godot_range.Range):
  r'''
		A control used for visual representation of a percentage. Shows the fill percentage in the center. Can also be used to show indeterminate progress. For more fill modes, use `TextureProgressBar` instead.
	'''

  @staticmethod
  def constructor():
    class_ = ProgressBar.construct_without_init()
    class_._ptr = constructor(640,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ProgressBar.construct_without_init()
    class_._ptr = constructor(640,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPProgressBarWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(640,0, ())


  def generate_wrapper(self):
    return CPPProgressBarWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ProgressBar.__new__(ProgressBar)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ProgressBar'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ProgressBar.construct_without_init()
    cls._ptr = CPPProgressBarWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ProgressBar.construct_without_init()
    cls._ptr = CPPProgressBarWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def fill_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_fill_mode()
    return _ret
  @fill_mode.setter
  def fill_mode(self,  value:'int'):
    self.set_fill_mode(value)
  @property
  def show_percentage(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_percentage_shown()
    return _ret
  @show_percentage.setter
  def show_percentage(self,  value:'bool'):
    self.set_show_percentage(value)
  @property
  def indeterminate(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_indeterminate()
    return _ret
  @indeterminate.setter
  def indeterminate(self,  value:'bool'):
    self.set_indeterminate(value)
  @property
  def editor_preview_indeterminate(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_editor_preview_indeterminate_enabled()
    return _ret
  @editor_preview_indeterminate.setter
  def editor_preview_indeterminate(self,  value:'bool'):
    self.set_editor_preview_indeterminate(value)
  @functools.native_method
  def set_fill_mode(self, mode:'int'   ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__fill_mode = mode






    self._ptr.call_with_return(457,tuple([mode]))

  @functools.native_method
  def get_fill_mode(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(458,tuple([]))

    return _ret


  @functools.native_method
  def set_show_percentage(self, visible:'bool'   ) -> None:
    r''''''

    assert isinstance(visible, bool), 'visible must be bool'

    self.py__show_percentage = visible






    self._ptr.call_with_return(459,tuple([visible]))

  @functools.native_method
  def is_percentage_shown(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(460,tuple([]))

    return _ret


  @functools.native_method
  def set_indeterminate(self, indeterminate:'bool'   ) -> None:
    r''''''

    assert isinstance(indeterminate, bool), 'indeterminate must be bool'

    self.py__indeterminate = indeterminate






    self._ptr.call_with_return(461,tuple([indeterminate]))

  @functools.native_method
  def is_indeterminate(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(462,tuple([]))

    return _ret


  @functools.native_method
  def set_editor_preview_indeterminate(self, preview_indeterminate:'bool'   ) -> None:
    r''''''

    assert isinstance(preview_indeterminate, bool), 'preview_indeterminate must be bool'

    self.py__editor_preview_indeterminate = preview_indeterminate






    self._ptr.call_with_return(463,tuple([preview_indeterminate]))

  @functools.native_method
  def is_editor_preview_indeterminate_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(464,tuple([]))

    return _ret



register_cast_function('ProgressBar', ProgressBar.cast)
register_class('ProgressBar', ProgressBar)
