# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.SkeletonProfile as py4godot_skeletonprofile 
  import py4godot.classes.SkeletonProfileHumanoid as py4godot_skeletonprofilehumanoid 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPBoneMapWrapper


class BoneMap(py4godot_resource.Resource):
  r'''
		This class contains a dictionary that uses a list of bone names in `SkeletonProfile` as key names.
		By assigning the actual `Skeleton3D` bone name as the key value, it maps the `Skeleton3D` to the `SkeletonProfile`.
	'''

  @staticmethod
  def constructor():
    class_ = BoneMap.construct_without_init()
    class_._ptr = constructor(169,0, ())
    return class_
  @staticmethod
  def new():
    class_ = BoneMap.construct_without_init()
    class_._ptr = constructor(169,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPBoneMapWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(169,0, ())


  def generate_wrapper(self):
    return CPPBoneMapWrapper()
  def init_signals(self):
    super().init_signals()
    bone_map_updated_name = utils.py_string_to_string_name("bone_map_updated")
    self.bone_map_updated = signals.BuiltinSignal(self, bone_map_updated_name)
    profile_updated_name = utils.py_string_to_string_name("profile_updated")
    self.profile_updated = signals.BuiltinSignal(self, profile_updated_name)

  @staticmethod
  def construct_without_init():
    cls = BoneMap.__new__(BoneMap)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'BoneMap'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoneMap.construct_without_init()
    cls._ptr = CPPBoneMapWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoneMap.construct_without_init()
    cls._ptr = CPPBoneMapWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def profile(self) -> typing.Union['py4godot_skeletonprofile.SkeletonProfile','py4godot_skeletonprofilehumanoid.SkeletonProfileHumanoid']:
    r''''''
    _ret = self. get_profile()
    return _ret
  @profile.setter
  def profile(self,  value:'py4godot_object.Object'):
    self.set_profile(value)
  @functools.native_method
  def get_profile(self) -> typing.Union['py4godot_skeletonprofile.SkeletonProfile','py4godot_skeletonprofilehumanoid.SkeletonProfileHumanoid']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: SkeletonProfile
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_profile(self, profile:'py4godot_skeletonprofile.SkeletonProfile'   ) -> None:
    r''''''

    assert(not profile is None)
    assert isinstance(profile, get_class('SkeletonProfile')), 'profile must be SkeletonProfile'

    self.py__profile = profile






    self._ptr.call_with_return(78,tuple([profile._ptr]))

  @functools.native_method
  def get_skeleton_bone_name(self, profile_bone_name:'object'   ) -> typing.Union['StringName']:
    r'''
				Returns a skeleton bone name is mapped to `profile_bone_name`.
				In the retargeting process, the returned bone name is the bone name of the source skeleton.
			'''

    assert(not profile_bone_name is None)
    assert isinstance(profile_bone_name, (str, StringName)), 'profile_bone_name must be str or StringName'




    assert(isinstance(profile_bone_name, (str, StringName)))
    py_stringname_profile_bone_name = profile_bone_name if isinstance(profile_bone_name, StringName) else c_utils.py_string_to_string_name(profile_bone_name)

    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([py_stringname_profile_bone_name._ptr]))
    return _ret


  @functools.native_method
  def set_skeleton_bone_name(self, profile_bone_name:'object'   , skeleton_bone_name:'object'   ) -> None:
    r'''
				Maps a skeleton bone name to `profile_bone_name`.
				In the retargeting process, the setting bone name is the bone name of the source skeleton.
			'''

    assert(not profile_bone_name is None)
    assert isinstance(profile_bone_name, (str, StringName)), 'profile_bone_name must be str or StringName'
    assert(not skeleton_bone_name is None)
    assert isinstance(skeleton_bone_name, (str, StringName)), 'skeleton_bone_name must be str or StringName'




    assert(isinstance(profile_bone_name, (str, StringName)))
    py_stringname_profile_bone_name = profile_bone_name if isinstance(profile_bone_name, StringName) else c_utils.py_string_to_string_name(profile_bone_name)
    assert(isinstance(skeleton_bone_name, (str, StringName)))
    py_stringname_skeleton_bone_name = skeleton_bone_name if isinstance(skeleton_bone_name, StringName) else c_utils.py_string_to_string_name(skeleton_bone_name)

    self._ptr.call_with_return(80,tuple([py_stringname_profile_bone_name._ptr, py_stringname_skeleton_bone_name._ptr]))

  @functools.native_method
  def find_profile_bone_name(self, skeleton_bone_name:'object'   ) -> typing.Union['StringName']:
    r'''
				Returns a profile bone name having `skeleton_bone_name`. If not found, an empty `StringName` will be returned.
				In the retargeting process, the returned bone name is the bone name of the target skeleton.
			'''

    assert(not skeleton_bone_name is None)
    assert isinstance(skeleton_bone_name, (str, StringName)), 'skeleton_bone_name must be str or StringName'




    assert(isinstance(skeleton_bone_name, (str, StringName)))
    py_stringname_skeleton_bone_name = skeleton_bone_name if isinstance(skeleton_bone_name, StringName) else c_utils.py_string_to_string_name(skeleton_bone_name)

    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([py_stringname_skeleton_bone_name._ptr]))
    return _ret



register_cast_function('BoneMap', BoneMap.cast)
register_class('BoneMap', BoneMap)
