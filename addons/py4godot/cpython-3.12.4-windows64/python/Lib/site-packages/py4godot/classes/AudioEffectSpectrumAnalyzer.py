# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectSpectrumAnalyzerWrapper

class FFTSize:
  FFT_SIZE_256 = 0
  FFT_SIZE_512 = 1
  FFT_SIZE_1024 = 2
  FFT_SIZE_2048 = 3
  FFT_SIZE_4096 = 4
  FFT_SIZE_MAX = 5


class AudioEffectSpectrumAnalyzer(py4godot_audioeffect.AudioEffect):
  r'''
		This audio effect does not affect sound output, but can be used for real-time audio visualizations.
		This resource configures an `AudioEffectSpectrumAnalyzerInstance`, which performs the actual analysis at runtime. An instance can be obtained with `AudioServer.get_bus_effect_instance`.
		See also `AudioStreamGenerator` for procedurally generating sounds.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectSpectrumAnalyzer.construct_without_init()
    class_._ptr = constructor(132,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectSpectrumAnalyzer.construct_without_init()
    class_._ptr = constructor(132,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectSpectrumAnalyzerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(132,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectSpectrumAnalyzerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectSpectrumAnalyzer.__new__(AudioEffectSpectrumAnalyzer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectSpectrumAnalyzer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectSpectrumAnalyzer.construct_without_init()
    cls._ptr = CPPAudioEffectSpectrumAnalyzerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectSpectrumAnalyzer.construct_without_init()
    cls._ptr = CPPAudioEffectSpectrumAnalyzerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def buffer_length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_buffer_length()
    return _ret
  @buffer_length.setter
  def buffer_length(self,  value:'float'):
    self.set_buffer_length(value)
  @property
  def tap_back_pos(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_tap_back_pos()
    return _ret
  @tap_back_pos.setter
  def tap_back_pos(self,  value:'float'):
    self.set_tap_back_pos(value)
  @property
  def fft_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_fft_size()
    return _ret
  @fft_size.setter
  def fft_size(self,  value:'int'):
    self.set_fft_size(value)
  @functools.native_method
  def set_buffer_length(self, seconds:'float'   ) -> None:
    r''''''

    assert isinstance(seconds, (int, float)), 'seconds must be int or float'

    self.py__buffer_length = seconds






    self._ptr.call_with_return(78,tuple([seconds]))

  @functools.native_method
  def get_buffer_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_tap_back_pos(self, seconds:'float'   ) -> None:
    r''''''

    assert isinstance(seconds, (int, float)), 'seconds must be int or float'

    self.py__tap_back_pos = seconds






    self._ptr.call_with_return(80,tuple([seconds]))

  @functools.native_method
  def get_tap_back_pos(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_fft_size(self, size:'int'  ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__fft_size = size






    self._ptr.call_with_return(82,tuple([size]))

  @functools.native_method
  def get_fft_size(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret



register_cast_function('AudioEffectSpectrumAnalyzer', AudioEffectSpectrumAnalyzer.cast)
register_class('AudioEffectSpectrumAnalyzer', AudioEffectSpectrumAnalyzer)
