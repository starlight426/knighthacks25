# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.InputEvent as py4godot_inputevent 
import py4godot.classes.Container as py4godot_container 
from py4godot.wrappers.wrappers import CPPSubViewportContainerWrapper


class SubViewportContainer(py4godot_container.Container):
  r'''
		A container that displays the contents of underlying `SubViewport` child nodes. It uses the combined size of the `SubViewport`s as minimum size, unless `stretch` is enabled.
		**Note:** Changing a `SubViewportContainer`'s `Control.scale` will cause its contents to appear distorted. To change its visual size without causing distortion, adjust the node's margins instead (if it's not already in a container).
		**Note:** The `SubViewportContainer` forwards mouse-enter and mouse-exit notifications to its sub-viewports.
	'''

  @staticmethod
  def constructor():
    class_ = SubViewportContainer.construct_without_init()
    class_._ptr = constructor(799,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SubViewportContainer.construct_without_init()
    class_._ptr = constructor(799,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSubViewportContainerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(799,0, ())


  def generate_wrapper(self):
    return CPPSubViewportContainerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SubViewportContainer.__new__(SubViewportContainer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SubViewportContainer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SubViewportContainer.construct_without_init()
    cls._ptr = CPPSubViewportContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SubViewportContainer.construct_without_init()
    cls._ptr = CPPSubViewportContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def stretch(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_stretch_enabled()
    return _ret
  @stretch.setter
  def stretch(self,  value:'bool'):
    self.set_stretch(value)
  @property
  def stretch_shrink(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stretch_shrink()
    return _ret
  @stretch_shrink.setter
  def stretch_shrink(self,  value:'int'):
    self.set_stretch_shrink(value)
  @property
  def mouse_target(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_mouse_target_enabled()
    return _ret
  @mouse_target.setter
  def mouse_target(self,  value:'bool'):
    self.set_mouse_target(value)
  @functools.native_method
  def _propagate_input_event(self, event:'py4godot_inputevent.InputEvent'   ) -> typing.Union[bool]:
    r'''
				Virtual method to be implemented by the user. If it returns `true`, the `event` is propagated to `SubViewport` children. Propagation doesn't happen if it returns `false`. If the function is not implemented, all events are propagated to SubViewports.
			'''

    assert(not event is None)
    assert isinstance(event, get_class('InputEvent')), 'event must be InputEvent'






    _ret = 0
    _ret = self._ptr.call_with_return(437,tuple([event._ptr]))
    return _ret


  @functools.native_method
  def set_stretch(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__stretch = enable






    self._ptr.call_with_return(438,tuple([enable]))

  @functools.native_method
  def is_stretch_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(439,tuple([]))

    return _ret


  @functools.native_method
  def set_stretch_shrink(self, amount:'int'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__stretch_shrink = amount






    self._ptr.call_with_return(440,tuple([amount]))

  @functools.native_method
  def get_stretch_shrink(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(441,tuple([]))

    return _ret


  @functools.native_method
  def set_mouse_target(self, amount:'bool'   ) -> None:
    r''''''

    assert isinstance(amount, bool), 'amount must be bool'

    self.py__mouse_target = amount






    self._ptr.call_with_return(442,tuple([amount]))

  @functools.native_method
  def is_mouse_target_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(443,tuple([]))

    return _ret



register_cast_function('SubViewportContainer', SubViewportContainer.cast)
register_class('SubViewportContainer', SubViewportContainer)
