# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.PopupMenu as py4godot_popupmenu 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
import py4godot.classes.Control as py4godot_control 
from py4godot.wrappers.wrappers import CPPMenuBarWrapper


class MenuBar(py4godot_control.Control):
  r'''
		A horizontal menu bar that creates a menu for each `PopupMenu` child. New items are created by adding `PopupMenu`s to this node. Item title is determined by `Window.title`, or node name if `Window.title` is empty. Item title can be overridden using `set_menu_title`.
	'''

  @staticmethod
  def constructor():
    class_ = MenuBar.construct_without_init()
    class_._ptr = constructor(468,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MenuBar.construct_without_init()
    class_._ptr = constructor(468,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMenuBarWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(468,0, ())


  def generate_wrapper(self):
    return CPPMenuBarWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = MenuBar.__new__(MenuBar)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MenuBar'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MenuBar.construct_without_init()
    cls._ptr = CPPMenuBarWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MenuBar.construct_without_init()
    cls._ptr = CPPMenuBarWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def flat(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_flat()
    return _ret
  @flat.setter
  def flat(self,  value:'bool'):
    self.set_flat(value)
  @property
  def start_index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_start_index()
    return _ret
  @start_index.setter
  def start_index(self,  value:'int'):
    self.set_start_index(value)
  @property
  def switch_on_hover(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_switch_on_hover()
    return _ret
  @switch_on_hover.setter
  def switch_on_hover(self,  value:'bool'):
    self.set_switch_on_hover(value)
  @property
  def prefer_global_menu(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_prefer_global_menu()
    return _ret
  @prefer_global_menu.setter
  def prefer_global_menu(self,  value:'bool'):
    self.set_prefer_global_menu(value)
  @property
  def text_direction(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_text_direction()
    return _ret
  @text_direction.setter
  def text_direction(self,  value:'int'):
    self.set_text_direction(value)
  @property
  def language(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_language()
    return _ret
  @language.setter
  def language(self,  value:'str'):
    self.set_language(value)
  @functools.native_method
  def set_switch_on_hover(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__switch_on_hover = enable






    self._ptr.call_with_return(433,tuple([enable]))

  @functools.native_method
  def is_switch_on_hover(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(434,tuple([]))

    return _ret


  @functools.native_method
  def set_disable_shortcuts(self, disabled:'bool'   ) -> None:
    r'''
				If `true`, shortcuts are disabled and cannot be used to trigger the button.
			'''

    assert isinstance(disabled, bool), 'disabled must be bool'






    self._ptr.call_with_return(435,tuple([disabled]))

  @functools.native_method
  def set_prefer_global_menu(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__prefer_global_menu = enabled






    self._ptr.call_with_return(436,tuple([enabled]))

  @functools.native_method
  def is_prefer_global_menu(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(437,tuple([]))

    return _ret


  @functools.native_method
  def is_native_menu(self) -> typing.Union[bool]:
    r'''
				Returns `true`, if system global menu is supported and used by this `MenuBar`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(438,tuple([]))
    return _ret


  @functools.native_method
  def get_menu_count(self) -> typing.Union[int]:
    r'''
				Returns number of menu items.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(439,tuple([]))
    return _ret


  @functools.native_method
  def set_text_direction(self, direction:'int'  ) -> None:
    r''''''

    assert isinstance(direction, (int, float)), 'direction must be int or float'

    self.py__text_direction = direction






    self._ptr.call_with_return(440,tuple([direction]))

  @functools.native_method
  def get_text_direction(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(441,tuple([]))

    return _ret


  @functools.native_method
  def set_language(self, language:'str'   ) -> None:
    r''''''

    assert(not language is None)
    assert isinstance(language, (str, String)), 'language must be str or String'

    self.py__language = language



    assert(isinstance(language, (str, String)))
    py_string_language = language if isinstance(language, StringName) else c_utils.py_string_to_string(language)

    py__string_language = utils.py_string_to_string(language)
    py__string_language.shouldBeDeleted = False


    self._ptr.call_with_return(442,tuple([py__string_language._ptr]))

  @functools.native_method
  def get_language(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(443,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_flat(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__flat = enabled






    self._ptr.call_with_return(444,tuple([enabled]))

  @functools.native_method
  def is_flat(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(445,tuple([]))

    return _ret


  @functools.native_method
  def set_start_index(self, enabled:'int'   ) -> None:
    r''''''

    assert isinstance(enabled, (int, float)), 'enabled must be int or float'

    self.py__start_index = enabled






    self._ptr.call_with_return(446,tuple([enabled]))

  @functools.native_method
  def get_start_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(447,tuple([]))

    return _ret


  @functools.native_method
  def set_menu_title(self, menu:'int'   , title:'str'   ) -> None:
    r'''
				Sets menu item title.
			'''

    assert isinstance(menu, (int, float)), 'menu must be int or float'
    assert(not title is None)
    assert isinstance(title, (str, String)), 'title must be str or String'





    assert(isinstance(title, (str, String)))
    py_string_title = title if isinstance(title, StringName) else c_utils.py_string_to_string(title)

    self._ptr.call_with_return(448,tuple([menu, py_string_title._ptr]))

  @functools.native_method
  def get_menu_title(self, menu:'int'   ) -> typing.Union[str]:
    r'''
				Returns menu item title.
			'''

    assert isinstance(menu, (int, float)), 'menu must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(449,tuple([menu]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_menu_tooltip(self, menu:'int'   , tooltip:'str'   ) -> None:
    r'''
				Sets menu item tooltip.
			'''

    assert isinstance(menu, (int, float)), 'menu must be int or float'
    assert(not tooltip is None)
    assert isinstance(tooltip, (str, String)), 'tooltip must be str or String'





    assert(isinstance(tooltip, (str, String)))
    py_string_tooltip = tooltip if isinstance(tooltip, StringName) else c_utils.py_string_to_string(tooltip)

    self._ptr.call_with_return(450,tuple([menu, py_string_tooltip._ptr]))

  @functools.native_method
  def get_menu_tooltip(self, menu:'int'   ) -> typing.Union[str]:
    r'''
				Returns menu item tooltip.
			'''

    assert isinstance(menu, (int, float)), 'menu must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(451,tuple([menu]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_menu_disabled(self, menu:'int'   , disabled:'bool'   ) -> None:
    r'''
				If `true`, menu item is disabled.
			'''

    assert isinstance(menu, (int, float)), 'menu must be int or float'
    assert isinstance(disabled, bool), 'disabled must be bool'







    self._ptr.call_with_return(452,tuple([menu, disabled]))

  @functools.native_method
  def is_menu_disabled(self, menu:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true`, if menu item is disabled.
			'''

    assert isinstance(menu, (int, float)), 'menu must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(453,tuple([menu]))
    return _ret


  @functools.native_method
  def set_menu_hidden(self, menu:'int'   , hidden:'bool'   ) -> None:
    r'''
				If `true`, menu item is hidden.
			'''

    assert isinstance(menu, (int, float)), 'menu must be int or float'
    assert isinstance(hidden, bool), 'hidden must be bool'







    self._ptr.call_with_return(454,tuple([menu, hidden]))

  @functools.native_method
  def is_menu_hidden(self, menu:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true`, if menu item is hidden.
			'''

    assert isinstance(menu, (int, float)), 'menu must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(455,tuple([menu]))
    return _ret


  @functools.native_method
  def get_menu_popup(self, menu:'int'   ) -> typing.Union['py4godot_popupmenu.PopupMenu']:
    r'''
				Returns `PopupMenu` associated with menu item.
			'''

    assert isinstance(menu, (int, float)), 'menu must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PopupMenu
    _ret._ptr = self._ptr.call_with_return(456,tuple([menu]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('MenuBar', MenuBar.cast)
register_class('MenuBar', MenuBar)
