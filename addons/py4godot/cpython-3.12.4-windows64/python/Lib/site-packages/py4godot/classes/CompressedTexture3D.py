# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Texture3D as py4godot_texture3d 
from py4godot.wrappers.wrappers import CPPCompressedTexture3DWrapper


class CompressedTexture3D(py4godot_texture3d.Texture3D):
  r'''
		`CompressedTexture3D` is the VRAM-compressed counterpart of `ImageTexture3D`. The file extension for `CompressedTexture3D` files is `.ctex3d`. This file format is internal to Godot; it is created by importing other image formats with the import system.
		`CompressedTexture3D` uses VRAM compression, which allows to reduce memory usage on the GPU when rendering the texture. This also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D.
		See `Texture3D` for a general description of 3D textures.
	'''

  @staticmethod
  def constructor():
    class_ = CompressedTexture3D.construct_without_init()
    class_._ptr = constructor(231,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CompressedTexture3D.construct_without_init()
    class_._ptr = constructor(231,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCompressedTexture3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(231,0, ())


  def generate_wrapper(self):
    return CPPCompressedTexture3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CompressedTexture3D.__new__(CompressedTexture3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CompressedTexture3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CompressedTexture3D.construct_without_init()
    cls._ptr = CPPCompressedTexture3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CompressedTexture3D.construct_without_init()
    cls._ptr = CPPCompressedTexture3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def load_path(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_load_path()
    return _ret
  @load_path.setter
  def load_path(self,  value:'str'):
    self.load(value)
  @functools.native_method
  def load(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Loads the texture from the specified `path`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'

    self.py__load_path = path



    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    py__string_path = utils.py_string_to_string(path)
    py__string_path.shouldBeDeleted = False


    _ret:int
    _ret = self._ptr.call_with_return(90,tuple([py__string_path._ptr]))
    return _ret


  @functools.native_method
  def get_load_path(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return utils.gd_string_to_py_string(_ret)



register_cast_function('CompressedTexture3D', CompressedTexture3D.cast)
register_class('CompressedTexture3D', CompressedTexture3D)
