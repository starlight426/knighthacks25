# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectDistortionWrapper

class Mode:
  MODE_CLIP = 0
  MODE_ATAN = 1
  MODE_LOFI = 2
  MODE_OVERDRIVE = 3
  MODE_WAVESHAPE = 4


class AudioEffectDistortion(py4godot_audioeffect.AudioEffect):
  r'''
		Different types are available: clip, tan, lo-fi (bit crushing), overdrive, or waveshape.
		By distorting the waveform the frequency content changes, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectDistortion.construct_without_init()
    class_._ptr = constructor(113,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectDistortion.construct_without_init()
    class_._ptr = constructor(113,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectDistortionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(113,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectDistortionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectDistortion.__new__(AudioEffectDistortion)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectDistortion'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectDistortion.construct_without_init()
    cls._ptr = CPPAudioEffectDistortionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectDistortion.construct_without_init()
    cls._ptr = CPPAudioEffectDistortionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mode()
    return _ret
  @mode.setter
  def mode(self,  value:'int'):
    self.set_mode(value)
  @property
  def pre_gain(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_pre_gain()
    return _ret
  @pre_gain.setter
  def pre_gain(self,  value:'float'):
    self.set_pre_gain(value)
  @property
  def keep_hf_hz(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_keep_hf_hz()
    return _ret
  @keep_hf_hz.setter
  def keep_hf_hz(self,  value:'float'):
    self.set_keep_hf_hz(value)
  @property
  def drive(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_drive()
    return _ret
  @drive.setter
  def drive(self,  value:'float'):
    self.set_drive(value)
  @property
  def post_gain(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_post_gain()
    return _ret
  @post_gain.setter
  def post_gain(self,  value:'float'):
    self.set_post_gain(value)
  @functools.native_method
  def set_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__mode = mode






    self._ptr.call_with_return(78,tuple([mode]))

  @functools.native_method
  def get_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_pre_gain(self, pre_gain:'float'   ) -> None:
    r''''''

    assert isinstance(pre_gain, (int, float)), 'pre_gain must be int or float'

    self.py__pre_gain = pre_gain






    self._ptr.call_with_return(80,tuple([pre_gain]))

  @functools.native_method
  def get_pre_gain(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_keep_hf_hz(self, keep_hf_hz:'float'   ) -> None:
    r''''''

    assert isinstance(keep_hf_hz, (int, float)), 'keep_hf_hz must be int or float'

    self.py__keep_hf_hz = keep_hf_hz






    self._ptr.call_with_return(82,tuple([keep_hf_hz]))

  @functools.native_method
  def get_keep_hf_hz(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_drive(self, drive:'float'   ) -> None:
    r''''''

    assert isinstance(drive, (int, float)), 'drive must be int or float'

    self.py__drive = drive






    self._ptr.call_with_return(84,tuple([drive]))

  @functools.native_method
  def get_drive(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_post_gain(self, post_gain:'float'   ) -> None:
    r''''''

    assert isinstance(post_gain, (int, float)), 'post_gain must be int or float'

    self.py__post_gain = post_gain






    self._ptr.call_with_return(86,tuple([post_gain]))

  @functools.native_method
  def get_post_gain(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret



register_cast_function('AudioEffectDistortion', AudioEffectDistortion.cast)
register_class('AudioEffectDistortion', AudioEffectDistortion)
