# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.StyleBoxTexture as py4godot_styleboxtexture 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.SystemFont as py4godot_systemfont 
  import py4godot.classes.StyleBox as py4godot_stylebox 
  import py4godot.classes.Theme as py4godot_theme 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.FontFile as py4godot_fontfile 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.StyleBoxLine as py4godot_styleboxline 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.Font as py4godot_font 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.StyleBoxFlat as py4godot_styleboxflat 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.StyleBoxEmpty as py4godot_styleboxempty 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
  import py4godot.classes.FontVariation as py4godot_fontvariation 
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPThemeDBWrapper

_ThemeDB_singleton_instance = None

class ThemeDB(py4godot_object.Object):
  r'''
		This singleton provides access to static information about `Theme` resources used by the engine and by your projects. You can fetch the default engine theme, as well as your project configured theme.
		`ThemeDB` also contains fallback values for theme properties.
	'''


  def generate_wrapper(self):
    return CPPThemeDBWrapper()
  def init_signals(self):
    super().init_signals()
    fallback_changed_name = utils.py_string_to_string_name("fallback_changed")
    self.fallback_changed = signals.BuiltinSignal(self, fallback_changed_name)

  @staticmethod
  def construct_without_init():
    cls = ThemeDB.__new__(ThemeDB)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ThemeDB'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ThemeDB.construct_without_init()
    cls._ptr = CPPThemeDBWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ThemeDB.construct_without_init()
    cls._ptr = CPPThemeDBWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _ThemeDB_singleton_instance
    if _ThemeDB_singleton_instance is None:
      singleton = ThemeDB()
      singleton._ptr = constructor(832,0, ())
      _ThemeDB_singleton_instance = singleton
    return _ThemeDB_singleton_instance

  @property
  def fallback_base_scale(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_fallback_base_scale()
    return _ret
  @fallback_base_scale.setter
  def fallback_base_scale(self,  value:'float'):
    self.set_fallback_base_scale(value)
  @property
  def fallback_font(self) -> typing.Union['py4godot_font.Font','py4godot_systemfont.SystemFont','py4godot_fontfile.FontFile','py4godot_fontvariation.FontVariation']:
    r''''''
    _ret = self. get_fallback_font()
    return _ret
  @fallback_font.setter
  def fallback_font(self,  value:'py4godot_object.Object'):
    self.set_fallback_font(value)
  @property
  def fallback_font_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_fallback_font_size()
    return _ret
  @fallback_font_size.setter
  def fallback_font_size(self,  value:'int'):
    self.set_fallback_font_size(value)
  @property
  def fallback_icon(self) -> typing.Any:
    r''''''
    _ret = self. get_fallback_icon()
    return _ret
  @fallback_icon.setter
  def fallback_icon(self,  value:'py4godot_object.Object'):
    self.set_fallback_icon(value)
  @property
  def fallback_stylebox(self) -> typing.Union['py4godot_stylebox.StyleBox','py4godot_styleboxflat.StyleBoxFlat','py4godot_styleboxtexture.StyleBoxTexture','py4godot_styleboxempty.StyleBoxEmpty','py4godot_styleboxline.StyleBoxLine']:
    r''''''
    _ret = self. get_fallback_stylebox()
    return _ret
  @fallback_stylebox.setter
  def fallback_stylebox(self,  value:'py4godot_object.Object'):
    self.set_fallback_stylebox(value)
  @functools.native_method
  def get_default_theme(self) -> typing.Union['py4godot_theme.Theme']:
    r'''
				Returns a reference to the default engine `Theme`. This theme resource is responsible for the out-of-the-box look of `Control` nodes and cannot be overridden.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Theme
    _ret._ptr = self._ptr.call_with_return(49,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_project_theme(self) -> typing.Union['py4godot_theme.Theme']:
    r'''
				Returns a reference to the custom project `Theme`. This theme resources allows to override the default engine theme for every control node in the project.
				To set the project theme, see `ProjectSettings.gui/theme/custom`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Theme
    _ret._ptr = self._ptr.call_with_return(50,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_fallback_base_scale(self, base_scale:'float'   ) -> None:
    r''''''

    assert isinstance(base_scale, (int, float)), 'base_scale must be int or float'

    self.py__fallback_base_scale = base_scale






    self._ptr.call_with_return(51,tuple([base_scale]))

  @functools.native_method
  def get_fallback_base_scale(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(52,tuple([]))

    return _ret


  @functools.native_method
  def set_fallback_font(self, font:'py4godot_font.Font'   ) -> None:
    r''''''

    assert(not font is None)
    assert isinstance(font, get_class('Font')), 'font must be Font'

    self.py__fallback_font = font






    self._ptr.call_with_return(53,tuple([font._ptr]))

  @functools.native_method
  def get_fallback_font(self) -> typing.Union['py4godot_font.Font','py4godot_systemfont.SystemFont','py4godot_fontfile.FontFile','py4godot_fontvariation.FontVariation']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Font
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_fallback_font_size(self, font_size:'int'   ) -> None:
    r''''''

    assert isinstance(font_size, (int, float)), 'font_size must be int or float'

    self.py__fallback_font_size = font_size






    self._ptr.call_with_return(55,tuple([font_size]))

  @functools.native_method
  def get_fallback_font_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_fallback_icon(self, icon:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not icon is None)
    assert isinstance(icon, get_class('Texture2D')), 'icon must be Texture2D'

    self.py__fallback_icon = icon






    self._ptr.call_with_return(57,tuple([icon._ptr]))

  @functools.native_method
  def get_fallback_icon(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(58,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_fallback_stylebox(self, stylebox:'py4godot_stylebox.StyleBox'   ) -> None:
    r''''''

    assert(not stylebox is None)
    assert isinstance(stylebox, get_class('StyleBox')), 'stylebox must be StyleBox'

    self.py__fallback_stylebox = stylebox






    self._ptr.call_with_return(59,tuple([stylebox._ptr]))

  @functools.native_method
  def get_fallback_stylebox(self) -> typing.Union['py4godot_stylebox.StyleBox','py4godot_styleboxflat.StyleBoxFlat','py4godot_styleboxtexture.StyleBoxTexture','py4godot_styleboxempty.StyleBoxEmpty','py4godot_styleboxline.StyleBoxLine']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: StyleBox
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('ThemeDB', ThemeDB.cast)
register_class('ThemeDB', ThemeDB)
