# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPSpringBoneCollision3DWrapper


class SpringBoneCollision3D(py4godot_node3d.Node3D):
  r'''
		A collision can be a child of `SpringBoneSimulator3D`. If it is not a child of `SpringBoneSimulator3D`, it has no effect.
		The colliding and sliding are done in the `SpringBoneSimulator3D`'s modification process in order of its collision list which is set by `SpringBoneSimulator3D.set_collision_path`. If `SpringBoneSimulator3D.are_all_child_collisions_enabled` is `true`, the order matches `SceneTree`.
		If `bone` is set, it synchronizes with the bone pose of the ancestor `Skeleton3D`, which is done in before the `SpringBoneSimulator3D`'s modification process as the pre-process.
		**Warning:** A scaled `SpringBoneCollision3D` will likely not behave as expected. Make sure that the parent `Skeleton3D` and its bones are not scaled.
	'''

  @staticmethod
  def constructor():
    class_ = SpringBoneCollision3D.construct_without_init()
    class_._ptr = constructor(774,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SpringBoneCollision3D.construct_without_init()
    class_._ptr = constructor(774,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSpringBoneCollision3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(774,0, ())


  def generate_wrapper(self):
    return CPPSpringBoneCollision3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SpringBoneCollision3D.__new__(SpringBoneCollision3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SpringBoneCollision3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SpringBoneCollision3D.construct_without_init()
    cls._ptr = CPPSpringBoneCollision3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SpringBoneCollision3D.construct_without_init()
    cls._ptr = CPPSpringBoneCollision3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def bone_name(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_bone_name()
    return _ret
  @bone_name.setter
  def bone_name(self,  value:'object'):
    self.set_bone_name(value)
  @property
  def bone(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_bone()
    return _ret
  @bone.setter
  def bone(self,  value:'int'):
    self.set_bone(value)
  @property
  def position_offset(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_position_offset()
    return _ret
  @position_offset.setter
  def position_offset(self,  value:'Vector3'):
    self.set_position_offset(value)
  @property
  def rotation_offset(self) -> typing.Union['Quaternion']:
    r''''''
    _ret = self. get_rotation_offset()
    return _ret
  @rotation_offset.setter
  def rotation_offset(self,  value:'Quaternion'):
    self.set_rotation_offset(value)
  @functools.native_method
  def get_skeleton(self) -> typing.Union['py4godot_skeleton3d.Skeleton3D']:
    r'''
				Get parent `Skeleton3D` node of the parent `SpringBoneSimulator3D` if found.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Skeleton3D
    _ret._ptr = self._ptr.call_with_return(251,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_bone_name(self, bone_name:'str'   ) -> None:
    r''''''

    assert(not bone_name is None)
    assert isinstance(bone_name, (str, String)), 'bone_name must be str or String'

    self.py__bone_name = bone_name



    assert(isinstance(bone_name, (str, String)))
    py_string_bone_name = bone_name if isinstance(bone_name, StringName) else c_utils.py_string_to_string(bone_name)

    py__string_bone_name = utils.py_string_to_string(bone_name)
    py__string_bone_name.shouldBeDeleted = False


    self._ptr.call_with_return(252,tuple([py__string_bone_name._ptr]))

  @functools.native_method
  def get_bone_name(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(253,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_bone(self, bone:'int'   ) -> None:
    r''''''

    assert isinstance(bone, (int, float)), 'bone must be int or float'

    self.py__bone = bone






    self._ptr.call_with_return(254,tuple([bone]))

  @functools.native_method
  def get_bone(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(255,tuple([]))

    return _ret


  @functools.native_method
  def set_position_offset(self, offset:'Vector3'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector3), 'offset must be Vector3'

    self.py__position_offset = offset






    self._ptr.call_with_return(256,tuple([offset._ptr]))

  @functools.native_method
  def get_position_offset(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(257,tuple([]))

    return _ret


  @functools.native_method
  def set_rotation_offset(self, offset:'Quaternion'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Quaternion), 'offset must be Quaternion'

    self.py__rotation_offset = offset






    self._ptr.call_with_return(258,tuple([offset._ptr]))

  @functools.native_method
  def get_rotation_offset(self) -> typing.Union['Quaternion']:
    r''''''




    _ret = Quaternion.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(259,tuple([]))

    return _ret



register_cast_function('SpringBoneCollision3D', SpringBoneCollision3D.cast)
register_class('SpringBoneCollision3D', SpringBoneCollision3D)
