# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeRemapWrapper

class OpType:
  OP_TYPE_SCALAR = 0
  OP_TYPE_VECTOR_2D = 1
  OP_TYPE_VECTOR_2D_SCALAR = 2
  OP_TYPE_VECTOR_3D = 3
  OP_TYPE_VECTOR_3D_SCALAR = 4
  OP_TYPE_VECTOR_4D = 5
  OP_TYPE_VECTOR_4D_SCALAR = 6
  OP_TYPE_MAX = 7


class VisualShaderNodeRemap(py4godot_visualshadernode.VisualShaderNode):
  r'''
		Remap will transform the input range into output range, e.g. you can change a `0..1` value to `-2..2` etc. See `@GlobalScope.remap` for more details.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeRemap.construct_without_init()
    class_._ptr = constructor(938,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeRemap.construct_without_init()
    class_._ptr = constructor(938,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeRemapWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(938,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeRemapWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeRemap.__new__(VisualShaderNodeRemap)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeRemap'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeRemap.construct_without_init()
    cls._ptr = CPPVisualShaderNodeRemapWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeRemap.construct_without_init()
    cls._ptr = CPPVisualShaderNodeRemapWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def op_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_op_type()
    return _ret
  @op_type.setter
  def op_type(self,  value:'int'):
    self.set_op_type(value)
  @functools.native_method
  def set_op_type(self, op_type:'int'  ) -> None:
    r''''''

    assert isinstance(op_type, (int, float)), 'op_type must be int or float'

    self.py__op_type = op_type






    self._ptr.call_with_return(88,tuple([op_type]))

  @functools.native_method
  def get_op_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeRemap', VisualShaderNodeRemap.cast)
register_class('VisualShaderNodeRemap', VisualShaderNodeRemap)
