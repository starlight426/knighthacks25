# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AnimationNodeExtension as py4godot_animationnodeextension 
  import py4godot.classes.AnimationNodeStateMachineTransition as py4godot_animationnodestatemachinetransition 
  import py4godot.classes.AnimationNodeSub2 as py4godot_animationnodesub2 
  import py4godot.classes.AnimationNodeAdd3 as py4godot_animationnodeadd3 
  import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
  import py4godot.classes.AnimationNodeBlend2 as py4godot_animationnodeblend2 
  import py4godot.classes.AnimationNodeTimeScale as py4godot_animationnodetimescale 
  import py4godot.classes.AnimationNodeBlendTree as py4godot_animationnodeblendtree 
  import py4godot.classes.AnimationNodeOneShot as py4godot_animationnodeoneshot 
  import py4godot.classes.AnimationNodeBlend3 as py4godot_animationnodeblend3 
  import py4godot.classes.AnimationNodeOutput as py4godot_animationnodeoutput 
  import py4godot.classes.AnimationNodeTimeSeek as py4godot_animationnodetimeseek 
  import py4godot.classes.AnimationNodeBlendSpace2D as py4godot_animationnodeblendspace2d 
  import py4godot.classes.AnimationNodeAnimation as py4godot_animationnodeanimation 
  import py4godot.classes.AnimationNodeBlendSpace1D as py4godot_animationnodeblendspace1d 
  import py4godot.classes.AnimationNodeTransition as py4godot_animationnodetransition 
  import py4godot.classes.AnimationNode as py4godot_animationnode 
  import py4godot.classes.AnimationNodeAdd2 as py4godot_animationnodeadd2 
  import py4godot.classes.AnimationNodeSync as py4godot_animationnodesync 
import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
import py4godot.classes.AnimationRootNode as py4godot_animationrootnode 
from py4godot.wrappers.wrappers import CPPAnimationNodeStateMachineWrapper

class StateMachineType:
  STATE_MACHINE_TYPE_ROOT = 0
  STATE_MACHINE_TYPE_NESTED = 1
  STATE_MACHINE_TYPE_GROUPED = 2


class AnimationNodeStateMachine(py4godot_animationrootnode.AnimationRootNode):
  r'''
		Contains multiple `AnimationRootNode`s representing animation states, connected in a graph. State transitions can be configured to happen automatically or via code, using a shortest-path algorithm. Retrieve the `AnimationNodeStateMachinePlayback` object from the `AnimationTree` node to control it programmatically.
		
		```gdscript
		var state_machine = $AnimationTree.get("parameters/playback")
		state_machine.travel("some_state")
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = AnimationNodeStateMachine.construct_without_init()
    class_._ptr = constructor(87,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeStateMachine.construct_without_init()
    class_._ptr = constructor(87,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeStateMachineWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(87,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeStateMachineWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeStateMachine.__new__(AnimationNodeStateMachine)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeStateMachine'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeStateMachine.construct_without_init()
    cls._ptr = CPPAnimationNodeStateMachineWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeStateMachine.construct_without_init()
    cls._ptr = CPPAnimationNodeStateMachineWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def state_machine_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_state_machine_type()
    return _ret
  @state_machine_type.setter
  def state_machine_type(self,  value:'int'):
    self.set_state_machine_type(value)
  @property
  def allow_transition_to_self(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_allow_transition_to_self()
    return _ret
  @allow_transition_to_self.setter
  def allow_transition_to_self(self,  value:'bool'):
    self.set_allow_transition_to_self(value)
  @property
  def reset_ends(self) -> typing.Union[bool]:
    r''''''
    _ret = self. are_ends_reset()
    return _ret
  @reset_ends.setter
  def reset_ends(self,  value:'bool'):
    self.set_reset_ends(value)
  @functools.native_method
  def add_node(self, name:'object'   , node:'py4godot_animationnode.AnimationNode'   , position:'Vector2' = None  ) -> None:
    r'''
				Adds a new animation node to the graph. The `position` is used for display in the editor.
			'''
    if position is None:
      position = Vector2.new0()
    if position is None:
      position = Vector2.new0()

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not node is None)
    assert isinstance(node, get_class('AnimationNode')), 'node must be AnimationNode'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)



    self._ptr.call_with_return(102,tuple([py_stringname_name._ptr, node._ptr, position._ptr]))

  @functools.native_method
  def replace_node(self, name:'object'   , node:'py4godot_animationnode.AnimationNode'   ) -> None:
    r'''
				Replaces the given animation node with a new animation node.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not node is None)
    assert isinstance(node, get_class('AnimationNode')), 'node must be AnimationNode'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)


    self._ptr.call_with_return(103,tuple([py_stringname_name._ptr, node._ptr]))

  @functools.native_method
  def get_node(self, name:'object'   ) -> typing.Any:
    r'''
				Returns the animation node with the given name.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AnimationNode
    _ret._ptr = self._ptr.call_with_return(104,tuple([py_stringname_name._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def remove_node(self, name:'object'   ) -> None:
    r'''
				Deletes the given animation node from the graph.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    self._ptr.call_with_return(105,tuple([py_stringname_name._ptr]))

  @functools.native_method
  def rename_node(self, name:'object'   , new_name:'object'   ) -> None:
    r'''
				Renames the given animation node.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not new_name is None)
    assert isinstance(new_name, (str, StringName)), 'new_name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)
    assert(isinstance(new_name, (str, StringName)))
    py_stringname_new_name = new_name if isinstance(new_name, StringName) else c_utils.py_string_to_string_name(new_name)

    self._ptr.call_with_return(106,tuple([py_stringname_name._ptr, py_stringname_new_name._ptr]))

  @functools.native_method
  def has_node(self, name:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the graph contains the given animation node.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = 0
    _ret = self._ptr.call_with_return(107,tuple([py_stringname_name._ptr]))
    return _ret


  @functools.native_method
  def get_node_name(self, node:'py4godot_animationnode.AnimationNode'   ) -> typing.Union['StringName']:
    r'''
				Returns the given animation node's name.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('AnimationNode')), 'node must be AnimationNode'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(108,tuple([node._ptr]))
    return _ret


  @functools.native_method
  def get_node_list(self) -> typing.Union['py4godot_stringnametypedarray.StringNameTypedArray']:
    r'''
				Returns a list containing the names of all animation nodes in this state machine.
			'''




    _ret = py4godot_stringnametypedarray.StringNameTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(109,tuple([]))
    return _ret


  @functools.native_method
  def set_node_position(self, name:'object'   , position:'Vector2'   ) -> None:
    r'''
				Sets the animation node's coordinates. Used for display in the editor.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)


    self._ptr.call_with_return(110,tuple([py_stringname_name._ptr, position._ptr]))

  @functools.native_method
  def get_node_position(self, name:'object'   ) -> typing.Union['Vector2']:
    r'''
				Returns the given animation node's coordinates. Used for display in the editor.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(111,tuple([py_stringname_name._ptr]))
    return _ret


  @functools.native_method
  def has_transition(self, from_:'object'   , to:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if there is a transition between the given animation nodes.
			'''

    assert(not from_ is None)
    assert isinstance(from_, (str, StringName)), 'from_ must be str or StringName'
    assert(not to is None)
    assert isinstance(to, (str, StringName)), 'to must be str or StringName'




    assert(isinstance(from_, (str, StringName)))
    py_stringname_from_ = from_ if isinstance(from_, StringName) else c_utils.py_string_to_string_name(from_)
    assert(isinstance(to, (str, StringName)))
    py_stringname_to = to if isinstance(to, StringName) else c_utils.py_string_to_string_name(to)

    _ret = 0
    _ret = self._ptr.call_with_return(112,tuple([py_stringname_from_._ptr, py_stringname_to._ptr]))
    return _ret


  @functools.native_method
  def add_transition(self, from_:'object'   , to:'object'   , transition:'py4godot_animationnodestatemachinetransition.AnimationNodeStateMachineTransition'   ) -> None:
    r'''
				Adds a transition between the given animation nodes.
			'''

    assert(not from_ is None)
    assert isinstance(from_, (str, StringName)), 'from_ must be str or StringName'
    assert(not to is None)
    assert isinstance(to, (str, StringName)), 'to must be str or StringName'
    assert(not transition is None)
    assert isinstance(transition, get_class('AnimationNodeStateMachineTransition')), 'transition must be AnimationNodeStateMachineTransition'




    assert(isinstance(from_, (str, StringName)))
    py_stringname_from_ = from_ if isinstance(from_, StringName) else c_utils.py_string_to_string_name(from_)
    assert(isinstance(to, (str, StringName)))
    py_stringname_to = to if isinstance(to, StringName) else c_utils.py_string_to_string_name(to)


    self._ptr.call_with_return(113,tuple([py_stringname_from_._ptr, py_stringname_to._ptr, transition._ptr]))

  @functools.native_method
  def get_transition(self, idx:'int'   ) -> typing.Union['py4godot_animationnodestatemachinetransition.AnimationNodeStateMachineTransition']:
    r'''
				Returns the given transition.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AnimationNodeStateMachineTransition
    _ret._ptr = self._ptr.call_with_return(114,tuple([idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_transition_from(self, idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the given transition's start node.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(115,tuple([idx]))
    return _ret


  @functools.native_method
  def get_transition_to(self, idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the given transition's end node.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(116,tuple([idx]))
    return _ret


  @functools.native_method
  def get_transition_count(self) -> typing.Union[int]:
    r'''
				Returns the number of connections in the graph.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(117,tuple([]))
    return _ret


  @functools.native_method
  def remove_transition_by_index(self, idx:'int'   ) -> None:
    r'''
				Deletes the given transition by index.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    self._ptr.call_with_return(118,tuple([idx]))

  @functools.native_method
  def remove_transition(self, from_:'object'   , to:'object'   ) -> None:
    r'''
				Deletes the transition between the two specified animation nodes.
			'''

    assert(not from_ is None)
    assert isinstance(from_, (str, StringName)), 'from_ must be str or StringName'
    assert(not to is None)
    assert isinstance(to, (str, StringName)), 'to must be str or StringName'




    assert(isinstance(from_, (str, StringName)))
    py_stringname_from_ = from_ if isinstance(from_, StringName) else c_utils.py_string_to_string_name(from_)
    assert(isinstance(to, (str, StringName)))
    py_stringname_to = to if isinstance(to, StringName) else c_utils.py_string_to_string_name(to)

    self._ptr.call_with_return(119,tuple([py_stringname_from_._ptr, py_stringname_to._ptr]))

  @functools.native_method
  def set_graph_offset(self, offset:'Vector2'   ) -> None:
    r'''
				Sets the draw offset of the graph. Used for display in the editor.
			'''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'






    self._ptr.call_with_return(120,tuple([offset._ptr]))

  @functools.native_method
  def get_graph_offset(self) -> typing.Union['Vector2']:
    r'''
				Returns the draw offset of the graph. Used for display in the editor.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(121,tuple([]))
    return _ret


  @functools.native_method
  def set_state_machine_type(self, state_machine_type:'int'  ) -> None:
    r''''''

    assert isinstance(state_machine_type, (int, float)), 'state_machine_type must be int or float'

    self.py__state_machine_type = state_machine_type






    self._ptr.call_with_return(122,tuple([state_machine_type]))

  @functools.native_method
  def get_state_machine_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(123,tuple([]))

    return _ret


  @functools.native_method
  def set_allow_transition_to_self(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__allow_transition_to_self = enable






    self._ptr.call_with_return(124,tuple([enable]))

  @functools.native_method
  def is_allow_transition_to_self(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(125,tuple([]))

    return _ret


  @functools.native_method
  def set_reset_ends(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__reset_ends = enable






    self._ptr.call_with_return(126,tuple([enable]))

  @functools.native_method
  def are_ends_reset(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(127,tuple([]))

    return _ret



register_cast_function('AnimationNodeStateMachine', AnimationNodeStateMachine.cast)
register_class('AnimationNodeStateMachine', AnimationNodeStateMachine)
