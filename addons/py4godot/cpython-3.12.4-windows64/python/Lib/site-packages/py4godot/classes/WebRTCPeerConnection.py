# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.WebRTCDataChannelExtension as py4godot_webrtcdatachannelextension 
  import py4godot.classes.WebRTCDataChannel as py4godot_webrtcdatachannel 
  import py4godot.classes.WebRTCPeerConnectionExtension as py4godot_webrtcpeerconnectionextension 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPWebRTCPeerConnectionWrapper

class ConnectionState:
  STATE_NEW = 0
  STATE_CONNECTING = 1
  STATE_CONNECTED = 2
  STATE_DISCONNECTED = 3
  STATE_FAILED = 4
  STATE_CLOSED = 5
class GatheringState:
  GATHERING_STATE_NEW = 0
  GATHERING_STATE_GATHERING = 1
  GATHERING_STATE_COMPLETE = 2
class SignalingState:
  SIGNALING_STATE_STABLE = 0
  SIGNALING_STATE_HAVE_LOCAL_OFFER = 1
  SIGNALING_STATE_HAVE_REMOTE_OFFER = 2
  SIGNALING_STATE_HAVE_LOCAL_PRANSWER = 3
  SIGNALING_STATE_HAVE_REMOTE_PRANSWER = 4
  SIGNALING_STATE_CLOSED = 5


class WebRTCPeerConnection(py4godot_refcounted.RefCounted):
  r''''''

  @staticmethod
  def constructor():
    class_ = WebRTCPeerConnection.construct_without_init()
    class_._ptr = constructor(997,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WebRTCPeerConnection.construct_without_init()
    class_._ptr = constructor(997,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWebRTCPeerConnectionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(997,0, ())


  def generate_wrapper(self):
    return CPPWebRTCPeerConnectionWrapper()
  def init_signals(self):
    super().init_signals()
    session_description_created_name = utils.py_string_to_string_name("session_description_created")
    self.session_description_created = signals.BuiltinSignal(self, session_description_created_name)
    ice_candidate_created_name = utils.py_string_to_string_name("ice_candidate_created")
    self.ice_candidate_created = signals.BuiltinSignal(self, ice_candidate_created_name)
    data_channel_received_name = utils.py_string_to_string_name("data_channel_received")
    self.data_channel_received = signals.BuiltinSignal(self, data_channel_received_name)

  @staticmethod
  def construct_without_init():
    cls = WebRTCPeerConnection.__new__(WebRTCPeerConnection)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WebRTCPeerConnection'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCPeerConnection.construct_without_init()
    cls._ptr = CPPWebRTCPeerConnectionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCPeerConnection.construct_without_init()
    cls._ptr = CPPWebRTCPeerConnectionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @staticmethod
  def set_default_extension(extension_class:'object'   ) -> None:
    r''''''

    assert(not extension_class is None)
    assert isinstance(extension_class, (str, StringName)), 'extension_class must be str or StringName'




    assert(isinstance(extension_class, (str, StringName)))
    py_stringname_extension_class = extension_class if isinstance(extension_class, StringName) else c_utils.py_string_to_string_name(extension_class)

    static_method(997,0,tuple([py_stringname_extension_class._ptr]))

  @functools.native_method
  def initialize(self, configuration:'Dictionary' = None  ) -> typing.Union[int]:
    r''''''
    if configuration is None:
      configuration = Dictionary.new0()
    if configuration is None:
      configuration = Dictionary.new0()







    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([configuration._ptr]))
    return _ret


  @functools.native_method
  def create_data_channel(self, label:'str'   , options:'Dictionary' = None  ) -> typing.Union['py4godot_webrtcdatachannel.WebRTCDataChannel','py4godot_webrtcdatachannelextension.WebRTCDataChannelExtension']:
    r''''''
    if options is None:
      options = Dictionary.new0()
    if options is None:
      options = Dictionary.new0()

    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'




    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)


    _ret = classes.Object.Object.construct_without_init() #Smart casted to: WebRTCDataChannel
    _ret._ptr = self._ptr.call_with_return(54,tuple([py_string_label._ptr, options._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def create_offer(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def set_local_description(self, type:'str'   , sdp:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not type is None)
    assert isinstance(type, (str, String)), 'type must be str or String'
    assert(not sdp is None)
    assert isinstance(sdp, (str, String)), 'sdp must be str or String'




    assert(isinstance(type, (str, String)))
    py_string_type = type if isinstance(type, StringName) else c_utils.py_string_to_string(type)
    assert(isinstance(sdp, (str, String)))
    py_string_sdp = sdp if isinstance(sdp, StringName) else c_utils.py_string_to_string(sdp)

    _ret:int
    _ret = self._ptr.call_with_return(56,tuple([py_string_type._ptr, py_string_sdp._ptr]))
    return _ret


  @functools.native_method
  def set_remote_description(self, type:'str'   , sdp:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not type is None)
    assert isinstance(type, (str, String)), 'type must be str or String'
    assert(not sdp is None)
    assert isinstance(sdp, (str, String)), 'sdp must be str or String'




    assert(isinstance(type, (str, String)))
    py_string_type = type if isinstance(type, StringName) else c_utils.py_string_to_string(type)
    assert(isinstance(sdp, (str, String)))
    py_string_sdp = sdp if isinstance(sdp, StringName) else c_utils.py_string_to_string(sdp)

    _ret:int
    _ret = self._ptr.call_with_return(57,tuple([py_string_type._ptr, py_string_sdp._ptr]))
    return _ret


  @functools.native_method
  def add_ice_candidate(self, media:'str'   , index:'int'   , name:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not media is None)
    assert isinstance(media, (str, String)), 'media must be str or String'
    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(media, (str, String)))
    py_string_media = media if isinstance(media, StringName) else c_utils.py_string_to_string(media)

    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret:int
    _ret = self._ptr.call_with_return(58,tuple([py_string_media._ptr, index, py_string_name._ptr]))
    return _ret


  @functools.native_method
  def poll(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(59,tuple([]))
    return _ret


  @functools.native_method
  def close(self) -> None:
    r''''''




    self._ptr.call_with_return(60,tuple([]))

  @functools.native_method
  def get_connection_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([]))
    return _ret


  @functools.native_method
  def get_gathering_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(62,tuple([]))
    return _ret


  @functools.native_method
  def get_signaling_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([]))
    return _ret



register_cast_function('WebRTCPeerConnection', WebRTCPeerConnection.cast)
register_class('WebRTCPeerConnection', WebRTCPeerConnection)
