# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDPipelineSpecializationConstantWrapper


class RDPipelineSpecializationConstant(py4godot_refcounted.RefCounted):
  r'''
		A _specialization constant_ is a way to create additional variants of shaders without actually increasing the number of shader versions that are compiled. This allows improving performance by reducing the number of shader versions and reducing `if` branching, while still allowing shaders to be flexible for different use cases.
		This object is used by `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDPipelineSpecializationConstant.construct_without_init()
    class_._ptr = constructor(652,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDPipelineSpecializationConstant.construct_without_init()
    class_._ptr = constructor(652,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDPipelineSpecializationConstantWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(652,0, ())


  def generate_wrapper(self):
    return CPPRDPipelineSpecializationConstantWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDPipelineSpecializationConstant.__new__(RDPipelineSpecializationConstant)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDPipelineSpecializationConstant'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineSpecializationConstant.construct_without_init()
    cls._ptr = CPPRDPipelineSpecializationConstantWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineSpecializationConstant.construct_without_init()
    cls._ptr = CPPRDPipelineSpecializationConstantWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def value(self) -> typing.Union[typing.Any]:
    r''''''
    _ret = self. get_value()
    return _ret
  @value.setter
  def value(self,  value:'object'):
    self.set_value(value)
  @property
  def constant_id(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_constant_id()
    return _ret
  @constant_id.setter
  def constant_id(self,  value:'int'):
    self.set_constant_id(value)
  @functools.native_method
  def set_value(self, value:'object'   ) -> None:
    r''''''

    

    self.py__value = value






    self._ptr.call_with_return(53,tuple([value]))

  @functools.native_method
  def get_value(self) -> typing.Union[typing.Any]:
    r''''''




    _ret = None
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_constant_id(self, constant_id:'int'   ) -> None:
    r''''''

    assert isinstance(constant_id, (int, float)), 'constant_id must be int or float'

    self.py__constant_id = constant_id






    self._ptr.call_with_return(55,tuple([constant_id]))

  @functools.native_method
  def get_constant_id(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret



register_cast_function('RDPipelineSpecializationConstant', RDPipelineSpecializationConstant.cast)
register_class('RDPipelineSpecializationConstant', RDPipelineSpecializationConstant)
