# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Control as py4godot_control 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPEditorDebuggerSessionWrapper


class EditorDebuggerSession(py4godot_refcounted.RefCounted):
  r'''
		This class cannot be directly instantiated and must be retrieved via an `EditorDebuggerPlugin`.
		You can add tabs to the session UI via `add_session_tab`, send messages via `send_message`, and toggle `EngineProfiler`s via `toggle_profiler`.
	'''

  @staticmethod
  def constructor():
    class_ = EditorDebuggerSession.construct_without_init()
    class_._ptr = constructor(269,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorDebuggerSession.construct_without_init()
    class_._ptr = constructor(269,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorDebuggerSessionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(269,0, ())


  def generate_wrapper(self):
    return CPPEditorDebuggerSessionWrapper()
  def init_signals(self):
    super().init_signals()
    started_name = utils.py_string_to_string_name("started")
    self.started = signals.BuiltinSignal(self, started_name)
    stopped_name = utils.py_string_to_string_name("stopped")
    self.stopped = signals.BuiltinSignal(self, stopped_name)
    breaked_name = utils.py_string_to_string_name("breaked")
    self.breaked = signals.BuiltinSignal(self, breaked_name)
    continued_name = utils.py_string_to_string_name("continued")
    self.continued = signals.BuiltinSignal(self, continued_name)

  @staticmethod
  def construct_without_init():
    cls = EditorDebuggerSession.__new__(EditorDebuggerSession)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorDebuggerSession'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorDebuggerSession.construct_without_init()
    cls._ptr = CPPEditorDebuggerSessionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorDebuggerSession.construct_without_init()
    cls._ptr = CPPEditorDebuggerSessionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def send_message(self, message:'str'   , data:'Array' = None  ) -> None:
    r'''
				Sends the given `message` to the attached remote instance, optionally passing additionally `data`. See `EngineDebugger` for how to retrieve those messages.
			'''
    if data is None:
      data = Array.new0()
    if data is None:
      data = Array.new0()

    assert(not message is None)
    assert isinstance(message, (str, String)), 'message must be str or String'




    assert(isinstance(message, (str, String)))
    py_string_message = message if isinstance(message, StringName) else c_utils.py_string_to_string(message)


    self._ptr.call_with_return(53,tuple([py_string_message._ptr, data._ptr]))

  @functools.native_method
  def toggle_profiler(self, profiler:'str'   , enable:'bool'   , data:'Array' = None  ) -> None:
    r'''
				Toggle the given `profiler` on the attached remote instance, optionally passing additionally `data`. See `EngineProfiler` for more details.
			'''
    if data is None:
      data = Array.new0()
    if data is None:
      data = Array.new0()

    assert(not profiler is None)
    assert isinstance(profiler, (str, String)), 'profiler must be str or String'
    assert isinstance(enable, bool), 'enable must be bool'




    assert(isinstance(profiler, (str, String)))
    py_string_profiler = profiler if isinstance(profiler, StringName) else c_utils.py_string_to_string(profiler)



    self._ptr.call_with_return(54,tuple([py_string_profiler._ptr, enable, data._ptr]))

  @functools.native_method
  def is_breaked(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the attached remote instance is currently in the debug loop.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def is_debuggable(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the attached remote instance can be debugged.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))
    return _ret


  @functools.native_method
  def is_active(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the debug session is currently attached to a remote instance.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))
    return _ret


  @functools.native_method
  def add_session_tab(self, control:'py4godot_control.Control'   ) -> None:
    r'''
				Adds the given `control` to the debug session UI in the debugger bottom panel. The `control`'s node name will be used as the tab title.
			'''

    assert(not control is None)
    assert isinstance(control, get_class('Control')), 'control must be Control'






    self._ptr.call_with_return(58,tuple([control._ptr]))

  @functools.native_method
  def remove_session_tab(self, control:'py4godot_control.Control'   ) -> None:
    r'''
				Removes the given `control` from the debug session UI in the debugger bottom panel.
			'''

    assert(not control is None)
    assert isinstance(control, get_class('Control')), 'control must be Control'






    self._ptr.call_with_return(59,tuple([control._ptr]))

  @functools.native_method
  def set_breakpoint(self, path:'str'   , line:'int'   , enabled:'bool'   ) -> None:
    r'''
				Enables or disables a specific breakpoint based on `enabled`, updating the Editor Breakpoint Panel accordingly.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(line, (int, float)), 'line must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)



    self._ptr.call_with_return(60,tuple([py_string_path._ptr, line, enabled]))


register_cast_function('EditorDebuggerSession', EditorDebuggerSession.cast)
register_class('EditorDebuggerSession', EditorDebuggerSession)
