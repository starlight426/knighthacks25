# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.WebRTCPeerConnection as py4godot_webrtcpeerconnection 
import py4godot.classes.MultiplayerPeer as py4godot_multiplayerpeer 
from py4godot.wrappers.wrappers import CPPWebRTCMultiplayerPeerWrapper


class WebRTCMultiplayerPeer(py4godot_multiplayerpeer.MultiplayerPeer):
  r''''''

  @staticmethod
  def constructor():
    class_ = WebRTCMultiplayerPeer.construct_without_init()
    class_._ptr = constructor(996,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WebRTCMultiplayerPeer.construct_without_init()
    class_._ptr = constructor(996,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWebRTCMultiplayerPeerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(996,0, ())


  def generate_wrapper(self):
    return CPPWebRTCMultiplayerPeerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WebRTCMultiplayerPeer.__new__(WebRTCMultiplayerPeer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WebRTCMultiplayerPeer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCMultiplayerPeer.construct_without_init()
    cls._ptr = CPPWebRTCMultiplayerPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCMultiplayerPeer.construct_without_init()
    cls._ptr = CPPWebRTCMultiplayerPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def create_server(self, channels_config:'Array' = None  ) -> typing.Union[int]:
    r''''''
    if channels_config is None:
      channels_config = Array.new0()
    if channels_config is None:
      channels_config = Array.new0()







    _ret:int
    _ret = self._ptr.call_with_return(78,tuple([channels_config._ptr]))
    return _ret


  @functools.native_method
  def create_client(self, peer_id:'int'   , channels_config:'Array' = None  ) -> typing.Union[int]:
    r''''''
    if channels_config is None:
      channels_config = Array.new0()
    if channels_config is None:
      channels_config = Array.new0()

    assert isinstance(peer_id, (int, float)), 'peer_id must be int or float'







    _ret:int
    _ret = self._ptr.call_with_return(79,tuple([peer_id, channels_config._ptr]))
    return _ret


  @functools.native_method
  def create_mesh(self, peer_id:'int'   , channels_config:'Array' = None  ) -> typing.Union[int]:
    r''''''
    if channels_config is None:
      channels_config = Array.new0()
    if channels_config is None:
      channels_config = Array.new0()

    assert isinstance(peer_id, (int, float)), 'peer_id must be int or float'







    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([peer_id, channels_config._ptr]))
    return _ret


  @functools.native_method
  def add_peer(self, peer:'py4godot_webrtcpeerconnection.WebRTCPeerConnection'   , peer_id:'int'   , unreliable_lifetime:'int' =1  ) -> typing.Union[int]:
    r''''''

    assert(not peer is None)
    assert isinstance(peer, get_class('WebRTCPeerConnection')), 'peer must be WebRTCPeerConnection'
    assert isinstance(peer_id, (int, float)), 'peer_id must be int or float'
    assert isinstance(unreliable_lifetime, (int, float)), 'unreliable_lifetime must be int or float'








    _ret:int
    _ret = self._ptr.call_with_return(81,tuple([peer._ptr, peer_id, unreliable_lifetime]))
    return _ret


  @functools.native_method
  def remove_peer(self, peer_id:'int'   ) -> None:
    r''''''

    assert isinstance(peer_id, (int, float)), 'peer_id must be int or float'






    self._ptr.call_with_return(82,tuple([peer_id]))

  @functools.native_method
  def has_peer(self, peer_id:'int'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(peer_id, (int, float)), 'peer_id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([peer_id]))
    return _ret


  @functools.native_method
  def get_peer(self, peer_id:'int'   ) -> typing.Union['Dictionary']:
    r''''''

    assert isinstance(peer_id, (int, float)), 'peer_id must be int or float'






    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([peer_id]))
    return _ret


  @functools.native_method
  def get_peers(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))
    return _ret



register_cast_function('WebRTCMultiplayerPeer', WebRTCMultiplayerPeer.cast)
register_class('WebRTCMultiplayerPeer', WebRTCMultiplayerPeer)
