# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CameraAttributesPhysical as py4godot_cameraattributesphysical 
  import py4godot.classes.Environment as py4godot_environment 
  import py4godot.classes.Compositor as py4godot_compositor 
  import py4godot.classes.CameraAttributes as py4godot_cameraattributes 
  import py4godot.classes.CameraAttributesPractical as py4godot_cameraattributespractical 
import py4godot.classes.Node as py4godot_node 
from py4godot.wrappers.wrappers import CPPWorldEnvironmentWrapper


class WorldEnvironment(py4godot_node.Node):
  r'''
		The `WorldEnvironment` node is used to configure the default `Environment` for the scene.
		The parameters defined in the `WorldEnvironment` can be overridden by an `Environment` node set on the current `Camera3D`. Additionally, only one `WorldEnvironment` may be instantiated in a given scene at a time.
		The `WorldEnvironment` allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene.
	'''

  @staticmethod
  def constructor():
    class_ = WorldEnvironment.construct_without_init()
    class_._ptr = constructor(1008,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WorldEnvironment.construct_without_init()
    class_._ptr = constructor(1008,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWorldEnvironmentWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1008,0, ())


  def generate_wrapper(self):
    return CPPWorldEnvironmentWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WorldEnvironment.__new__(WorldEnvironment)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WorldEnvironment'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WorldEnvironment.construct_without_init()
    cls._ptr = CPPWorldEnvironmentWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WorldEnvironment.construct_without_init()
    cls._ptr = CPPWorldEnvironmentWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def environment(self) -> typing.Union['py4godot_environment.Environment']:
    r''''''
    _ret = self. get_environment()
    return _ret
  @environment.setter
  def environment(self,  value:'py4godot_object.Object'):
    self.set_environment(value)
  @property
  def camera_attributes(self) -> typing.Union['py4godot_cameraattributespractical.CameraAttributesPractical']:
    r''''''
    _ret = self. get_camera_attributes()
    return _ret
  @camera_attributes.setter
  def camera_attributes(self,  value:'py4godot_object.Object'):
    self.set_camera_attributes(value)
  @property
  def compositor(self) -> typing.Union['py4godot_compositor.Compositor']:
    r''''''
    _ret = self. get_compositor()
    return _ret
  @compositor.setter
  def compositor(self,  value:'py4godot_object.Object'):
    self.set_compositor(value)
  @functools.native_method
  def set_environment(self, env:'py4godot_environment.Environment'   ) -> None:
    r''''''

    assert(not env is None)
    assert isinstance(env, get_class('Environment')), 'env must be Environment'

    self.py__environment = env






    self._ptr.call_with_return(180,tuple([env._ptr]))

  @functools.native_method
  def get_environment(self) -> typing.Union['py4godot_environment.Environment']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Environment
    _ret._ptr = self._ptr.call_with_return(181,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_camera_attributes(self, camera_attributes:'py4godot_cameraattributes.CameraAttributes'   ) -> None:
    r''''''

    assert(not camera_attributes is None)
    assert isinstance(camera_attributes, get_class('CameraAttributes')), 'camera_attributes must be CameraAttributes'

    self.py__camera_attributes = camera_attributes






    self._ptr.call_with_return(182,tuple([camera_attributes._ptr]))

  @functools.native_method
  def get_camera_attributes(self) -> typing.Union['py4godot_cameraattributesphysical.CameraAttributesPhysical','py4godot_cameraattributes.CameraAttributes','py4godot_cameraattributespractical.CameraAttributesPractical']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: CameraAttributes
    _ret._ptr = self._ptr.call_with_return(183,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_compositor(self, compositor:'py4godot_compositor.Compositor'   ) -> None:
    r''''''

    assert(not compositor is None)
    assert isinstance(compositor, get_class('Compositor')), 'compositor must be Compositor'

    self.py__compositor = compositor






    self._ptr.call_with_return(184,tuple([compositor._ptr]))

  @functools.native_method
  def get_compositor(self) -> typing.Union['py4godot_compositor.Compositor']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Compositor
    _ret._ptr = self._ptr.call_with_return(185,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('WorldEnvironment', WorldEnvironment.cast)
register_class('WorldEnvironment', WorldEnvironment)
