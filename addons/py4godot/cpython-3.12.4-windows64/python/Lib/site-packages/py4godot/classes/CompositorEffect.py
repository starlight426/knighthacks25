# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderData as py4godot_renderdata 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPCompositorEffectWrapper

class EffectCallbackType:
  EFFECT_CALLBACK_TYPE_PRE_OPAQUE = 0
  EFFECT_CALLBACK_TYPE_POST_OPAQUE = 1
  EFFECT_CALLBACK_TYPE_POST_SKY = 2
  EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT = 3
  EFFECT_CALLBACK_TYPE_POST_TRANSPARENT = 4
  EFFECT_CALLBACK_TYPE_MAX = 5


class CompositorEffect(py4godot_resource.Resource):
  r'''
		This resource defines a custom rendering effect that can be applied to `Viewport`s through the viewports' `Environment`. You can implement a callback that is called during rendering at a given stage of the rendering pipeline and allows you to insert additional passes. Note that this callback happens on the rendering thread. CompositorEffect is an abstract base class and must be extended to implement specific rendering logic.
	'''

  @staticmethod
  def constructor():
    class_ = CompositorEffect.construct_without_init()
    class_._ptr = constructor(226,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CompositorEffect.construct_without_init()
    class_._ptr = constructor(226,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCompositorEffectWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(226,0, ())


  def generate_wrapper(self):
    return CPPCompositorEffectWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CompositorEffect.__new__(CompositorEffect)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CompositorEffect'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CompositorEffect.construct_without_init()
    cls._ptr = CPPCompositorEffectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CompositorEffect.construct_without_init()
    cls._ptr = CPPCompositorEffectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enabled()
    return _ret
  @enabled.setter
  def enabled(self,  value:'bool'):
    self.set_enabled(value)
  @property
  def effect_callback_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_effect_callback_type()
    return _ret
  @effect_callback_type.setter
  def effect_callback_type(self,  value:'int'):
    self.set_effect_callback_type(value)
  @property
  def access_resolved_color(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_access_resolved_color()
    return _ret
  @access_resolved_color.setter
  def access_resolved_color(self,  value:'bool'):
    self.set_access_resolved_color(value)
  @property
  def access_resolved_depth(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_access_resolved_depth()
    return _ret
  @access_resolved_depth.setter
  def access_resolved_depth(self,  value:'bool'):
    self.set_access_resolved_depth(value)
  @property
  def needs_motion_vectors(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_needs_motion_vectors()
    return _ret
  @needs_motion_vectors.setter
  def needs_motion_vectors(self,  value:'bool'):
    self.set_needs_motion_vectors(value)
  @property
  def needs_normal_roughness(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_needs_normal_roughness()
    return _ret
  @needs_normal_roughness.setter
  def needs_normal_roughness(self,  value:'bool'):
    self.set_needs_normal_roughness(value)
  @property
  def needs_separate_specular(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_needs_separate_specular()
    return _ret
  @needs_separate_specular.setter
  def needs_separate_specular(self,  value:'bool'):
    self.set_needs_separate_specular(value)
  @functools.native_method
  def _render_callback(self, effect_callback_type:'int'   , render_data:'py4godot_renderdata.RenderData'   ) -> None:
    r'''
				Implement this function with your custom rendering code. `effect_callback_type` should always match the effect callback type you've specified in `effect_callback_type`. `render_data` provides access to the rendering state, it is only valid during rendering and should not be stored.
			'''

    assert isinstance(effect_callback_type, (int, float)), 'effect_callback_type must be int or float'
    assert(not render_data is None)
    assert isinstance(render_data, get_class('RenderData')), 'render_data must be RenderData'







    self._ptr.call_with_return(77,tuple([effect_callback_type, render_data._ptr]))

  @functools.native_method
  def set_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__enabled = enabled






    self._ptr.call_with_return(78,tuple([enabled]))

  @functools.native_method
  def get_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_effect_callback_type(self, effect_callback_type:'int'  ) -> None:
    r''''''

    assert isinstance(effect_callback_type, (int, float)), 'effect_callback_type must be int or float'

    self.py__effect_callback_type = effect_callback_type






    self._ptr.call_with_return(80,tuple([effect_callback_type]))

  @functools.native_method
  def get_effect_callback_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_access_resolved_color(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__access_resolved_color = enable






    self._ptr.call_with_return(82,tuple([enable]))

  @functools.native_method
  def get_access_resolved_color(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_access_resolved_depth(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__access_resolved_depth = enable






    self._ptr.call_with_return(84,tuple([enable]))

  @functools.native_method
  def get_access_resolved_depth(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_needs_motion_vectors(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__needs_motion_vectors = enable






    self._ptr.call_with_return(86,tuple([enable]))

  @functools.native_method
  def get_needs_motion_vectors(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_needs_normal_roughness(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__needs_normal_roughness = enable






    self._ptr.call_with_return(88,tuple([enable]))

  @functools.native_method
  def get_needs_normal_roughness(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_needs_separate_specular(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__needs_separate_specular = enable






    self._ptr.call_with_return(90,tuple([enable]))

  @functools.native_method
  def get_needs_separate_specular(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([]))

    return _ret



register_cast_function('CompositorEffect', CompositorEffect.cast)
register_class('CompositorEffect', CompositorEffect)
