# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRExtensionWrapper as py4godot_openxrextensionwrapper 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPOpenXRAPIExtensionWrapper

class OpenXRAlphaBlendModeSupport:
  OPENXR_ALPHA_BLEND_MODE_SUPPORT_NONE = 0
  OPENXR_ALPHA_BLEND_MODE_SUPPORT_REAL = 1
  OPENXR_ALPHA_BLEND_MODE_SUPPORT_EMULATING = 2


class OpenXRAPIExtension(py4godot_refcounted.RefCounted):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRAPIExtension.construct_without_init()
    class_._ptr = constructor(531,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRAPIExtension.construct_without_init()
    class_._ptr = constructor(531,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRAPIExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(531,0, ())


  def generate_wrapper(self):
    return CPPOpenXRAPIExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRAPIExtension.__new__(OpenXRAPIExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRAPIExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRAPIExtension.construct_without_init()
    cls._ptr = CPPOpenXRAPIExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRAPIExtension.construct_without_init()
    cls._ptr = CPPOpenXRAPIExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_instance(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def get_system_id(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def get_session(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def xr_result(self, result:'int'   , format:'str'   , args:'Array'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(result, (int, float)), 'result must be int or float'
    assert(not format is None)
    assert isinstance(format, (str, String)), 'format must be str or String'
    assert(not args is None)
    assert isinstance(args, Array), 'args must be Array'





    assert(isinstance(format, (str, String)))
    py_string_format = format if isinstance(format, StringName) else c_utils.py_string_to_string(format)


    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([result, py_string_format._ptr, args._ptr]))
    return _ret


  @staticmethod
  def openxr_is_enabled(check_run_in_editor:'bool'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(check_run_in_editor, bool), 'check_run_in_editor must be bool'






    _ret = 0
    _ret = static_method(531,0,tuple([check_run_in_editor]))
    return _ret


  @functools.native_method
  def get_instance_proc_addr(self, name:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([py_string_name._ptr]))
    return _ret


  @functools.native_method
  def get_error_string(self, result:'int'   ) -> typing.Union[str]:
    r''''''

    assert isinstance(result, (int, float)), 'result must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([result]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_swapchain_format_name(self, swapchain_format:'int'   ) -> typing.Union[str]:
    r''''''

    assert isinstance(swapchain_format, (int, float)), 'swapchain_format must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(59,tuple([swapchain_format]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_object_name(self, object_type:'int'   , object_handle:'int'   , object_name:'str'   ) -> None:
    r''''''

    assert isinstance(object_type, (int, float)), 'object_type must be int or float'
    assert isinstance(object_handle, (int, float)), 'object_handle must be int or float'
    assert(not object_name is None)
    assert isinstance(object_name, (str, String)), 'object_name must be str or String'






    assert(isinstance(object_name, (str, String)))
    py_string_object_name = object_name if isinstance(object_name, StringName) else c_utils.py_string_to_string(object_name)

    self._ptr.call_with_return(60,tuple([object_type, object_handle, py_string_object_name._ptr]))

  @functools.native_method
  def begin_debug_label_region(self, label_name:'str'   ) -> None:
    r''''''

    assert(not label_name is None)
    assert isinstance(label_name, (str, String)), 'label_name must be str or String'




    assert(isinstance(label_name, (str, String)))
    py_string_label_name = label_name if isinstance(label_name, StringName) else c_utils.py_string_to_string(label_name)

    self._ptr.call_with_return(61,tuple([py_string_label_name._ptr]))

  @functools.native_method
  def end_debug_label_region(self) -> None:
    r''''''




    self._ptr.call_with_return(62,tuple([]))

  @functools.native_method
  def insert_debug_label(self, label_name:'str'   ) -> None:
    r''''''

    assert(not label_name is None)
    assert isinstance(label_name, (str, String)), 'label_name must be str or String'




    assert(isinstance(label_name, (str, String)))
    py_string_label_name = label_name if isinstance(label_name, StringName) else c_utils.py_string_to_string(label_name)

    self._ptr.call_with_return(63,tuple([py_string_label_name._ptr]))

  @functools.native_method
  def is_initialized(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([]))
    return _ret


  @functools.native_method
  def is_running(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(65,tuple([]))
    return _ret


  @functools.native_method
  def get_play_space(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([]))
    return _ret


  @functools.native_method
  def get_predicted_display_time(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(67,tuple([]))
    return _ret


  @functools.native_method
  def get_next_frame_time(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([]))
    return _ret


  @functools.native_method
  def can_render(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(69,tuple([]))
    return _ret


  @functools.native_method
  def find_action(self, name:'str'   , action_set:'RID'   ) -> typing.Union['RID']:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert(not action_set is None)
    assert isinstance(action_set, RID), 'action_set must be RID'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)


    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(70,tuple([py_string_name._ptr, action_set._ptr]))
    return _ret


  @functools.native_method
  def action_get_handle(self, action:'RID'   ) -> typing.Union[int]:
    r''''''

    assert(not action is None)
    assert isinstance(action, RID), 'action must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(71,tuple([action._ptr]))
    return _ret


  @functools.native_method
  def get_hand_tracker(self, hand_index:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(hand_index, (int, float)), 'hand_index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(72,tuple([hand_index]))
    return _ret


  @functools.native_method
  def register_composition_layer_provider(self, extension:'py4godot_openxrextensionwrapper.OpenXRExtensionWrapper'   ) -> None:
    r''''''

    assert(not extension is None)
    assert isinstance(extension, get_class('OpenXRExtensionWrapper')), 'extension must be OpenXRExtensionWrapper'






    self._ptr.call_with_return(73,tuple([extension._ptr]))

  @functools.native_method
  def unregister_composition_layer_provider(self, extension:'py4godot_openxrextensionwrapper.OpenXRExtensionWrapper'   ) -> None:
    r''''''

    assert(not extension is None)
    assert isinstance(extension, get_class('OpenXRExtensionWrapper')), 'extension must be OpenXRExtensionWrapper'






    self._ptr.call_with_return(74,tuple([extension._ptr]))

  @functools.native_method
  def register_projection_views_extension(self, extension:'py4godot_openxrextensionwrapper.OpenXRExtensionWrapper'   ) -> None:
    r''''''

    assert(not extension is None)
    assert isinstance(extension, get_class('OpenXRExtensionWrapper')), 'extension must be OpenXRExtensionWrapper'






    self._ptr.call_with_return(75,tuple([extension._ptr]))

  @functools.native_method
  def unregister_projection_views_extension(self, extension:'py4godot_openxrextensionwrapper.OpenXRExtensionWrapper'   ) -> None:
    r''''''

    assert(not extension is None)
    assert isinstance(extension, get_class('OpenXRExtensionWrapper')), 'extension must be OpenXRExtensionWrapper'






    self._ptr.call_with_return(76,tuple([extension._ptr]))

  @functools.native_method
  def register_frame_info_extension(self, extension:'py4godot_openxrextensionwrapper.OpenXRExtensionWrapper'   ) -> None:
    r''''''

    assert(not extension is None)
    assert isinstance(extension, get_class('OpenXRExtensionWrapper')), 'extension must be OpenXRExtensionWrapper'






    self._ptr.call_with_return(77,tuple([extension._ptr]))

  @functools.native_method
  def unregister_frame_info_extension(self, extension:'py4godot_openxrextensionwrapper.OpenXRExtensionWrapper'   ) -> None:
    r''''''

    assert(not extension is None)
    assert isinstance(extension, get_class('OpenXRExtensionWrapper')), 'extension must be OpenXRExtensionWrapper'






    self._ptr.call_with_return(78,tuple([extension._ptr]))

  @functools.native_method
  def get_render_state_z_near(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def get_render_state_z_far(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))
    return _ret


  @functools.native_method
  def set_velocity_texture(self, render_target:'RID'   ) -> None:
    r''''''

    assert(not render_target is None)
    assert isinstance(render_target, RID), 'render_target must be RID'






    self._ptr.call_with_return(81,tuple([render_target._ptr]))

  @functools.native_method
  def set_velocity_depth_texture(self, render_target:'RID'   ) -> None:
    r''''''

    assert(not render_target is None)
    assert isinstance(render_target, RID), 'render_target must be RID'






    self._ptr.call_with_return(82,tuple([render_target._ptr]))

  @functools.native_method
  def set_velocity_target_size(self, target_size:'Vector2i'   ) -> None:
    r''''''

    assert(not target_size is None)
    assert isinstance(target_size, Vector2i), 'target_size must be Vector2i'






    self._ptr.call_with_return(83,tuple([target_size._ptr]))

  @functools.native_method
  def get_supported_swapchain_formats(self) -> typing.Union['PackedInt64Array']:
    r''''''




    _ret = PackedInt64Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([]))
    return _ret


  @functools.native_method
  def openxr_swapchain_create(self, create_flags:'int'   , usage_flags:'int'   , swapchain_format:'int'   , width:'int'   , height:'int'   , sample_count:'int'   , array_size:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(create_flags, (int, float)), 'create_flags must be int or float'
    assert isinstance(usage_flags, (int, float)), 'usage_flags must be int or float'
    assert isinstance(swapchain_format, (int, float)), 'swapchain_format must be int or float'
    assert isinstance(width, (int, float)), 'width must be int or float'
    assert isinstance(height, (int, float)), 'height must be int or float'
    assert isinstance(sample_count, (int, float)), 'sample_count must be int or float'
    assert isinstance(array_size, (int, float)), 'array_size must be int or float'












    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([create_flags, usage_flags, swapchain_format, width, height, sample_count, array_size]))
    return _ret


  @functools.native_method
  def openxr_swapchain_free(self, swapchain:'int'   ) -> None:
    r''''''

    assert isinstance(swapchain, (int, float)), 'swapchain must be int or float'






    self._ptr.call_with_return(86,tuple([swapchain]))

  @functools.native_method
  def openxr_swapchain_get_swapchain(self, swapchain:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(swapchain, (int, float)), 'swapchain must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([swapchain]))
    return _ret


  @functools.native_method
  def openxr_swapchain_acquire(self, swapchain:'int'   ) -> None:
    r''''''

    assert isinstance(swapchain, (int, float)), 'swapchain must be int or float'






    self._ptr.call_with_return(88,tuple([swapchain]))

  @functools.native_method
  def openxr_swapchain_get_image(self, swapchain:'int'   ) -> typing.Union['RID']:
    r''''''

    assert isinstance(swapchain, (int, float)), 'swapchain must be int or float'






    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(89,tuple([swapchain]))
    return _ret


  @functools.native_method
  def openxr_swapchain_release(self, swapchain:'int'   ) -> None:
    r''''''

    assert isinstance(swapchain, (int, float)), 'swapchain must be int or float'






    self._ptr.call_with_return(90,tuple([swapchain]))

  @functools.native_method
  def get_projection_layer(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([]))
    return _ret


  @functools.native_method
  def set_render_region(self, render_region:'Rect2i'   ) -> None:
    r''''''

    assert(not render_region is None)
    assert isinstance(render_region, Rect2i), 'render_region must be Rect2i'






    self._ptr.call_with_return(92,tuple([render_region._ptr]))

  @functools.native_method
  def set_emulate_environment_blend_mode_alpha_blend(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'






    self._ptr.call_with_return(93,tuple([enabled]))

  @functools.native_method
  def is_environment_blend_mode_alpha_supported(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(94,tuple([]))
    return _ret



register_cast_function('OpenXRAPIExtension', OpenXRAPIExtension.cast)
register_class('OpenXRAPIExtension', OpenXRAPIExtension)
