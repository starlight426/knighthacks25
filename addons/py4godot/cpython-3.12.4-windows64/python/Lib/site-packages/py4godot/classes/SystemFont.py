# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.TextServerDummy as py4godot_textserverdummy 
  import py4godot.classes.TextServerExtension as py4godot_textserverextension 
  import py4godot.classes.TextServer as py4godot_textserver 
  import py4godot.classes.TextServerAdvanced as py4godot_textserveradvanced 
import py4godot.classes.Font as py4godot_font 
from py4godot.wrappers.wrappers import CPPSystemFontWrapper


class SystemFont(py4godot_font.Font):
  r'''
		`SystemFont` loads a font from a system font with the first matching name from `font_names`.
		It will attempt to match font style, but it's not guaranteed.
		The returned font might be part of a font collection or be a variable font with OpenType "weight", "width" and/or "italic" features set.
		You can create `FontVariation` of the system font for precise control over its features.
		**Note:** This class is implemented on iOS, Linux, macOS and Windows, on other platforms it will fallback to default theme font.
	'''

  @staticmethod
  def constructor():
    class_ = SystemFont.construct_without_init()
    class_._ptr = constructor(803,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SystemFont.construct_without_init()
    class_._ptr = constructor(803,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSystemFontWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(803,0, ())


  def generate_wrapper(self):
    return CPPSystemFontWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SystemFont.__new__(SystemFont)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SystemFont'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SystemFont.construct_without_init()
    cls._ptr = CPPSystemFontWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SystemFont.construct_without_init()
    cls._ptr = CPPSystemFontWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def font_names(self) -> typing.Union['PackedStringArray']:
    r''''''
    _ret = self. get_font_names()
    return _ret
  @font_names.setter
  def font_names(self,  value:'PackedStringArray'):
    self.set_font_names(value)
  @property
  def font_italic(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_font_italic()
    return _ret
  @font_italic.setter
  def font_italic(self,  value:'bool'):
    self.set_font_italic(value)
  @property
  def font_weight(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_font_weight()
    return _ret
  @font_weight.setter
  def font_weight(self,  value:'int'):
    self.set_font_weight(value)
  @property
  def font_stretch(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_font_stretch()
    return _ret
  @font_stretch.setter
  def font_stretch(self,  value:'int'):
    self.set_font_stretch(value)
  @property
  def antialiasing(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_antialiasing()
    return _ret
  @antialiasing.setter
  def antialiasing(self,  value:'int'):
    self.set_antialiasing(value)
  @property
  def generate_mipmaps(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_generate_mipmaps()
    return _ret
  @generate_mipmaps.setter
  def generate_mipmaps(self,  value:'bool'):
    self.set_generate_mipmaps(value)
  @property
  def disable_embedded_bitmaps(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_disable_embedded_bitmaps()
    return _ret
  @disable_embedded_bitmaps.setter
  def disable_embedded_bitmaps(self,  value:'bool'):
    self.set_disable_embedded_bitmaps(value)
  @property
  def allow_system_fallback(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_allow_system_fallback()
    return _ret
  @allow_system_fallback.setter
  def allow_system_fallback(self,  value:'bool'):
    self.set_allow_system_fallback(value)
  @property
  def force_autohinter(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_force_autohinter()
    return _ret
  @force_autohinter.setter
  def force_autohinter(self,  value:'bool'):
    self.set_force_autohinter(value)
  @property
  def modulate_color_glyphs(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_modulate_color_glyphs()
    return _ret
  @modulate_color_glyphs.setter
  def modulate_color_glyphs(self,  value:'bool'):
    self.set_modulate_color_glyphs(value)
  @property
  def hinting(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_hinting()
    return _ret
  @hinting.setter
  def hinting(self,  value:'int'):
    self.set_hinting(value)
  @property
  def subpixel_positioning(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_subpixel_positioning()
    return _ret
  @subpixel_positioning.setter
  def subpixel_positioning(self,  value:'int'):
    self.set_subpixel_positioning(value)
  @property
  def keep_rounding_remainders(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_keep_rounding_remainders()
    return _ret
  @keep_rounding_remainders.setter
  def keep_rounding_remainders(self,  value:'bool'):
    self.set_keep_rounding_remainders(value)
  @property
  def multichannel_signed_distance_field(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_multichannel_signed_distance_field()
    return _ret
  @multichannel_signed_distance_field.setter
  def multichannel_signed_distance_field(self,  value:'bool'):
    self.set_multichannel_signed_distance_field(value)
  @property
  def msdf_pixel_range(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_msdf_pixel_range()
    return _ret
  @msdf_pixel_range.setter
  def msdf_pixel_range(self,  value:'int'):
    self.set_msdf_pixel_range(value)
  @property
  def msdf_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_msdf_size()
    return _ret
  @msdf_size.setter
  def msdf_size(self,  value:'int'):
    self.set_msdf_size(value)
  @property
  def oversampling(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_oversampling()
    return _ret
  @oversampling.setter
  def oversampling(self,  value:'float'):
    self.set_oversampling(value)
  @functools.native_method
  def set_antialiasing(self, antialiasing:'int'  ) -> None:
    r''''''

    assert isinstance(antialiasing, (int, float)), 'antialiasing must be int or float'

    self.py__antialiasing = antialiasing






    self._ptr.call_with_return(111,tuple([antialiasing]))

  @functools.native_method
  def get_antialiasing(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(112,tuple([]))

    return _ret


  @functools.native_method
  def set_disable_embedded_bitmaps(self, disable_embedded_bitmaps:'bool'   ) -> None:
    r''''''

    assert isinstance(disable_embedded_bitmaps, bool), 'disable_embedded_bitmaps must be bool'

    self.py__disable_embedded_bitmaps = disable_embedded_bitmaps






    self._ptr.call_with_return(113,tuple([disable_embedded_bitmaps]))

  @functools.native_method
  def get_disable_embedded_bitmaps(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(114,tuple([]))

    return _ret


  @functools.native_method
  def set_generate_mipmaps(self, generate_mipmaps:'bool'   ) -> None:
    r''''''

    assert isinstance(generate_mipmaps, bool), 'generate_mipmaps must be bool'

    self.py__generate_mipmaps = generate_mipmaps






    self._ptr.call_with_return(115,tuple([generate_mipmaps]))

  @functools.native_method
  def get_generate_mipmaps(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(116,tuple([]))

    return _ret


  @functools.native_method
  def set_allow_system_fallback(self, allow_system_fallback:'bool'   ) -> None:
    r''''''

    assert isinstance(allow_system_fallback, bool), 'allow_system_fallback must be bool'

    self.py__allow_system_fallback = allow_system_fallback






    self._ptr.call_with_return(117,tuple([allow_system_fallback]))

  @functools.native_method
  def is_allow_system_fallback(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(118,tuple([]))

    return _ret


  @functools.native_method
  def set_force_autohinter(self, force_autohinter:'bool'   ) -> None:
    r''''''

    assert isinstance(force_autohinter, bool), 'force_autohinter must be bool'

    self.py__force_autohinter = force_autohinter






    self._ptr.call_with_return(119,tuple([force_autohinter]))

  @functools.native_method
  def is_force_autohinter(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(120,tuple([]))

    return _ret


  @functools.native_method
  def set_modulate_color_glyphs(self, modulate:'bool'   ) -> None:
    r''''''

    assert isinstance(modulate, bool), 'modulate must be bool'

    self.py__modulate_color_glyphs = modulate






    self._ptr.call_with_return(121,tuple([modulate]))

  @functools.native_method
  def is_modulate_color_glyphs(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(122,tuple([]))

    return _ret


  @functools.native_method
  def set_hinting(self, hinting:'int'  ) -> None:
    r''''''

    assert isinstance(hinting, (int, float)), 'hinting must be int or float'

    self.py__hinting = hinting






    self._ptr.call_with_return(123,tuple([hinting]))

  @functools.native_method
  def get_hinting(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(124,tuple([]))

    return _ret


  @functools.native_method
  def set_subpixel_positioning(self, subpixel_positioning:'int'  ) -> None:
    r''''''

    assert isinstance(subpixel_positioning, (int, float)), 'subpixel_positioning must be int or float'

    self.py__subpixel_positioning = subpixel_positioning






    self._ptr.call_with_return(125,tuple([subpixel_positioning]))

  @functools.native_method
  def get_subpixel_positioning(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(126,tuple([]))

    return _ret


  @functools.native_method
  def set_keep_rounding_remainders(self, keep_rounding_remainders:'bool'   ) -> None:
    r''''''

    assert isinstance(keep_rounding_remainders, bool), 'keep_rounding_remainders must be bool'

    self.py__keep_rounding_remainders = keep_rounding_remainders






    self._ptr.call_with_return(127,tuple([keep_rounding_remainders]))

  @functools.native_method
  def get_keep_rounding_remainders(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(128,tuple([]))

    return _ret


  @functools.native_method
  def set_multichannel_signed_distance_field(self, msdf:'bool'   ) -> None:
    r''''''

    assert isinstance(msdf, bool), 'msdf must be bool'

    self.py__multichannel_signed_distance_field = msdf






    self._ptr.call_with_return(129,tuple([msdf]))

  @functools.native_method
  def is_multichannel_signed_distance_field(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(130,tuple([]))

    return _ret


  @functools.native_method
  def set_msdf_pixel_range(self, msdf_pixel_range:'int'   ) -> None:
    r''''''

    assert isinstance(msdf_pixel_range, (int, float)), 'msdf_pixel_range must be int or float'

    self.py__msdf_pixel_range = msdf_pixel_range






    self._ptr.call_with_return(131,tuple([msdf_pixel_range]))

  @functools.native_method
  def get_msdf_pixel_range(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(132,tuple([]))

    return _ret


  @functools.native_method
  def set_msdf_size(self, msdf_size:'int'   ) -> None:
    r''''''

    assert isinstance(msdf_size, (int, float)), 'msdf_size must be int or float'

    self.py__msdf_size = msdf_size






    self._ptr.call_with_return(133,tuple([msdf_size]))

  @functools.native_method
  def get_msdf_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(134,tuple([]))

    return _ret


  @functools.native_method
  def set_oversampling(self, oversampling:'float'   ) -> None:
    r''''''

    assert isinstance(oversampling, (int, float)), 'oversampling must be int or float'

    self.py__oversampling = oversampling






    self._ptr.call_with_return(135,tuple([oversampling]))

  @functools.native_method
  def get_oversampling(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(136,tuple([]))

    return _ret


  @functools.native_method
  def get_font_names(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(137,tuple([]))

    return _ret


  @functools.native_method
  def set_font_names(self, names:'PackedStringArray'   ) -> None:
    r''''''

    assert(not names is None)
    assert isinstance(names, PackedStringArray), 'names must be PackedStringArray'

    self.py__font_names = names






    self._ptr.call_with_return(138,tuple([names._ptr]))

  @functools.native_method
  def get_font_italic(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(139,tuple([]))

    return _ret


  @functools.native_method
  def set_font_italic(self, italic:'bool'   ) -> None:
    r''''''

    assert isinstance(italic, bool), 'italic must be bool'

    self.py__font_italic = italic






    self._ptr.call_with_return(140,tuple([italic]))

  @functools.native_method
  def set_font_weight(self, weight:'int'   ) -> None:
    r''''''

    assert isinstance(weight, (int, float)), 'weight must be int or float'

    self.py__font_weight = weight






    self._ptr.call_with_return(141,tuple([weight]))

  @functools.native_method
  def set_font_stretch(self, stretch:'int'   ) -> None:
    r''''''

    assert isinstance(stretch, (int, float)), 'stretch must be int or float'

    self.py__font_stretch = stretch






    self._ptr.call_with_return(142,tuple([stretch]))


register_cast_function('SystemFont', SystemFont.cast)
register_class('SystemFont', SystemFont)
