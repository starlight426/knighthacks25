# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CameraFeedTypedArray as py4godot_camerafeedtypedarray 
  import py4godot.classes.CameraFeed as py4godot_camerafeed 
import py4godot.classes.Object as py4godot_object 
import py4godot.classes.CameraFeedTypedArray as py4godot_camerafeedtypedarray 
from py4godot.wrappers.wrappers import CPPCameraServerWrapper

_CameraServer_singleton_instance = None
class FeedImage:
  FEED_RGBA_IMAGE = 0
  FEED_YCBCR_IMAGE = 0
  FEED_Y_IMAGE = 0
  FEED_CBCR_IMAGE = 1


class CameraServer(py4godot_object.Object):
  r'''
		The `CameraServer` keeps track of different cameras accessible in Godot. These are external cameras such as webcams or the cameras on your phone.
		It is notably used to provide AR modules with a video feed from the camera.
		**Note:** This class is currently only implemented on Linux, Android, macOS, and iOS. On other platforms no `CameraFeed`s will be available. To get a `CameraFeed` on iOS, the camera plugin from `url=https://github.com/godotengine/godot-ios-plugins`godot-ios-plugins`/url` is required.
	'''


  def generate_wrapper(self):
    return CPPCameraServerWrapper()
  def init_signals(self):
    super().init_signals()
    camera_feed_added_name = utils.py_string_to_string_name("camera_feed_added")
    self.camera_feed_added = signals.BuiltinSignal(self, camera_feed_added_name)
    camera_feed_removed_name = utils.py_string_to_string_name("camera_feed_removed")
    self.camera_feed_removed = signals.BuiltinSignal(self, camera_feed_removed_name)
    camera_feeds_updated_name = utils.py_string_to_string_name("camera_feeds_updated")
    self.camera_feeds_updated = signals.BuiltinSignal(self, camera_feeds_updated_name)

  @staticmethod
  def construct_without_init():
    cls = CameraServer.__new__(CameraServer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CameraServer'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CameraServer.construct_without_init()
    cls._ptr = CPPCameraServerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CameraServer.construct_without_init()
    cls._ptr = CPPCameraServerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _CameraServer_singleton_instance
    if _CameraServer_singleton_instance is None:
      singleton = CameraServer()
      singleton._ptr = constructor(194,0, ())
      _CameraServer_singleton_instance = singleton
    return _CameraServer_singleton_instance

  @property
  def monitoring_feeds(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_monitoring_feeds()
    return _ret
  @monitoring_feeds.setter
  def monitoring_feeds(self,  value:'bool'):
    self.set_monitoring_feeds(value)
  @functools.native_method
  def set_monitoring_feeds(self, is_monitoring_feeds:'bool'   ) -> None:
    r''''''

    assert isinstance(is_monitoring_feeds, bool), 'is_monitoring_feeds must be bool'

    self.py__monitoring_feeds = is_monitoring_feeds






    self._ptr.call_with_return(49,tuple([is_monitoring_feeds]))

  @functools.native_method
  def is_monitoring_feeds(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(50,tuple([]))

    return _ret


  @functools.native_method
  def get_feed(self, index:'int'   ) -> typing.Union['py4godot_camerafeed.CameraFeed']:
    r'''
				Returns the `CameraFeed` corresponding to the camera with the given `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: CameraFeed
    _ret._ptr = self._ptr.call_with_return(51,tuple([index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_feed_count(self) -> typing.Union[int]:
    r'''
				Returns the number of `CameraFeed`s registered.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(52,tuple([]))
    return _ret


  @functools.native_method
  def feeds(self) -> typing.Union['py4godot_camerafeedtypedarray.CameraFeedTypedArray']:
    r'''
				Returns an array of `CameraFeed`s.
			'''




    _ret = py4godot_camerafeedtypedarray.CameraFeedTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def add_feed(self, feed:'py4godot_camerafeed.CameraFeed'   ) -> None:
    r'''
				Adds the camera `feed` to the camera server.
			'''

    assert(not feed is None)
    assert isinstance(feed, get_class('CameraFeed')), 'feed must be CameraFeed'






    self._ptr.call_with_return(54,tuple([feed._ptr]))

  @functools.native_method
  def remove_feed(self, feed:'py4godot_camerafeed.CameraFeed'   ) -> None:
    r'''
				Removes the specified camera `feed`.
			'''

    assert(not feed is None)
    assert isinstance(feed, get_class('CameraFeed')), 'feed must be CameraFeed'






    self._ptr.call_with_return(55,tuple([feed._ptr]))


register_cast_function('CameraServer', CameraServer.cast)
register_class('CameraServer', CameraServer)
