# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.GDScript as py4godot_gdscript 
  import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
  import py4godot.classes.ScriptExtension as py4godot_scriptextension 
  import py4godot.classes.Object as py4godot_object 
import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPScriptWrapper


class Script(py4godot_resource.Resource):
  r'''
		A class stored as a resource. A script extends the functionality of all objects that instantiate it.
		This is the base class for all scripts and should not be used directly. Trying to create a new script with this class will result in an error.
		The `new` method of a script subclass creates a new instance. `Object.set_script` extends an existing object, if that object's class matches one of the script's base classes.
	'''

  @staticmethod
  def constructor():
    class_ = Script.construct_without_init()
    class_._ptr = constructor(721,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Script.construct_without_init()
    class_._ptr = constructor(721,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPScriptWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(721,0, ())


  def generate_wrapper(self):
    return CPPScriptWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Script.__new__(Script)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Script'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Script.construct_without_init()
    cls._ptr = CPPScriptWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Script.construct_without_init()
    cls._ptr = CPPScriptWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def source_code(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_source_code()
    return _ret
  @source_code.setter
  def source_code(self,  value:'str'):
    self.set_source_code(value)
  @functools.native_method
  def can_instantiate(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the script can be instantiated.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([]))
    return _ret


  @functools.native_method
  def instance_has(self, base_object:'py4godot_object.Object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if `base_object` is an instance of this script.
			'''

    assert(not base_object is None)
    assert isinstance(base_object, get_class('Object')), 'base_object must be Object'






    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([base_object._ptr]))
    return _ret


  @functools.native_method
  def has_source_code(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the script contains non-empty source code.
				**Note:** If a script does not have source code, this does not mean that it is invalid or unusable. For example, a `GDScript` that was exported with binary tokenization has no source code, but still behaves as expected and could be instantiated. This can be checked with `can_instantiate`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def get_source_code(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_source_code(self, source:'str'   ) -> None:
    r''''''

    assert(not source is None)
    assert isinstance(source, (str, String)), 'source must be str or String'

    self.py__source_code = source



    assert(isinstance(source, (str, String)))
    py_string_source = source if isinstance(source, StringName) else c_utils.py_string_to_string(source)

    py__string_source = utils.py_string_to_string(source)
    py__string_source.shouldBeDeleted = False


    self._ptr.call_with_return(81,tuple([py__string_source._ptr]))

  @functools.native_method
  def reload(self, keep_state:'bool' =False  ) -> typing.Union[int]:
    r'''
				Reloads the script's class implementation. Returns an error code.
			'''

    assert isinstance(keep_state, bool), 'keep_state must be bool'






    _ret:int
    _ret = self._ptr.call_with_return(82,tuple([keep_state]))
    return _ret


  @functools.native_method
  def get_base_script(self) -> typing.Union['typing.Self','py4godot_gdscript.GDScript','py4godot_scriptextension.ScriptExtension']:
    r'''
				Returns the script directly inherited by this script.
			'''




    _ret = Script.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_instance_base_type(self) -> typing.Union['StringName']:
    r'''
				Returns the script's base type.
			'''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([]))
    return _ret


  @functools.native_method
  def get_global_name(self) -> typing.Union['StringName']:
    r'''
				Returns the class name associated with the script, if there is one. Returns an empty string otherwise.
				To give the script a global name, you can use the `class_name` keyword in GDScript and the ``GlobalClass`` attribute in C#.
				
				```gdscript
				class_name MyNode
				extends Node
				```
				
				
			'''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))
    return _ret


  @functools.native_method
  def has_script_signal(self, signal_name:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the script, or a base class, defines a signal with the given name.
			'''

    assert(not signal_name is None)
    assert isinstance(signal_name, (str, StringName)), 'signal_name must be str or StringName'




    assert(isinstance(signal_name, (str, StringName)))
    py_stringname_signal_name = signal_name if isinstance(signal_name, StringName) else c_utils.py_string_to_string_name(signal_name)

    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([py_stringname_signal_name._ptr]))
    return _ret


  @functools.native_method
  def get_script_property_list(self) -> typing.Union['py4godot_dictionarytypedarray.DictionaryTypedArray']:
    r'''
				Returns the list of properties in this `Script`.
				**Note:** The dictionaries returned by this method are formatted identically to those returned by `Object.get_property_list`.
			'''




    _ret = py4godot_dictionarytypedarray.DictionaryTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(87,tuple([]))
    return _ret


  @functools.native_method
  def get_script_method_list(self) -> typing.Union['py4godot_dictionarytypedarray.DictionaryTypedArray']:
    r'''
				Returns the list of methods in this `Script`.
				**Note:** The dictionaries returned by this method are formatted identically to those returned by `Object.get_method_list`.
			'''




    _ret = py4godot_dictionarytypedarray.DictionaryTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(88,tuple([]))
    return _ret


  @functools.native_method
  def get_script_signal_list(self) -> typing.Union['py4godot_dictionarytypedarray.DictionaryTypedArray']:
    r'''
				Returns the list of user signals defined in this `Script`.
				**Note:** The dictionaries returned by this method are formatted identically to those returned by `Object.get_signal_list`.
			'''




    _ret = py4godot_dictionarytypedarray.DictionaryTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(89,tuple([]))
    return _ret


  @functools.native_method
  def get_script_constant_map(self) -> typing.Union['Dictionary']:
    r'''
				Returns a dictionary containing constant names and their values.
			'''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(90,tuple([]))
    return _ret


  @functools.native_method
  def get_property_default_value(self, property:'object'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the default value of the specified property.
			'''

    assert(not property is None)
    assert isinstance(property, (str, StringName)), 'property must be str or StringName'




    assert(isinstance(property, (str, StringName)))
    py_stringname_property = property if isinstance(property, StringName) else c_utils.py_string_to_string_name(property)

    _ret = None
    _ret = self._ptr.call_with_return(91,tuple([py_stringname_property._ptr]))
    return _ret


  @functools.native_method
  def is_tool(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the script is a tool script. A tool script can run in the editor.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))
    return _ret


  @functools.native_method
  def is_abstract(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the script is an abstract script. An abstract script does not have a constructor and cannot be instantiated.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))
    return _ret


  @functools.native_method
  def get_rpc_config(self) -> typing.Union[typing.Any]:
    r'''
				Returns a `Dictionary` mapping method names to their RPC configuration defined by this script.
			'''




    _ret = None
    _ret = self._ptr.call_with_return(94,tuple([]))
    return _ret



register_cast_function('Script', Script.cast)
register_class('Script', Script)
