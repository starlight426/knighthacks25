# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
  import py4godot.classes.RDShaderSPIRV as py4godot_rdshaderspirv 
import py4godot.classes.Resource as py4godot_resource 
import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
from py4godot.wrappers.wrappers import CPPRDShaderFileWrapper


class RDShaderFile(py4godot_resource.Resource):
  r'''
		Compiled shader file in SPIR-V form.
		See also `RDShaderSource`. `RDShaderFile` is only meant to be used with the `RenderingDevice` API. It should not be confused with Godot's own `Shader` resource, which is what Godot's various nodes use for high-level shader programming.
	'''

  @staticmethod
  def constructor():
    class_ = RDShaderFile.construct_without_init()
    class_._ptr = constructor(654,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDShaderFile.construct_without_init()
    class_._ptr = constructor(654,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDShaderFileWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(654,0, ())


  def generate_wrapper(self):
    return CPPRDShaderFileWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDShaderFile.__new__(RDShaderFile)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDShaderFile'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDShaderFile.construct_without_init()
    cls._ptr = CPPRDShaderFileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDShaderFile.construct_without_init()
    cls._ptr = CPPRDShaderFileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def base_error(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_base_error()
    return _ret
  @base_error.setter
  def base_error(self,  value:'str'):
    self.set_base_error(value)
  @functools.native_method
  def set_bytecode(self, bytecode:'py4godot_rdshaderspirv.RDShaderSPIRV'   , version:'object' = None  ) -> None:
    r'''
				Sets the SPIR-V `bytecode` that will be compiled for the specified `version`.
			'''
    if version is None:
      version = StringName.new0()
    if version is None:
      version = StringName.new0()

    assert(not bytecode is None)
    assert isinstance(bytecode, get_class('RDShaderSPIRV')), 'bytecode must be RDShaderSPIRV'





    assert(isinstance(version, (str, StringName)))
    py_stringname_version = version if isinstance(version, StringName) else c_utils.py_string_to_string_name(version)

    self._ptr.call_with_return(77,tuple([bytecode._ptr, py_stringname_version._ptr]))

  @functools.native_method
  def get_spirv(self, version:'object' = None  ) -> typing.Union['py4godot_rdshaderspirv.RDShaderSPIRV']:
    r'''
				Returns the SPIR-V intermediate representation for the specified shader `version`.
			'''
    if version is None:
      version = StringName.new0()
    if version is None:
      version = StringName.new0()





    assert(isinstance(version, (str, StringName)))
    py_stringname_version = version if isinstance(version, StringName) else c_utils.py_string_to_string_name(version)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: RDShaderSPIRV
    _ret._ptr = self._ptr.call_with_return(78,tuple([py_stringname_version._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_version_list(self) -> typing.Union['py4godot_stringnametypedarray.StringNameTypedArray']:
    r'''
				Returns the list of compiled versions for this shader.
			'''




    _ret = py4godot_stringnametypedarray.StringNameTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def set_base_error(self, error:'str'   ) -> None:
    r''''''

    assert(not error is None)
    assert isinstance(error, (str, String)), 'error must be str or String'

    self.py__base_error = error



    assert(isinstance(error, (str, String)))
    py_string_error = error if isinstance(error, StringName) else c_utils.py_string_to_string(error)

    py__string_error = utils.py_string_to_string(error)
    py__string_error.shouldBeDeleted = False


    self._ptr.call_with_return(80,tuple([py__string_error._ptr]))

  @functools.native_method
  def get_base_error(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([]))

    return utils.gd_string_to_py_string(_ret)



register_cast_function('RDShaderFile', RDShaderFile.cast)
register_class('RDShaderFile', RDShaderFile)
