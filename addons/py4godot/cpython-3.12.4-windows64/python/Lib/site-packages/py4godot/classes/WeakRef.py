# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPWeakRefWrapper


class WeakRef(py4godot_refcounted.RefCounted):
  r'''
		A weakref can hold a `RefCounted` without contributing to the reference counter. A weakref can be created from an `Object` using `@GlobalScope.weakref`. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.
	'''

  @staticmethod
  def constructor():
    class_ = WeakRef.construct_without_init()
    class_._ptr = constructor(993,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WeakRef.construct_without_init()
    class_._ptr = constructor(993,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWeakRefWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(993,0, ())


  def generate_wrapper(self):
    return CPPWeakRefWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WeakRef.__new__(WeakRef)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WeakRef'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WeakRef.construct_without_init()
    cls._ptr = CPPWeakRefWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WeakRef.construct_without_init()
    cls._ptr = CPPWeakRefWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_ref(self) -> typing.Union[typing.Any]:
    r'''
				Returns the `Object` this weakref is referring to. Returns `null` if that object no longer exists.
			'''




    _ret = None
    _ret = self._ptr.call_with_return(53,tuple([]))
    return _ret



register_cast_function('WeakRef', WeakRef.cast)
register_class('WeakRef', WeakRef)
