# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPCryptoKeyWrapper


class CryptoKey(py4godot_resource.Resource):
  r'''
		The CryptoKey class represents a cryptographic key. Keys can be loaded and saved like any other `Resource`.
		They can be used to generate a self-signed `X509Certificate` via `Crypto.generate_self_signed_certificate` and as private key in `StreamPeerTLS.accept_stream` along with the appropriate certificate.
	'''

  @staticmethod
  def constructor():
    class_ = CryptoKey.construct_without_init()
    class_._ptr = constructor(245,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CryptoKey.construct_without_init()
    class_._ptr = constructor(245,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCryptoKeyWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(245,0, ())


  def generate_wrapper(self):
    return CPPCryptoKeyWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CryptoKey.__new__(CryptoKey)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CryptoKey'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CryptoKey.construct_without_init()
    cls._ptr = CPPCryptoKeyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CryptoKey.construct_without_init()
    cls._ptr = CPPCryptoKeyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def save(self, path:'str'   , public_only:'bool' =False  ) -> typing.Union[int]:
    r'''
				Saves a key to the given `path`. If `public_only` is `true`, only the public key will be saved.
				**Note:** `path` should be a "*.pub" file if `public_only` is `true`, a "*.key" file otherwise.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(public_only, bool), 'public_only must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret:int
    _ret = self._ptr.call_with_return(77,tuple([py_string_path._ptr, public_only]))
    return _ret


  @functools.native_method
  def load(self, path:'str'   , public_only:'bool' =False  ) -> typing.Union[int]:
    r'''
				Loads a key from `path`. If `public_only` is `true`, only the public key will be loaded.
				**Note:** `path` should be a "*.pub" file if `public_only` is `true`, a "*.key" file otherwise.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(public_only, bool), 'public_only must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret:int
    _ret = self._ptr.call_with_return(78,tuple([py_string_path._ptr, public_only]))
    return _ret


  @functools.native_method
  def is_public_only(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this CryptoKey only has the public part, and not the private one.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def save_to_string(self, public_only:'bool' =False  ) -> typing.Union[str]:
    r'''
				Returns a string containing the key in PEM format. If `public_only` is `true`, only the public key will be included.
			'''

    assert isinstance(public_only, bool), 'public_only must be bool'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([public_only]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def load_from_string(self, string_key:'str'   , public_only:'bool' =False  ) -> typing.Union[int]:
    r'''
				Loads a key from the given `string_key`. If `public_only` is `true`, only the public key will be loaded.
			'''

    assert(not string_key is None)
    assert isinstance(string_key, (str, String)), 'string_key must be str or String'
    assert isinstance(public_only, bool), 'public_only must be bool'




    assert(isinstance(string_key, (str, String)))
    py_string_string_key = string_key if isinstance(string_key, StringName) else c_utils.py_string_to_string(string_key)


    _ret:int
    _ret = self._ptr.call_with_return(81,tuple([py_string_string_key._ptr, public_only]))
    return _ret



register_cast_function('CryptoKey', CryptoKey.cast)
register_class('CryptoKey', CryptoKey)
