# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPSprite2DWrapper


class Sprite2D(py4godot_node2d.Node2D):
  r'''
		A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.
	'''

  @staticmethod
  def constructor():
    class_ = Sprite2D.construct_without_init()
    class_._ptr = constructor(779,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Sprite2D.construct_without_init()
    class_._ptr = constructor(779,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSprite2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(779,0, ())


  def generate_wrapper(self):
    return CPPSprite2DWrapper()
  def init_signals(self):
    super().init_signals()
    frame_changed_name = utils.py_string_to_string_name("frame_changed")
    self.frame_changed = signals.BuiltinSignal(self, frame_changed_name)
    texture_changed_name = utils.py_string_to_string_name("texture_changed")
    self.texture_changed = signals.BuiltinSignal(self, texture_changed_name)

  @staticmethod
  def construct_without_init():
    cls = Sprite2D.__new__(Sprite2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Sprite2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Sprite2D.construct_without_init()
    cls._ptr = CPPSprite2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Sprite2D.construct_without_init()
    cls._ptr = CPPSprite2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @property
  def centered(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_centered()
    return _ret
  @centered.setter
  def centered(self,  value:'bool'):
    self.set_centered(value)
  @property
  def offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_offset()
    return _ret
  @offset.setter
  def offset(self,  value:'Vector2'):
    self.set_offset(value)
  @property
  def flip_h(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_flipped_h()
    return _ret
  @flip_h.setter
  def flip_h(self,  value:'bool'):
    self.set_flip_h(value)
  @property
  def flip_v(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_flipped_v()
    return _ret
  @flip_v.setter
  def flip_v(self,  value:'bool'):
    self.set_flip_v(value)
  @property
  def hframes(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_hframes()
    return _ret
  @hframes.setter
  def hframes(self,  value:'int'):
    self.set_hframes(value)
  @property
  def vframes(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_vframes()
    return _ret
  @vframes.setter
  def vframes(self,  value:'int'):
    self.set_vframes(value)
  @property
  def frame(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_frame()
    return _ret
  @frame.setter
  def frame(self,  value:'int'):
    self.set_frame(value)
  @property
  def frame_coords(self) -> typing.Union['Vector2i']:
    r''''''
    _ret = self. get_frame_coords()
    return _ret
  @frame_coords.setter
  def frame_coords(self,  value:'Vector2i'):
    self.set_frame_coords(value)
  @property
  def region_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_region_enabled()
    return _ret
  @region_enabled.setter
  def region_enabled(self,  value:'bool'):
    self.set_region_enabled(value)
  @property
  def region_rect(self) -> typing.Union['Rect2']:
    r''''''
    _ret = self. get_region_rect()
    return _ret
  @region_rect.setter
  def region_rect(self,  value:'Rect2'):
    self.set_region_rect(value)
  @property
  def region_filter_clip_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_region_filter_clip_enabled()
    return _ret
  @region_filter_clip_enabled.setter
  def region_filter_clip_enabled(self,  value:'bool'):
    self.set_region_filter_clip_enabled(value)
  @functools.native_method
  def set_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture = texture






    self._ptr.call_with_return(303,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_centered(self, centered:'bool'   ) -> None:
    r''''''

    assert isinstance(centered, bool), 'centered must be bool'

    self.py__centered = centered






    self._ptr.call_with_return(305,tuple([centered]))

  @functools.native_method
  def is_centered(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__offset = offset






    self._ptr.call_with_return(307,tuple([offset._ptr]))

  @functools.native_method
  def get_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(308,tuple([]))

    return _ret


  @functools.native_method
  def set_flip_h(self, flip_h:'bool'   ) -> None:
    r''''''

    assert isinstance(flip_h, bool), 'flip_h must be bool'

    self.py__flip_h = flip_h






    self._ptr.call_with_return(309,tuple([flip_h]))

  @functools.native_method
  def is_flipped_h(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(310,tuple([]))

    return _ret


  @functools.native_method
  def set_flip_v(self, flip_v:'bool'   ) -> None:
    r''''''

    assert isinstance(flip_v, bool), 'flip_v must be bool'

    self.py__flip_v = flip_v






    self._ptr.call_with_return(311,tuple([flip_v]))

  @functools.native_method
  def is_flipped_v(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(312,tuple([]))

    return _ret


  @functools.native_method
  def set_region_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__region_enabled = enabled






    self._ptr.call_with_return(313,tuple([enabled]))

  @functools.native_method
  def is_region_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(314,tuple([]))

    return _ret


  @functools.native_method
  def is_pixel_opaque(self, pos:'Vector2'   ) -> typing.Union[bool]:
    r'''
				Returns `true`, if the pixel at the given position is opaque and `false` in other case. The position is in local coordinates.
				**Note:** It also returns `false`, if the sprite's texture is `null` or if the given position is invalid.
			'''

    assert(not pos is None)
    assert isinstance(pos, Vector2), 'pos must be Vector2'






    _ret = 0
    _ret = self._ptr.call_with_return(315,tuple([pos._ptr]))
    return _ret


  @functools.native_method
  def set_region_rect(self, rect:'Rect2'   ) -> None:
    r''''''

    assert(not rect is None)
    assert isinstance(rect, Rect2), 'rect must be Rect2'

    self.py__region_rect = rect






    self._ptr.call_with_return(316,tuple([rect._ptr]))

  @functools.native_method
  def get_region_rect(self) -> typing.Union['Rect2']:
    r''''''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(317,tuple([]))

    return _ret


  @functools.native_method
  def set_region_filter_clip_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__region_filter_clip_enabled = enabled






    self._ptr.call_with_return(318,tuple([enabled]))

  @functools.native_method
  def is_region_filter_clip_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(319,tuple([]))

    return _ret


  @functools.native_method
  def set_frame(self, frame:'int'   ) -> None:
    r''''''

    assert isinstance(frame, (int, float)), 'frame must be int or float'

    self.py__frame = frame






    self._ptr.call_with_return(320,tuple([frame]))

  @functools.native_method
  def get_frame(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(321,tuple([]))

    return _ret


  @functools.native_method
  def set_frame_coords(self, coords:'Vector2i'   ) -> None:
    r''''''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'

    self.py__frame_coords = coords






    self._ptr.call_with_return(322,tuple([coords._ptr]))

  @functools.native_method
  def get_frame_coords(self) -> typing.Union['Vector2i']:
    r''''''




    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(323,tuple([]))

    return _ret


  @functools.native_method
  def set_vframes(self, vframes:'int'   ) -> None:
    r''''''

    assert isinstance(vframes, (int, float)), 'vframes must be int or float'

    self.py__vframes = vframes






    self._ptr.call_with_return(324,tuple([vframes]))

  @functools.native_method
  def get_vframes(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(325,tuple([]))

    return _ret


  @functools.native_method
  def set_hframes(self, hframes:'int'   ) -> None:
    r''''''

    assert isinstance(hframes, (int, float)), 'hframes must be int or float'

    self.py__hframes = hframes






    self._ptr.call_with_return(326,tuple([hframes]))

  @functools.native_method
  def get_hframes(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(327,tuple([]))

    return _ret


  @functools.native_method
  def get_rect(self) -> typing.Union['Rect2']:
    r'''
				Returns a `Rect2` representing the Sprite2D's boundary in local coordinates.
				**Example:** Detect if the Sprite2D was clicked:
				
				```gdscript
				func _input(event):
					if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
						if get_rect().has_point(to_local(event.position)):
							print("A click!")
				```
				
				
			'''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(328,tuple([]))
    return _ret



register_cast_function('Sprite2D', Sprite2D.cast)
register_class('Sprite2D', Sprite2D)
