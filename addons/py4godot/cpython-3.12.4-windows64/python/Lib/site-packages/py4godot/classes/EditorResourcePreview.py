# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Object as py4godot_object 
  import py4godot.classes.Resource as py4godot_resource 
  import py4godot.classes.EditorResourcePreviewGenerator as py4godot_editorresourcepreviewgenerator 
import py4godot.classes.Node as py4godot_node 
from py4godot.wrappers.wrappers import CPPEditorResourcePreviewWrapper


class EditorResourcePreview(py4godot_node.Node):
  r'''
		This node is used to generate previews for resources or files.
		**Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_resource_previewer`.
	'''

  @staticmethod
  def constructor():
    class_ = EditorResourcePreview.construct_without_init()
    class_._ptr = constructor(299,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorResourcePreview.construct_without_init()
    class_._ptr = constructor(299,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorResourcePreviewWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(299,0, ())


  def generate_wrapper(self):
    return CPPEditorResourcePreviewWrapper()
  def init_signals(self):
    super().init_signals()
    preview_invalidated_name = utils.py_string_to_string_name("preview_invalidated")
    self.preview_invalidated = signals.BuiltinSignal(self, preview_invalidated_name)

  @staticmethod
  def construct_without_init():
    cls = EditorResourcePreview.__new__(EditorResourcePreview)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorResourcePreview'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorResourcePreview.construct_without_init()
    cls._ptr = CPPEditorResourcePreviewWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorResourcePreview.construct_without_init()
    cls._ptr = CPPEditorResourcePreviewWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def queue_resource_preview(self, path:'str'   , receiver:'py4godot_object.Object'   , receiver_func:'object'   , userdata:'object'   ) -> None:
    r'''
				Queue a resource file located at `path` for preview. Once the preview is ready, the `receiver`'s `receiver_func` will be called. The `receiver_func` must take the following four arguments: `String` path, `Texture2D` preview, `Texture2D` thumbnail_preview, `Variant` userdata. `userdata` can be anything, and will be returned when `receiver_func` is called.
				**Note:** If it was not possible to create the preview the `receiver_func` will still be called, but the preview will be `null`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not receiver is None)
    assert isinstance(receiver, get_class('Object')), 'receiver must be Object'
    assert(not receiver_func is None)
    assert isinstance(receiver_func, (str, StringName)), 'receiver_func must be str or StringName'
    




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    assert(isinstance(receiver_func, (str, StringName)))
    py_stringname_receiver_func = receiver_func if isinstance(receiver_func, StringName) else c_utils.py_string_to_string_name(receiver_func)


    self._ptr.call_with_return(180,tuple([py_string_path._ptr, receiver._ptr, py_stringname_receiver_func._ptr, userdata]))

  @functools.native_method
  def queue_edited_resource_preview(self, resource:'py4godot_resource.Resource'   , receiver:'py4godot_object.Object'   , receiver_func:'object'   , userdata:'object'   ) -> None:
    r'''
				Queue the `resource` being edited for preview. Once the preview is ready, the `receiver`'s `receiver_func` will be called. The `receiver_func` must take the following four arguments: `String` path, `Texture2D` preview, `Texture2D` thumbnail_preview, `Variant` userdata. `userdata` can be anything, and will be returned when `receiver_func` is called.
				**Note:** If it was not possible to create the preview the `receiver_func` will still be called, but the preview will be `null`.
			'''

    assert(not resource is None)
    assert isinstance(resource, get_class('Resource')), 'resource must be Resource'
    assert(not receiver is None)
    assert isinstance(receiver, get_class('Object')), 'receiver must be Object'
    assert(not receiver_func is None)
    assert isinstance(receiver_func, (str, StringName)), 'receiver_func must be str or StringName'
    






    assert(isinstance(receiver_func, (str, StringName)))
    py_stringname_receiver_func = receiver_func if isinstance(receiver_func, StringName) else c_utils.py_string_to_string_name(receiver_func)


    self._ptr.call_with_return(181,tuple([resource._ptr, receiver._ptr, py_stringname_receiver_func._ptr, userdata]))

  @functools.native_method
  def add_preview_generator(self, generator:'py4godot_editorresourcepreviewgenerator.EditorResourcePreviewGenerator'   ) -> None:
    r'''
				Create an own, custom preview generator.
			'''

    assert(not generator is None)
    assert isinstance(generator, get_class('EditorResourcePreviewGenerator')), 'generator must be EditorResourcePreviewGenerator'






    self._ptr.call_with_return(182,tuple([generator._ptr]))

  @functools.native_method
  def remove_preview_generator(self, generator:'py4godot_editorresourcepreviewgenerator.EditorResourcePreviewGenerator'   ) -> None:
    r'''
				Removes a custom preview generator.
			'''

    assert(not generator is None)
    assert isinstance(generator, get_class('EditorResourcePreviewGenerator')), 'generator must be EditorResourcePreviewGenerator'






    self._ptr.call_with_return(183,tuple([generator._ptr]))

  @functools.native_method
  def check_for_invalidation(self, path:'str'   ) -> None:
    r'''
				Check if the resource changed, if so, it will be invalidated and the corresponding signal emitted.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(184,tuple([py_string_path._ptr]))


register_cast_function('EditorResourcePreview', EditorResourcePreview.cast)
register_class('EditorResourcePreview', EditorResourcePreview)
