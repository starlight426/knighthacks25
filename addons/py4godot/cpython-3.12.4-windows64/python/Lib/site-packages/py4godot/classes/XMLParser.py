# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPXMLParserWrapper

class NodeType:
  NODE_NONE = 0
  NODE_ELEMENT = 1
  NODE_ELEMENT_END = 2
  NODE_TEXT = 3
  NODE_COMMENT = 4
  NODE_CDATA = 5
  NODE_UNKNOWN = 6


class XMLParser(py4godot_refcounted.RefCounted):
  r'''
		Provides a low-level interface for creating parsers for `url=https://en.wikipedia.org/wiki/XML`XML`/url` files. This class can serve as base to make custom XML parsers.
		To parse XML, you must open a file with the `open` method or a buffer with the `open_buffer` method. Then, the `read` method must be called to parse the next nodes. Most of the methods take into consideration the currently parsed node.
		Here is an example of using `XMLParser` to parse an SVG file (which is based on XML), printing each element and its attributes as a dictionary:
		
		```gdscript
		var parser = XMLParser.new()
		parser.open("path/to/file.svg")
		while parser.read() != ERR_FILE_EOF:
			if parser.get_node_type() == XMLParser.NODE_ELEMENT:
				var node_name = parser.get_node_name()
				var attributes_dict = {}
				for idx in range(parser.get_attribute_count()):
					attributes_dict`parser.get_attribute_name(idx)` = parser.get_attribute_value(idx)
				print("The ", node_name, " element has the following attributes: ", attributes_dict)
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = XMLParser.construct_without_init()
    class_._ptr = constructor(1010,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XMLParser.construct_without_init()
    class_._ptr = constructor(1010,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXMLParserWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1010,0, ())


  def generate_wrapper(self):
    return CPPXMLParserWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XMLParser.__new__(XMLParser)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XMLParser'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XMLParser.construct_without_init()
    cls._ptr = CPPXMLParserWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XMLParser.construct_without_init()
    cls._ptr = CPPXMLParserWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def read(self) -> typing.Union[int]:
    r'''
				Parses the next node in the file. This method returns an error code.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def get_node_type(self) -> typing.Union[int]:
    r'''
				Returns the type of the current node. Compare with `enum NodeType` constants.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def get_node_name(self) -> typing.Union[str]:
    r'''
				Returns the name of a node. This method will raise an error if the currently parsed node is a text node.
				**Note:** The content of a `constant NODE_CDATA` node and the comment string of a `constant NODE_COMMENT` node are also considered names.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_node_data(self) -> typing.Union[str]:
    r'''
				Returns the contents of a text node. This method will raise an error if the current parsed node is of any other type.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_node_offset(self) -> typing.Union[int]:
    r'''
				Returns the byte offset of the currently parsed node since the beginning of the file or buffer. This is usually equivalent to the number of characters before the read position.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))
    return _ret


  @functools.native_method
  def get_attribute_count(self) -> typing.Union[int]:
    r'''
				Returns the number of attributes in the currently parsed element.
				**Note:** If this method is used while the currently parsed node is not `constant NODE_ELEMENT` or `constant NODE_ELEMENT_END`, this count will not be updated and will still reflect the last element.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))
    return _ret


  @functools.native_method
  def get_attribute_name(self, idx:'int'   ) -> typing.Union[str]:
    r'''
				Returns the name of an attribute of the currently parsed element, specified by the `idx` index.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(59,tuple([idx]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_attribute_value(self, idx:'int'   ) -> typing.Union[str]:
    r'''
				Returns the value of an attribute of the currently parsed element, specified by the `idx` index.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([idx]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def has_attribute(self, name:'str'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the currently parsed element has an attribute with the `name`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = 0
    _ret = self._ptr.call_with_return(61,tuple([py_string_name._ptr]))
    return _ret


  @functools.native_method
  def get_named_attribute_value(self, name:'str'   ) -> typing.Union[str]:
    r'''
				Returns the value of an attribute of the currently parsed element, specified by its `name`. This method will raise an error if the element has no such attribute.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(62,tuple([py_string_name._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_named_attribute_value_safe(self, name:'str'   ) -> typing.Union[str]:
    r'''
				Returns the value of an attribute of the currently parsed element, specified by its `name`. This method will return an empty string if the element has no such attribute.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(63,tuple([py_string_name._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def is_empty(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the currently parsed element is empty, e.g. `<element />`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([]))
    return _ret


  @functools.native_method
  def get_current_line(self) -> typing.Union[int]:
    r'''
				Returns the current line in the parsed file, counting from 0.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(65,tuple([]))
    return _ret


  @functools.native_method
  def skip_section(self) -> None:
    r'''
				Skips the current section. If the currently parsed node contains more inner nodes, they will be ignored and the cursor will go to the closing of the current element.
			'''




    self._ptr.call_with_return(66,tuple([]))

  @functools.native_method
  def seek(self, position:'int'   ) -> typing.Union[int]:
    r'''
				Moves the buffer cursor to a certain offset (since the beginning) and reads the next node there. This method returns an error code.
			'''

    assert isinstance(position, (int, float)), 'position must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(67,tuple([position]))
    return _ret


  @functools.native_method
  def open(self, file:'str'   ) -> typing.Union[int]:
    r'''
				Opens an XML `file` for parsing. This method returns an error code.
			'''

    assert(not file is None)
    assert isinstance(file, (str, String)), 'file must be str or String'




    assert(isinstance(file, (str, String)))
    py_string_file = file if isinstance(file, StringName) else c_utils.py_string_to_string(file)

    _ret:int
    _ret = self._ptr.call_with_return(68,tuple([py_string_file._ptr]))
    return _ret


  @functools.native_method
  def open_buffer(self, buffer:'PackedByteArray'   ) -> typing.Union[int]:
    r'''
				Opens an XML raw `buffer` for parsing. This method returns an error code.
			'''

    assert(not buffer is None)
    assert isinstance(buffer, PackedByteArray), 'buffer must be PackedByteArray'






    _ret:int
    _ret = self._ptr.call_with_return(69,tuple([buffer._ptr]))
    return _ret



register_cast_function('XMLParser', XMLParser.cast)
register_class('XMLParser', XMLParser)
