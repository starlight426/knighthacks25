# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.HashingContext as py4godot_hashingcontext 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPHMACContextWrapper


class HMACContext(py4godot_refcounted.RefCounted):
  r'''
		The HMACContext class is useful for advanced HMAC use cases, such as streaming the message as it supports creating the message over time rather than providing it all at once.
		
		```gdscript
		extends Node
		var ctx = HMACContext.new()

		func _ready():
			var key = "supersecret".to_utf8_buffer()
			var err = ctx.start(HashingContext.HASH_SHA256, key)
			assert(err == OK)
			var msg1 = "this is ".to_utf8_buffer()
			var msg2 = "super duper secret".to_utf8_buffer()
			err = ctx.update(msg1)
			assert(err == OK)
			err = ctx.update(msg2)
			assert(err == OK)
			var hmac = ctx.finish()
			print(hmac.hex_encode())

		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = HMACContext.construct_without_init()
    class_._ptr = constructor(392,0, ())
    return class_
  @staticmethod
  def new():
    class_ = HMACContext.construct_without_init()
    class_._ptr = constructor(392,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPHMACContextWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(392,0, ())


  def generate_wrapper(self):
    return CPPHMACContextWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = HMACContext.__new__(HMACContext)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'HMACContext'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = HMACContext.construct_without_init()
    cls._ptr = CPPHMACContextWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = HMACContext.construct_without_init()
    cls._ptr = CPPHMACContextWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def start(self, hash_type:'int'  , key:'PackedByteArray'   ) -> typing.Union[int]:
    r'''
				Initializes the HMACContext. This method cannot be called again on the same HMACContext until `finish` has been called.
			'''

    assert isinstance(hash_type, (int, float)), 'hash_type must be int or float'
    assert(not key is None)
    assert isinstance(key, PackedByteArray), 'key must be PackedByteArray'







    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([hash_type, key._ptr]))
    return _ret


  @functools.native_method
  def update(self, data:'PackedByteArray'   ) -> typing.Union[int]:
    r'''
				Updates the message to be HMACed. This can be called multiple times before `finish` is called to append `data` to the message, but cannot be called until `start` has been called.
			'''

    assert(not data is None)
    assert isinstance(data, PackedByteArray), 'data must be PackedByteArray'






    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([data._ptr]))
    return _ret


  @functools.native_method
  def finish(self) -> typing.Union['PackedByteArray']:
    r'''
				Returns the resulting HMAC. If the HMAC failed, an empty `PackedByteArray` is returned.
			'''




    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return _ret



register_cast_function('HMACContext', HMACContext.cast)
register_class('HMACContext', HMACContext)
