# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFAccessorWrapper

class GLTFAccessorType:
  TYPE_SCALAR = 0
  TYPE_VEC2 = 1
  TYPE_VEC3 = 2
  TYPE_VEC4 = 3
  TYPE_MAT2 = 4
  TYPE_MAT3 = 5
  TYPE_MAT4 = 6
class GLTFComponentType:
  COMPONENT_TYPE_NONE = 0
  COMPONENT_TYPE_SIGNED_BYTE = 5120
  COMPONENT_TYPE_UNSIGNED_BYTE = 5121
  COMPONENT_TYPE_SIGNED_SHORT = 5122
  COMPONENT_TYPE_UNSIGNED_SHORT = 5123
  COMPONENT_TYPE_SIGNED_INT = 5124
  COMPONENT_TYPE_UNSIGNED_INT = 5125
  COMPONENT_TYPE_SINGLE_FLOAT = 5126
  COMPONENT_TYPE_DOUBLE_FLOAT = 5130
  COMPONENT_TYPE_HALF_FLOAT = 5131
  COMPONENT_TYPE_SIGNED_LONG = 5134
  COMPONENT_TYPE_UNSIGNED_LONG = 5135


class GLTFAccessor(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFAccessor.construct_without_init()
    class_._ptr = constructor(345,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFAccessor.construct_without_init()
    class_._ptr = constructor(345,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFAccessorWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(345,0, ())


  def generate_wrapper(self):
    return CPPGLTFAccessorWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFAccessor.__new__(GLTFAccessor)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFAccessor'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFAccessor.construct_without_init()
    cls._ptr = CPPGLTFAccessorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFAccessor.construct_without_init()
    cls._ptr = CPPGLTFAccessorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def buffer_view(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_buffer_view()
    return _ret
  @buffer_view.setter
  def buffer_view(self,  value:'int'):
    self.set_buffer_view(value)
  @property
  def byte_offset(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_byte_offset()
    return _ret
  @byte_offset.setter
  def byte_offset(self,  value:'int'):
    self.set_byte_offset(value)
  @property
  def component_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_component_type()
    return _ret
  @component_type.setter
  def component_type(self,  value:'int'):
    self.set_component_type(value)
  @property
  def normalized(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_normalized()
    return _ret
  @normalized.setter
  def normalized(self,  value:'bool'):
    self.set_normalized(value)
  @property
  def count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_count()
    return _ret
  @count.setter
  def count(self,  value:'int'):
    self.set_count(value)
  @property
  def accessor_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_accessor_type()
    return _ret
  @accessor_type.setter
  def accessor_type(self,  value:'int'):
    self.set_accessor_type(value)
  @property
  def type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_type()
    return _ret
  @type.setter
  def type(self,  value:'int'):
    self.set_type(value)
  @property
  def min(self) -> typing.Union['PackedFloat64Array']:
    r''''''
    _ret = self. get_min()
    return _ret
  @min.setter
  def min(self,  value:'PackedFloat64Array'):
    self.set_min(value)
  @property
  def max(self) -> typing.Union['PackedFloat64Array']:
    r''''''
    _ret = self. get_max()
    return _ret
  @max.setter
  def max(self,  value:'PackedFloat64Array'):
    self.set_max(value)
  @property
  def sparse_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sparse_count()
    return _ret
  @sparse_count.setter
  def sparse_count(self,  value:'int'):
    self.set_sparse_count(value)
  @property
  def sparse_indices_buffer_view(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sparse_indices_buffer_view()
    return _ret
  @sparse_indices_buffer_view.setter
  def sparse_indices_buffer_view(self,  value:'int'):
    self.set_sparse_indices_buffer_view(value)
  @property
  def sparse_indices_byte_offset(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sparse_indices_byte_offset()
    return _ret
  @sparse_indices_byte_offset.setter
  def sparse_indices_byte_offset(self,  value:'int'):
    self.set_sparse_indices_byte_offset(value)
  @property
  def sparse_indices_component_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sparse_indices_component_type()
    return _ret
  @sparse_indices_component_type.setter
  def sparse_indices_component_type(self,  value:'int'):
    self.set_sparse_indices_component_type(value)
  @property
  def sparse_values_buffer_view(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sparse_values_buffer_view()
    return _ret
  @sparse_values_buffer_view.setter
  def sparse_values_buffer_view(self,  value:'int'):
    self.set_sparse_values_buffer_view(value)
  @property
  def sparse_values_byte_offset(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sparse_values_byte_offset()
    return _ret
  @sparse_values_byte_offset.setter
  def sparse_values_byte_offset(self,  value:'int'):
    self.set_sparse_values_byte_offset(value)
  @functools.native_method
  def get_buffer_view(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([]))

    return _ret


  @functools.native_method
  def set_buffer_view(self, buffer_view:'int'   ) -> None:
    r''''''

    assert isinstance(buffer_view, (int, float)), 'buffer_view must be int or float'

    self.py__buffer_view = buffer_view






    self._ptr.call_with_return(78,tuple([buffer_view]))

  @functools.native_method
  def get_byte_offset(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_byte_offset(self, byte_offset:'int'   ) -> None:
    r''''''

    assert isinstance(byte_offset, (int, float)), 'byte_offset must be int or float'

    self.py__byte_offset = byte_offset






    self._ptr.call_with_return(80,tuple([byte_offset]))

  @functools.native_method
  def get_component_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_component_type(self, component_type:'int'  ) -> None:
    r''''''

    assert isinstance(component_type, (int, float)), 'component_type must be int or float'

    self.py__component_type = component_type






    self._ptr.call_with_return(82,tuple([component_type]))

  @functools.native_method
  def get_normalized(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_normalized(self, normalized:'bool'   ) -> None:
    r''''''

    assert isinstance(normalized, bool), 'normalized must be bool'

    self.py__normalized = normalized






    self._ptr.call_with_return(84,tuple([normalized]))

  @functools.native_method
  def get_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_count(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__count = count






    self._ptr.call_with_return(86,tuple([count]))

  @functools.native_method
  def get_accessor_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_accessor_type(self, accessor_type:'int'  ) -> None:
    r''''''

    assert isinstance(accessor_type, (int, float)), 'accessor_type must be int or float'

    self.py__accessor_type = accessor_type






    self._ptr.call_with_return(88,tuple([accessor_type]))

  @functools.native_method
  def get_type(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_type(self, type:'int'   ) -> None:
    r''''''

    assert isinstance(type, (int, float)), 'type must be int or float'

    self.py__type = type






    self._ptr.call_with_return(90,tuple([type]))

  @functools.native_method
  def get_min(self) -> typing.Union['PackedFloat64Array']:
    r''''''




    _ret = PackedFloat64Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return _ret


  @functools.native_method
  def set_min(self, min:'PackedFloat64Array'   ) -> None:
    r''''''

    assert(not min is None)
    assert isinstance(min, PackedFloat64Array), 'min must be PackedFloat64Array'

    self.py__min = min






    self._ptr.call_with_return(92,tuple([min._ptr]))

  @functools.native_method
  def get_max(self) -> typing.Union['PackedFloat64Array']:
    r''''''




    _ret = PackedFloat64Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_max(self, max:'PackedFloat64Array'   ) -> None:
    r''''''

    assert(not max is None)
    assert isinstance(max, PackedFloat64Array), 'max must be PackedFloat64Array'

    self.py__max = max






    self._ptr.call_with_return(94,tuple([max._ptr]))

  @functools.native_method
  def get_sparse_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_sparse_count(self, sparse_count:'int'   ) -> None:
    r''''''

    assert isinstance(sparse_count, (int, float)), 'sparse_count must be int or float'

    self.py__sparse_count = sparse_count






    self._ptr.call_with_return(96,tuple([sparse_count]))

  @functools.native_method
  def get_sparse_indices_buffer_view(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_sparse_indices_buffer_view(self, sparse_indices_buffer_view:'int'   ) -> None:
    r''''''

    assert isinstance(sparse_indices_buffer_view, (int, float)), 'sparse_indices_buffer_view must be int or float'

    self.py__sparse_indices_buffer_view = sparse_indices_buffer_view






    self._ptr.call_with_return(98,tuple([sparse_indices_buffer_view]))

  @functools.native_method
  def get_sparse_indices_byte_offset(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_sparse_indices_byte_offset(self, sparse_indices_byte_offset:'int'   ) -> None:
    r''''''

    assert isinstance(sparse_indices_byte_offset, (int, float)), 'sparse_indices_byte_offset must be int or float'

    self.py__sparse_indices_byte_offset = sparse_indices_byte_offset






    self._ptr.call_with_return(100,tuple([sparse_indices_byte_offset]))

  @functools.native_method
  def get_sparse_indices_component_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(101,tuple([]))

    return _ret


  @functools.native_method
  def set_sparse_indices_component_type(self, sparse_indices_component_type:'int'  ) -> None:
    r''''''

    assert isinstance(sparse_indices_component_type, (int, float)), 'sparse_indices_component_type must be int or float'

    self.py__sparse_indices_component_type = sparse_indices_component_type






    self._ptr.call_with_return(102,tuple([sparse_indices_component_type]))

  @functools.native_method
  def get_sparse_values_buffer_view(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(103,tuple([]))

    return _ret


  @functools.native_method
  def set_sparse_values_buffer_view(self, sparse_values_buffer_view:'int'   ) -> None:
    r''''''

    assert isinstance(sparse_values_buffer_view, (int, float)), 'sparse_values_buffer_view must be int or float'

    self.py__sparse_values_buffer_view = sparse_values_buffer_view






    self._ptr.call_with_return(104,tuple([sparse_values_buffer_view]))

  @functools.native_method
  def get_sparse_values_byte_offset(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(105,tuple([]))

    return _ret


  @functools.native_method
  def set_sparse_values_byte_offset(self, sparse_values_byte_offset:'int'   ) -> None:
    r''''''

    assert isinstance(sparse_values_byte_offset, (int, float)), 'sparse_values_byte_offset must be int or float'

    self.py__sparse_values_byte_offset = sparse_values_byte_offset






    self._ptr.call_with_return(106,tuple([sparse_values_byte_offset]))


register_cast_function('GLTFAccessor', GLTFAccessor.cast)
register_class('GLTFAccessor', GLTFAccessor)
