# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRActionSet as py4godot_openxractionset 
  import py4godot.classes.OpenXRInteractionProfile as py4godot_openxrinteractionprofile 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPOpenXRActionMapWrapper


class OpenXRActionMap(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRActionMap.construct_without_init()
    class_._ptr = constructor(534,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRActionMap.construct_without_init()
    class_._ptr = constructor(534,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRActionMapWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(534,0, ())


  def generate_wrapper(self):
    return CPPOpenXRActionMapWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRActionMap.__new__(OpenXRActionMap)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRActionMap'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRActionMap.construct_without_init()
    cls._ptr = CPPOpenXRActionMapWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRActionMap.construct_without_init()
    cls._ptr = CPPOpenXRActionMapWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def action_sets(self) -> typing.Union['py4godot_openxractionset.OpenXRActionSet']:
    r''''''
    _ret = self. get_action_sets()
    return _ret
  @action_sets.setter
  def action_sets(self,  value:'py4godot_object.Object'):
    self.set_action_sets(value)
  @property
  def interaction_profiles(self) -> typing.Union['py4godot_openxrinteractionprofile.OpenXRInteractionProfile']:
    r''''''
    _ret = self. get_interaction_profiles()
    return _ret
  @interaction_profiles.setter
  def interaction_profiles(self,  value:'py4godot_object.Object'):
    self.set_interaction_profiles(value)
  @functools.native_method
  def set_action_sets(self, action_sets:'Array'   ) -> None:
    r''''''

    assert(not action_sets is None)
    assert isinstance(action_sets, Array), 'action_sets must be Array'

    self.py__action_sets = action_sets






    self._ptr.call_with_return(77,tuple([action_sets._ptr]))

  @functools.native_method
  def get_action_sets(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def get_action_set_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def find_action_set(self, name:'str'   ) -> typing.Union['py4godot_openxractionset.OpenXRActionSet']:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRActionSet
    _ret._ptr = self._ptr.call_with_return(80,tuple([py_string_name._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_action_set(self, idx:'int'   ) -> typing.Union['py4godot_openxractionset.OpenXRActionSet']:
    r''''''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRActionSet
    _ret._ptr = self._ptr.call_with_return(81,tuple([idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def add_action_set(self, action_set:'py4godot_openxractionset.OpenXRActionSet'   ) -> None:
    r''''''

    assert(not action_set is None)
    assert isinstance(action_set, get_class('OpenXRActionSet')), 'action_set must be OpenXRActionSet'






    self._ptr.call_with_return(82,tuple([action_set._ptr]))

  @functools.native_method
  def remove_action_set(self, action_set:'py4godot_openxractionset.OpenXRActionSet'   ) -> None:
    r''''''

    assert(not action_set is None)
    assert isinstance(action_set, get_class('OpenXRActionSet')), 'action_set must be OpenXRActionSet'






    self._ptr.call_with_return(83,tuple([action_set._ptr]))

  @functools.native_method
  def set_interaction_profiles(self, interaction_profiles:'Array'   ) -> None:
    r''''''

    assert(not interaction_profiles is None)
    assert isinstance(interaction_profiles, Array), 'interaction_profiles must be Array'

    self.py__interaction_profiles = interaction_profiles






    self._ptr.call_with_return(84,tuple([interaction_profiles._ptr]))

  @functools.native_method
  def get_interaction_profiles(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def get_interaction_profile_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))
    return _ret


  @functools.native_method
  def find_interaction_profile(self, name:'str'   ) -> typing.Union['py4godot_openxrinteractionprofile.OpenXRInteractionProfile']:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRInteractionProfile
    _ret._ptr = self._ptr.call_with_return(87,tuple([py_string_name._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_interaction_profile(self, idx:'int'   ) -> typing.Union['py4godot_openxrinteractionprofile.OpenXRInteractionProfile']:
    r''''''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRInteractionProfile
    _ret._ptr = self._ptr.call_with_return(88,tuple([idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def add_interaction_profile(self, interaction_profile:'py4godot_openxrinteractionprofile.OpenXRInteractionProfile'   ) -> None:
    r''''''

    assert(not interaction_profile is None)
    assert isinstance(interaction_profile, get_class('OpenXRInteractionProfile')), 'interaction_profile must be OpenXRInteractionProfile'






    self._ptr.call_with_return(89,tuple([interaction_profile._ptr]))

  @functools.native_method
  def remove_interaction_profile(self, interaction_profile:'py4godot_openxrinteractionprofile.OpenXRInteractionProfile'   ) -> None:
    r''''''

    assert(not interaction_profile is None)
    assert isinstance(interaction_profile, get_class('OpenXRInteractionProfile')), 'interaction_profile must be OpenXRInteractionProfile'






    self._ptr.call_with_return(90,tuple([interaction_profile._ptr]))

  @functools.native_method
  def create_default_action_sets(self) -> None:
    r''''''




    self._ptr.call_with_return(91,tuple([]))


register_cast_function('OpenXRActionMap', OpenXRActionMap.cast)
register_class('OpenXRActionMap', OpenXRActionMap)
