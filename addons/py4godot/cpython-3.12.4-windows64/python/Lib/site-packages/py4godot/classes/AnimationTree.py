# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AnimationRootNode as py4godot_animationrootnode 
  import py4godot.classes.AnimationNodeStateMachine as py4godot_animationnodestatemachine 
  import py4godot.classes.AnimationNodeBlendSpace2D as py4godot_animationnodeblendspace2d 
  import py4godot.classes.AnimationNodeAnimation as py4godot_animationnodeanimation 
  import py4godot.classes.AnimationNodeBlendSpace1D as py4godot_animationnodeblendspace1d 
  import py4godot.classes.AnimationNodeBlendTree as py4godot_animationnodeblendtree 
import py4godot.classes.AnimationMixer as py4godot_animationmixer 
from py4godot.wrappers.wrappers import CPPAnimationTreeWrapper

class AnimationProcessCallback:
  ANIMATION_PROCESS_PHYSICS = 0
  ANIMATION_PROCESS_IDLE = 1
  ANIMATION_PROCESS_MANUAL = 2


class AnimationTree(py4godot_animationmixer.AnimationMixer):
  r'''
		A node used for advanced animation transitions in an `AnimationPlayer`.
		**Note:** When linked with an `AnimationPlayer`, several properties and methods of the corresponding `AnimationPlayer` will not function as expected. Playback and transitions should be handled using only the `AnimationTree` and its constituent `AnimationNode`(s). The `AnimationPlayer` node should be used solely for adding, deleting, and editing animations.
	'''

  @staticmethod
  def constructor():
    class_ = AnimationTree.construct_without_init()
    class_._ptr = constructor(97,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationTree.construct_without_init()
    class_._ptr = constructor(97,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationTreeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(97,0, ())


  def generate_wrapper(self):
    return CPPAnimationTreeWrapper()
  def init_signals(self):
    super().init_signals()
    animation_player_changed_name = utils.py_string_to_string_name("animation_player_changed")
    self.animation_player_changed = signals.BuiltinSignal(self, animation_player_changed_name)

  @staticmethod
  def construct_without_init():
    cls = AnimationTree.__new__(AnimationTree)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationTree'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationTree.construct_without_init()
    cls._ptr = CPPAnimationTreeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationTree.construct_without_init()
    cls._ptr = CPPAnimationTreeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def tree_root(self) -> typing.Any:
    r''''''
    _ret = self. get_tree_root()
    return _ret
  @tree_root.setter
  def tree_root(self,  value:'py4godot_object.Object'):
    self.set_tree_root(value)
  @property
  def advance_expression_base_node(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_advance_expression_base_node()
    return _ret
  @advance_expression_base_node.setter
  def advance_expression_base_node(self,  value:'object'):
    self.set_advance_expression_base_node(value)
  @property
  def anim_player(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_animation_player()
    return _ret
  @anim_player.setter
  def anim_player(self,  value:'object'):
    self.set_animation_player(value)
  @functools.native_method
  def set_tree_root(self, animation_node:'py4godot_animationrootnode.AnimationRootNode'   ) -> None:
    r''''''

    assert(not animation_node is None)
    assert isinstance(animation_node, get_class('AnimationRootNode')), 'animation_node must be AnimationRootNode'

    self.py__tree_root = animation_node






    self._ptr.call_with_return(221,tuple([animation_node._ptr]))

  @functools.native_method
  def get_tree_root(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AnimationRootNode
    _ret._ptr = self._ptr.call_with_return(222,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_advance_expression_base_node(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__advance_expression_base_node = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(223,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_advance_expression_base_node(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(224,tuple([]))

    return _ret


  @functools.native_method
  def set_animation_player(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__anim_player = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(225,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_animation_player(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(226,tuple([]))

    return _ret


  @functools.native_method
  def set_process_callback(self, mode:'int'  ) -> None:
    r'''
				Sets the process notification in which to update animations.
			'''

    assert isinstance(mode, (int, float)), 'mode must be int or float'






    self._ptr.call_with_return(227,tuple([mode]))

  @functools.native_method
  def get_process_callback(self) -> typing.Union[int]:
    r'''
				Returns the process notification in which to update animations.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(228,tuple([]))
    return _ret



register_cast_function('AnimationTree', AnimationTree.cast)
register_class('AnimationTree', AnimationTree)
