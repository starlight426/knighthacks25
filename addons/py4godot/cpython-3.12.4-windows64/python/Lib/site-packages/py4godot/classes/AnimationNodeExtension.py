# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AnimationNode as py4godot_animationnode 
from py4godot.wrappers.wrappers import CPPAnimationNodeExtensionWrapper


class AnimationNodeExtension(py4godot_animationnode.AnimationNode):
  r'''
		`AnimationNodeExtension` exposes the APIs of `AnimationRootNode` to allow users to extend it from GDScript, C#, or C++. This class is not meant to be used directly, but to be extended by other classes. It is used to create custom nodes for the `AnimationTree` system.
	'''

  @staticmethod
  def constructor():
    class_ = AnimationNodeExtension.construct_without_init()
    class_._ptr = constructor(84,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeExtension.construct_without_init()
    class_._ptr = constructor(84,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(84,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeExtension.__new__(AnimationNodeExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeExtension.construct_without_init()
    cls._ptr = CPPAnimationNodeExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeExtension.construct_without_init()
    cls._ptr = CPPAnimationNodeExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _process_animation_node(self, playback_info:'PackedFloat64Array'   , test_only:'bool'   ) -> typing.Union['PackedFloat32Array']:
    r'''
				A version of the `AnimationNode._process` method that is meant to be overridden by custom nodes. It returns a `PackedFloat32Array` with the processed animation data.
				The `PackedFloat64Array` parameter contains the playback information, containing the following values encoded as floating point numbers (in order): playback time and delta, start and end times, whether a seek was requested (encoded as a float greater than `0`), whether the seek request was externally requested (encoded as a float greater than `0`), the current `enum Animation.LoopedFlag` (encoded as a float), and the current blend weight.
				The function must return a `PackedFloat32Array` of the node's time info, containing the following values (in order): animation length, time position, delta, `enum Animation.LoopMode` (encoded as a float), whether the animation is about to end (encoded as a float greater than `0`) and whether the animation is infinite (encoded as a float greater than `0`). All values must be included in the returned array.
			'''

    assert(not playback_info is None)
    assert isinstance(playback_info, PackedFloat64Array), 'playback_info must be PackedFloat64Array'
    assert isinstance(test_only, bool), 'test_only must be bool'







    _ret = PackedFloat32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(102,tuple([playback_info._ptr, test_only]))
    return _ret


  @staticmethod
  def is_looping(node_info:'PackedFloat32Array'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the animation for the given `node_info` is looping.
			'''

    assert(not node_info is None)
    assert isinstance(node_info, PackedFloat32Array), 'node_info must be PackedFloat32Array'






    _ret = 0
    _ret = static_method(84,1,tuple([node_info._ptr]))
    return _ret


  @staticmethod
  def get_remaining_time(node_info:'PackedFloat32Array'   , break_loop:'bool'   ) -> typing.Union[float]:
    r'''
				Returns the animation's remaining time for the given node info. For looping animations, it will only return the remaining time if `break_loop` is `true`, a large integer value will be returned otherwise.
			'''

    assert(not node_info is None)
    assert isinstance(node_info, PackedFloat32Array), 'node_info must be PackedFloat32Array'
    assert isinstance(break_loop, bool), 'break_loop must be bool'







    _ret = 0
    _ret = static_method(84,2,tuple([node_info._ptr, break_loop]))
    return _ret



register_cast_function('AnimationNodeExtension', AnimationNodeExtension.cast)
register_class('AnimationNodeExtension', AnimationNodeExtension)
