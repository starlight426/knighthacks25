# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Joint3D as py4godot_joint3d 
from py4godot.wrappers.wrappers import CPPGeneric6DOFJoint3DWrapper

class Param:
  PARAM_LINEAR_LOWER_LIMIT = 0
  PARAM_LINEAR_UPPER_LIMIT = 1
  PARAM_LINEAR_LIMIT_SOFTNESS = 2
  PARAM_LINEAR_RESTITUTION = 3
  PARAM_LINEAR_DAMPING = 4
  PARAM_LINEAR_MOTOR_TARGET_VELOCITY = 5
  PARAM_LINEAR_MOTOR_FORCE_LIMIT = 6
  PARAM_LINEAR_SPRING_STIFFNESS = 7
  PARAM_LINEAR_SPRING_DAMPING = 8
  PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT = 9
  PARAM_ANGULAR_LOWER_LIMIT = 10
  PARAM_ANGULAR_UPPER_LIMIT = 11
  PARAM_ANGULAR_LIMIT_SOFTNESS = 12
  PARAM_ANGULAR_DAMPING = 13
  PARAM_ANGULAR_RESTITUTION = 14
  PARAM_ANGULAR_FORCE_LIMIT = 15
  PARAM_ANGULAR_ERP = 16
  PARAM_ANGULAR_MOTOR_TARGET_VELOCITY = 17
  PARAM_ANGULAR_MOTOR_FORCE_LIMIT = 18
  PARAM_ANGULAR_SPRING_STIFFNESS = 19
  PARAM_ANGULAR_SPRING_DAMPING = 20
  PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT = 21
  PARAM_MAX = 22
class Flag:
  FLAG_ENABLE_LINEAR_LIMIT = 0
  FLAG_ENABLE_ANGULAR_LIMIT = 1
  FLAG_ENABLE_LINEAR_SPRING = 3
  FLAG_ENABLE_ANGULAR_SPRING = 2
  FLAG_ENABLE_MOTOR = 4
  FLAG_ENABLE_LINEAR_MOTOR = 5
  FLAG_MAX = 6


class Generic6DOFJoint3D(py4godot_joint3d.Joint3D):
  r'''
		The `Generic6DOFJoint3D` (6 Degrees Of Freedom) joint allows for implementing custom types of joints by locking the rotation and translation of certain axes.
		The first 3 DOF represent the linear motion of the physics bodies and the last 3 DOF represent the angular motion of the physics bodies. Each axis can be either locked, or limited.
	'''

  @staticmethod
  def constructor():
    class_ = Generic6DOFJoint3D.construct_without_init()
    class_._ptr = constructor(375,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Generic6DOFJoint3D.construct_without_init()
    class_._ptr = constructor(375,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGeneric6DOFJoint3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(375,0, ())


  def generate_wrapper(self):
    return CPPGeneric6DOFJoint3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Generic6DOFJoint3D.__new__(Generic6DOFJoint3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Generic6DOFJoint3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Generic6DOFJoint3D.construct_without_init()
    cls._ptr = CPPGeneric6DOFJoint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Generic6DOFJoint3D.construct_without_init()
    cls._ptr = CPPGeneric6DOFJoint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_param_x(self, param:'int'  , value:'float'   ) -> None:
    r'''
'''

    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'







    self._ptr.call_with_return(260,tuple([param, value]))

  @functools.native_method
  def get_param_x(self, param:'int'  ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(param, (int, float)), 'param must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(261,tuple([param]))
    return _ret


  @functools.native_method
  def set_param_y(self, param:'int'  , value:'float'   ) -> None:
    r'''
'''

    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'







    self._ptr.call_with_return(262,tuple([param, value]))

  @functools.native_method
  def get_param_y(self, param:'int'  ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(param, (int, float)), 'param must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(263,tuple([param]))
    return _ret


  @functools.native_method
  def set_param_z(self, param:'int'  , value:'float'   ) -> None:
    r'''
'''

    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'







    self._ptr.call_with_return(264,tuple([param, value]))

  @functools.native_method
  def get_param_z(self, param:'int'  ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(param, (int, float)), 'param must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(265,tuple([param]))
    return _ret


  @functools.native_method
  def set_flag_x(self, flag:'int'  , value:'bool'   ) -> None:
    r'''
'''

    assert isinstance(flag, (int, float)), 'flag must be int or float'
    assert isinstance(value, bool), 'value must be bool'







    self._ptr.call_with_return(266,tuple([flag, value]))

  @functools.native_method
  def get_flag_x(self, flag:'int'  ) -> typing.Union[bool]:
    r'''
'''

    assert isinstance(flag, (int, float)), 'flag must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(267,tuple([flag]))
    return _ret


  @functools.native_method
  def set_flag_y(self, flag:'int'  , value:'bool'   ) -> None:
    r'''
'''

    assert isinstance(flag, (int, float)), 'flag must be int or float'
    assert isinstance(value, bool), 'value must be bool'







    self._ptr.call_with_return(268,tuple([flag, value]))

  @functools.native_method
  def get_flag_y(self, flag:'int'  ) -> typing.Union[bool]:
    r'''
'''

    assert isinstance(flag, (int, float)), 'flag must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(269,tuple([flag]))
    return _ret


  @functools.native_method
  def set_flag_z(self, flag:'int'  , value:'bool'   ) -> None:
    r'''
'''

    assert isinstance(flag, (int, float)), 'flag must be int or float'
    assert isinstance(value, bool), 'value must be bool'







    self._ptr.call_with_return(270,tuple([flag, value]))

  @functools.native_method
  def get_flag_z(self, flag:'int'  ) -> typing.Union[bool]:
    r'''
'''

    assert isinstance(flag, (int, float)), 'flag must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(271,tuple([flag]))
    return _ret



register_cast_function('Generic6DOFJoint3D', Generic6DOFJoint3D.cast)
register_class('Generic6DOFJoint3D', Generic6DOFJoint3D)
