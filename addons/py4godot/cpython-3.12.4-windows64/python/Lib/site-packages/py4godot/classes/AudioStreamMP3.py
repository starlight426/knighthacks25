# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioStream as py4godot_audiostream 
from py4godot.wrappers.wrappers import CPPAudioStreamMP3Wrapper


class AudioStreamMP3(py4godot_audiostream.AudioStream):
  r''''''

  @staticmethod
  def constructor():
    class_ = AudioStreamMP3.construct_without_init()
    class_._ptr = constructor(144,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamMP3.construct_without_init()
    class_._ptr = constructor(144,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamMP3Wrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(144,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamMP3Wrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamMP3.__new__(AudioStreamMP3)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamMP3'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamMP3.construct_without_init()
    cls._ptr = CPPAudioStreamMP3Wrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamMP3.construct_without_init()
    cls._ptr = CPPAudioStreamMP3Wrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def data(self) -> typing.Union['PackedByteArray']:
    r''''''
    _ret = self. get_data()
    return _ret
  @data.setter
  def data(self,  value:'PackedByteArray'):
    self.set_data(value)
  @property
  def bpm(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_bpm()
    return _ret
  @bpm.setter
  def bpm(self,  value:'float'):
    self.set_bpm(value)
  @property
  def beat_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_beat_count()
    return _ret
  @beat_count.setter
  def beat_count(self,  value:'int'):
    self.set_beat_count(value)
  @property
  def bar_beats(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_bar_beats()
    return _ret
  @bar_beats.setter
  def bar_beats(self,  value:'int'):
    self.set_bar_beats(value)
  @property
  def loop(self) -> typing.Union[bool]:
    r''''''
    _ret = self. has_loop()
    return _ret
  @loop.setter
  def loop(self,  value:'bool'):
    self.set_loop(value)
  @property
  def loop_offset(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_loop_offset()
    return _ret
  @loop_offset.setter
  def loop_offset(self,  value:'float'):
    self.set_loop_offset(value)
  @staticmethod
  def load_from_buffer(stream_data:'PackedByteArray'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not stream_data is None)
    assert isinstance(stream_data, PackedByteArray), 'stream_data must be PackedByteArray'






    _ret = AudioStreamMP3.construct_without_init()
    _ret._ptr = static_method(144,1,tuple([stream_data._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def load_from_file(path:'str'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = AudioStreamMP3.construct_without_init()
    _ret._ptr = static_method(144,2,tuple([py_string_path._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_data(self, data:'PackedByteArray'   ) -> None:
    r''''''

    assert(not data is None)
    assert isinstance(data, PackedByteArray), 'data must be PackedByteArray'

    self.py__data = data






    self._ptr.call_with_return(93,tuple([data._ptr]))

  @functools.native_method
  def get_data(self) -> typing.Union['PackedByteArray']:
    r''''''




    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_loop(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__loop = enable






    self._ptr.call_with_return(95,tuple([enable]))

  @functools.native_method
  def has_loop(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_loop_offset(self, seconds:'float'   ) -> None:
    r''''''

    assert isinstance(seconds, (int, float)), 'seconds must be int or float'

    self.py__loop_offset = seconds






    self._ptr.call_with_return(97,tuple([seconds]))

  @functools.native_method
  def get_loop_offset(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([]))

    return _ret


  @functools.native_method
  def set_bpm(self, bpm:'float'   ) -> None:
    r''''''

    assert isinstance(bpm, (int, float)), 'bpm must be int or float'

    self.py__bpm = bpm






    self._ptr.call_with_return(99,tuple([bpm]))

  @functools.native_method
  def get_bpm(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(100,tuple([]))

    return _ret


  @functools.native_method
  def set_beat_count(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__beat_count = count






    self._ptr.call_with_return(101,tuple([count]))

  @functools.native_method
  def get_beat_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(102,tuple([]))

    return _ret


  @functools.native_method
  def set_bar_beats(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__bar_beats = count






    self._ptr.call_with_return(103,tuple([count]))

  @functools.native_method
  def get_bar_beats(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([]))

    return _ret



register_cast_function('AudioStreamMP3', AudioStreamMP3.cast)
register_class('AudioStreamMP3', AudioStreamMP3)
