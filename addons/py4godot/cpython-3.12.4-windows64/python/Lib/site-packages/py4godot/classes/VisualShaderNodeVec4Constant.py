# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNodeConstant as py4godot_visualshadernodeconstant 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeVec4ConstantWrapper


class VisualShaderNodeVec4Constant(py4godot_visualshadernodeconstant.VisualShaderNodeConstant):
  r'''
		A constant 4D vector, which can be used as an input node.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeVec4Constant.construct_without_init()
    class_._ptr = constructor(980,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeVec4Constant.construct_without_init()
    class_._ptr = constructor(980,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeVec4ConstantWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(980,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeVec4ConstantWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeVec4Constant.__new__(VisualShaderNodeVec4Constant)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeVec4Constant'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeVec4Constant.construct_without_init()
    cls._ptr = CPPVisualShaderNodeVec4ConstantWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeVec4Constant.construct_without_init()
    cls._ptr = CPPVisualShaderNodeVec4ConstantWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def constant(self) -> typing.Union['Quaternion']:
    r''''''
    _ret = self. get_constant()
    return _ret
  @constant.setter
  def constant(self,  value:'Quaternion'):
    self.set_constant(value)
  @property
  def constant_v4(self) -> typing.Union['Vector4']:
    r''''''
    _ret = self. _get_constant_v4()
    return _ret
  @constant_v4.setter
  def constant_v4(self,  value:'Vector4'):
    self._set_constant_v4(value)
  @functools.native_method
  def set_constant(self, constant:'Quaternion'   ) -> None:
    r''''''

    assert(not constant is None)
    assert isinstance(constant, Quaternion), 'constant must be Quaternion'

    self.py__constant = constant






    self._ptr.call_with_return(88,tuple([constant._ptr]))

  @functools.native_method
  def get_constant(self) -> typing.Union['Quaternion']:
    r''''''




    _ret = Quaternion.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(89,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeVec4Constant', VisualShaderNodeVec4Constant.cast)
register_class('VisualShaderNodeVec4Constant', VisualShaderNodeVec4Constant)
