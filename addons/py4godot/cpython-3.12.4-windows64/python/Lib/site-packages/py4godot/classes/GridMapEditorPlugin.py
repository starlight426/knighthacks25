# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.GridMap as py4godot_gridmap 
import py4godot.classes.EditorPlugin as py4godot_editorplugin 
from py4godot.wrappers.wrappers import CPPGridMapEditorPluginWrapper


class GridMapEditorPlugin(py4godot_editorplugin.EditorPlugin):
  r''''''

  @staticmethod
  def constructor():
    class_ = GridMapEditorPlugin.construct_without_init()
    class_._ptr = constructor(388,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GridMapEditorPlugin.construct_without_init()
    class_._ptr = constructor(388,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGridMapEditorPluginWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(388,0, ())


  def generate_wrapper(self):
    return CPPGridMapEditorPluginWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GridMapEditorPlugin.__new__(GridMapEditorPlugin)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GridMapEditorPlugin'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GridMapEditorPlugin.construct_without_init()
    cls._ptr = CPPGridMapEditorPluginWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GridMapEditorPlugin.construct_without_init()
    cls._ptr = CPPGridMapEditorPluginWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_current_grid_map(self) -> typing.Union['py4godot_gridmap.GridMap']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: GridMap
    _ret._ptr = self._ptr.call_with_return(253,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_selection(self, begin:'Vector3i'   , end:'Vector3i'   ) -> None:
    r''''''

    assert(not begin is None)
    assert isinstance(begin, Vector3i), 'begin must be Vector3i'
    assert(not end is None)
    assert isinstance(end, Vector3i), 'end must be Vector3i'







    self._ptr.call_with_return(254,tuple([begin._ptr, end._ptr]))

  @functools.native_method
  def clear_selection(self) -> None:
    r''''''




    self._ptr.call_with_return(255,tuple([]))

  @functools.native_method
  def get_selection(self) -> typing.Union['AABB']:
    r''''''




    _ret = AABB.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(256,tuple([]))
    return _ret


  @functools.native_method
  def has_selection(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(257,tuple([]))
    return _ret


  @functools.native_method
  def get_selected_cells(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(258,tuple([]))
    return _ret


  @functools.native_method
  def set_selected_palette_item(self, item:'int'   ) -> None:
    r''''''

    assert isinstance(item, (int, float)), 'item must be int or float'






    self._ptr.call_with_return(259,tuple([item]))

  @functools.native_method
  def get_selected_palette_item(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(260,tuple([]))
    return _ret



register_cast_function('GridMapEditorPlugin', GridMapEditorPlugin.cast)
register_class('GridMapEditorPlugin', GridMapEditorPlugin)
