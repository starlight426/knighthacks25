# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Image as py4godot_image 
import py4godot.classes.Shape3D as py4godot_shape3d 
from py4godot.wrappers.wrappers import CPPHeightMapShape3DWrapper


class HeightMapShape3D(py4godot_shape3d.Shape3D):
  r'''
		A 3D heightmap shape, intended for use in physics. Usually used to provide a shape for a `CollisionShape3D`. This type is most commonly used for terrain with vertices placed in a fixed width grid. Due to the nature of the heightmap, it cannot be used to model overhangs or caves, which would require multiple vertices at the same vertical location. Holes can be punched through the collision by assigning `constant @GDScript.NAN` to the height of the desired vertices (this is supported in both GodotPhysics3D and Jolt Physics). You could then insert meshes with their own separate collision to provide overhangs, caves, and so on.
		**Performance:** `HeightMapShape3D` is faster to check collisions against than `ConcavePolygonShape3D`, but it is significantly slower than primitive shapes like `BoxShape3D`.
		A heightmap collision shape can also be built by using an `Image` reference:
		
		```gdscript
		var heightmap_texture = ResourceLoader.load("res://heightmap_image.exr")
		var heightmap_image = heightmap_texture.get_image()
		heightmap_image.convert(Image.FORMAT_RF)

		var height_min = 0.0
		var height_max = 10.0

		update_map_data_from_image(heightmap_image, height_min, height_max)
		```
		
	'''

  @staticmethod
  def constructor():
    class_ = HeightMapShape3D.construct_without_init()
    class_._ptr = constructor(400,0, ())
    return class_
  @staticmethod
  def new():
    class_ = HeightMapShape3D.construct_without_init()
    class_._ptr = constructor(400,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPHeightMapShape3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(400,0, ())


  def generate_wrapper(self):
    return CPPHeightMapShape3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = HeightMapShape3D.__new__(HeightMapShape3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'HeightMapShape3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = HeightMapShape3D.construct_without_init()
    cls._ptr = CPPHeightMapShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = HeightMapShape3D.construct_without_init()
    cls._ptr = CPPHeightMapShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def map_width(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_map_width()
    return _ret
  @map_width.setter
  def map_width(self,  value:'int'):
    self.set_map_width(value)
  @property
  def map_depth(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_map_depth()
    return _ret
  @map_depth.setter
  def map_depth(self,  value:'int'):
    self.set_map_depth(value)
  @property
  def map_data(self) -> typing.Union['PackedFloat32Array']:
    r''''''
    _ret = self. get_map_data()
    return _ret
  @map_data.setter
  def map_data(self,  value:'PackedFloat32Array'):
    self.set_map_data(value)
  @functools.native_method
  def set_map_width(self, width:'int'   ) -> None:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'

    self.py__map_width = width






    self._ptr.call_with_return(82,tuple([width]))

  @functools.native_method
  def get_map_width(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_map_depth(self, height:'int'   ) -> None:
    r''''''

    assert isinstance(height, (int, float)), 'height must be int or float'

    self.py__map_depth = height






    self._ptr.call_with_return(84,tuple([height]))

  @functools.native_method
  def get_map_depth(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_map_data(self, data:'PackedFloat32Array'   ) -> None:
    r''''''

    assert(not data is None)
    assert isinstance(data, PackedFloat32Array), 'data must be PackedFloat32Array'

    self.py__map_data = data






    self._ptr.call_with_return(86,tuple([data._ptr]))

  @functools.native_method
  def get_map_data(self) -> typing.Union['PackedFloat32Array']:
    r''''''




    _ret = PackedFloat32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def get_min_height(self) -> typing.Union[float]:
    r'''
				Returns the smallest height value found in `map_data`. Recalculates only when `map_data` changes.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))
    return _ret


  @functools.native_method
  def get_max_height(self) -> typing.Union[float]:
    r'''
				Returns the largest height value found in `map_data`. Recalculates only when `map_data` changes.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))
    return _ret


  @functools.native_method
  def update_map_data_from_image(self, image:'py4godot_image.Image'   , height_min:'float'   , height_max:'float'   ) -> None:
    r'''
				Updates `map_data` with data read from an `Image` reference. Automatically resizes heightmap `map_width` and `map_depth` to fit the full image width and height.
				The image needs to be in either `constant Image.FORMAT_RF` (32 bit), `constant Image.FORMAT_RH` (16 bit), or `constant Image.FORMAT_R8` (8 bit).
				Each image pixel is read in as a float on the range from `0.0` (black pixel) to `1.0` (white pixel). This range value gets remapped to `height_min` and `height_max` to form the final height value.
				**Note:** Using a heightmap with 16-bit or 32-bit data, stored in EXR or HDR format is recommended. Using 8-bit height data, or a format like PNG that Godot imports as 8-bit, will result in a terraced terrain.
			'''

    assert(not image is None)
    assert isinstance(image, get_class('Image')), 'image must be Image'
    assert isinstance(height_min, (int, float)), 'height_min must be int or float'
    assert isinstance(height_max, (int, float)), 'height_max must be int or float'








    self._ptr.call_with_return(90,tuple([image._ptr, height_min, height_max]))


register_cast_function('HeightMapShape3D', HeightMapShape3D.cast)
register_class('HeightMapShape3D', HeightMapShape3D)
