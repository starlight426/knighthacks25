# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioStreamPlaybackResampled as py4godot_audiostreamplaybackresampled 
from py4godot.wrappers.wrappers import CPPAudioStreamGeneratorPlaybackWrapper


class AudioStreamGeneratorPlayback(py4godot_audiostreamplaybackresampled.AudioStreamPlaybackResampled):
  r'''
		This class is meant to be used with `AudioStreamGenerator` to play back the generated audio in real-time.
	'''

  @staticmethod
  def constructor():
    class_ = AudioStreamGeneratorPlayback.construct_without_init()
    class_._ptr = constructor(142,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamGeneratorPlayback.construct_without_init()
    class_._ptr = constructor(142,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamGeneratorPlaybackWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(142,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamGeneratorPlaybackWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamGeneratorPlayback.__new__(AudioStreamGeneratorPlayback)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamGeneratorPlayback'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamGeneratorPlayback.construct_without_init()
    cls._ptr = CPPAudioStreamGeneratorPlaybackWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamGeneratorPlayback.construct_without_init()
    cls._ptr = CPPAudioStreamGeneratorPlaybackWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def push_frame(self, frame:'Vector2'   ) -> typing.Union[bool]:
    r'''
				Pushes a single audio data frame to the buffer. This is usually less efficient than `push_buffer` in C# and compiled languages via GDExtension, but `push_frame` may be _more_ efficient in GDScript.
			'''

    assert(not frame is None)
    assert isinstance(frame, Vector2), 'frame must be Vector2'






    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([frame._ptr]))
    return _ret


  @functools.native_method
  def can_push_buffer(self, amount:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if a buffer of the size `amount` can be pushed to the audio sample data buffer without overflowing it, `false` otherwise.
			'''

    assert isinstance(amount, (int, float)), 'amount must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(74,tuple([amount]))
    return _ret


  @functools.native_method
  def push_buffer(self, frames:'PackedVector2Array'   ) -> typing.Union[bool]:
    r'''
				Pushes several audio data frames to the buffer. This is usually more efficient than `push_frame` in C# and compiled languages via GDExtension, but `push_buffer` may be _less_ efficient in GDScript.
			'''

    assert(not frames is None)
    assert isinstance(frames, PackedVector2Array), 'frames must be PackedVector2Array'






    _ret = 0
    _ret = self._ptr.call_with_return(75,tuple([frames._ptr]))
    return _ret


  @functools.native_method
  def get_frames_available(self) -> typing.Union[int]:
    r'''
				Returns the number of frames that can be pushed to the audio sample data buffer without overflowing it. If the result is `0`, the buffer is full.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(76,tuple([]))
    return _ret


  @functools.native_method
  def get_skips(self) -> typing.Union[int]:
    r'''
				Returns the number of times the playback skipped due to a buffer underrun in the audio sample data. This value is reset at the start of the playback.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([]))
    return _ret


  @functools.native_method
  def clear_buffer(self) -> None:
    r'''
				Clears the audio sample data buffer.
			'''




    self._ptr.call_with_return(78,tuple([]))


register_cast_function('AudioStreamGeneratorPlayback', AudioStreamGeneratorPlayback.cast)
register_class('AudioStreamGeneratorPlayback', AudioStreamGeneratorPlayback)
