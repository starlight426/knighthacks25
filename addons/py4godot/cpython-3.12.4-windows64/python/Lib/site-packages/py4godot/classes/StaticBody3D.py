# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.PhysicsMaterial as py4godot_physicsmaterial 
import py4godot.classes.PhysicsBody3D as py4godot_physicsbody3d 
from py4godot.wrappers.wrappers import CPPStaticBody3DWrapper


class StaticBody3D(py4godot_physicsbody3d.PhysicsBody3D):
  r'''
		A static 3D physics body. It can't be moved by external forces or contacts, but can be moved manually by other means such as code, `AnimationMixer`s (with `AnimationMixer.callback_mode_process` set to `constant AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS`), and `RemoteTransform3D`.
		When `StaticBody3D` is moved, it is teleported to its new position without affecting other physics bodies in its path. If this is not desired, use `AnimatableBody3D` instead.
		`StaticBody3D` is useful for completely static objects like floors and walls, as well as moving surfaces like conveyor belts and circular revolving platforms (by using `constant_linear_velocity` and `constant_angular_velocity`).
	'''

  @staticmethod
  def constructor():
    class_ = StaticBody3D.construct_without_init()
    class_._ptr = constructor(785,0, ())
    return class_
  @staticmethod
  def new():
    class_ = StaticBody3D.construct_without_init()
    class_._ptr = constructor(785,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPStaticBody3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(785,0, ())


  def generate_wrapper(self):
    return CPPStaticBody3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = StaticBody3D.__new__(StaticBody3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'StaticBody3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = StaticBody3D.construct_without_init()
    cls._ptr = CPPStaticBody3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = StaticBody3D.construct_without_init()
    cls._ptr = CPPStaticBody3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def physics_material_override(self) -> typing.Union['py4godot_physicsmaterial.PhysicsMaterial']:
    r''''''
    _ret = self. get_physics_material_override()
    return _ret
  @physics_material_override.setter
  def physics_material_override(self,  value:'py4godot_object.Object'):
    self.set_physics_material_override(value)
  @property
  def constant_linear_velocity(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_constant_linear_velocity()
    return _ret
  @constant_linear_velocity.setter
  def constant_linear_velocity(self,  value:'Vector3'):
    self.set_constant_linear_velocity(value)
  @property
  def constant_angular_velocity(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_constant_angular_velocity()
    return _ret
  @constant_angular_velocity.setter
  def constant_angular_velocity(self,  value:'Vector3'):
    self.set_constant_angular_velocity(value)
  @functools.native_method
  def set_constant_linear_velocity(self, vel:'Vector3'   ) -> None:
    r''''''

    assert(not vel is None)
    assert isinstance(vel, Vector3), 'vel must be Vector3'

    self.py__constant_linear_velocity = vel






    self._ptr.call_with_return(294,tuple([vel._ptr]))

  @functools.native_method
  def set_constant_angular_velocity(self, vel:'Vector3'   ) -> None:
    r''''''

    assert(not vel is None)
    assert isinstance(vel, Vector3), 'vel must be Vector3'

    self.py__constant_angular_velocity = vel






    self._ptr.call_with_return(295,tuple([vel._ptr]))

  @functools.native_method
  def get_constant_linear_velocity(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(296,tuple([]))

    return _ret


  @functools.native_method
  def get_constant_angular_velocity(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(297,tuple([]))

    return _ret


  @functools.native_method
  def set_physics_material_override(self, physics_material_override:'py4godot_physicsmaterial.PhysicsMaterial'   ) -> None:
    r''''''

    assert(not physics_material_override is None)
    assert isinstance(physics_material_override, get_class('PhysicsMaterial')), 'physics_material_override must be PhysicsMaterial'

    self.py__physics_material_override = physics_material_override






    self._ptr.call_with_return(298,tuple([physics_material_override._ptr]))

  @functools.native_method
  def get_physics_material_override(self) -> typing.Union['py4godot_physicsmaterial.PhysicsMaterial']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PhysicsMaterial
    _ret._ptr = self._ptr.call_with_return(299,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('StaticBody3D', StaticBody3D.cast)
register_class('StaticBody3D', StaticBody3D)
