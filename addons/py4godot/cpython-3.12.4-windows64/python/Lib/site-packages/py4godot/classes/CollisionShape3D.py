# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ConcavePolygonShape3D as py4godot_concavepolygonshape3d 
  import py4godot.classes.CapsuleShape3D as py4godot_capsuleshape3d 
  import py4godot.classes.WorldBoundaryShape3D as py4godot_worldboundaryshape3d 
  import py4godot.classes.BoxShape3D as py4godot_boxshape3d 
  import py4godot.classes.SphereShape3D as py4godot_sphereshape3d 
  import py4godot.classes.Shape3D as py4godot_shape3d 
  import py4godot.classes.HeightMapShape3D as py4godot_heightmapshape3d 
  import py4godot.classes.CylinderShape3D as py4godot_cylindershape3d 
  import py4godot.classes.ConvexPolygonShape3D as py4godot_convexpolygonshape3d 
  import py4godot.classes.Resource as py4godot_resource 
  import py4godot.classes.SeparationRayShape3D as py4godot_separationrayshape3d 
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPCollisionShape3DWrapper


class CollisionShape3D(py4godot_node3d.Node3D):
  r'''
		A node that provides a `Shape3D` to a `CollisionObject3D` parent and allows it to be edited. This can give a detection shape to an `Area3D` or turn a `PhysicsBody3D` into a solid object.
		**Warning:** A non-uniformly scaled `CollisionShape3D` will likely not behave as expected. Make sure to keep its scale the same on all axes and adjust its `shape` resource instead.
	'''

  @staticmethod
  def constructor():
    class_ = CollisionShape3D.construct_without_init()
    class_._ptr = constructor(220,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CollisionShape3D.construct_without_init()
    class_._ptr = constructor(220,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCollisionShape3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(220,0, ())


  def generate_wrapper(self):
    return CPPCollisionShape3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CollisionShape3D.__new__(CollisionShape3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CollisionShape3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CollisionShape3D.construct_without_init()
    cls._ptr = CPPCollisionShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CollisionShape3D.construct_without_init()
    cls._ptr = CPPCollisionShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def shape(self) -> typing.Any:
    r''''''
    _ret = self. get_shape()
    return _ret
  @shape.setter
  def shape(self,  value:'py4godot_object.Object'):
    self.set_shape(value)
  @property
  def disabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_disabled()
    return _ret
  @disabled.setter
  def disabled(self,  value:'bool'):
    self.set_disabled(value)
  @property
  def debug_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_debug_color()
    return _ret
  @debug_color.setter
  def debug_color(self,  value:'Color'):
    self.set_debug_color(value)
  @property
  def debug_fill(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_debug_fill()
    return _ret
  @debug_fill.setter
  def debug_fill(self,  value:'bool'):
    self.set_enable_debug_fill(value)
  @functools.native_method
  def resource_changed(self, resource:'py4godot_resource.Resource'   ) -> None:
    r'''
				This method does nothing.
			'''

    assert(not resource is None)
    assert isinstance(resource, get_class('Resource')), 'resource must be Resource'






    self._ptr.call_with_return(251,tuple([resource._ptr]))

  @functools.native_method
  def set_shape(self, shape:'py4godot_shape3d.Shape3D'   ) -> None:
    r''''''

    assert(not shape is None)
    assert isinstance(shape, get_class('Shape3D')), 'shape must be Shape3D'

    self.py__shape = shape






    self._ptr.call_with_return(252,tuple([shape._ptr]))

  @functools.native_method
  def get_shape(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Shape3D
    _ret._ptr = self._ptr.call_with_return(253,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_disabled(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__disabled = enable






    self._ptr.call_with_return(254,tuple([enable]))

  @functools.native_method
  def is_disabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(255,tuple([]))

    return _ret


  @functools.native_method
  def make_convex_from_siblings(self) -> None:
    r'''
				Sets the collision shape's shape to the addition of all its convexed `MeshInstance3D` siblings geometry.
			'''




    self._ptr.call_with_return(256,tuple([]))

  @functools.native_method
  def set_debug_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__debug_color = color






    self._ptr.call_with_return(257,tuple([color._ptr]))

  @functools.native_method
  def get_debug_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(258,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_debug_fill(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__debug_fill = enable






    self._ptr.call_with_return(259,tuple([enable]))

  @functools.native_method
  def get_enable_debug_fill(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(260,tuple([]))

    return _ret



register_cast_function('CollisionShape3D', CollisionShape3D.cast)
register_class('CollisionShape3D', CollisionShape3D)
