# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.MaterialTypedArray as py4godot_materialtypedarray 
  import py4godot.classes.Object as py4godot_object 
  import py4godot.classes.ImporterMesh as py4godot_importermesh 
import py4godot.classes.MaterialTypedArray as py4godot_materialtypedarray 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFMeshWrapper


class GLTFMesh(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFMesh.construct_without_init()
    class_._ptr = constructor(353,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFMesh.construct_without_init()
    class_._ptr = constructor(353,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFMeshWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(353,0, ())


  def generate_wrapper(self):
    return CPPGLTFMeshWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFMesh.__new__(GLTFMesh)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFMesh'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFMesh.construct_without_init()
    cls._ptr = CPPGLTFMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFMesh.construct_without_init()
    cls._ptr = CPPGLTFMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def original_name(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_original_name()
    return _ret
  @original_name.setter
  def original_name(self,  value:'str'):
    self.set_original_name(value)
  @property
  def mesh(self) -> typing.Any:
    r''''''
    _ret = self. get_mesh()
    return _ret
  @mesh.setter
  def mesh(self,  value:'py4godot_object.Object'):
    self.set_mesh(value)
  @property
  def blend_weights(self) -> typing.Union['PackedFloat32Array']:
    r''''''
    _ret = self. get_blend_weights()
    return _ret
  @blend_weights.setter
  def blend_weights(self,  value:'PackedFloat32Array'):
    self.set_blend_weights(value)
  @property
  def instance_materials(self) -> typing.Union['Array']:
    r''''''
    _ret = self. get_instance_materials()
    return _ret
  @instance_materials.setter
  def instance_materials(self,  value:'Array'):
    self.set_instance_materials(value)
  @functools.native_method
  def get_original_name(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_original_name(self, original_name:'str'   ) -> None:
    r''''''

    assert(not original_name is None)
    assert isinstance(original_name, (str, String)), 'original_name must be str or String'

    self.py__original_name = original_name



    assert(isinstance(original_name, (str, String)))
    py_string_original_name = original_name if isinstance(original_name, StringName) else c_utils.py_string_to_string(original_name)

    py__string_original_name = utils.py_string_to_string(original_name)
    py__string_original_name.shouldBeDeleted = False


    self._ptr.call_with_return(78,tuple([py__string_original_name._ptr]))

  @functools.native_method
  def get_mesh(self) -> typing.Union['py4godot_importermesh.ImporterMesh']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ImporterMesh
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_mesh(self, mesh:'py4godot_importermesh.ImporterMesh'   ) -> None:
    r''''''

    assert(not mesh is None)
    assert isinstance(mesh, get_class('ImporterMesh')), 'mesh must be ImporterMesh'

    self.py__mesh = mesh






    self._ptr.call_with_return(80,tuple([mesh._ptr]))

  @functools.native_method
  def get_blend_weights(self) -> typing.Union['PackedFloat32Array']:
    r''''''




    _ret = PackedFloat32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_blend_weights(self, blend_weights:'PackedFloat32Array'   ) -> None:
    r''''''

    assert(not blend_weights is None)
    assert isinstance(blend_weights, PackedFloat32Array), 'blend_weights must be PackedFloat32Array'

    self.py__blend_weights = blend_weights






    self._ptr.call_with_return(82,tuple([blend_weights._ptr]))

  @functools.native_method
  def get_instance_materials(self) -> typing.Union['py4godot_materialtypedarray.MaterialTypedArray']:
    r''''''




    _ret = py4godot_materialtypedarray.MaterialTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_instance_materials(self, instance_materials:'py4godot_materialtypedarray.MaterialTypedArray'   ) -> None:
    r''''''

    assert isinstance(instance_materials, get_class('MaterialTypedArray')), 'instance_materials must be MaterialTypedArray'

    self.py__instance_materials = instance_materials






    self._ptr.call_with_return(84,tuple([instance_materials._ptr]))

  @functools.native_method
  def get_additional_data(self, extension_name:'object'   ) -> typing.Union[typing.Any]:
    r''''''

    assert(not extension_name is None)
    assert isinstance(extension_name, (str, StringName)), 'extension_name must be str or StringName'




    assert(isinstance(extension_name, (str, StringName)))
    py_stringname_extension_name = extension_name if isinstance(extension_name, StringName) else c_utils.py_string_to_string_name(extension_name)

    _ret = None
    _ret = self._ptr.call_with_return(85,tuple([py_stringname_extension_name._ptr]))
    return _ret


  @functools.native_method
  def set_additional_data(self, extension_name:'object'   , additional_data:'object'   ) -> None:
    r''''''

    assert(not extension_name is None)
    assert isinstance(extension_name, (str, StringName)), 'extension_name must be str or StringName'
    




    assert(isinstance(extension_name, (str, StringName)))
    py_stringname_extension_name = extension_name if isinstance(extension_name, StringName) else c_utils.py_string_to_string_name(extension_name)


    self._ptr.call_with_return(86,tuple([py_stringname_extension_name._ptr, additional_data]))


register_cast_function('GLTFMesh', GLTFMesh.cast)
register_class('GLTFMesh', GLTFMesh)
