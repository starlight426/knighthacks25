# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPMutexWrapper


class Mutex(py4godot_refcounted.RefCounted):
  r'''
		A synchronization mutex (mutual exclusion). This is used to synchronize multiple `Thread`s, and is equivalent to a binary `Semaphore`. It guarantees that only one thread can access a critical section at a time.
		This is a reentrant mutex, meaning that it can be locked multiple times by one thread, provided it also unlocks it as many times.
		**Warning:** Mutexes must be used carefully to avoid deadlocks.
		**Warning:** To ensure proper cleanup without crashes or deadlocks, the following conditions must be met:
		- When a `Mutex`'s reference count reaches zero and it is therefore destroyed, no threads (including the one on which the destruction will happen) must have it locked.
		- When a `Thread`'s reference count reaches zero and it is therefore destroyed, it must not have any mutex locked.
	'''

  @staticmethod
  def constructor():
    class_ = Mutex.construct_without_init()
    class_._ptr = constructor(492,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Mutex.construct_without_init()
    class_._ptr = constructor(492,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMutexWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(492,0, ())


  def generate_wrapper(self):
    return CPPMutexWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Mutex.__new__(Mutex)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Mutex'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Mutex.construct_without_init()
    cls._ptr = CPPMutexWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Mutex.construct_without_init()
    cls._ptr = CPPMutexWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def lock(self) -> None:
    r'''
				Locks this `Mutex`, blocks until it is unlocked by the current owner.
				**Note:** This function returns without blocking if the thread already has ownership of the mutex.
			'''




    self._ptr.call_with_return(53,tuple([]))

  @functools.native_method
  def try_lock(self) -> typing.Union[bool]:
    r'''
				Tries locking this `Mutex`, but does not block. Returns `true` on success, `false` otherwise.
				**Note:** This function returns `true` if the thread already has ownership of the mutex.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def unlock(self) -> None:
    r'''
				Unlocks this `Mutex`, leaving it to other threads.
				**Note:** If a thread called `lock` or `try_lock` multiple times while already having ownership of the mutex, it must also call `unlock` the same number of times in order to unlock it correctly.
				**Warning:** Calling `unlock` more times that `lock` on a given thread, thus ending up trying to unlock a non-locked mutex, is wrong and may causes crashes or deadlocks.
			'''




    self._ptr.call_with_return(55,tuple([]))


register_cast_function('Mutex', Mutex.cast)
register_class('Mutex', Mutex)
