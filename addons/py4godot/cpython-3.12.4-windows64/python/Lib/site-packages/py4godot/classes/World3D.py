# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CameraAttributesPhysical as py4godot_cameraattributesphysical 
  import py4godot.classes.PhysicsDirectSpaceState3D as py4godot_physicsdirectspacestate3d 
  import py4godot.classes.Environment as py4godot_environment 
  import py4godot.classes.CameraAttributes as py4godot_cameraattributes 
  import py4godot.classes.CameraAttributesPractical as py4godot_cameraattributespractical 
  import py4godot.classes.PhysicsDirectSpaceState3DExtension as py4godot_physicsdirectspacestate3dextension 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPWorld3DWrapper


class World3D(py4godot_resource.Resource):
  r'''
		Class that has everything pertaining to a world: A physics space, a visual scenario, and a sound space. 3D nodes register their resources into the current 3D world.
	'''

  @staticmethod
  def constructor():
    class_ = World3D.construct_without_init()
    class_._ptr = constructor(1005,0, ())
    return class_
  @staticmethod
  def new():
    class_ = World3D.construct_without_init()
    class_._ptr = constructor(1005,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWorld3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1005,0, ())


  def generate_wrapper(self):
    return CPPWorld3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = World3D.__new__(World3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'World3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = World3D.construct_without_init()
    cls._ptr = CPPWorld3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = World3D.construct_without_init()
    cls._ptr = CPPWorld3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def environment(self) -> typing.Union['py4godot_environment.Environment']:
    r''''''
    _ret = self. get_environment()
    return _ret
  @environment.setter
  def environment(self,  value:'py4godot_object.Object'):
    self.set_environment(value)
  @property
  def fallback_environment(self) -> typing.Union['py4godot_environment.Environment']:
    r''''''
    _ret = self. get_fallback_environment()
    return _ret
  @fallback_environment.setter
  def fallback_environment(self,  value:'py4godot_object.Object'):
    self.set_fallback_environment(value)
  @property
  def camera_attributes(self) -> typing.Union['py4godot_cameraattributespractical.CameraAttributesPractical']:
    r''''''
    _ret = self. get_camera_attributes()
    return _ret
  @camera_attributes.setter
  def camera_attributes(self,  value:'py4godot_object.Object'):
    self.set_camera_attributes(value)
  @property
  def space(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_space()
    return _ret
  @property
  def navigation_map(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_navigation_map()
    return _ret
  @property
  def scenario(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_scenario()
    return _ret
  @property
  def direct_space_state(self) -> typing.Union['py4godot_physicsdirectspacestate3d.PhysicsDirectSpaceState3D','py4godot_physicsdirectspacestate3dextension.PhysicsDirectSpaceState3DExtension']:
    r''''''
    _ret = self. get_direct_space_state()
    return _ret
  @functools.native_method
  def get_space(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return _ret


  @functools.native_method
  def get_navigation_map(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def get_scenario(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_environment(self, env:'py4godot_environment.Environment'   ) -> None:
    r''''''

    assert(not env is None)
    assert isinstance(env, get_class('Environment')), 'env must be Environment'

    self.py__environment = env






    self._ptr.call_with_return(80,tuple([env._ptr]))

  @functools.native_method
  def get_environment(self) -> typing.Union['py4godot_environment.Environment']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Environment
    _ret._ptr = self._ptr.call_with_return(81,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_fallback_environment(self, env:'py4godot_environment.Environment'   ) -> None:
    r''''''

    assert(not env is None)
    assert isinstance(env, get_class('Environment')), 'env must be Environment'

    self.py__fallback_environment = env






    self._ptr.call_with_return(82,tuple([env._ptr]))

  @functools.native_method
  def get_fallback_environment(self) -> typing.Union['py4godot_environment.Environment']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Environment
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_camera_attributes(self, attributes:'py4godot_cameraattributes.CameraAttributes'   ) -> None:
    r''''''

    assert(not attributes is None)
    assert isinstance(attributes, get_class('CameraAttributes')), 'attributes must be CameraAttributes'

    self.py__camera_attributes = attributes






    self._ptr.call_with_return(84,tuple([attributes._ptr]))

  @functools.native_method
  def get_camera_attributes(self) -> typing.Union['py4godot_cameraattributesphysical.CameraAttributesPhysical','py4godot_cameraattributes.CameraAttributes','py4godot_cameraattributespractical.CameraAttributesPractical']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: CameraAttributes
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_direct_space_state(self) -> typing.Union['py4godot_physicsdirectspacestate3d.PhysicsDirectSpaceState3D','py4godot_physicsdirectspacestate3dextension.PhysicsDirectSpaceState3DExtension']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PhysicsDirectSpaceState3D
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('World3D', World3D.cast)
register_class('World3D', World3D)
