# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPHashingContextWrapper

class HashType:
  HASH_MD5 = 0
  HASH_SHA1 = 1
  HASH_SHA256 = 2


class HashingContext(py4godot_refcounted.RefCounted):
  r'''
		The HashingContext class provides an interface for computing cryptographic hashes over multiple iterations. Useful for computing hashes of big files (so you don't have to load them all in memory), network streams, and data streams in general (so you don't have to hold buffers).
		The `enum HashType` enum shows the supported hashing algorithms.
		
		```gdscript
		const CHUNK_SIZE = 1024

		func hash_file(path):
			# Check that file exists.
			if not FileAccess.file_exists(path):
				return
			# Start an SHA-256 context.
			var ctx = HashingContext.new()
			ctx.start(HashingContext.HASH_SHA256)
			# Open the file to hash.
			var file = FileAccess.open(path, FileAccess.READ)
			# Update the context after reading each chunk.
			while file.get_position() < file.get_length():
				var remaining = file.get_length() - file.get_position()
				ctx.update(file.get_buffer(min(remaining, CHUNK_SIZE)))
			# Get the computed hash.
			var res = ctx.finish()
			# Print the result as hex string and array.
			printt(res.hex_encode(), Array(res))
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = HashingContext.construct_without_init()
    class_._ptr = constructor(399,0, ())
    return class_
  @staticmethod
  def new():
    class_ = HashingContext.construct_without_init()
    class_._ptr = constructor(399,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPHashingContextWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(399,0, ())


  def generate_wrapper(self):
    return CPPHashingContextWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = HashingContext.__new__(HashingContext)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'HashingContext'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = HashingContext.construct_without_init()
    cls._ptr = CPPHashingContextWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = HashingContext.construct_without_init()
    cls._ptr = CPPHashingContextWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def start(self, type:'int'  ) -> typing.Union[int]:
    r'''
				Starts a new hash computation of the given `type` (e.g. `constant HASH_SHA256` to start computation of an SHA-256).
			'''

    assert isinstance(type, (int, float)), 'type must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([type]))
    return _ret


  @functools.native_method
  def update(self, chunk:'PackedByteArray'   ) -> typing.Union[int]:
    r'''
				Updates the computation with the given `chunk` of data.
			'''

    assert(not chunk is None)
    assert isinstance(chunk, PackedByteArray), 'chunk must be PackedByteArray'






    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([chunk._ptr]))
    return _ret


  @functools.native_method
  def finish(self) -> typing.Union['PackedByteArray']:
    r'''
				Closes the current context, and return the computed hash.
			'''




    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return _ret



register_cast_function('HashingContext', HashingContext.cast)
register_class('HashingContext', HashingContext)
