# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPBackBufferCopyWrapper

class CopyMode:
  COPY_MODE_DISABLED = 0
  COPY_MODE_RECT = 1
  COPY_MODE_VIEWPORT = 2


class BackBufferCopy(py4godot_node2d.Node2D):
  r'''
		Node for back-buffering the currently-displayed screen. The region defined in the `BackBufferCopy` node is buffered with the content of the screen it covers, or the entire screen according to the `copy_mode`. It can be accessed in shader scripts using the screen texture (i.e. a uniform sampler with `hint_screen_texture`).
		**Note:** Since this node inherits from `Node2D` (and not `Control`), anchors and margins won't apply to child `Control`-derived nodes. This can be problematic when resizing the window. To avoid this, add `Control`-derived nodes as _siblings_ to the `BackBufferCopy` node instead of adding them as children.
	'''

  @staticmethod
  def constructor():
    class_ = BackBufferCopy.construct_without_init()
    class_._ptr = constructor(162,0, ())
    return class_
  @staticmethod
  def new():
    class_ = BackBufferCopy.construct_without_init()
    class_._ptr = constructor(162,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPBackBufferCopyWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(162,0, ())


  def generate_wrapper(self):
    return CPPBackBufferCopyWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = BackBufferCopy.__new__(BackBufferCopy)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'BackBufferCopy'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = BackBufferCopy.construct_without_init()
    cls._ptr = CPPBackBufferCopyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = BackBufferCopy.construct_without_init()
    cls._ptr = CPPBackBufferCopyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def copy_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_copy_mode()
    return _ret
  @copy_mode.setter
  def copy_mode(self,  value:'int'):
    self.set_copy_mode(value)
  @property
  def rect(self) -> typing.Union['Rect2']:
    r''''''
    _ret = self. get_rect()
    return _ret
  @rect.setter
  def rect(self,  value:'Rect2'):
    self.set_rect(value)
  @functools.native_method
  def set_rect(self, rect:'Rect2'   ) -> None:
    r''''''

    assert(not rect is None)
    assert isinstance(rect, Rect2), 'rect must be Rect2'

    self.py__rect = rect






    self._ptr.call_with_return(303,tuple([rect._ptr]))

  @functools.native_method
  def get_rect(self) -> typing.Union['Rect2']:
    r''''''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def set_copy_mode(self, copy_mode:'int'  ) -> None:
    r''''''

    assert isinstance(copy_mode, (int, float)), 'copy_mode must be int or float'

    self.py__copy_mode = copy_mode






    self._ptr.call_with_return(305,tuple([copy_mode]))

  @functools.native_method
  def get_copy_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(306,tuple([]))

    return _ret



register_cast_function('BackBufferCopy', BackBufferCopy.cast)
register_class('BackBufferCopy', BackBufferCopy)
