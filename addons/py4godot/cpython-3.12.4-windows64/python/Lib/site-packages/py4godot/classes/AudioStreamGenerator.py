# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioStream as py4godot_audiostream 
from py4godot.wrappers.wrappers import CPPAudioStreamGeneratorWrapper

class AudioStreamGeneratorMixRate:
  MIX_RATE_OUTPUT = 0
  MIX_RATE_INPUT = 1
  MIX_RATE_CUSTOM = 2
  MIX_RATE_MAX = 3


class AudioStreamGenerator(py4godot_audiostream.AudioStream):
  r'''
		`AudioStreamGenerator` is a type of audio stream that does not play back sounds on its own; instead, it expects a script to generate audio data for it. See also `AudioStreamGeneratorPlayback`.
		Here's a sample on how to use it to generate a sine wave:
		
		```gdscript
		var playback # Will hold the AudioStreamGeneratorPlayback.
		@onready var sample_hz = $AudioStreamPlayer.stream.mix_rate
		var pulse_hz = 440.0 # The frequency of the sound wave.
		var phase = 0.0

		func _ready():
			$AudioStreamPlayer.play()
			playback = $AudioStreamPlayer.get_stream_playback()
			fill_buffer()

		func fill_buffer():
			var increment = pulse_hz / sample_hz
			var frames_available = playback.get_frames_available()

			for i in range(frames_available):
				playback.push_frame(Vector2.ONE * sin(phase * TAU))
				phase = fmod(phase + increment, 1.0)
		```
		
		
		In the example above, the "AudioStreamPlayer" node must use an `AudioStreamGenerator` as its stream. The `fill_buffer` function provides audio data for approximating a sine wave.
		See also `AudioEffectSpectrumAnalyzer` for performing real-time audio spectrum analysis.
		**Note:** Due to performance constraints, this class is best used from C# or from a compiled language via GDExtension. If you still want to use this class from GDScript, consider using a lower `mix_rate` such as 11,025 Hz or 22,050 Hz.
	'''

  @staticmethod
  def constructor():
    class_ = AudioStreamGenerator.construct_without_init()
    class_._ptr = constructor(141,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamGenerator.construct_without_init()
    class_._ptr = constructor(141,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamGeneratorWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(141,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamGeneratorWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamGenerator.__new__(AudioStreamGenerator)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamGenerator'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamGenerator.construct_without_init()
    cls._ptr = CPPAudioStreamGeneratorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamGenerator.construct_without_init()
    cls._ptr = CPPAudioStreamGeneratorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def mix_rate_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mix_rate_mode()
    return _ret
  @mix_rate_mode.setter
  def mix_rate_mode(self,  value:'int'):
    self.set_mix_rate_mode(value)
  @property
  def mix_rate(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_mix_rate()
    return _ret
  @mix_rate.setter
  def mix_rate(self,  value:'float'):
    self.set_mix_rate(value)
  @property
  def buffer_length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_buffer_length()
    return _ret
  @buffer_length.setter
  def buffer_length(self,  value:'float'):
    self.set_buffer_length(value)
  @functools.native_method
  def set_mix_rate(self, hz:'float'   ) -> None:
    r''''''

    assert isinstance(hz, (int, float)), 'hz must be int or float'

    self.py__mix_rate = hz






    self._ptr.call_with_return(93,tuple([hz]))

  @functools.native_method
  def get_mix_rate(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_mix_rate_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__mix_rate_mode = mode






    self._ptr.call_with_return(95,tuple([mode]))

  @functools.native_method
  def get_mix_rate_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_buffer_length(self, seconds:'float'   ) -> None:
    r''''''

    assert isinstance(seconds, (int, float)), 'seconds must be int or float'

    self.py__buffer_length = seconds






    self._ptr.call_with_return(97,tuple([seconds]))

  @functools.native_method
  def get_buffer_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([]))

    return _ret



register_cast_function('AudioStreamGenerator', AudioStreamGenerator.cast)
register_class('AudioStreamGenerator', AudioStreamGenerator)
