# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.TextureLayered as py4godot_texturelayered 
from py4godot.wrappers.wrappers import CPPTextureLayeredRDWrapper


class TextureLayeredRD(py4godot_texturelayered.TextureLayered):
  r'''
		Base class for `Texture2DArrayRD`, `TextureCubemapRD` and `TextureCubemapArrayRD`. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types.
	'''

  @staticmethod
  def constructor():
    class_ = TextureLayeredRD.construct_without_init()
    class_._ptr = constructor(828,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TextureLayeredRD.construct_without_init()
    class_._ptr = constructor(828,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTextureLayeredRDWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(828,0, ())


  def generate_wrapper(self):
    return CPPTextureLayeredRDWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = TextureLayeredRD.__new__(TextureLayeredRD)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TextureLayeredRD'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextureLayeredRD.construct_without_init()
    cls._ptr = CPPTextureLayeredRDWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextureLayeredRD.construct_without_init()
    cls._ptr = CPPTextureLayeredRDWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture_rd_rid(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_texture_rd_rid()
    return _ret
  @texture_rd_rid.setter
  def texture_rd_rid(self,  value:'RID'):
    self.set_texture_rd_rid(value)
  @functools.native_method
  def set_texture_rd_rid(self, texture_rd_rid:'RID'   ) -> None:
    r''''''

    assert(not texture_rd_rid is None)
    assert isinstance(texture_rd_rid, RID), 'texture_rd_rid must be RID'

    self.py__texture_rd_rid = texture_rd_rid






    self._ptr.call_with_return(91,tuple([texture_rd_rid._ptr]))

  @functools.native_method
  def get_texture_rd_rid(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(92,tuple([]))

    return _ret



register_cast_function('TextureLayeredRD', TextureLayeredRD.cast)
register_class('TextureLayeredRD', TextureLayeredRD)
