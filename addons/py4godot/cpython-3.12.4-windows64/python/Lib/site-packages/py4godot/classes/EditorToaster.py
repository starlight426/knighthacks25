# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
from py4godot.wrappers.wrappers import CPPEditorToasterWrapper

class Severity:
  SEVERITY_INFO = 0
  SEVERITY_WARNING = 1
  SEVERITY_ERROR = 2


class EditorToaster(py4godot_hboxcontainer.HBoxContainer):
  r'''
		This object manages the functionality and display of toast notifications within the editor, ensuring timely and informative alerts are presented to users.
		**Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_editor_toaster`.
	'''

  @staticmethod
  def constructor():
    class_ = EditorToaster.construct_without_init()
    class_._ptr = constructor(315,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorToaster.construct_without_init()
    class_._ptr = constructor(315,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorToasterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(315,0, ())


  def generate_wrapper(self):
    return CPPEditorToasterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EditorToaster.__new__(EditorToaster)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorToaster'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorToaster.construct_without_init()
    cls._ptr = CPPEditorToasterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorToaster.construct_without_init()
    cls._ptr = CPPEditorToasterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def push_toast(self, message:'str'   , severity:'int'  =0, tooltip:'str' =""  ) -> None:
    r'''
				Pushes a toast notification to the editor for display.
			'''

    if tooltip is None:
      tooltip = String.new0()

    if tooltip is None:
      tooltip = String.new0()

    assert(not message is None)
    assert isinstance(message, (str, String)), 'message must be str or String'
    assert isinstance(severity, (int, float)), 'severity must be int or float'




    assert(isinstance(message, (str, String)))
    py_string_message = message if isinstance(message, StringName) else c_utils.py_string_to_string(message)

    assert(isinstance(tooltip, (str, String)))
    py_string_tooltip = tooltip if isinstance(tooltip, StringName) else c_utils.py_string_to_string(tooltip)

    self._ptr.call_with_return(442,tuple([py_string_message._ptr, severity, py_string_tooltip._ptr]))


register_cast_function('EditorToaster', EditorToaster.cast)
register_class('EditorToaster', EditorToaster)
