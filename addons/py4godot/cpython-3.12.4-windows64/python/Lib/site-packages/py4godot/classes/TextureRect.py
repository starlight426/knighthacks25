# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Control as py4godot_control 
from py4godot.wrappers.wrappers import CPPTextureRectWrapper

class ExpandMode:
  EXPAND_KEEP_SIZE = 0
  EXPAND_IGNORE_SIZE = 1
  EXPAND_FIT_WIDTH = 2
  EXPAND_FIT_WIDTH_PROPORTIONAL = 3
  EXPAND_FIT_HEIGHT = 4
  EXPAND_FIT_HEIGHT_PROPORTIONAL = 5
class StretchMode:
  STRETCH_SCALE = 0
  STRETCH_TILE = 1
  STRETCH_KEEP = 2
  STRETCH_KEEP_CENTERED = 3
  STRETCH_KEEP_ASPECT = 4
  STRETCH_KEEP_ASPECT_CENTERED = 5
  STRETCH_KEEP_ASPECT_COVERED = 6


class TextureRect(py4godot_control.Control):
  r'''
		A control that displays a texture, for example an icon inside a GUI. The texture's placement can be controlled with the `stretch_mode` property. It can scale, tile, or stay centered inside its bounding rectangle.
	'''

  @staticmethod
  def constructor():
    class_ = TextureRect.construct_without_init()
    class_._ptr = constructor(830,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TextureRect.construct_without_init()
    class_._ptr = constructor(830,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTextureRectWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(830,0, ())


  def generate_wrapper(self):
    return CPPTextureRectWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = TextureRect.__new__(TextureRect)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TextureRect'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextureRect.construct_without_init()
    cls._ptr = CPPTextureRectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextureRect.construct_without_init()
    cls._ptr = CPPTextureRectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @property
  def expand_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_expand_mode()
    return _ret
  @expand_mode.setter
  def expand_mode(self,  value:'int'):
    self.set_expand_mode(value)
  @property
  def stretch_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stretch_mode()
    return _ret
  @stretch_mode.setter
  def stretch_mode(self,  value:'int'):
    self.set_stretch_mode(value)
  @property
  def flip_h(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_flipped_h()
    return _ret
  @flip_h.setter
  def flip_h(self,  value:'bool'):
    self.set_flip_h(value)
  @property
  def flip_v(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_flipped_v()
    return _ret
  @flip_v.setter
  def flip_v(self,  value:'bool'):
    self.set_flip_v(value)
  @functools.native_method
  def set_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture = texture






    self._ptr.call_with_return(433,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(434,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_expand_mode(self, expand_mode:'int'  ) -> None:
    r''''''

    assert isinstance(expand_mode, (int, float)), 'expand_mode must be int or float'

    self.py__expand_mode = expand_mode






    self._ptr.call_with_return(435,tuple([expand_mode]))

  @functools.native_method
  def get_expand_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(436,tuple([]))

    return _ret


  @functools.native_method
  def set_flip_h(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__flip_h = enable






    self._ptr.call_with_return(437,tuple([enable]))

  @functools.native_method
  def is_flipped_h(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(438,tuple([]))

    return _ret


  @functools.native_method
  def set_flip_v(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__flip_v = enable






    self._ptr.call_with_return(439,tuple([enable]))

  @functools.native_method
  def is_flipped_v(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(440,tuple([]))

    return _ret


  @functools.native_method
  def set_stretch_mode(self, stretch_mode:'int'  ) -> None:
    r''''''

    assert isinstance(stretch_mode, (int, float)), 'stretch_mode must be int or float'

    self.py__stretch_mode = stretch_mode






    self._ptr.call_with_return(441,tuple([stretch_mode]))

  @functools.native_method
  def get_stretch_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(442,tuple([]))

    return _ret



register_cast_function('TextureRect', TextureRect.cast)
register_class('TextureRect', TextureRect)
