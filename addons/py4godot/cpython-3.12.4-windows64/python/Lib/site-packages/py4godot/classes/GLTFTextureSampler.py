# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFTextureSamplerWrapper


class GLTFTextureSampler(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFTextureSampler.construct_without_init()
    class_._ptr = constructor(363,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFTextureSampler.construct_without_init()
    class_._ptr = constructor(363,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFTextureSamplerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(363,0, ())


  def generate_wrapper(self):
    return CPPGLTFTextureSamplerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFTextureSampler.__new__(GLTFTextureSampler)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFTextureSampler'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFTextureSampler.construct_without_init()
    cls._ptr = CPPGLTFTextureSamplerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFTextureSampler.construct_without_init()
    cls._ptr = CPPGLTFTextureSamplerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def mag_filter(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mag_filter()
    return _ret
  @mag_filter.setter
  def mag_filter(self,  value:'int'):
    self.set_mag_filter(value)
  @property
  def min_filter(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_min_filter()
    return _ret
  @min_filter.setter
  def min_filter(self,  value:'int'):
    self.set_min_filter(value)
  @property
  def wrap_s(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_wrap_s()
    return _ret
  @wrap_s.setter
  def wrap_s(self,  value:'int'):
    self.set_wrap_s(value)
  @property
  def wrap_t(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_wrap_t()
    return _ret
  @wrap_t.setter
  def wrap_t(self,  value:'int'):
    self.set_wrap_t(value)
  @functools.native_method
  def get_mag_filter(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([]))

    return _ret


  @functools.native_method
  def set_mag_filter(self, filter_mode:'int'   ) -> None:
    r''''''

    assert isinstance(filter_mode, (int, float)), 'filter_mode must be int or float'

    self.py__mag_filter = filter_mode






    self._ptr.call_with_return(78,tuple([filter_mode]))

  @functools.native_method
  def get_min_filter(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_min_filter(self, filter_mode:'int'   ) -> None:
    r''''''

    assert isinstance(filter_mode, (int, float)), 'filter_mode must be int or float'

    self.py__min_filter = filter_mode






    self._ptr.call_with_return(80,tuple([filter_mode]))

  @functools.native_method
  def get_wrap_s(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_wrap_s(self, wrap_mode:'int'   ) -> None:
    r''''''

    assert isinstance(wrap_mode, (int, float)), 'wrap_mode must be int or float'

    self.py__wrap_s = wrap_mode






    self._ptr.call_with_return(82,tuple([wrap_mode]))

  @functools.native_method
  def get_wrap_t(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_wrap_t(self, wrap_mode:'int'   ) -> None:
    r''''''

    assert isinstance(wrap_mode, (int, float)), 'wrap_mode must be int or float'

    self.py__wrap_t = wrap_mode






    self._ptr.call_with_return(84,tuple([wrap_mode]))


register_cast_function('GLTFTextureSampler', GLTFTextureSampler.cast)
register_class('GLTFTextureSampler', GLTFTextureSampler)
