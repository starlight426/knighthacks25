# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectEQWrapper


class AudioEffectEQ(py4godot_audioeffect.AudioEffect):
  r'''
		AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQs are useful on the Master bus to completely master a mix and give it more character. They are also useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged).
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectEQ.construct_without_init()
    class_._ptr = constructor(114,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectEQ.construct_without_init()
    class_._ptr = constructor(114,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectEQWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(114,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectEQWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectEQ.__new__(AudioEffectEQ)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectEQ'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectEQ.construct_without_init()
    cls._ptr = CPPAudioEffectEQWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectEQ.construct_without_init()
    cls._ptr = CPPAudioEffectEQWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_band_gain_db(self, band_idx:'int'   , volume_db:'float'   ) -> None:
    r'''
				Sets band's gain at the specified index, in dB.
			'''

    assert isinstance(band_idx, (int, float)), 'band_idx must be int or float'
    assert isinstance(volume_db, (int, float)), 'volume_db must be int or float'







    self._ptr.call_with_return(78,tuple([band_idx, volume_db]))

  @functools.native_method
  def get_band_gain_db(self, band_idx:'int'   ) -> typing.Union[float]:
    r'''
				Returns the band's gain at the specified index, in dB.
			'''

    assert isinstance(band_idx, (int, float)), 'band_idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([band_idx]))
    return _ret


  @functools.native_method
  def get_band_count(self) -> typing.Union[int]:
    r'''
				Returns the number of bands of the equalizer.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))
    return _ret



register_cast_function('AudioEffectEQ', AudioEffectEQ.cast)
register_class('AudioEffectEQ', AudioEffectEQ)
