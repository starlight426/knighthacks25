# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.StreamPeerBuffer as py4godot_streampeerbuffer 
  import py4godot.classes.StreamPeerExtension as py4godot_streampeerextension 
  import py4godot.classes.StreamPeer as py4godot_streampeer 
  import py4godot.classes.StreamPeerTCP as py4godot_streampeertcp 
  import py4godot.classes.StreamPeerTLS as py4godot_streampeertls 
  import py4godot.classes.StreamPeerGZIP as py4godot_streampeergzip 
import py4godot.classes.PacketPeer as py4godot_packetpeer 
from py4godot.wrappers.wrappers import CPPPacketPeerStreamWrapper


class PacketPeerStream(py4godot_packetpeer.PacketPeer):
  r'''
		PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	'''

  @staticmethod
  def constructor():
    class_ = PacketPeerStream.construct_without_init()
    class_._ptr = constructor(571,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PacketPeerStream.construct_without_init()
    class_._ptr = constructor(571,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPacketPeerStreamWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(571,0, ())


  def generate_wrapper(self):
    return CPPPacketPeerStreamWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PacketPeerStream.__new__(PacketPeerStream)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PacketPeerStream'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PacketPeerStream.construct_without_init()
    cls._ptr = CPPPacketPeerStreamWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PacketPeerStream.construct_without_init()
    cls._ptr = CPPPacketPeerStreamWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def input_buffer_max_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_input_buffer_max_size()
    return _ret
  @input_buffer_max_size.setter
  def input_buffer_max_size(self,  value:'int'):
    self.set_input_buffer_max_size(value)
  @property
  def output_buffer_max_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_output_buffer_max_size()
    return _ret
  @output_buffer_max_size.setter
  def output_buffer_max_size(self,  value:'int'):
    self.set_output_buffer_max_size(value)
  @property
  def stream_peer(self) -> typing.Any:
    r''''''
    _ret = self. get_stream_peer()
    return _ret
  @stream_peer.setter
  def stream_peer(self,  value:'py4godot_object.Object'):
    self.set_stream_peer(value)
  @functools.native_method
  def set_stream_peer(self, peer:'py4godot_streampeer.StreamPeer'   ) -> None:
    r''''''

    assert(not peer is None)
    assert isinstance(peer, get_class('StreamPeer')), 'peer must be StreamPeer'

    self.py__stream_peer = peer






    self._ptr.call_with_return(61,tuple([peer._ptr]))

  @functools.native_method
  def get_stream_peer(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: StreamPeer
    _ret._ptr = self._ptr.call_with_return(62,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_input_buffer_max_size(self, max_size_bytes:'int'   ) -> None:
    r''''''

    assert isinstance(max_size_bytes, (int, float)), 'max_size_bytes must be int or float'

    self.py__input_buffer_max_size = max_size_bytes






    self._ptr.call_with_return(63,tuple([max_size_bytes]))

  @functools.native_method
  def set_output_buffer_max_size(self, max_size_bytes:'int'   ) -> None:
    r''''''

    assert isinstance(max_size_bytes, (int, float)), 'max_size_bytes must be int or float'

    self.py__output_buffer_max_size = max_size_bytes






    self._ptr.call_with_return(64,tuple([max_size_bytes]))

  @functools.native_method
  def get_input_buffer_max_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(65,tuple([]))

    return _ret


  @functools.native_method
  def get_output_buffer_max_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([]))

    return _ret



register_cast_function('PacketPeerStream', PacketPeerStream.cast)
register_class('PacketPeerStream', PacketPeerStream)
