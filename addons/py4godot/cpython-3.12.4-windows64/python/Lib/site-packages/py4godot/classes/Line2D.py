# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.Gradient as py4godot_gradient 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.Curve as py4godot_curve 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPLine2DWrapper

class LineJointMode:
  LINE_JOINT_SHARP = 0
  LINE_JOINT_BEVEL = 1
  LINE_JOINT_ROUND = 2
class LineCapMode:
  LINE_CAP_NONE = 0
  LINE_CAP_BOX = 1
  LINE_CAP_ROUND = 2
class LineTextureMode:
  LINE_TEXTURE_NONE = 0
  LINE_TEXTURE_TILE = 1
  LINE_TEXTURE_STRETCH = 2


class Line2D(py4godot_node2d.Node2D):
  r'''
		This node draws a 2D polyline, i.e. a shape consisting of several points connected by segments. `Line2D` is not a mathematical polyline, i.e. the segments are not infinitely thin. It is intended for rendering and it can be colored and optionally textured.
		**Warning:** Certain configurations may be impossible to draw nicely, such as very sharp angles. In these situations, the node uses fallback drawing logic to look decent.
		**Note:** `Line2D` is drawn using a 2D mesh.
	'''

  @staticmethod
  def constructor():
    class_ = Line2D.construct_without_init()
    class_._ptr = constructor(457,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Line2D.construct_without_init()
    class_._ptr = constructor(457,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPLine2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(457,0, ())


  def generate_wrapper(self):
    return CPPLine2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Line2D.__new__(Line2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Line2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Line2D.construct_without_init()
    cls._ptr = CPPLine2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Line2D.construct_without_init()
    cls._ptr = CPPLine2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def points(self) -> typing.Union['PackedVector2Array']:
    r''''''
    _ret = self. get_points()
    return _ret
  @points.setter
  def points(self,  value:'PackedVector2Array'):
    self.set_points(value)
  @property
  def closed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_closed()
    return _ret
  @closed.setter
  def closed(self,  value:'bool'):
    self.set_closed(value)
  @property
  def width(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_width()
    return _ret
  @width.setter
  def width(self,  value:'float'):
    self.set_width(value)
  @property
  def width_curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''
    _ret = self. get_curve()
    return _ret
  @width_curve.setter
  def width_curve(self,  value:'py4godot_object.Object'):
    self.set_curve(value)
  @property
  def default_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_default_color()
    return _ret
  @default_color.setter
  def default_color(self,  value:'Color'):
    self.set_default_color(value)
  @property
  def gradient(self) -> typing.Union['py4godot_gradient.Gradient']:
    r''''''
    _ret = self. get_gradient()
    return _ret
  @gradient.setter
  def gradient(self,  value:'py4godot_object.Object'):
    self.set_gradient(value)
  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @property
  def texture_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_mode()
    return _ret
  @texture_mode.setter
  def texture_mode(self,  value:'int'):
    self.set_texture_mode(value)
  @property
  def joint_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_joint_mode()
    return _ret
  @joint_mode.setter
  def joint_mode(self,  value:'int'):
    self.set_joint_mode(value)
  @property
  def begin_cap_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_begin_cap_mode()
    return _ret
  @begin_cap_mode.setter
  def begin_cap_mode(self,  value:'int'):
    self.set_begin_cap_mode(value)
  @property
  def end_cap_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_end_cap_mode()
    return _ret
  @end_cap_mode.setter
  def end_cap_mode(self,  value:'int'):
    self.set_end_cap_mode(value)
  @property
  def sharp_limit(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_sharp_limit()
    return _ret
  @sharp_limit.setter
  def sharp_limit(self,  value:'float'):
    self.set_sharp_limit(value)
  @property
  def round_precision(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_round_precision()
    return _ret
  @round_precision.setter
  def round_precision(self,  value:'int'):
    self.set_round_precision(value)
  @property
  def antialiased(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_antialiased()
    return _ret
  @antialiased.setter
  def antialiased(self,  value:'bool'):
    self.set_antialiased(value)
  @functools.native_method
  def set_points(self, points:'PackedVector2Array'   ) -> None:
    r''''''

    assert(not points is None)
    assert isinstance(points, PackedVector2Array), 'points must be PackedVector2Array'

    self.py__points = points






    self._ptr.call_with_return(303,tuple([points._ptr]))

  @functools.native_method
  def get_points(self) -> typing.Union['PackedVector2Array']:
    r''''''




    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def set_point_position(self, index:'int'   , position:'Vector2'   ) -> None:
    r'''
				Overwrites the position of the point at the given `index` with the supplied `position`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'







    self._ptr.call_with_return(305,tuple([index, position._ptr]))

  @functools.native_method
  def get_point_position(self, index:'int'   ) -> typing.Union['Vector2']:
    r'''
				Returns the position of the point at index `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(306,tuple([index]))
    return _ret


  @functools.native_method
  def get_point_count(self) -> typing.Union[int]:
    r'''
				Returns the number of points in the polyline.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(307,tuple([]))
    return _ret


  @functools.native_method
  def add_point(self, position:'Vector2'   , index:'int' =-1  ) -> None:
    r'''
				Adds a point with the specified `position` relative to the polyline's own position. If no `index` is provided, the new point will be added to the end of the points array.
				If `index` is given, the new point is inserted before the existing point identified by index `index`. The indices of the points after the new point get increased by 1. The provided `index` must not exceed the number of existing points in the polyline. See `get_point_count`.
			'''

    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'
    assert isinstance(index, (int, float)), 'index must be int or float'







    self._ptr.call_with_return(308,tuple([position._ptr, index]))

  @functools.native_method
  def remove_point(self, index:'int'   ) -> None:
    r'''
				Removes the point at index `index` from the polyline.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    self._ptr.call_with_return(309,tuple([index]))

  @functools.native_method
  def clear_points(self) -> None:
    r'''
				Removes all points from the polyline, making it empty.
			'''




    self._ptr.call_with_return(310,tuple([]))

  @functools.native_method
  def set_closed(self, closed:'bool'   ) -> None:
    r''''''

    assert isinstance(closed, bool), 'closed must be bool'

    self.py__closed = closed






    self._ptr.call_with_return(311,tuple([closed]))

  @functools.native_method
  def is_closed(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(312,tuple([]))

    return _ret


  @functools.native_method
  def set_width(self, width:'float'   ) -> None:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'

    self.py__width = width






    self._ptr.call_with_return(313,tuple([width]))

  @functools.native_method
  def get_width(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(314,tuple([]))

    return _ret


  @functools.native_method
  def set_curve(self, curve:'py4godot_curve.Curve'   ) -> None:
    r''''''

    assert(not curve is None)
    assert isinstance(curve, get_class('Curve')), 'curve must be Curve'

    self.py__width_curve = curve






    self._ptr.call_with_return(315,tuple([curve._ptr]))

  @functools.native_method
  def get_curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Curve
    _ret._ptr = self._ptr.call_with_return(316,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_default_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__default_color = color






    self._ptr.call_with_return(317,tuple([color._ptr]))

  @functools.native_method
  def get_default_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(318,tuple([]))

    return _ret


  @functools.native_method
  def set_gradient(self, color:'py4godot_gradient.Gradient'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, get_class('Gradient')), 'color must be Gradient'

    self.py__gradient = color






    self._ptr.call_with_return(319,tuple([color._ptr]))

  @functools.native_method
  def get_gradient(self) -> typing.Union['py4godot_gradient.Gradient']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Gradient
    _ret._ptr = self._ptr.call_with_return(320,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture = texture






    self._ptr.call_with_return(321,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(322,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__texture_mode = mode






    self._ptr.call_with_return(323,tuple([mode]))

  @functools.native_method
  def get_texture_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(324,tuple([]))

    return _ret


  @functools.native_method
  def set_joint_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__joint_mode = mode






    self._ptr.call_with_return(325,tuple([mode]))

  @functools.native_method
  def get_joint_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(326,tuple([]))

    return _ret


  @functools.native_method
  def set_begin_cap_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__begin_cap_mode = mode






    self._ptr.call_with_return(327,tuple([mode]))

  @functools.native_method
  def get_begin_cap_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(328,tuple([]))

    return _ret


  @functools.native_method
  def set_end_cap_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__end_cap_mode = mode






    self._ptr.call_with_return(329,tuple([mode]))

  @functools.native_method
  def get_end_cap_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(330,tuple([]))

    return _ret


  @functools.native_method
  def set_sharp_limit(self, limit:'float'   ) -> None:
    r''''''

    assert isinstance(limit, (int, float)), 'limit must be int or float'

    self.py__sharp_limit = limit






    self._ptr.call_with_return(331,tuple([limit]))

  @functools.native_method
  def get_sharp_limit(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(332,tuple([]))

    return _ret


  @functools.native_method
  def set_round_precision(self, precision:'int'   ) -> None:
    r''''''

    assert isinstance(precision, (int, float)), 'precision must be int or float'

    self.py__round_precision = precision






    self._ptr.call_with_return(333,tuple([precision]))

  @functools.native_method
  def get_round_precision(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(334,tuple([]))

    return _ret


  @functools.native_method
  def set_antialiased(self, antialiased:'bool'   ) -> None:
    r''''''

    assert isinstance(antialiased, bool), 'antialiased must be bool'

    self.py__antialiased = antialiased






    self._ptr.call_with_return(335,tuple([antialiased]))

  @functools.native_method
  def get_antialiased(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(336,tuple([]))

    return _ret



register_cast_function('Line2D', Line2D.cast)
register_class('Line2D', Line2D)
