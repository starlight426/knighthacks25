# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioStream as py4godot_audiostream 
from py4godot.wrappers.wrappers import CPPAudioStreamPolyphonicWrapper


class AudioStreamPolyphonic(py4godot_audiostream.AudioStream):
  r'''
		AudioStream that lets the user play custom streams at any time from code, simultaneously using a single player.
		Playback control is done via the `AudioStreamPlaybackPolyphonic` instance set inside the player, which can be obtained via `AudioStreamPlayer.get_stream_playback`, `AudioStreamPlayer2D.get_stream_playback` or `AudioStreamPlayer3D.get_stream_playback` methods. Obtaining the playback instance is only valid after the `stream` property is set as an `AudioStreamPolyphonic` in those players.
	'''

  @staticmethod
  def constructor():
    class_ = AudioStreamPolyphonic.construct_without_init()
    class_._ptr = constructor(158,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamPolyphonic.construct_without_init()
    class_._ptr = constructor(158,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamPolyphonicWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(158,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamPolyphonicWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamPolyphonic.__new__(AudioStreamPolyphonic)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamPolyphonic'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamPolyphonic.construct_without_init()
    cls._ptr = CPPAudioStreamPolyphonicWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamPolyphonic.construct_without_init()
    cls._ptr = CPPAudioStreamPolyphonicWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def polyphony(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_polyphony()
    return _ret
  @polyphony.setter
  def polyphony(self,  value:'int'):
    self.set_polyphony(value)
  @functools.native_method
  def set_polyphony(self, voices:'int'   ) -> None:
    r''''''

    assert isinstance(voices, (int, float)), 'voices must be int or float'

    self.py__polyphony = voices






    self._ptr.call_with_return(93,tuple([voices]))

  @functools.native_method
  def get_polyphony(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret



register_cast_function('AudioStreamPolyphonic', AudioStreamPolyphonic.cast)
register_class('AudioStreamPolyphonic', AudioStreamPolyphonic)
