# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.CompressedTextureLayered as py4godot_compressedtexturelayered 
from py4godot.wrappers.wrappers import CPPCompressedTexture2DArrayWrapper


class CompressedTexture2DArray(py4godot_compressedtexturelayered.CompressedTextureLayered):
  r'''
		A texture array that is loaded from a `.ctexarray` file. This file format is internal to Godot; it is created by importing other image formats with the import system. `CompressedTexture2DArray` can use one of 4 compression methods:
		- Lossless (WebP or PNG, uncompressed on the GPU)
		- Lossy (WebP, uncompressed on the GPU)
		- VRAM Compressed (compressed on the GPU)
		- VRAM Uncompressed (uncompressed on the GPU)
		- Basis Universal (compressed on the GPU. Lower file sizes than VRAM Compressed, but slower to compress and lower quality than VRAM Compressed)
		Only **VRAM Compressed** actually reduces the memory usage on the GPU. The **Lossless** and **Lossy** compression methods will reduce the required storage on disk, but they will not reduce memory usage on the GPU as the texture is sent to the GPU uncompressed.
		Using **VRAM Compressed** also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless or lossy compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D.
		See `Texture2DArray` for a general description of texture arrays.
	'''

  @staticmethod
  def constructor():
    class_ = CompressedTexture2DArray.construct_without_init()
    class_._ptr = constructor(230,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CompressedTexture2DArray.construct_without_init()
    class_._ptr = constructor(230,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCompressedTexture2DArrayWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(230,0, ())


  def generate_wrapper(self):
    return CPPCompressedTexture2DArrayWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CompressedTexture2DArray.__new__(CompressedTexture2DArray)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CompressedTexture2DArray'

  def __del__(self):
    pass
  def __setitem__(self,  index, value):
    self._ptr.call_with_return(94, (index, value))

  def __getitem__(self,  index):

    if index < 0:
      raise KeyError(f"Index '{index}' invalid")
    pyobject = self._ptr.call_with_return(93, (index,))
    return pyobject
  def __iter__(self):
    self._index = 0
    return self
  def __next__(self):
    if self._index >= self.size():
      raise StopIteration()
    val = self[self._index]
    self._index += 1
    return val

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CompressedTexture2DArray.construct_without_init()
    cls._ptr = CPPCompressedTexture2DArrayWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CompressedTexture2DArray.construct_without_init()
    cls._ptr = CPPCompressedTexture2DArrayWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def from_list(values):
    result = CompressedTexture2DArray.new0()
    for value in values:
      result.push_back(value)
    return result

  def to_list(self):
    return [value for value in self]



register_cast_function('CompressedTexture2DArray', CompressedTexture2DArray.cast)
register_class('CompressedTexture2DArray', CompressedTexture2DArray)
