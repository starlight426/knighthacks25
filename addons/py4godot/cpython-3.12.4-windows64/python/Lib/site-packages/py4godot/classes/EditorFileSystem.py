# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.EditorFileSystemDirectory as py4godot_editorfilesystemdirectory 
import py4godot.classes.Node as py4godot_node 
from py4godot.wrappers.wrappers import CPPEditorFileSystemWrapper


class EditorFileSystem(py4godot_node.Node):
  r'''
		This object holds information of all resources in the filesystem, their types, etc.
		**Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_resource_filesystem`.
	'''

  @staticmethod
  def constructor():
    class_ = EditorFileSystem.construct_without_init()
    class_._ptr = constructor(285,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorFileSystem.construct_without_init()
    class_._ptr = constructor(285,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorFileSystemWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(285,0, ())


  def generate_wrapper(self):
    return CPPEditorFileSystemWrapper()
  def init_signals(self):
    super().init_signals()
    filesystem_changed_name = utils.py_string_to_string_name("filesystem_changed")
    self.filesystem_changed = signals.BuiltinSignal(self, filesystem_changed_name)
    script_classes_updated_name = utils.py_string_to_string_name("script_classes_updated")
    self.script_classes_updated = signals.BuiltinSignal(self, script_classes_updated_name)
    sources_changed_name = utils.py_string_to_string_name("sources_changed")
    self.sources_changed = signals.BuiltinSignal(self, sources_changed_name)
    resources_reimporting_name = utils.py_string_to_string_name("resources_reimporting")
    self.resources_reimporting = signals.BuiltinSignal(self, resources_reimporting_name)
    resources_reimported_name = utils.py_string_to_string_name("resources_reimported")
    self.resources_reimported = signals.BuiltinSignal(self, resources_reimported_name)
    resources_reload_name = utils.py_string_to_string_name("resources_reload")
    self.resources_reload = signals.BuiltinSignal(self, resources_reload_name)

  @staticmethod
  def construct_without_init():
    cls = EditorFileSystem.__new__(EditorFileSystem)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorFileSystem'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorFileSystem.construct_without_init()
    cls._ptr = CPPEditorFileSystemWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorFileSystem.construct_without_init()
    cls._ptr = CPPEditorFileSystemWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_filesystem(self) -> typing.Union['py4godot_editorfilesystemdirectory.EditorFileSystemDirectory']:
    r'''
				Gets the root directory object.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: EditorFileSystemDirectory
    _ret._ptr = self._ptr.call_with_return(180,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def is_scanning(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the filesystem is being scanned.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(181,tuple([]))
    return _ret


  @functools.native_method
  def get_scanning_progress(self) -> typing.Union[float]:
    r'''
				Returns the scan progress for 0 to 1 if the FS is being scanned.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(182,tuple([]))
    return _ret


  @functools.native_method
  def scan(self) -> None:
    r'''
				Scan the filesystem for changes.
			'''




    self._ptr.call_with_return(183,tuple([]))

  @functools.native_method
  def scan_sources(self) -> None:
    r'''
				Check if the source of any imported resource changed.
			'''




    self._ptr.call_with_return(184,tuple([]))

  @functools.native_method
  def update_file(self, path:'str'   ) -> None:
    r'''
				Add a file in an existing directory, or schedule file information to be updated on editor restart. Can be used to update text files saved by an external program.
				This will not import the file. To reimport, call `reimport_files` or `scan` methods.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(185,tuple([py_string_path._ptr]))

  @functools.native_method
  def get_filesystem_path(self, path:'str'   ) -> typing.Union['py4godot_editorfilesystemdirectory.EditorFileSystemDirectory']:
    r'''
				Returns a view into the filesystem at `path`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: EditorFileSystemDirectory
    _ret._ptr = self._ptr.call_with_return(186,tuple([py_string_path._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_file_type(self, path:'str'   ) -> typing.Union[str]:
    r'''
				Returns the resource type of the file, given the full path. This returns a string such as `"Resource"` or `"GDScript"`, _not_ a file extension such as `".gd"`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(187,tuple([py_string_path._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def reimport_files(self, files:'PackedStringArray'   ) -> None:
    r'''
				Reimports a set of files. Call this if these files or their `.import` files were directly edited by script or an external program.
				If the file type changed or the file was newly created, use `update_file` or `scan`.
				**Note:** This function blocks until the import is finished. However, the main loop iteration, including timers and `Node._process`, will occur during the import process due to progress bar updates. Avoid calls to `reimport_files` or `scan` while an import is in progress.
			'''

    assert(not files is None)
    assert isinstance(files, PackedStringArray), 'files must be PackedStringArray'






    self._ptr.call_with_return(188,tuple([files._ptr]))


register_cast_function('EditorFileSystem', EditorFileSystem.cast)
register_class('EditorFileSystem', EditorFileSystem)
