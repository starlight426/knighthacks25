# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Bone2D as py4godot_bone2d 
  import py4godot.classes.SkeletonModificationStack2D as py4godot_skeletonmodificationstack2d 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPSkeleton2DWrapper


class Skeleton2D(py4godot_node2d.Node2D):
  r'''
		`Skeleton2D` parents a hierarchy of `Bone2D` nodes. It holds a reference to each `Bone2D`'s rest pose and acts as a single point of access to its bones.
		To set up different types of inverse kinematics for the given Skeleton2D, a `SkeletonModificationStack2D` should be created. The inverse kinematics be applied by increasing `SkeletonModificationStack2D.modification_count` and creating the desired number of modifications.
	'''

  @staticmethod
  def constructor():
    class_ = Skeleton2D.construct_without_init()
    class_._ptr = constructor(746,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Skeleton2D.construct_without_init()
    class_._ptr = constructor(746,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkeleton2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(746,0, ())


  def generate_wrapper(self):
    return CPPSkeleton2DWrapper()
  def init_signals(self):
    super().init_signals()
    bone_setup_changed_name = utils.py_string_to_string_name("bone_setup_changed")
    self.bone_setup_changed = signals.BuiltinSignal(self, bone_setup_changed_name)

  @staticmethod
  def construct_without_init():
    cls = Skeleton2D.__new__(Skeleton2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Skeleton2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Skeleton2D.construct_without_init()
    cls._ptr = CPPSkeleton2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Skeleton2D.construct_without_init()
    cls._ptr = CPPSkeleton2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_bone_count(self) -> typing.Union[int]:
    r'''
				Returns the number of `Bone2D` nodes in the node hierarchy parented by Skeleton2D.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(303,tuple([]))
    return _ret


  @functools.native_method
  def get_bone(self, idx:'int'   ) -> typing.Union['py4godot_bone2d.Bone2D']:
    r'''
				Returns a `Bone2D` from the node hierarchy parented by Skeleton2D. The object to return is identified by the parameter `idx`. Bones are indexed by descending the node hierarchy from top to bottom, adding the children of each branch before moving to the next sibling.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Bone2D
    _ret._ptr = self._ptr.call_with_return(304,tuple([idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_skeleton(self) -> typing.Union['RID']:
    r'''
				Returns the `RID` of a Skeleton2D instance.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(305,tuple([]))
    return _ret


  @functools.native_method
  def set_modification_stack(self, modification_stack:'py4godot_skeletonmodificationstack2d.SkeletonModificationStack2D'   ) -> None:
    r'''
				Sets the `SkeletonModificationStack2D` attached to this skeleton.
			'''

    assert(not modification_stack is None)
    assert isinstance(modification_stack, get_class('SkeletonModificationStack2D')), 'modification_stack must be SkeletonModificationStack2D'






    self._ptr.call_with_return(306,tuple([modification_stack._ptr]))

  @functools.native_method
  def get_modification_stack(self) -> typing.Union['py4godot_skeletonmodificationstack2d.SkeletonModificationStack2D']:
    r'''
				Returns the `SkeletonModificationStack2D` attached to this skeleton, if one exists.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: SkeletonModificationStack2D
    _ret._ptr = self._ptr.call_with_return(307,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def execute_modifications(self, delta:'float'   , execution_mode:'int'   ) -> None:
    r'''
				Executes all the modifications on the `SkeletonModificationStack2D`, if the Skeleton2D has one assigned.
			'''

    assert isinstance(delta, (int, float)), 'delta must be int or float'
    assert isinstance(execution_mode, (int, float)), 'execution_mode must be int or float'







    self._ptr.call_with_return(308,tuple([delta, execution_mode]))

  @functools.native_method
  def set_bone_local_pose_override(self, bone_idx:'int'   , override_pose:'Transform2D'   , strength:'float'   , persistent:'bool'   ) -> None:
    r'''
				Sets the local pose transform, `override_pose`, for the bone at `bone_idx`.
				`strength` is the interpolation strength that will be used when applying the pose, and `persistent` determines if the applied pose will remain.
				**Note:** The pose transform needs to be a local transform relative to the `Bone2D` node at `bone_idx`!
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'
    assert(not override_pose is None)
    assert isinstance(override_pose, Transform2D), 'override_pose must be Transform2D'
    assert isinstance(strength, (int, float)), 'strength must be int or float'
    assert isinstance(persistent, bool), 'persistent must be bool'









    self._ptr.call_with_return(309,tuple([bone_idx, override_pose._ptr, strength, persistent]))

  @functools.native_method
  def get_bone_local_pose_override(self, bone_idx:'int'   ) -> typing.Union['Transform2D']:
    r'''
				Returns the local pose override transform for `bone_idx`.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'






    _ret = Transform2D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(310,tuple([bone_idx]))
    return _ret



register_cast_function('Skeleton2D', Skeleton2D.cast)
register_class('Skeleton2D', Skeleton2D)
