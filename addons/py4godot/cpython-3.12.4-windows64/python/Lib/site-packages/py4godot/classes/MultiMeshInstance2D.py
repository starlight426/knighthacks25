# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.MultiMesh as py4godot_multimesh 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPMultiMeshInstance2DWrapper


class MultiMeshInstance2D(py4godot_node2d.Node2D):
  r'''
		`MultiMeshInstance2D` is a specialized node to instance a `MultiMesh` resource in 2D.
		Usage is the same as `MultiMeshInstance3D`.
	'''

  @staticmethod
  def constructor():
    class_ = MultiMeshInstance2D.construct_without_init()
    class_._ptr = constructor(484,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MultiMeshInstance2D.construct_without_init()
    class_._ptr = constructor(484,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMultiMeshInstance2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(484,0, ())


  def generate_wrapper(self):
    return CPPMultiMeshInstance2DWrapper()
  def init_signals(self):
    super().init_signals()
    texture_changed_name = utils.py_string_to_string_name("texture_changed")
    self.texture_changed = signals.BuiltinSignal(self, texture_changed_name)

  @staticmethod
  def construct_without_init():
    cls = MultiMeshInstance2D.__new__(MultiMeshInstance2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MultiMeshInstance2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiMeshInstance2D.construct_without_init()
    cls._ptr = CPPMultiMeshInstance2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiMeshInstance2D.construct_without_init()
    cls._ptr = CPPMultiMeshInstance2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def multimesh(self) -> typing.Union['py4godot_multimesh.MultiMesh']:
    r''''''
    _ret = self. get_multimesh()
    return _ret
  @multimesh.setter
  def multimesh(self,  value:'py4godot_object.Object'):
    self.set_multimesh(value)
  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @functools.native_method
  def set_multimesh(self, multimesh:'py4godot_multimesh.MultiMesh'   ) -> None:
    r''''''

    assert(not multimesh is None)
    assert isinstance(multimesh, get_class('MultiMesh')), 'multimesh must be MultiMesh'

    self.py__multimesh = multimesh






    self._ptr.call_with_return(303,tuple([multimesh._ptr]))

  @functools.native_method
  def get_multimesh(self) -> typing.Union['py4godot_multimesh.MultiMesh']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: MultiMesh
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture = texture






    self._ptr.call_with_return(305,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(306,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('MultiMeshInstance2D', MultiMeshInstance2D.cast)
register_class('MultiMeshInstance2D', MultiMeshInstance2D)
