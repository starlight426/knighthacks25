# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
  import py4godot.classes.intTypedArray as py4godot_inttypedarray 
import py4godot.classes.intTypedArray as py4godot_inttypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDPipelineMultisampleStateWrapper


class RDPipelineMultisampleState(py4godot_refcounted.RefCounted):
  r'''
		`RDPipelineMultisampleState` is used to control how multisample or supersample antialiasing is being performed when rendering using `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDPipelineMultisampleState.construct_without_init()
    class_._ptr = constructor(650,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDPipelineMultisampleState.construct_without_init()
    class_._ptr = constructor(650,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDPipelineMultisampleStateWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(650,0, ())


  def generate_wrapper(self):
    return CPPRDPipelineMultisampleStateWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDPipelineMultisampleState.__new__(RDPipelineMultisampleState)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDPipelineMultisampleState'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineMultisampleState.construct_without_init()
    cls._ptr = CPPRDPipelineMultisampleStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineMultisampleState.construct_without_init()
    cls._ptr = CPPRDPipelineMultisampleStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def sample_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sample_count()
    return _ret
  @sample_count.setter
  def sample_count(self,  value:'int'):
    self.set_sample_count(value)
  @property
  def enable_sample_shading(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_sample_shading()
    return _ret
  @enable_sample_shading.setter
  def enable_sample_shading(self,  value:'bool'):
    self.set_enable_sample_shading(value)
  @property
  def min_sample_shading(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_min_sample_shading()
    return _ret
  @min_sample_shading.setter
  def min_sample_shading(self,  value:'float'):
    self.set_min_sample_shading(value)
  @property
  def enable_alpha_to_coverage(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_alpha_to_coverage()
    return _ret
  @enable_alpha_to_coverage.setter
  def enable_alpha_to_coverage(self,  value:'bool'):
    self.set_enable_alpha_to_coverage(value)
  @property
  def enable_alpha_to_one(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_alpha_to_one()
    return _ret
  @enable_alpha_to_one.setter
  def enable_alpha_to_one(self,  value:'bool'):
    self.set_enable_alpha_to_one(value)
  @property
  def sample_masks(self) -> typing.Union['py4godot_inttypedarray.intTypedArray']:
    r''''''
    _ret = self. get_sample_masks()
    return _ret
  @sample_masks.setter
  def sample_masks(self, value:'Array'):
    self.set_sample_masks(value)
  @functools.native_method
  def set_sample_count(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__sample_count = p_member






    self._ptr.call_with_return(53,tuple([p_member]))

  @functools.native_method
  def get_sample_count(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_sample_shading(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_sample_shading = p_member






    self._ptr.call_with_return(55,tuple([p_member]))

  @functools.native_method
  def get_enable_sample_shading(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_min_sample_shading(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__min_sample_shading = p_member






    self._ptr.call_with_return(57,tuple([p_member]))

  @functools.native_method
  def get_min_sample_shading(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_alpha_to_coverage(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_alpha_to_coverage = p_member






    self._ptr.call_with_return(59,tuple([p_member]))

  @functools.native_method
  def get_enable_alpha_to_coverage(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_alpha_to_one(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_alpha_to_one = p_member






    self._ptr.call_with_return(61,tuple([p_member]))

  @functools.native_method
  def get_enable_alpha_to_one(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def set_sample_masks(self, masks:'py4godot_inttypedarray.intTypedArray'   ) -> None:
    r''''''

    assert isinstance(masks, get_class('intTypedArray')), 'masks must be intTypedArray'

    self.py__sample_masks = masks






    self._ptr.call_with_return(63,tuple([masks._ptr]))

  @functools.native_method
  def get_sample_masks(self) -> typing.Union['py4godot_inttypedarray.intTypedArray']:
    r''''''




    _ret = py4godot_inttypedarray.intTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(64,tuple([]))

    return _ret



register_cast_function('RDPipelineMultisampleState', RDPipelineMultisampleState.cast)
register_class('RDPipelineMultisampleState', RDPipelineMultisampleState)
