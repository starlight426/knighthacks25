# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Shape3D as py4godot_shape3d 
from py4godot.wrappers.wrappers import CPPBoxShape3DWrapper


class BoxShape3D(py4godot_shape3d.Shape3D):
  r'''
		A 3D box shape, intended for use in physics. Usually used to provide a shape for a `CollisionShape3D`.
		**Performance:** `BoxShape3D` is fast to check collisions against. It is faster than `CapsuleShape3D` and `CylinderShape3D`, but slower than `SphereShape3D`.
	'''

  @staticmethod
  def constructor():
    class_ = BoxShape3D.construct_without_init()
    class_._ptr = constructor(173,0, ())
    return class_
  @staticmethod
  def new():
    class_ = BoxShape3D.construct_without_init()
    class_._ptr = constructor(173,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPBoxShape3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(173,0, ())


  def generate_wrapper(self):
    return CPPBoxShape3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = BoxShape3D.__new__(BoxShape3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'BoxShape3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoxShape3D.construct_without_init()
    cls._ptr = CPPBoxShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoxShape3D.construct_without_init()
    cls._ptr = CPPBoxShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def size(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector3'):
    self.set_size(value)
  @functools.native_method
  def set_size(self, size:'Vector3'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector3), 'size must be Vector3'

    self.py__size = size






    self._ptr.call_with_return(82,tuple([size._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return _ret



register_cast_function('BoxShape3D', BoxShape3D.cast)
register_class('BoxShape3D', BoxShape3D)
