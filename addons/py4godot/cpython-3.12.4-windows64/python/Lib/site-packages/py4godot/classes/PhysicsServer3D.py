# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.PhysicsDirectBodyState3DExtension as py4godot_physicsdirectbodystate3dextension 
  import py4godot.classes.PhysicsDirectSpaceState3D as py4godot_physicsdirectspacestate3d 
  import py4godot.classes.PhysicsDirectBodyState3D as py4godot_physicsdirectbodystate3d 
  import py4godot.classes.PhysicsServer3DExtension as py4godot_physicsserver3dextension 
  import py4godot.classes.PhysicsTestMotionResult3D as py4godot_physicstestmotionresult3d 
  import py4godot.classes.PhysicsDirectSpaceState3DExtension as py4godot_physicsdirectspacestate3dextension 
  import py4godot.classes.PhysicsServer3DRenderingServerHandler as py4godot_physicsserver3drenderingserverhandler 
  import py4godot.classes.PhysicsTestMotionParameters3D as py4godot_physicstestmotionparameters3d 
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPPhysicsServer3DWrapper

_PhysicsServer3D_singleton_instance = None
class JointType:
  JOINT_TYPE_PIN = 0
  JOINT_TYPE_HINGE = 1
  JOINT_TYPE_SLIDER = 2
  JOINT_TYPE_CONE_TWIST = 3
  JOINT_TYPE_6DOF = 4
  JOINT_TYPE_MAX = 5
class PinJointParam:
  PIN_JOINT_BIAS = 0
  PIN_JOINT_DAMPING = 1
  PIN_JOINT_IMPULSE_CLAMP = 2
class HingeJointParam:
  HINGE_JOINT_BIAS = 0
  HINGE_JOINT_LIMIT_UPPER = 1
  HINGE_JOINT_LIMIT_LOWER = 2
  HINGE_JOINT_LIMIT_BIAS = 3
  HINGE_JOINT_LIMIT_SOFTNESS = 4
  HINGE_JOINT_LIMIT_RELAXATION = 5
  HINGE_JOINT_MOTOR_TARGET_VELOCITY = 6
  HINGE_JOINT_MOTOR_MAX_IMPULSE = 7
class HingeJointFlag:
  HINGE_JOINT_FLAG_USE_LIMIT = 0
  HINGE_JOINT_FLAG_ENABLE_MOTOR = 1
class SliderJointParam:
  SLIDER_JOINT_LINEAR_LIMIT_UPPER = 0
  SLIDER_JOINT_LINEAR_LIMIT_LOWER = 1
  SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS = 2
  SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION = 3
  SLIDER_JOINT_LINEAR_LIMIT_DAMPING = 4
  SLIDER_JOINT_LINEAR_MOTION_SOFTNESS = 5
  SLIDER_JOINT_LINEAR_MOTION_RESTITUTION = 6
  SLIDER_JOINT_LINEAR_MOTION_DAMPING = 7
  SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS = 8
  SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION = 9
  SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING = 10
  SLIDER_JOINT_ANGULAR_LIMIT_UPPER = 11
  SLIDER_JOINT_ANGULAR_LIMIT_LOWER = 12
  SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS = 13
  SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION = 14
  SLIDER_JOINT_ANGULAR_LIMIT_DAMPING = 15
  SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS = 16
  SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION = 17
  SLIDER_JOINT_ANGULAR_MOTION_DAMPING = 18
  SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS = 19
  SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION = 20
  SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING = 21
  SLIDER_JOINT_MAX = 22
class ConeTwistJointParam:
  CONE_TWIST_JOINT_SWING_SPAN = 0
  CONE_TWIST_JOINT_TWIST_SPAN = 1
  CONE_TWIST_JOINT_BIAS = 2
  CONE_TWIST_JOINT_SOFTNESS = 3
  CONE_TWIST_JOINT_RELAXATION = 4
class G6DOFJointAxisParam:
  G6DOF_JOINT_LINEAR_LOWER_LIMIT = 0
  G6DOF_JOINT_LINEAR_UPPER_LIMIT = 1
  G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS = 2
  G6DOF_JOINT_LINEAR_RESTITUTION = 3
  G6DOF_JOINT_LINEAR_DAMPING = 4
  G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY = 5
  G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT = 6
  G6DOF_JOINT_LINEAR_SPRING_STIFFNESS = 7
  G6DOF_JOINT_LINEAR_SPRING_DAMPING = 8
  G6DOF_JOINT_LINEAR_SPRING_EQUILIBRIUM_POINT = 9
  G6DOF_JOINT_ANGULAR_LOWER_LIMIT = 10
  G6DOF_JOINT_ANGULAR_UPPER_LIMIT = 11
  G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS = 12
  G6DOF_JOINT_ANGULAR_DAMPING = 13
  G6DOF_JOINT_ANGULAR_RESTITUTION = 14
  G6DOF_JOINT_ANGULAR_FORCE_LIMIT = 15
  G6DOF_JOINT_ANGULAR_ERP = 16
  G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY = 17
  G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT = 18
  G6DOF_JOINT_ANGULAR_SPRING_STIFFNESS = 19
  G6DOF_JOINT_ANGULAR_SPRING_DAMPING = 20
  G6DOF_JOINT_ANGULAR_SPRING_EQUILIBRIUM_POINT = 21
  G6DOF_JOINT_MAX = 22
class G6DOFJointAxisFlag:
  G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT = 0
  G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT = 1
  G6DOF_JOINT_FLAG_ENABLE_ANGULAR_SPRING = 2
  G6DOF_JOINT_FLAG_ENABLE_LINEAR_SPRING = 3
  G6DOF_JOINT_FLAG_ENABLE_MOTOR = 4
  G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR = 5
  G6DOF_JOINT_FLAG_MAX = 6
class ShapeType:
  SHAPE_WORLD_BOUNDARY = 0
  SHAPE_SEPARATION_RAY = 1
  SHAPE_SPHERE = 2
  SHAPE_BOX = 3
  SHAPE_CAPSULE = 4
  SHAPE_CYLINDER = 5
  SHAPE_CONVEX_POLYGON = 6
  SHAPE_CONCAVE_POLYGON = 7
  SHAPE_HEIGHTMAP = 8
  SHAPE_SOFT_BODY = 9
  SHAPE_CUSTOM = 10
class AreaParameter:
  AREA_PARAM_GRAVITY_OVERRIDE_MODE = 0
  AREA_PARAM_GRAVITY = 1
  AREA_PARAM_GRAVITY_VECTOR = 2
  AREA_PARAM_GRAVITY_IS_POINT = 3
  AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE = 4
  AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE = 5
  AREA_PARAM_LINEAR_DAMP = 6
  AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE = 7
  AREA_PARAM_ANGULAR_DAMP = 8
  AREA_PARAM_PRIORITY = 9
  AREA_PARAM_WIND_FORCE_MAGNITUDE = 10
  AREA_PARAM_WIND_SOURCE = 11
  AREA_PARAM_WIND_DIRECTION = 12
  AREA_PARAM_WIND_ATTENUATION_FACTOR = 13
class AreaSpaceOverrideMode:
  AREA_SPACE_OVERRIDE_DISABLED = 0
  AREA_SPACE_OVERRIDE_COMBINE = 1
  AREA_SPACE_OVERRIDE_COMBINE_REPLACE = 2
  AREA_SPACE_OVERRIDE_REPLACE = 3
  AREA_SPACE_OVERRIDE_REPLACE_COMBINE = 4
class BodyMode:
  BODY_MODE_STATIC = 0
  BODY_MODE_KINEMATIC = 1
  BODY_MODE_RIGID = 2
  BODY_MODE_RIGID_LINEAR = 3
class BodyParameter:
  BODY_PARAM_BOUNCE = 0
  BODY_PARAM_FRICTION = 1
  BODY_PARAM_MASS = 2
  BODY_PARAM_INERTIA = 3
  BODY_PARAM_CENTER_OF_MASS = 4
  BODY_PARAM_GRAVITY_SCALE = 5
  BODY_PARAM_LINEAR_DAMP_MODE = 6
  BODY_PARAM_ANGULAR_DAMP_MODE = 7
  BODY_PARAM_LINEAR_DAMP = 8
  BODY_PARAM_ANGULAR_DAMP = 9
  BODY_PARAM_MAX = 10
class BodyDampMode:
  BODY_DAMP_MODE_COMBINE = 0
  BODY_DAMP_MODE_REPLACE = 1
class BodyState:
  BODY_STATE_TRANSFORM = 0
  BODY_STATE_LINEAR_VELOCITY = 1
  BODY_STATE_ANGULAR_VELOCITY = 2
  BODY_STATE_SLEEPING = 3
  BODY_STATE_CAN_SLEEP = 4
class AreaBodyStatus:
  AREA_BODY_ADDED = 0
  AREA_BODY_REMOVED = 1
class ProcessInfo:
  INFO_ACTIVE_OBJECTS = 0
  INFO_COLLISION_PAIRS = 1
  INFO_ISLAND_COUNT = 2
class SpaceParameter:
  SPACE_PARAM_CONTACT_RECYCLE_RADIUS = 0
  SPACE_PARAM_CONTACT_MAX_SEPARATION = 1
  SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION = 2
  SPACE_PARAM_CONTACT_DEFAULT_BIAS = 3
  SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD = 4
  SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD = 5
  SPACE_PARAM_BODY_TIME_TO_SLEEP = 6
  SPACE_PARAM_SOLVER_ITERATIONS = 7
class BodyAxis:
  BODY_AXIS_LINEAR_X = 1
  BODY_AXIS_LINEAR_Y = 2
  BODY_AXIS_LINEAR_Z = 4
  BODY_AXIS_ANGULAR_X = 8
  BODY_AXIS_ANGULAR_Y = 16
  BODY_AXIS_ANGULAR_Z = 32


class PhysicsServer3D(py4godot_object.Object):
  r'''
		PhysicsServer3D is the server responsible for all 3D physics. It can directly create and manipulate all physics objects:
		- A _space_ is a self-contained world for a physics simulation. It contains bodies, areas, and joints. Its state can be queried for collision and intersection information, and several parameters of the simulation can be modified.
		- A _shape_ is a geometric shape such as a sphere, a box, a cylinder, or a polygon. It can be used for collision detection by adding it to a body/area, possibly with an extra transformation relative to the body/area's origin. Bodies/areas can have multiple (transformed) shapes added to them, and a single shape can be added to bodies/areas multiple times with different local transformations.
		- A _body_ is a physical object which can be in static, kinematic, or rigid mode. Its state (such as position and velocity) can be queried and updated. A force integration callback can be set to customize the body's physics.
		- An _area_ is a region in space which can be used to detect bodies and areas entering and exiting it. A body monitoring callback can be set to report entering/exiting body shapes, and similarly an area monitoring callback can be set. Gravity and damping can be overridden within the area by setting area parameters.
		- A _joint_ is a constraint, either between two bodies or on one body relative to a point. Parameters such as the joint bias and the rest length of a spring joint can be adjusted.
		Physics objects in `PhysicsServer3D` may be created and manipulated independently; they do not have to be tied to nodes in the scene tree.
		**Note:** All the 3D physics nodes use the physics server internally. Adding a physics node to the scene tree will cause a corresponding physics object to be created in the physics server. A rigid body node registers a callback that updates the node's transform with the transform of the respective body object in the physics server (every physics update). An area node registers a callback to inform the area node about overlaps with the respective area object in the physics server. The raycast node queries the direct state of the relevant space in the physics server.
	'''


  def generate_wrapper(self):
    return CPPPhysicsServer3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsServer3D.__new__(PhysicsServer3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsServer3D'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsServer3D.construct_without_init()
    cls._ptr = CPPPhysicsServer3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsServer3D.construct_without_init()
    cls._ptr = CPPPhysicsServer3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _PhysicsServer3D_singleton_instance
    if _PhysicsServer3D_singleton_instance is None:
      singleton = PhysicsServer3D()
      singleton._ptr = constructor(607,0, ())
      _PhysicsServer3D_singleton_instance = singleton
    return _PhysicsServer3D_singleton_instance

  @functools.native_method
  def world_boundary_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D world boundary shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the shape's normal direction and distance properties.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(49,tuple([]))
    return _ret


  @functools.native_method
  def separation_ray_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D separation ray shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the shape's `length` and `slide_on_slope` properties.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(50,tuple([]))
    return _ret


  @functools.native_method
  def sphere_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D sphere shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the sphere's radius.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(51,tuple([]))
    return _ret


  @functools.native_method
  def box_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D box shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the box's half-extents.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(52,tuple([]))
    return _ret


  @functools.native_method
  def capsule_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D capsule shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the capsule's height and radius.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def cylinder_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D cylinder shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the cylinder's height and radius.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def convex_polygon_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D convex polygon shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the convex polygon's points.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def concave_polygon_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D concave polygon shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the concave polygon's triangles.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))
    return _ret


  @functools.native_method
  def heightmap_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D heightmap shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the heightmap's data.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(57,tuple([]))
    return _ret


  @functools.native_method
  def custom_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a custom shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the shape's data.
				**Note:** Custom shapes are not supported by the built-in physics servers, so calling this method always produces an error when using Godot Physics or Jolt Physics. Custom physics servers implemented as GDExtensions may support a custom shape.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([]))
    return _ret


  @functools.native_method
  def shape_set_data(self, shape:'RID'   , data:'object'   ) -> None:
    r'''
				Sets the shape data that configures the shape. The `data` to be passed depends on the shape's type (see `shape_get_type`):
				- `constant SHAPE_WORLD_BOUNDARY`: a `Plane`,
				- `constant SHAPE_SEPARATION_RAY`: a dictionary containing the key `"length"` with a `float` value and the key `"slide_on_slope"` with a `bool` value,
				- `constant SHAPE_SPHERE`: a `float` that is the radius of the sphere,
				- `constant SHAPE_BOX`: a `Vector3` containing the half-extents of the box,
				- `constant SHAPE_CAPSULE`: a dictionary containing the keys `"height"` and `"radius"` with `float` values,
				- `constant SHAPE_CYLINDER`: a dictionary containing the keys `"height"` and `"radius"` with `float` values,
				- `constant SHAPE_CONVEX_POLYGON`: a `PackedVector3Array` of points defining a convex polygon (the shape will be the convex hull of the points),
				- `constant SHAPE_CONCAVE_POLYGON`: a dictionary containing the key `"faces"` with a `PackedVector3Array` value (with a length divisible by 3, so that each 3-tuple of points forms a face) and the key `"backface_collision"` with a `bool` value,
				- `constant SHAPE_HEIGHTMAP`: a dictionary containing the keys `"width"` and `"depth"` with `int` values, and the key `"heights"` with a value that is a packed array of `float`s of length `width * depth` (that is a `PackedFloat32Array`, or a `PackedFloat64Array` if Godot was compiled with the `precision=double` option), and optionally the keys `"min_height"` and `"max_height"` with `float` values,
				- `constant SHAPE_SOFT_BODY`: the input `data` is ignored and this method has no effect,
				- `constant SHAPE_CUSTOM`: the input `data` is interpreted by a custom physics server, if it supports custom shapes.
			'''

    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'
    







    self._ptr.call_with_return(59,tuple([shape._ptr, data]))

  @functools.native_method
  def shape_set_margin(self, shape:'RID'   , margin:'float'   ) -> None:
    r'''
				Sets the collision margin for the shape.
				**Note:** This is not used in Godot Physics.
			'''

    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'
    assert isinstance(margin, (int, float)), 'margin must be int or float'







    self._ptr.call_with_return(60,tuple([shape._ptr, margin]))

  @functools.native_method
  def shape_get_type(self, shape:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the shape's type.
			'''

    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'






    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([shape._ptr]))
    return _ret


  @functools.native_method
  def shape_get_data(self, shape:'RID'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the shape data that configures the shape, such as the half-extents of a box or the triangles of a concave (trimesh) shape. See `shape_set_data` for the precise format of this data in each case.
			'''

    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'






    _ret = None
    _ret = self._ptr.call_with_return(62,tuple([shape._ptr]))
    return _ret


  @functools.native_method
  def shape_get_margin(self, shape:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the collision margin for the shape.
				**Note:** This is not used in Godot Physics, so will always return `0`.
			'''

    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(63,tuple([shape._ptr]))
    return _ret


  @functools.native_method
  def space_create(self) -> typing.Union['RID']:
    r'''
				Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with `area_set_space`, or to a body with `body_set_space`.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(64,tuple([]))
    return _ret


  @functools.native_method
  def space_set_active(self, space:'RID'   , active:'bool'   ) -> None:
    r'''
				Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'
    assert isinstance(active, bool), 'active must be bool'







    self._ptr.call_with_return(65,tuple([space._ptr, active]))

  @functools.native_method
  def space_is_active(self, space:'RID'   ) -> typing.Union[bool]:
    r'''
				Returns whether the space is active.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([space._ptr]))
    return _ret


  @functools.native_method
  def space_set_param(self, space:'RID'   , param:'int'  , value:'float'   ) -> None:
    r'''
				Sets the value for a space parameter. A list of available parameters is on the `enum SpaceParameter` constants.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'








    self._ptr.call_with_return(67,tuple([space._ptr, param, value]))

  @functools.native_method
  def space_get_param(self, space:'RID'   , param:'int'  ) -> typing.Union[float]:
    r'''
				Returns the value of a space parameter.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([space._ptr, param]))
    return _ret


  @functools.native_method
  def space_get_direct_state(self, space:'RID'   ) -> typing.Union['py4godot_physicsdirectspacestate3d.PhysicsDirectSpaceState3D','py4godot_physicsdirectspacestate3dextension.PhysicsDirectSpaceState3DExtension']:
    r'''
				Returns the state of a space, a `PhysicsDirectSpaceState3D`. This object can be used to make collision/intersection queries.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PhysicsDirectSpaceState3D
    _ret._ptr = self._ptr.call_with_return(69,tuple([space._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def area_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D area object in the physics server, and returns the `RID` that identifies it. The default settings for the created area include a collision layer and mask set to `1`, and `monitorable` set to `false`.
				Use `area_add_shape` to add shapes to it, use `area_set_transform` to set its transform, and use `area_set_space` to add the area to a space. If you want the area to be detectable use `area_set_monitorable`.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(70,tuple([]))
    return _ret


  @functools.native_method
  def area_set_space(self, area:'RID'   , space:'RID'   ) -> None:
    r'''
				Assigns a space to the area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'







    self._ptr.call_with_return(71,tuple([area._ptr, space._ptr]))

  @functools.native_method
  def area_get_space(self, area:'RID'   ) -> typing.Union['RID']:
    r'''
				Returns the space assigned to the area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(72,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_add_shape(self, area:'RID'   , shape:'RID'   , transform:'Transform3D' = None  , disabled:'bool' =False  ) -> None:
    r'''
				Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
			'''
    if transform is None:
      transform = Transform3D.new0()
    if transform is None:
      transform = Transform3D.new0()

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'
    assert isinstance(disabled, bool), 'disabled must be bool'









    self._ptr.call_with_return(73,tuple([area._ptr, shape._ptr, transform._ptr, disabled]))

  @functools.native_method
  def area_set_shape(self, area:'RID'   , shape_idx:'int'   , shape:'RID'   ) -> None:
    r'''
				Substitutes a given area shape by another. The old shape is selected by its index, the new one by its `RID`.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'








    self._ptr.call_with_return(74,tuple([area._ptr, shape_idx, shape._ptr]))

  @functools.native_method
  def area_set_shape_transform(self, area:'RID'   , shape_idx:'int'   , transform:'Transform3D'   ) -> None:
    r'''
				Sets the transform matrix for an area shape.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert(not transform is None)
    assert isinstance(transform, Transform3D), 'transform must be Transform3D'








    self._ptr.call_with_return(75,tuple([area._ptr, shape_idx, transform._ptr]))

  @functools.native_method
  def area_set_shape_disabled(self, area:'RID'   , shape_idx:'int'   , disabled:'bool'   ) -> None:
    r'''
'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert isinstance(disabled, bool), 'disabled must be bool'








    self._ptr.call_with_return(76,tuple([area._ptr, shape_idx, disabled]))

  @functools.native_method
  def area_get_shape_count(self, area:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the number of shapes assigned to an area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_get_shape(self, area:'RID'   , shape_idx:'int'   ) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the nth shape of an area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([area._ptr, shape_idx]))
    return _ret


  @functools.native_method
  def area_get_shape_transform(self, area:'RID'   , shape_idx:'int'   ) -> typing.Union['Transform3D']:
    r'''
				Returns the transform matrix of a shape within an area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([area._ptr, shape_idx]))
    return _ret


  @functools.native_method
  def area_remove_shape(self, area:'RID'   , shape_idx:'int'   ) -> None:
    r'''
				Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    self._ptr.call_with_return(80,tuple([area._ptr, shape_idx]))

  @functools.native_method
  def area_clear_shapes(self, area:'RID'   ) -> None:
    r'''
				Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    self._ptr.call_with_return(81,tuple([area._ptr]))

  @functools.native_method
  def area_set_collision_layer(self, area:'RID'   , layer:'int'   ) -> None:
    r'''
				Assigns the area to one or many physics layers.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(layer, (int, float)), 'layer must be int or float'







    self._ptr.call_with_return(82,tuple([area._ptr, layer]))

  @functools.native_method
  def area_get_collision_layer(self, area:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers an area belongs to.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_set_collision_mask(self, area:'RID'   , mask:'int'   ) -> None:
    r'''
				Sets which physics layers the area will monitor.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(mask, (int, float)), 'mask must be int or float'







    self._ptr.call_with_return(84,tuple([area._ptr, mask]))

  @functools.native_method
  def area_get_collision_mask(self, area:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers an area can contact with.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_set_param(self, area:'RID'   , param:'int'  , value:'object'   ) -> None:
    r'''
				Sets the value for an area parameter. A list of available parameters is on the `enum AreaParameter` constants.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    








    self._ptr.call_with_return(86,tuple([area._ptr, param, value]))

  @functools.native_method
  def area_set_transform(self, area:'RID'   , transform:'Transform3D'   ) -> None:
    r'''
				Sets the transform matrix for an area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not transform is None)
    assert isinstance(transform, Transform3D), 'transform must be Transform3D'







    self._ptr.call_with_return(87,tuple([area._ptr, transform._ptr]))

  @functools.native_method
  def area_get_param(self, area:'RID'   , param:'int'  ) -> typing.Union[typing.Any]:
    r'''
				Returns an area parameter value. A list of available parameters is on the `enum AreaParameter` constants.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(88,tuple([area._ptr, param]))
    return _ret


  @functools.native_method
  def area_get_transform(self, area:'RID'   ) -> typing.Union['Transform3D']:
    r'''
				Returns the transform matrix for an area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(89,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_attach_object_instance_id(self, area:'RID'   , id:'int'   ) -> None:
    r'''
				Assigns the area to a descendant of `Object`, so it can exist in the node tree.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(id, (int, float)), 'id must be int or float'







    self._ptr.call_with_return(90,tuple([area._ptr, id]))

  @functools.native_method
  def area_get_object_instance_id(self, area:'RID'   ) -> typing.Union[int]:
    r'''
				Gets the instance ID of the object the area is assigned to.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_set_monitor_callback(self, area:'RID'   , callback:'Callable'   ) -> None:
    r'''
				Sets the area's body monitor callback. This callback will be called when any other (shape of a) body enters or exits (a shape of) the given area, and must take the following five parameters:
				1. an integer `status`: either `constant AREA_BODY_ADDED` or `constant AREA_BODY_REMOVED` depending on whether the other body shape entered or exited the area,
				2. an `RID` `body_rid`: the `RID` of the body that entered or exited the area,
				3. an integer `instance_id`: the `ObjectID` attached to the body,
				4. an integer `body_shape_idx`: the index of the shape of the body that entered or exited the area,
				5. an integer `self_shape_idx`: the index of the shape of the area where the body entered or exited.
				By counting (or keeping track of) the shapes that enter and exit, it can be determined if a body (with all its shapes) is entering for the first time or exiting for the last time.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not callback is None)
    assert isinstance(callback, Callable), 'callback must be Callable'







    self._ptr.call_with_return(92,tuple([area._ptr, callback._ptr]))

  @functools.native_method
  def area_set_area_monitor_callback(self, area:'RID'   , callback:'Callable'   ) -> None:
    r'''
				Sets the area's area monitor callback. This callback will be called when any other (shape of an) area enters or exits (a shape of) the given area, and must take the following five parameters:
				1. an integer `status`: either `constant AREA_BODY_ADDED` or `constant AREA_BODY_REMOVED` depending on whether the other area's shape entered or exited the area,
				2. an `RID` `area_rid`: the `RID` of the other area that entered or exited the area,
				3. an integer `instance_id`: the `ObjectID` attached to the other area,
				4. an integer `area_shape_idx`: the index of the shape of the other area that entered or exited the area,
				5. an integer `self_shape_idx`: the index of the shape of the area where the other area entered or exited.
				By counting (or keeping track of) the shapes that enter and exit, it can be determined if an area (with all its shapes) is entering for the first time or exiting for the last time.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not callback is None)
    assert isinstance(callback, Callable), 'callback must be Callable'







    self._ptr.call_with_return(93,tuple([area._ptr, callback._ptr]))

  @functools.native_method
  def area_set_monitorable(self, area:'RID'   , monitorable:'bool'   ) -> None:
    r'''
'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(monitorable, bool), 'monitorable must be bool'







    self._ptr.call_with_return(94,tuple([area._ptr, monitorable]))

  @functools.native_method
  def area_set_ray_pickable(self, area:'RID'   , enable:'bool'   ) -> None:
    r'''
				Sets object pickable with rays.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(enable, bool), 'enable must be bool'







    self._ptr.call_with_return(95,tuple([area._ptr, enable]))

  @functools.native_method
  def body_create(self) -> typing.Union['RID']:
    r'''
				Creates a 3D body object in the physics server, and returns the `RID` that identifies it. The default settings for the created area include a collision layer and mask set to `1`, and body mode set to `constant BODY_MODE_RIGID`.
				Use `body_add_shape` to add shapes to it, use `body_set_state` to set its transform, and use `body_set_space` to add the body to a space.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(96,tuple([]))
    return _ret


  @functools.native_method
  def body_set_space(self, body:'RID'   , space:'RID'   ) -> None:
    r'''
				Assigns a space to the body (see `space_create`).
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'







    self._ptr.call_with_return(97,tuple([body._ptr, space._ptr]))

  @functools.native_method
  def body_get_space(self, body:'RID'   ) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the space assigned to a body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(98,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_mode(self, body:'RID'   , mode:'int'  ) -> None:
    r'''
				Sets the body mode.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(mode, (int, float)), 'mode must be int or float'







    self._ptr.call_with_return(99,tuple([body._ptr, mode]))

  @functools.native_method
  def body_get_mode(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the body mode.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret:int
    _ret = self._ptr.call_with_return(100,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_collision_layer(self, body:'RID'   , layer:'int'   ) -> None:
    r'''
				Sets the physics layer or layers a body belongs to.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(layer, (int, float)), 'layer must be int or float'







    self._ptr.call_with_return(101,tuple([body._ptr, layer]))

  @functools.native_method
  def body_get_collision_layer(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers a body belongs to.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(102,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_collision_mask(self, body:'RID'   , mask:'int'   ) -> None:
    r'''
				Sets the physics layer or layers a body can collide with.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(mask, (int, float)), 'mask must be int or float'







    self._ptr.call_with_return(103,tuple([body._ptr, mask]))

  @functools.native_method
  def body_get_collision_mask(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers a body can collide with.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_collision_priority(self, body:'RID'   , priority:'float'   ) -> None:
    r'''
				Sets the body's collision priority.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(priority, (int, float)), 'priority must be int or float'







    self._ptr.call_with_return(105,tuple([body._ptr, priority]))

  @functools.native_method
  def body_get_collision_priority(self, body:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the body's collision priority.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(106,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_add_shape(self, body:'RID'   , shape:'RID'   , transform:'Transform3D' = None  , disabled:'bool' =False  ) -> None:
    r'''
				Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
			'''
    if transform is None:
      transform = Transform3D.new0()
    if transform is None:
      transform = Transform3D.new0()

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'
    assert isinstance(disabled, bool), 'disabled must be bool'









    self._ptr.call_with_return(107,tuple([body._ptr, shape._ptr, transform._ptr, disabled]))

  @functools.native_method
  def body_set_shape(self, body:'RID'   , shape_idx:'int'   , shape:'RID'   ) -> None:
    r'''
				Substitutes a given body shape by another. The old shape is selected by its index, the new one by its `RID`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'








    self._ptr.call_with_return(108,tuple([body._ptr, shape_idx, shape._ptr]))

  @functools.native_method
  def body_set_shape_transform(self, body:'RID'   , shape_idx:'int'   , transform:'Transform3D'   ) -> None:
    r'''
				Sets the transform matrix for a body shape.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert(not transform is None)
    assert isinstance(transform, Transform3D), 'transform must be Transform3D'








    self._ptr.call_with_return(109,tuple([body._ptr, shape_idx, transform._ptr]))

  @functools.native_method
  def body_set_shape_disabled(self, body:'RID'   , shape_idx:'int'   , disabled:'bool'   ) -> None:
    r'''
'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert isinstance(disabled, bool), 'disabled must be bool'








    self._ptr.call_with_return(110,tuple([body._ptr, shape_idx, disabled]))

  @functools.native_method
  def body_get_shape_count(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the number of shapes assigned to a body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(111,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_get_shape(self, body:'RID'   , shape_idx:'int'   ) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the nth shape of a body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(112,tuple([body._ptr, shape_idx]))
    return _ret


  @functools.native_method
  def body_get_shape_transform(self, body:'RID'   , shape_idx:'int'   ) -> typing.Union['Transform3D']:
    r'''
				Returns the transform matrix of a body shape.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(113,tuple([body._ptr, shape_idx]))
    return _ret


  @functools.native_method
  def body_remove_shape(self, body:'RID'   , shape_idx:'int'   ) -> None:
    r'''
				Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    self._ptr.call_with_return(114,tuple([body._ptr, shape_idx]))

  @functools.native_method
  def body_clear_shapes(self, body:'RID'   ) -> None:
    r'''
				Removes all shapes from a body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    self._ptr.call_with_return(115,tuple([body._ptr]))

  @functools.native_method
  def body_attach_object_instance_id(self, body:'RID'   , id:'int'   ) -> None:
    r'''
				Assigns the area to a descendant of `Object`, so it can exist in the node tree.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(id, (int, float)), 'id must be int or float'







    self._ptr.call_with_return(116,tuple([body._ptr, id]))

  @functools.native_method
  def body_get_object_instance_id(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Gets the instance ID of the object the area is assigned to.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(117,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_enable_continuous_collision_detection(self, body:'RID'   , enable:'bool'   ) -> None:
    r'''
				If `true`, the continuous collision detection mode is enabled.
				Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(enable, bool), 'enable must be bool'







    self._ptr.call_with_return(118,tuple([body._ptr, enable]))

  @functools.native_method
  def body_is_continuous_collision_detection_enabled(self, body:'RID'   ) -> typing.Union[bool]:
    r'''
				If `true`, the continuous collision detection mode is enabled.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(119,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_param(self, body:'RID'   , param:'int'  , value:'object'   ) -> None:
    r'''
				Sets a body parameter. A list of available parameters is on the `enum BodyParameter` constants.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    








    self._ptr.call_with_return(120,tuple([body._ptr, param, value]))

  @functools.native_method
  def body_get_param(self, body:'RID'   , param:'int'  ) -> typing.Union[typing.Any]:
    r'''
				Returns the value of a body parameter. A list of available parameters is on the `enum BodyParameter` constants.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(121,tuple([body._ptr, param]))
    return _ret


  @functools.native_method
  def body_reset_mass_properties(self, body:'RID'   ) -> None:
    r'''
				Restores the default inertia and center of mass based on shapes to cancel any custom values previously set using `body_set_param`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    self._ptr.call_with_return(122,tuple([body._ptr]))

  @functools.native_method
  def body_set_state(self, body:'RID'   , state:'int'  , value:'object'   ) -> None:
    r'''
				Sets a body state.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(state, (int, float)), 'state must be int or float'
    








    self._ptr.call_with_return(123,tuple([body._ptr, state, value]))

  @functools.native_method
  def body_get_state(self, body:'RID'   , state:'int'  ) -> typing.Union[typing.Any]:
    r'''
				Returns a body state.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(state, (int, float)), 'state must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(124,tuple([body._ptr, state]))
    return _ret


  @functools.native_method
  def body_apply_central_impulse(self, body:'RID'   , impulse:'Vector3'   ) -> None:
    r'''
				Applies a directional impulse without affecting rotation.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				This is equivalent to using `body_apply_impulse` at the body's center of mass.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not impulse is None)
    assert isinstance(impulse, Vector3), 'impulse must be Vector3'







    self._ptr.call_with_return(125,tuple([body._ptr, impulse._ptr]))

  @functools.native_method
  def body_apply_impulse(self, body:'RID'   , impulse:'Vector3'   , position:'Vector3' = None  ) -> None:
    r'''
				Applies a positioned impulse to the body.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				`position` is the offset from the body origin in global coordinates.
			'''
    if position is None:
      position = Vector3.new0()
    if position is None:
      position = Vector3.new0()

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not impulse is None)
    assert isinstance(impulse, Vector3), 'impulse must be Vector3'








    self._ptr.call_with_return(126,tuple([body._ptr, impulse._ptr, position._ptr]))

  @functools.native_method
  def body_apply_torque_impulse(self, body:'RID'   , impulse:'Vector3'   ) -> None:
    r'''
				Applies a rotational impulse to the body without affecting the position.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not impulse is None)
    assert isinstance(impulse, Vector3), 'impulse must be Vector3'







    self._ptr.call_with_return(127,tuple([body._ptr, impulse._ptr]))

  @functools.native_method
  def body_apply_central_force(self, body:'RID'   , force:'Vector3'   ) -> None:
    r'''
				Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update.
				This is equivalent to using `body_apply_force` at the body's center of mass.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector3), 'force must be Vector3'







    self._ptr.call_with_return(128,tuple([body._ptr, force._ptr]))

  @functools.native_method
  def body_apply_force(self, body:'RID'   , force:'Vector3'   , position:'Vector3' = None  ) -> None:
    r'''
				Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update.
				`position` is the offset from the body origin in global coordinates.
			'''
    if position is None:
      position = Vector3.new0()
    if position is None:
      position = Vector3.new0()

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector3), 'force must be Vector3'








    self._ptr.call_with_return(129,tuple([body._ptr, force._ptr, position._ptr]))

  @functools.native_method
  def body_apply_torque(self, body:'RID'   , torque:'Vector3'   ) -> None:
    r'''
				Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not torque is None)
    assert isinstance(torque, Vector3), 'torque must be Vector3'







    self._ptr.call_with_return(130,tuple([body._ptr, torque._ptr]))

  @functools.native_method
  def body_add_constant_central_force(self, body:'RID'   , force:'Vector3'   ) -> None:
    r'''
				Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with `body_set_constant_force(body, Vector3(0, 0, 0))`.
				This is equivalent to using `body_add_constant_force` at the body's center of mass.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector3), 'force must be Vector3'







    self._ptr.call_with_return(131,tuple([body._ptr, force._ptr]))

  @functools.native_method
  def body_add_constant_force(self, body:'RID'   , force:'Vector3'   , position:'Vector3' = None  ) -> None:
    r'''
				Adds a constant positioned force to the body that keeps being applied over time until cleared with `body_set_constant_force(body, Vector3(0, 0, 0))`.
				`position` is the offset from the body origin in global coordinates.
			'''
    if position is None:
      position = Vector3.new0()
    if position is None:
      position = Vector3.new0()

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector3), 'force must be Vector3'








    self._ptr.call_with_return(132,tuple([body._ptr, force._ptr, position._ptr]))

  @functools.native_method
  def body_add_constant_torque(self, body:'RID'   , torque:'Vector3'   ) -> None:
    r'''
				Adds a constant rotational force without affecting position that keeps being applied over time until cleared with `body_set_constant_torque(body, Vector3(0, 0, 0))`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not torque is None)
    assert isinstance(torque, Vector3), 'torque must be Vector3'







    self._ptr.call_with_return(133,tuple([body._ptr, torque._ptr]))

  @functools.native_method
  def body_set_constant_force(self, body:'RID'   , force:'Vector3'   ) -> None:
    r'''
				Sets the body's total constant positional forces applied during each physics update.
				See `body_add_constant_force` and `body_add_constant_central_force`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector3), 'force must be Vector3'







    self._ptr.call_with_return(134,tuple([body._ptr, force._ptr]))

  @functools.native_method
  def body_get_constant_force(self, body:'RID'   ) -> typing.Union['Vector3']:
    r'''
				Returns the body's total constant positional forces applied during each physics update.
				See `body_add_constant_force` and `body_add_constant_central_force`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(135,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_constant_torque(self, body:'RID'   , torque:'Vector3'   ) -> None:
    r'''
				Sets the body's total constant rotational forces applied during each physics update.
				See `body_add_constant_torque`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not torque is None)
    assert isinstance(torque, Vector3), 'torque must be Vector3'







    self._ptr.call_with_return(136,tuple([body._ptr, torque._ptr]))

  @functools.native_method
  def body_get_constant_torque(self, body:'RID'   ) -> typing.Union['Vector3']:
    r'''
				Returns the body's total constant rotational forces applied during each physics update.
				See `body_add_constant_torque`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(137,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_axis_velocity(self, body:'RID'   , axis_velocity:'Vector3'   ) -> None:
    r'''
				Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not axis_velocity is None)
    assert isinstance(axis_velocity, Vector3), 'axis_velocity must be Vector3'







    self._ptr.call_with_return(138,tuple([body._ptr, axis_velocity._ptr]))

  @functools.native_method
  def body_set_axis_lock(self, body:'RID'   , axis:'int'  , lock:'bool'   ) -> None:
    r'''
'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(axis, (int, float)), 'axis must be int or float'
    assert isinstance(lock, bool), 'lock must be bool'








    self._ptr.call_with_return(139,tuple([body._ptr, axis, lock]))

  @functools.native_method
  def body_is_axis_locked(self, body:'RID'   , axis:'int'  ) -> typing.Union[bool]:
    r'''
'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(axis, (int, float)), 'axis must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(140,tuple([body._ptr, axis]))
    return _ret


  @functools.native_method
  def body_add_collision_exception(self, body:'RID'   , excepted_body:'RID'   ) -> None:
    r'''
				Adds a body to the list of bodies exempt from collisions.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not excepted_body is None)
    assert isinstance(excepted_body, RID), 'excepted_body must be RID'







    self._ptr.call_with_return(141,tuple([body._ptr, excepted_body._ptr]))

  @functools.native_method
  def body_remove_collision_exception(self, body:'RID'   , excepted_body:'RID'   ) -> None:
    r'''
				Removes a body from the list of bodies exempt from collisions.
				Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not excepted_body is None)
    assert isinstance(excepted_body, RID), 'excepted_body must be RID'







    self._ptr.call_with_return(142,tuple([body._ptr, excepted_body._ptr]))

  @functools.native_method
  def body_set_max_contacts_reported(self, body:'RID'   , amount:'int'   ) -> None:
    r'''
				Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies. This is enabled by setting the maximum number of contacts reported to a number greater than 0.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(amount, (int, float)), 'amount must be int or float'







    self._ptr.call_with_return(143,tuple([body._ptr, amount]))

  @functools.native_method
  def body_get_max_contacts_reported(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the maximum contacts that can be reported. See `body_set_max_contacts_reported`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(144,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_omit_force_integration(self, body:'RID'   , enable:'bool'   ) -> None:
    r'''
				Sets whether the body omits the standard force integration. If `enable` is `true`, the body will not automatically use applied forces, torques, and damping to update the body's linear and angular velocity. In this case, `body_set_force_integration_callback` can be used to manually update the linear and angular velocity instead.
				This method is called when the property `RigidBody3D.custom_integrator` is set.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(enable, bool), 'enable must be bool'







    self._ptr.call_with_return(145,tuple([body._ptr, enable]))

  @functools.native_method
  def body_is_omitting_force_integration(self, body:'RID'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the body is omitting the standard force integration. See `body_set_omit_force_integration`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(146,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_state_sync_callback(self, body:'RID'   , callable:'Callable'   ) -> None:
    r'''
				Sets the body's state synchronization callback function to `callable`. Use an empty `Callable` (`code skip-lint`Callable()`) to clear the callback.
				The function `callable` will be called every physics frame, assuming that the body was active during the previous physics tick, and can be used to fetch the latest state from the physics server.
				The function `callable` must take the following parameters:
				1. `state`: a `PhysicsDirectBodyState3D`, used to retrieve the body's state.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not callable is None)
    assert isinstance(callable, Callable), 'callable must be Callable'







    self._ptr.call_with_return(147,tuple([body._ptr, callable._ptr]))

  @functools.native_method
  def body_set_force_integration_callback(self, body:'RID'   , callable:'Callable'   , userdata:'object' =None  ) -> None:
    r'''
				Sets the body's custom force integration callback function to `callable`. Use an empty `Callable` (`code skip-lint`Callable()`) to clear the custom callback.
				The function `callable` will be called every physics tick, before the standard force integration (see `body_set_omit_force_integration`). It can be used for example to update the body's linear and angular velocity based on contact with other bodies.
				If `userdata` is not `null`, the function `callable` must take the following two parameters:
				1. `state`: a `PhysicsDirectBodyState3D`, used to retrieve and modify the body's state,
				2. `code skip-lint`userdata`: a `Variant`; its value will be the `userdata` passed into this method.
				If `userdata` is `null`, then `callable` must take only the `state` parameter.
			'''



    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not callable is None)
    assert isinstance(callable, Callable), 'callable must be Callable'
    








    self._ptr.call_with_return(148,tuple([body._ptr, callable._ptr, userdata]))

  @functools.native_method
  def body_set_ray_pickable(self, body:'RID'   , enable:'bool'   ) -> None:
    r'''
				Sets the body pickable with rays if `enable` is set.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(enable, bool), 'enable must be bool'







    self._ptr.call_with_return(149,tuple([body._ptr, enable]))

  @functools.native_method
  def body_test_motion(self, body:'RID'   , parameters:'py4godot_physicstestmotionparameters3d.PhysicsTestMotionParameters3D'   , result:'py4godot_physicstestmotionresult3d.PhysicsTestMotionResult3D' = None  ) -> typing.Union[bool]:
    r'''
				Returns `true` if a collision would result from moving along a motion vector from a given point in space. `PhysicsTestMotionParameters3D` is passed to set motion parameters. `PhysicsTestMotionResult3D` can be passed to return additional information.
			'''
    if result is None:
      result = c_utils.empty_object
    if result is None:
      result = c_utils.empty_object

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not parameters is None)
    assert isinstance(parameters, get_class('PhysicsTestMotionParameters3D')), 'parameters must be PhysicsTestMotionParameters3D'








    _ret = 0
    _ret = self._ptr.call_with_return(150,tuple([body._ptr, parameters._ptr, result._ptr]))
    return _ret


  @functools.native_method
  def body_get_direct_state(self, body:'RID'   ) -> typing.Union['py4godot_physicsdirectbodystate3d.PhysicsDirectBodyState3D','py4godot_physicsdirectbodystate3dextension.PhysicsDirectBodyState3DExtension']:
    r'''
				Returns the `PhysicsDirectBodyState3D` of the body. Returns `null` if the body is destroyed or removed from the physics space.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PhysicsDirectBodyState3D
    _ret._ptr = self._ptr.call_with_return(151,tuple([body._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def soft_body_create(self) -> typing.Union['RID']:
    r'''
				Creates a new soft body and returns its internal `RID`.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(152,tuple([]))
    return _ret


  @functools.native_method
  def soft_body_update_rendering_server(self, body:'RID'   , rendering_server_handler:'py4godot_physicsserver3drenderingserverhandler.PhysicsServer3DRenderingServerHandler'   ) -> None:
    r'''
				Requests that the physics server updates the rendering server with the latest positions of the given soft body's points through the `rendering_server_handler` interface.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not rendering_server_handler is None)
    assert isinstance(rendering_server_handler, get_class('PhysicsServer3DRenderingServerHandler')), 'rendering_server_handler must be PhysicsServer3DRenderingServerHandler'







    self._ptr.call_with_return(153,tuple([body._ptr, rendering_server_handler._ptr]))

  @functools.native_method
  def soft_body_set_space(self, body:'RID'   , space:'RID'   ) -> None:
    r'''
				Assigns a space to the given soft body (see `space_create`).
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'







    self._ptr.call_with_return(154,tuple([body._ptr, space._ptr]))

  @functools.native_method
  def soft_body_get_space(self, body:'RID'   ) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the space assigned to the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(155,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_set_mesh(self, body:'RID'   , mesh:'RID'   ) -> None:
    r'''
				Sets the mesh of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not mesh is None)
    assert isinstance(mesh, RID), 'mesh must be RID'







    self._ptr.call_with_return(156,tuple([body._ptr, mesh._ptr]))

  @functools.native_method
  def soft_body_get_bounds(self, body:'RID'   ) -> typing.Union['AABB']:
    r'''
				Returns the bounds of the given soft body in global coordinates.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = AABB.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(157,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_set_collision_layer(self, body:'RID'   , layer:'int'   ) -> None:
    r'''
				Sets the physics layer or layers the given soft body belongs to.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(layer, (int, float)), 'layer must be int or float'







    self._ptr.call_with_return(158,tuple([body._ptr, layer]))

  @functools.native_method
  def soft_body_get_collision_layer(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers that the given soft body belongs to.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(159,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_set_collision_mask(self, body:'RID'   , mask:'int'   ) -> None:
    r'''
				Sets the physics layer or layers the given soft body can collide with.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(mask, (int, float)), 'mask must be int or float'







    self._ptr.call_with_return(160,tuple([body._ptr, mask]))

  @functools.native_method
  def soft_body_get_collision_mask(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers that the given soft body can collide with.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(161,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_add_collision_exception(self, body:'RID'   , body_b:'RID'   ) -> None:
    r'''
				Adds the given body to the list of bodies exempt from collisions.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not body_b is None)
    assert isinstance(body_b, RID), 'body_b must be RID'







    self._ptr.call_with_return(162,tuple([body._ptr, body_b._ptr]))

  @functools.native_method
  def soft_body_remove_collision_exception(self, body:'RID'   , body_b:'RID'   ) -> None:
    r'''
				Removes the given body from the list of bodies exempt from collisions.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not body_b is None)
    assert isinstance(body_b, RID), 'body_b must be RID'







    self._ptr.call_with_return(163,tuple([body._ptr, body_b._ptr]))

  @functools.native_method
  def soft_body_set_state(self, body:'RID'   , state:'int'  , variant:'object'   ) -> None:
    r'''
				Sets the given body state for the given body.
				**Note:** Godot's default physics implementation does not support `constant BODY_STATE_LINEAR_VELOCITY`, `constant BODY_STATE_ANGULAR_VELOCITY`, `constant BODY_STATE_SLEEPING`, or `constant BODY_STATE_CAN_SLEEP`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(state, (int, float)), 'state must be int or float'
    








    self._ptr.call_with_return(164,tuple([body._ptr, state, variant]))

  @functools.native_method
  def soft_body_get_state(self, body:'RID'   , state:'int'  ) -> typing.Union[typing.Any]:
    r'''
				Returns the given soft body state.
				**Note:** Godot's default physics implementation does not support `constant BODY_STATE_LINEAR_VELOCITY`, `constant BODY_STATE_ANGULAR_VELOCITY`, `constant BODY_STATE_SLEEPING`, or `constant BODY_STATE_CAN_SLEEP`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(state, (int, float)), 'state must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(165,tuple([body._ptr, state]))
    return _ret


  @functools.native_method
  def soft_body_set_transform(self, body:'RID'   , transform:'Transform3D'   ) -> None:
    r'''
				Sets the global transform of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not transform is None)
    assert isinstance(transform, Transform3D), 'transform must be Transform3D'







    self._ptr.call_with_return(166,tuple([body._ptr, transform._ptr]))

  @functools.native_method
  def soft_body_set_ray_pickable(self, body:'RID'   , enable:'bool'   ) -> None:
    r'''
				Sets whether the given soft body will be pickable when using object picking.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(enable, bool), 'enable must be bool'







    self._ptr.call_with_return(167,tuple([body._ptr, enable]))

  @functools.native_method
  def soft_body_set_simulation_precision(self, body:'RID'   , simulation_precision:'int'   ) -> None:
    r'''
				Sets the simulation precision of the given soft body. Increasing this value will improve the resulting simulation, but can affect performance. Use with care.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(simulation_precision, (int, float)), 'simulation_precision must be int or float'







    self._ptr.call_with_return(168,tuple([body._ptr, simulation_precision]))

  @functools.native_method
  def soft_body_get_simulation_precision(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the simulation precision of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(169,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_set_total_mass(self, body:'RID'   , total_mass:'float'   ) -> None:
    r'''
				Sets the total mass for the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(total_mass, (int, float)), 'total_mass must be int or float'







    self._ptr.call_with_return(170,tuple([body._ptr, total_mass]))

  @functools.native_method
  def soft_body_get_total_mass(self, body:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the total mass assigned to the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(171,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_set_linear_stiffness(self, body:'RID'   , stiffness:'float'   ) -> None:
    r'''
				Sets the linear stiffness of the given soft body. Higher values will result in a stiffer body, while lower values will increase the body's ability to bend. The value can be between `0.0` and `1.0` (inclusive).
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(stiffness, (int, float)), 'stiffness must be int or float'







    self._ptr.call_with_return(172,tuple([body._ptr, stiffness]))

  @functools.native_method
  def soft_body_get_linear_stiffness(self, body:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the linear stiffness of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(173,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_set_shrinking_factor(self, body:'RID'   , shrinking_factor:'float'   ) -> None:
    r'''
				Sets the shrinking factor of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shrinking_factor, (int, float)), 'shrinking_factor must be int or float'







    self._ptr.call_with_return(174,tuple([body._ptr, shrinking_factor]))

  @functools.native_method
  def soft_body_get_shrinking_factor(self, body:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the shrinking factor of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(175,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_set_pressure_coefficient(self, body:'RID'   , pressure_coefficient:'float'   ) -> None:
    r'''
				Sets the pressure coefficient of the given soft body. Simulates pressure build-up from inside this body. Higher values increase the strength of this effect.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(pressure_coefficient, (int, float)), 'pressure_coefficient must be int or float'







    self._ptr.call_with_return(176,tuple([body._ptr, pressure_coefficient]))

  @functools.native_method
  def soft_body_get_pressure_coefficient(self, body:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the pressure coefficient of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(177,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_set_damping_coefficient(self, body:'RID'   , damping_coefficient:'float'   ) -> None:
    r'''
				Sets the damping coefficient of the given soft body. Higher values will slow down the body more noticeably when forces are applied.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(damping_coefficient, (int, float)), 'damping_coefficient must be int or float'







    self._ptr.call_with_return(178,tuple([body._ptr, damping_coefficient]))

  @functools.native_method
  def soft_body_get_damping_coefficient(self, body:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the damping coefficient of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(179,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_set_drag_coefficient(self, body:'RID'   , drag_coefficient:'float'   ) -> None:
    r'''
				Sets the drag coefficient of the given soft body. Higher values increase this body's air resistance.
				**Note:** This value is currently unused by Godot's default physics implementation.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(drag_coefficient, (int, float)), 'drag_coefficient must be int or float'







    self._ptr.call_with_return(180,tuple([body._ptr, drag_coefficient]))

  @functools.native_method
  def soft_body_get_drag_coefficient(self, body:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the drag coefficient of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(181,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def soft_body_move_point(self, body:'RID'   , point_index:'int'   , global_position:'Vector3'   ) -> None:
    r'''
				Moves the given soft body point to a position in global coordinates.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(point_index, (int, float)), 'point_index must be int or float'
    assert(not global_position is None)
    assert isinstance(global_position, Vector3), 'global_position must be Vector3'








    self._ptr.call_with_return(182,tuple([body._ptr, point_index, global_position._ptr]))

  @functools.native_method
  def soft_body_get_point_global_position(self, body:'RID'   , point_index:'int'   ) -> typing.Union['Vector3']:
    r'''
				Returns the current position of the given soft body point in global coordinates.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(point_index, (int, float)), 'point_index must be int or float'







    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(183,tuple([body._ptr, point_index]))
    return _ret


  @functools.native_method
  def soft_body_remove_all_pinned_points(self, body:'RID'   ) -> None:
    r'''
				Unpins all points of the given soft body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    self._ptr.call_with_return(184,tuple([body._ptr]))

  @functools.native_method
  def soft_body_pin_point(self, body:'RID'   , point_index:'int'   , pin:'bool'   ) -> None:
    r'''
				Pins or unpins the given soft body point based on the value of `pin`.
				**Note:** Pinning a point effectively makes it kinematic, preventing it from being affected by forces, but you can still move it using `soft_body_move_point`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(point_index, (int, float)), 'point_index must be int or float'
    assert isinstance(pin, bool), 'pin must be bool'








    self._ptr.call_with_return(185,tuple([body._ptr, point_index, pin]))

  @functools.native_method
  def soft_body_is_point_pinned(self, body:'RID'   , point_index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns whether the given soft body point is pinned.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(point_index, (int, float)), 'point_index must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(186,tuple([body._ptr, point_index]))
    return _ret


  @functools.native_method
  def soft_body_apply_point_impulse(self, body:'RID'   , point_index:'int'   , impulse:'Vector3'   ) -> None:
    r'''
				Applies an impulse to a point.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(point_index, (int, float)), 'point_index must be int or float'
    assert(not impulse is None)
    assert isinstance(impulse, Vector3), 'impulse must be Vector3'








    self._ptr.call_with_return(187,tuple([body._ptr, point_index, impulse._ptr]))

  @functools.native_method
  def soft_body_apply_point_force(self, body:'RID'   , point_index:'int'   , force:'Vector3'   ) -> None:
    r'''
				Applies a force to a point. A force is time dependent and meant to be applied every physics update.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(point_index, (int, float)), 'point_index must be int or float'
    assert(not force is None)
    assert isinstance(force, Vector3), 'force must be Vector3'








    self._ptr.call_with_return(188,tuple([body._ptr, point_index, force._ptr]))

  @functools.native_method
  def soft_body_apply_central_impulse(self, body:'RID'   , impulse:'Vector3'   ) -> None:
    r'''
				Distributes and applies an impulse to all points.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not impulse is None)
    assert isinstance(impulse, Vector3), 'impulse must be Vector3'







    self._ptr.call_with_return(189,tuple([body._ptr, impulse._ptr]))

  @functools.native_method
  def soft_body_apply_central_force(self, body:'RID'   , force:'Vector3'   ) -> None:
    r'''
				Distributes and applies a force to all points. A force is time dependent and meant to be applied every physics update.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector3), 'force must be Vector3'







    self._ptr.call_with_return(190,tuple([body._ptr, force._ptr]))

  @functools.native_method
  def joint_create(self) -> typing.Union['RID']:
    r'''
'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(191,tuple([]))
    return _ret


  @functools.native_method
  def joint_clear(self, joint:'RID'   ) -> None:
    r'''
'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'






    self._ptr.call_with_return(192,tuple([joint._ptr]))

  @functools.native_method
  def joint_make_pin(self, joint:'RID'   , body_A:'RID'   , local_A:'Vector3'   , body_B:'RID'   , local_B:'Vector3'   ) -> None:
    r'''
'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not body_A is None)
    assert isinstance(body_A, RID), 'body_A must be RID'
    assert(not local_A is None)
    assert isinstance(local_A, Vector3), 'local_A must be Vector3'
    assert(not body_B is None)
    assert isinstance(body_B, RID), 'body_B must be RID'
    assert(not local_B is None)
    assert isinstance(local_B, Vector3), 'local_B must be Vector3'










    self._ptr.call_with_return(193,tuple([joint._ptr, body_A._ptr, local_A._ptr, body_B._ptr, local_B._ptr]))

  @functools.native_method
  def pin_joint_set_param(self, joint:'RID'   , param:'int'  , value:'float'   ) -> None:
    r'''
				Sets a pin joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'








    self._ptr.call_with_return(194,tuple([joint._ptr, param, value]))

  @functools.native_method
  def pin_joint_get_param(self, joint:'RID'   , param:'int'  ) -> typing.Union[float]:
    r'''
				Gets a pin joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(195,tuple([joint._ptr, param]))
    return _ret


  @functools.native_method
  def pin_joint_set_local_a(self, joint:'RID'   , local_A:'Vector3'   ) -> None:
    r'''
				Sets position of the joint in the local space of body a of the joint.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not local_A is None)
    assert isinstance(local_A, Vector3), 'local_A must be Vector3'







    self._ptr.call_with_return(196,tuple([joint._ptr, local_A._ptr]))

  @functools.native_method
  def pin_joint_get_local_a(self, joint:'RID'   ) -> typing.Union['Vector3']:
    r'''
				Returns position of the joint in the local space of body a of the joint.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(197,tuple([joint._ptr]))
    return _ret


  @functools.native_method
  def pin_joint_set_local_b(self, joint:'RID'   , local_B:'Vector3'   ) -> None:
    r'''
				Sets position of the joint in the local space of body b of the joint.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not local_B is None)
    assert isinstance(local_B, Vector3), 'local_B must be Vector3'







    self._ptr.call_with_return(198,tuple([joint._ptr, local_B._ptr]))

  @functools.native_method
  def pin_joint_get_local_b(self, joint:'RID'   ) -> typing.Union['Vector3']:
    r'''
				Returns position of the joint in the local space of body b of the joint.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(199,tuple([joint._ptr]))
    return _ret


  @functools.native_method
  def joint_make_hinge(self, joint:'RID'   , body_A:'RID'   , hinge_A:'Transform3D'   , body_B:'RID'   , hinge_B:'Transform3D'   ) -> None:
    r'''
'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not body_A is None)
    assert isinstance(body_A, RID), 'body_A must be RID'
    assert(not hinge_A is None)
    assert isinstance(hinge_A, Transform3D), 'hinge_A must be Transform3D'
    assert(not body_B is None)
    assert isinstance(body_B, RID), 'body_B must be RID'
    assert(not hinge_B is None)
    assert isinstance(hinge_B, Transform3D), 'hinge_B must be Transform3D'










    self._ptr.call_with_return(200,tuple([joint._ptr, body_A._ptr, hinge_A._ptr, body_B._ptr, hinge_B._ptr]))

  @functools.native_method
  def hinge_joint_set_param(self, joint:'RID'   , param:'int'  , value:'float'   ) -> None:
    r'''
				Sets a hinge joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'








    self._ptr.call_with_return(201,tuple([joint._ptr, param, value]))

  @functools.native_method
  def hinge_joint_get_param(self, joint:'RID'   , param:'int'  ) -> typing.Union[float]:
    r'''
				Gets a hinge joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(202,tuple([joint._ptr, param]))
    return _ret


  @functools.native_method
  def hinge_joint_set_flag(self, joint:'RID'   , flag:'int'  , enabled:'bool'   ) -> None:
    r'''
				Sets a hinge joint flag.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(flag, (int, float)), 'flag must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'








    self._ptr.call_with_return(203,tuple([joint._ptr, flag, enabled]))

  @functools.native_method
  def hinge_joint_get_flag(self, joint:'RID'   , flag:'int'  ) -> typing.Union[bool]:
    r'''
				Gets a hinge joint flag.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(flag, (int, float)), 'flag must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(204,tuple([joint._ptr, flag]))
    return _ret


  @functools.native_method
  def joint_make_slider(self, joint:'RID'   , body_A:'RID'   , local_ref_A:'Transform3D'   , body_B:'RID'   , local_ref_B:'Transform3D'   ) -> None:
    r'''
'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not body_A is None)
    assert isinstance(body_A, RID), 'body_A must be RID'
    assert(not local_ref_A is None)
    assert isinstance(local_ref_A, Transform3D), 'local_ref_A must be Transform3D'
    assert(not body_B is None)
    assert isinstance(body_B, RID), 'body_B must be RID'
    assert(not local_ref_B is None)
    assert isinstance(local_ref_B, Transform3D), 'local_ref_B must be Transform3D'










    self._ptr.call_with_return(205,tuple([joint._ptr, body_A._ptr, local_ref_A._ptr, body_B._ptr, local_ref_B._ptr]))

  @functools.native_method
  def slider_joint_set_param(self, joint:'RID'   , param:'int'  , value:'float'   ) -> None:
    r'''
				Gets a slider joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'








    self._ptr.call_with_return(206,tuple([joint._ptr, param, value]))

  @functools.native_method
  def slider_joint_get_param(self, joint:'RID'   , param:'int'  ) -> typing.Union[float]:
    r'''
				Gets a slider joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(207,tuple([joint._ptr, param]))
    return _ret


  @functools.native_method
  def joint_make_cone_twist(self, joint:'RID'   , body_A:'RID'   , local_ref_A:'Transform3D'   , body_B:'RID'   , local_ref_B:'Transform3D'   ) -> None:
    r'''
'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not body_A is None)
    assert isinstance(body_A, RID), 'body_A must be RID'
    assert(not local_ref_A is None)
    assert isinstance(local_ref_A, Transform3D), 'local_ref_A must be Transform3D'
    assert(not body_B is None)
    assert isinstance(body_B, RID), 'body_B must be RID'
    assert(not local_ref_B is None)
    assert isinstance(local_ref_B, Transform3D), 'local_ref_B must be Transform3D'










    self._ptr.call_with_return(208,tuple([joint._ptr, body_A._ptr, local_ref_A._ptr, body_B._ptr, local_ref_B._ptr]))

  @functools.native_method
  def cone_twist_joint_set_param(self, joint:'RID'   , param:'int'  , value:'float'   ) -> None:
    r'''
				Sets a cone twist joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'








    self._ptr.call_with_return(209,tuple([joint._ptr, param, value]))

  @functools.native_method
  def cone_twist_joint_get_param(self, joint:'RID'   , param:'int'  ) -> typing.Union[float]:
    r'''
				Gets a cone twist joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(210,tuple([joint._ptr, param]))
    return _ret


  @functools.native_method
  def joint_get_type(self, joint:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the type of the Joint3D.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'






    _ret:int
    _ret = self._ptr.call_with_return(211,tuple([joint._ptr]))
    return _ret


  @functools.native_method
  def joint_set_solver_priority(self, joint:'RID'   , priority:'int'   ) -> None:
    r'''
				Sets the priority value of the Joint3D.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(priority, (int, float)), 'priority must be int or float'







    self._ptr.call_with_return(212,tuple([joint._ptr, priority]))

  @functools.native_method
  def joint_get_solver_priority(self, joint:'RID'   ) -> typing.Union[int]:
    r'''
				Gets the priority value of the Joint3D.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(213,tuple([joint._ptr]))
    return _ret


  @functools.native_method
  def joint_disable_collisions_between_bodies(self, joint:'RID'   , disable:'bool'   ) -> None:
    r'''
				Sets whether the bodies attached to the `Joint3D` will collide with each other.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(disable, bool), 'disable must be bool'







    self._ptr.call_with_return(214,tuple([joint._ptr, disable]))

  @functools.native_method
  def joint_is_disabled_collisions_between_bodies(self, joint:'RID'   ) -> typing.Union[bool]:
    r'''
				Returns whether the bodies attached to the `Joint3D` will collide with each other.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(215,tuple([joint._ptr]))
    return _ret


  @functools.native_method
  def joint_make_generic_6dof(self, joint:'RID'   , body_A:'RID'   , local_ref_A:'Transform3D'   , body_B:'RID'   , local_ref_B:'Transform3D'   ) -> None:
    r'''
				Make the joint a generic six degrees of freedom (6DOF) joint. Use `generic_6dof_joint_set_flag` and `generic_6dof_joint_set_param` to set the joint's flags and parameters respectively.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not body_A is None)
    assert isinstance(body_A, RID), 'body_A must be RID'
    assert(not local_ref_A is None)
    assert isinstance(local_ref_A, Transform3D), 'local_ref_A must be Transform3D'
    assert(not body_B is None)
    assert isinstance(body_B, RID), 'body_B must be RID'
    assert(not local_ref_B is None)
    assert isinstance(local_ref_B, Transform3D), 'local_ref_B must be Transform3D'










    self._ptr.call_with_return(216,tuple([joint._ptr, body_A._ptr, local_ref_A._ptr, body_B._ptr, local_ref_B._ptr]))

  @functools.native_method
  def generic_6dof_joint_set_param(self, joint:'RID'   , axis:'int'  , param:'int'  , value:'float'   ) -> None:
    r'''
				Sets the value of a given generic 6DOF joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(axis, (int, float)), 'axis must be int or float'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'









    self._ptr.call_with_return(217,tuple([joint._ptr, axis, param, value]))

  @functools.native_method
  def generic_6dof_joint_get_param(self, joint:'RID'   , axis:'int'  , param:'int'  ) -> typing.Union[float]:
    r'''
				Returns the value of a generic 6DOF joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(axis, (int, float)), 'axis must be int or float'
    assert isinstance(param, (int, float)), 'param must be int or float'








    _ret = 0
    _ret = self._ptr.call_with_return(218,tuple([joint._ptr, axis, param]))
    return _ret


  @functools.native_method
  def generic_6dof_joint_set_flag(self, joint:'RID'   , axis:'int'  , flag:'int'  , enable:'bool'   ) -> None:
    r'''
				Sets the value of a given generic 6DOF joint flag.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(axis, (int, float)), 'axis must be int or float'
    assert isinstance(flag, (int, float)), 'flag must be int or float'
    assert isinstance(enable, bool), 'enable must be bool'









    self._ptr.call_with_return(219,tuple([joint._ptr, axis, flag, enable]))

  @functools.native_method
  def generic_6dof_joint_get_flag(self, joint:'RID'   , axis:'int'  , flag:'int'  ) -> typing.Union[bool]:
    r'''
				Returns the value of a generic 6DOF joint flag.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(axis, (int, float)), 'axis must be int or float'
    assert isinstance(flag, (int, float)), 'flag must be int or float'








    _ret = 0
    _ret = self._ptr.call_with_return(220,tuple([joint._ptr, axis, flag]))
    return _ret


  @functools.native_method
  def free_rid(self, rid:'RID'   ) -> None:
    r'''
				Destroys any of the objects created by PhysicsServer3D. If the `RID` passed is not one of the objects that can be created by PhysicsServer3D, an error will be sent to the console.
			'''

    assert(not rid is None)
    assert isinstance(rid, RID), 'rid must be RID'






    self._ptr.call_with_return(221,tuple([rid._ptr]))

  @functools.native_method
  def set_active(self, active:'bool'   ) -> None:
    r'''
				Activates or deactivates the 3D physics engine.
			'''

    assert isinstance(active, bool), 'active must be bool'






    self._ptr.call_with_return(222,tuple([active]))

  @functools.native_method
  def get_process_info(self, process_info:'int'  ) -> typing.Union[int]:
    r'''
				Returns the value of a physics engine state specified by `process_info`.
			'''

    assert isinstance(process_info, (int, float)), 'process_info must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(223,tuple([process_info]))
    return _ret



register_cast_function('PhysicsServer3D', PhysicsServer3D.cast)
register_class('PhysicsServer3D', PhysicsServer3D)
