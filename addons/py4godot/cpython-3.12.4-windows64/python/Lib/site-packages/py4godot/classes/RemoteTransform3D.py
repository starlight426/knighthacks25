# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPRemoteTransform3DWrapper


class RemoteTransform3D(py4godot_node3d.Node3D):
  r'''
		RemoteTransform3D pushes its own `Transform3D` to another `Node3D` derived Node (called the remote node) in the scene.
		It can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates.
	'''

  @staticmethod
  def constructor():
    class_ = RemoteTransform3D.construct_without_init()
    class_._ptr = constructor(672,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RemoteTransform3D.construct_without_init()
    class_._ptr = constructor(672,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRemoteTransform3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(672,0, ())


  def generate_wrapper(self):
    return CPPRemoteTransform3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RemoteTransform3D.__new__(RemoteTransform3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RemoteTransform3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RemoteTransform3D.construct_without_init()
    cls._ptr = CPPRemoteTransform3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RemoteTransform3D.construct_without_init()
    cls._ptr = CPPRemoteTransform3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def remote_path(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_remote_node()
    return _ret
  @remote_path.setter
  def remote_path(self,  value:'object'):
    self.set_remote_node(value)
  @property
  def use_global_coordinates(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_use_global_coordinates()
    return _ret
  @use_global_coordinates.setter
  def use_global_coordinates(self,  value:'bool'):
    self.set_use_global_coordinates(value)
  @property
  def update_position(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_update_position()
    return _ret
  @update_position.setter
  def update_position(self,  value:'bool'):
    self.set_update_position(value)
  @property
  def update_rotation(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_update_rotation()
    return _ret
  @update_rotation.setter
  def update_rotation(self,  value:'bool'):
    self.set_update_rotation(value)
  @property
  def update_scale(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_update_scale()
    return _ret
  @update_scale.setter
  def update_scale(self,  value:'bool'):
    self.set_update_scale(value)
  @functools.native_method
  def set_remote_node(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__remote_path = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(251,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_remote_node(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(252,tuple([]))

    return _ret


  @functools.native_method
  def force_update_cache(self) -> None:
    r'''
				`RemoteTransform3D` caches the remote node. It may not notice if the remote node disappears; `force_update_cache` forces it to update the cache again.
			'''




    self._ptr.call_with_return(253,tuple([]))

  @functools.native_method
  def set_use_global_coordinates(self, use_global_coordinates:'bool'   ) -> None:
    r''''''

    assert isinstance(use_global_coordinates, bool), 'use_global_coordinates must be bool'

    self.py__use_global_coordinates = use_global_coordinates






    self._ptr.call_with_return(254,tuple([use_global_coordinates]))

  @functools.native_method
  def get_use_global_coordinates(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(255,tuple([]))

    return _ret


  @functools.native_method
  def set_update_position(self, update_remote_position:'bool'   ) -> None:
    r''''''

    assert isinstance(update_remote_position, bool), 'update_remote_position must be bool'

    self.py__update_position = update_remote_position






    self._ptr.call_with_return(256,tuple([update_remote_position]))

  @functools.native_method
  def get_update_position(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(257,tuple([]))

    return _ret


  @functools.native_method
  def set_update_rotation(self, update_remote_rotation:'bool'   ) -> None:
    r''''''

    assert isinstance(update_remote_rotation, bool), 'update_remote_rotation must be bool'

    self.py__update_rotation = update_remote_rotation






    self._ptr.call_with_return(258,tuple([update_remote_rotation]))

  @functools.native_method
  def get_update_rotation(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(259,tuple([]))

    return _ret


  @functools.native_method
  def set_update_scale(self, update_remote_scale:'bool'   ) -> None:
    r''''''

    assert isinstance(update_remote_scale, bool), 'update_remote_scale must be bool'

    self.py__update_scale = update_remote_scale






    self._ptr.call_with_return(260,tuple([update_remote_scale]))

  @functools.native_method
  def get_update_scale(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(261,tuple([]))

    return _ret



register_cast_function('RemoteTransform3D', RemoteTransform3D.cast)
register_class('RemoteTransform3D', RemoteTransform3D)
