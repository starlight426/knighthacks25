# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AudioServer as py4godot_audioserver 
  import py4godot.classes.AudioStream as py4godot_audiostream 
import py4godot.classes.AudioStreamPlayback as py4godot_audiostreamplayback 
from py4godot.wrappers.wrappers import CPPAudioStreamPlaybackPolyphonicWrapper


class AudioStreamPlaybackPolyphonic(py4godot_audiostreamplayback.AudioStreamPlayback):
  r'''
		Playback instance for `AudioStreamPolyphonic`. After setting the `stream` property of `AudioStreamPlayer`, `AudioStreamPlayer2D`, or `AudioStreamPlayer3D`, the playback instance can be obtained by calling `AudioStreamPlayer.get_stream_playback`, `AudioStreamPlayer2D.get_stream_playback` or `AudioStreamPlayer3D.get_stream_playback` methods.
	'''
  INVALID_ID:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = AudioStreamPlaybackPolyphonic.construct_without_init()
    class_._ptr = constructor(151,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamPlaybackPolyphonic.construct_without_init()
    class_._ptr = constructor(151,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamPlaybackPolyphonicWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(151,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamPlaybackPolyphonicWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamPlaybackPolyphonic.__new__(AudioStreamPlaybackPolyphonic)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamPlaybackPolyphonic'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamPlaybackPolyphonic.construct_without_init()
    cls._ptr = CPPAudioStreamPlaybackPolyphonicWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamPlaybackPolyphonic.construct_without_init()
    cls._ptr = CPPAudioStreamPlaybackPolyphonicWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def play_stream(self, stream:'py4godot_audiostream.AudioStream'   , from_offset:'float' =0  , volume_db:'float' =0  , pitch_scale:'float' =1.0  , playback_type:'int'  =0, bus:'object' = None  ) -> typing.Union[int]:
    r'''
				Play an `AudioStream` at a given offset, volume, pitch scale, playback type, and bus. Playback starts immediately.
				The return value is a unique integer ID that is associated to this playback stream and which can be used to control it.
				This ID becomes invalid when the stream ends (if it does not loop), when the `AudioStreamPlaybackPolyphonic` is stopped, or when `stop_stream` is called.
				This function returns `constant INVALID_ID` if the amount of streams currently playing equals `AudioStreamPolyphonic.polyphony`. If you need a higher amount of maximum polyphony, raise this value.
			'''

    if bus is None:
      bus = StringName.new0()

    if bus is None:
      bus = StringName.new0()

    assert(not stream is None)
    assert isinstance(stream, get_class('AudioStream')), 'stream must be AudioStream'
    assert isinstance(from_offset, (int, float)), 'from_offset must be int or float'
    assert isinstance(volume_db, (int, float)), 'volume_db must be int or float'
    assert isinstance(pitch_scale, (int, float)), 'pitch_scale must be int or float'
    assert isinstance(playback_type, (int, float)), 'playback_type must be int or float'









    assert(isinstance(bus, (str, StringName)))
    py_stringname_bus = bus if isinstance(bus, StringName) else c_utils.py_string_to_string_name(bus)

    _ret = 0
    _ret = self._ptr.call_with_return(71,tuple([stream._ptr, from_offset, volume_db, pitch_scale, playback_type, py_stringname_bus._ptr]))
    return _ret


  @functools.native_method
  def set_stream_volume(self, stream:'int'   , volume_db:'float'   ) -> None:
    r'''
				Change the stream volume (in db). The `stream` argument is an integer ID returned by `play_stream`.
			'''

    assert isinstance(stream, (int, float)), 'stream must be int or float'
    assert isinstance(volume_db, (int, float)), 'volume_db must be int or float'







    self._ptr.call_with_return(72,tuple([stream, volume_db]))

  @functools.native_method
  def set_stream_pitch_scale(self, stream:'int'   , pitch_scale:'float'   ) -> None:
    r'''
				Change the stream pitch scale. The `stream` argument is an integer ID returned by `play_stream`.
			'''

    assert isinstance(stream, (int, float)), 'stream must be int or float'
    assert isinstance(pitch_scale, (int, float)), 'pitch_scale must be int or float'







    self._ptr.call_with_return(73,tuple([stream, pitch_scale]))

  @functools.native_method
  def is_stream_playing(self, stream:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the stream associated with the given integer ID is still playing. Check `play_stream` for information on when this ID becomes invalid.
			'''

    assert isinstance(stream, (int, float)), 'stream must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(74,tuple([stream]))
    return _ret


  @functools.native_method
  def stop_stream(self, stream:'int'   ) -> None:
    r'''
				Stop a stream. The `stream` argument is an integer ID returned by `play_stream`, which becomes invalid after calling this function.
			'''

    assert isinstance(stream, (int, float)), 'stream must be int or float'






    self._ptr.call_with_return(75,tuple([stream]))


register_cast_function('AudioStreamPlaybackPolyphonic', AudioStreamPlaybackPolyphonic.cast)
register_class('AudioStreamPlaybackPolyphonic', AudioStreamPlaybackPolyphonic)
