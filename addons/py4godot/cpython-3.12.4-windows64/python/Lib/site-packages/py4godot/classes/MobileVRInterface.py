# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.XRInterface as py4godot_xrinterface 
from py4godot.wrappers.wrappers import CPPMobileVRInterfaceWrapper


class MobileVRInterface(py4godot_xrinterface.XRInterface):
  r''''''

  @staticmethod
  def constructor():
    class_ = MobileVRInterface.construct_without_init()
    class_._ptr = constructor(480,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MobileVRInterface.construct_without_init()
    class_._ptr = constructor(480,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMobileVRInterfaceWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(480,0, ())


  def generate_wrapper(self):
    return CPPMobileVRInterfaceWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = MobileVRInterface.__new__(MobileVRInterface)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MobileVRInterface'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MobileVRInterface.construct_without_init()
    cls._ptr = CPPMobileVRInterfaceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MobileVRInterface.construct_without_init()
    cls._ptr = CPPMobileVRInterfaceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def eye_height(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_eye_height()
    return _ret
  @eye_height.setter
  def eye_height(self,  value:'float'):
    self.set_eye_height(value)
  @property
  def iod(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_iod()
    return _ret
  @iod.setter
  def iod(self,  value:'float'):
    self.set_iod(value)
  @property
  def display_width(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_display_width()
    return _ret
  @display_width.setter
  def display_width(self,  value:'float'):
    self.set_display_width(value)
  @property
  def display_to_lens(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_display_to_lens()
    return _ret
  @display_to_lens.setter
  def display_to_lens(self,  value:'float'):
    self.set_display_to_lens(value)
  @property
  def offset_rect(self) -> typing.Union['Rect2']:
    r''''''
    _ret = self. get_offset_rect()
    return _ret
  @offset_rect.setter
  def offset_rect(self,  value:'Rect2'):
    self.set_offset_rect(value)
  @property
  def oversample(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_oversample()
    return _ret
  @oversample.setter
  def oversample(self,  value:'float'):
    self.set_oversample(value)
  @property
  def k1(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_k1()
    return _ret
  @k1.setter
  def k1(self,  value:'float'):
    self.set_k1(value)
  @property
  def k2(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_k2()
    return _ret
  @k2.setter
  def k2(self,  value:'float'):
    self.set_k2(value)
  @property
  def vrs_min_radius(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_vrs_min_radius()
    return _ret
  @vrs_min_radius.setter
  def vrs_min_radius(self,  value:'float'):
    self.set_vrs_min_radius(value)
  @property
  def vrs_strength(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_vrs_strength()
    return _ret
  @vrs_strength.setter
  def vrs_strength(self,  value:'float'):
    self.set_vrs_strength(value)
  @functools.native_method
  def set_eye_height(self, eye_height:'float'   ) -> None:
    r''''''

    assert isinstance(eye_height, (int, float)), 'eye_height must be int or float'

    self.py__eye_height = eye_height






    self._ptr.call_with_return(81,tuple([eye_height]))

  @functools.native_method
  def get_eye_height(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_iod(self, iod:'float'   ) -> None:
    r''''''

    assert isinstance(iod, (int, float)), 'iod must be int or float'

    self.py__iod = iod






    self._ptr.call_with_return(83,tuple([iod]))

  @functools.native_method
  def get_iod(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_display_width(self, display_width:'float'   ) -> None:
    r''''''

    assert isinstance(display_width, (int, float)), 'display_width must be int or float'

    self.py__display_width = display_width






    self._ptr.call_with_return(85,tuple([display_width]))

  @functools.native_method
  def get_display_width(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_display_to_lens(self, display_to_lens:'float'   ) -> None:
    r''''''

    assert isinstance(display_to_lens, (int, float)), 'display_to_lens must be int or float'

    self.py__display_to_lens = display_to_lens






    self._ptr.call_with_return(87,tuple([display_to_lens]))

  @functools.native_method
  def get_display_to_lens(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_offset_rect(self, offset_rect:'Rect2'   ) -> None:
    r''''''

    assert(not offset_rect is None)
    assert isinstance(offset_rect, Rect2), 'offset_rect must be Rect2'

    self.py__offset_rect = offset_rect






    self._ptr.call_with_return(89,tuple([offset_rect._ptr]))

  @functools.native_method
  def get_offset_rect(self) -> typing.Union['Rect2']:
    r''''''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_oversample(self, oversample:'float'   ) -> None:
    r''''''

    assert isinstance(oversample, (int, float)), 'oversample must be int or float'

    self.py__oversample = oversample






    self._ptr.call_with_return(91,tuple([oversample]))

  @functools.native_method
  def get_oversample(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))

    return _ret


  @functools.native_method
  def set_k1(self, k:'float'   ) -> None:
    r''''''

    assert isinstance(k, (int, float)), 'k must be int or float'

    self.py__k1 = k






    self._ptr.call_with_return(93,tuple([k]))

  @functools.native_method
  def get_k1(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_k2(self, k:'float'   ) -> None:
    r''''''

    assert isinstance(k, (int, float)), 'k must be int or float'

    self.py__k2 = k






    self._ptr.call_with_return(95,tuple([k]))

  @functools.native_method
  def get_k2(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def get_vrs_min_radius(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_vrs_min_radius(self, radius:'float'   ) -> None:
    r''''''

    assert isinstance(radius, (int, float)), 'radius must be int or float'

    self.py__vrs_min_radius = radius






    self._ptr.call_with_return(98,tuple([radius]))

  @functools.native_method
  def get_vrs_strength(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_vrs_strength(self, strength:'float'   ) -> None:
    r''''''

    assert isinstance(strength, (int, float)), 'strength must be int or float'

    self.py__vrs_strength = strength






    self._ptr.call_with_return(100,tuple([strength]))


register_cast_function('MobileVRInterface', MobileVRInterface.cast)
register_class('MobileVRInterface', MobileVRInterface)
