# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Container as py4godot_container 
from py4godot.wrappers.wrappers import CPPCenterContainerWrapper


class CenterContainer(py4godot_container.Container):
  r'''
		`CenterContainer` is a container that keeps all of its child controls in its center at their minimum size.
	'''

  @staticmethod
  def constructor():
    class_ = CenterContainer.construct_without_init()
    class_._ptr = constructor(205,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CenterContainer.construct_without_init()
    class_._ptr = constructor(205,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCenterContainerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(205,0, ())


  def generate_wrapper(self):
    return CPPCenterContainerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CenterContainer.__new__(CenterContainer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CenterContainer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CenterContainer.construct_without_init()
    cls._ptr = CPPCenterContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CenterContainer.construct_without_init()
    cls._ptr = CPPCenterContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def use_top_left(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_top_left()
    return _ret
  @use_top_left.setter
  def use_top_left(self,  value:'bool'):
    self.set_use_top_left(value)
  @functools.native_method
  def set_use_top_left(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__use_top_left = enable






    self._ptr.call_with_return(437,tuple([enable]))

  @functools.native_method
  def is_using_top_left(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(438,tuple([]))

    return _ret



register_cast_function('CenterContainer', CenterContainer.cast)
register_class('CenterContainer', CenterContainer)
