# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPOpenXRRenderModelManagerWrapper

class RenderModelTracker:
  RENDER_MODEL_TRACKER_ANY = 0
  RENDER_MODEL_TRACKER_NONE_SET = 1
  RENDER_MODEL_TRACKER_LEFT_HAND = 2
  RENDER_MODEL_TRACKER_RIGHT_HAND = 3


class OpenXRRenderModelManager(py4godot_node3d.Node3D):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRRenderModelManager.construct_without_init()
    class_._ptr = constructor(560,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRRenderModelManager.construct_without_init()
    class_._ptr = constructor(560,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRRenderModelManagerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(560,0, ())


  def generate_wrapper(self):
    return CPPOpenXRRenderModelManagerWrapper()
  def init_signals(self):
    super().init_signals()
    render_model_added_name = utils.py_string_to_string_name("render_model_added")
    self.render_model_added = signals.BuiltinSignal(self, render_model_added_name)
    render_model_removed_name = utils.py_string_to_string_name("render_model_removed")
    self.render_model_removed = signals.BuiltinSignal(self, render_model_removed_name)

  @staticmethod
  def construct_without_init():
    cls = OpenXRRenderModelManager.__new__(OpenXRRenderModelManager)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRRenderModelManager'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRRenderModelManager.construct_without_init()
    cls._ptr = CPPOpenXRRenderModelManagerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRRenderModelManager.construct_without_init()
    cls._ptr = CPPOpenXRRenderModelManagerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def tracker(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_tracker()
    return _ret
  @tracker.setter
  def tracker(self,  value:'int'):
    self.set_tracker(value)
  @property
  def make_local_to_pose(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_make_local_to_pose()
    return _ret
  @make_local_to_pose.setter
  def make_local_to_pose(self,  value:'str'):
    self.set_make_local_to_pose(value)
  @functools.native_method
  def get_tracker(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(251,tuple([]))

    return _ret


  @functools.native_method
  def set_tracker(self, tracker:'int'  ) -> None:
    r''''''

    assert isinstance(tracker, (int, float)), 'tracker must be int or float'

    self.py__tracker = tracker






    self._ptr.call_with_return(252,tuple([tracker]))

  @functools.native_method
  def get_make_local_to_pose(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(253,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_make_local_to_pose(self, make_local_to_pose:'str'   ) -> None:
    r''''''

    assert(not make_local_to_pose is None)
    assert isinstance(make_local_to_pose, (str, String)), 'make_local_to_pose must be str or String'

    self.py__make_local_to_pose = make_local_to_pose



    assert(isinstance(make_local_to_pose, (str, String)))
    py_string_make_local_to_pose = make_local_to_pose if isinstance(make_local_to_pose, StringName) else c_utils.py_string_to_string(make_local_to_pose)

    py__string_make_local_to_pose = utils.py_string_to_string(make_local_to_pose)
    py__string_make_local_to_pose.shouldBeDeleted = False


    self._ptr.call_with_return(254,tuple([py__string_make_local_to_pose._ptr]))


register_cast_function('OpenXRRenderModelManager', OpenXRRenderModelManager.cast)
register_class('OpenXRRenderModelManager', OpenXRRenderModelManager)
