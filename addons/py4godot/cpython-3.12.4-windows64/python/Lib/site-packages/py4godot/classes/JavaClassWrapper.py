# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.JavaClass as py4godot_javaclass 
  import py4godot.classes.JavaObject as py4godot_javaobject 
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPJavaClassWrapperWrapper

_JavaClassWrapper_singleton_instance = None

class JavaClassWrapper(py4godot_object.Object):
  r'''
		The JavaClassWrapper singleton provides a way for the Godot application to send and receive data through the `url=https://developer.android.com/training/articles/perf-jni`Java Native Interface`/url` (JNI).
		**Note:** This singleton is only available in Android builds.
		```gdscript
		var LocalDateTime = JavaClassWrapper.wrap("java.time.LocalDateTime")
		var DateTimeFormatter = JavaClassWrapper.wrap("java.time.format.DateTimeFormatter")

		var datetime = LocalDateTime.now()
		var formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss")

		print(datetime.format(formatter))
		```
		**Warning:** When calling Java methods, be sure to check `JavaClassWrapper.get_exception` to check if the method threw an exception.
	'''


  def generate_wrapper(self):
    return CPPJavaClassWrapperWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = JavaClassWrapper.__new__(JavaClassWrapper)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'JavaClassWrapper'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = JavaClassWrapper.construct_without_init()
    cls._ptr = CPPJavaClassWrapperWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = JavaClassWrapper.construct_without_init()
    cls._ptr = CPPJavaClassWrapperWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _JavaClassWrapper_singleton_instance
    if _JavaClassWrapper_singleton_instance is None:
      singleton = JavaClassWrapper()
      singleton._ptr = constructor(438,0, ())
      _JavaClassWrapper_singleton_instance = singleton
    return _JavaClassWrapper_singleton_instance

  @functools.native_method
  def wrap(self, name:'str'   ) -> typing.Union['py4godot_javaclass.JavaClass']:
    r'''
				Wraps a class defined in Java, and returns it as a `JavaClass` `Object` type that Godot can interact with.
				When wrapping inner (nested) classes, use `$` instead of `.` to separate them. For example, `JavaClassWrapper.wrap("android.view.WindowManager$LayoutParams")` wraps the **WindowManager.LayoutParams** class.
				**Note:** To invoke a constructor, call a method with the same name as the class. For example:
				```gdscript
				var Intent = JavaClassWrapper.wrap("android.content.Intent")
				var intent = Intent.Intent()
				```
				**Note:** This method only works on Android. On every other platform, this method does nothing and returns an empty `JavaClass`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: JavaClass
    _ret._ptr = self._ptr.call_with_return(49,tuple([py_string_name._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_exception(self) -> typing.Union['py4godot_javaobject.JavaObject']:
    r'''
				Returns the Java exception from the last call into a Java class. If there was no exception, it will return `null`.
				**Note:** This method only works on Android. On every other platform, this method will always return `null`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: JavaObject
    _ret._ptr = self._ptr.call_with_return(50,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('JavaClassWrapper', JavaClassWrapper.cast)
register_class('JavaClassWrapper', JavaClassWrapper)
