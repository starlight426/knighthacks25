# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFTextureWrapper


class GLTFTexture(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFTexture.construct_without_init()
    class_._ptr = constructor(362,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFTexture.construct_without_init()
    class_._ptr = constructor(362,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(362,0, ())


  def generate_wrapper(self):
    return CPPGLTFTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFTexture.__new__(GLTFTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFTexture.construct_without_init()
    cls._ptr = CPPGLTFTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFTexture.construct_without_init()
    cls._ptr = CPPGLTFTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def src_image(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_src_image()
    return _ret
  @src_image.setter
  def src_image(self,  value:'int'):
    self.set_src_image(value)
  @property
  def sampler(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sampler()
    return _ret
  @sampler.setter
  def sampler(self,  value:'int'):
    self.set_sampler(value)
  @functools.native_method
  def get_src_image(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([]))

    return _ret


  @functools.native_method
  def set_src_image(self, src_image:'int'   ) -> None:
    r''''''

    assert isinstance(src_image, (int, float)), 'src_image must be int or float'

    self.py__src_image = src_image






    self._ptr.call_with_return(78,tuple([src_image]))

  @functools.native_method
  def get_sampler(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_sampler(self, sampler:'int'   ) -> None:
    r''''''

    assert isinstance(sampler, (int, float)), 'sampler must be int or float'

    self.py__sampler = sampler






    self._ptr.call_with_return(80,tuple([sampler]))


register_cast_function('GLTFTexture', GLTFTexture.cast)
register_class('GLTFTexture', GLTFTexture)
