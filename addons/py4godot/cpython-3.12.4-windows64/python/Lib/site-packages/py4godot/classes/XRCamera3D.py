# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Camera3D as py4godot_camera3d 
from py4godot.wrappers.wrappers import CPPXRCamera3DWrapper


class XRCamera3D(py4godot_camera3d.Camera3D):
  r'''
		This is a helper 3D node for our camera. Note that, if stereoscopic rendering is applicable (VR-HMD), most of the camera properties are ignored, as the HMD information overrides them. The only properties that can be trusted are the near and far planes.
		The position and orientation of this node is automatically updated by the XR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that, in contrast to the XR Controller, the render thread has access to the most up-to-date tracking data of the HMD and the location of the XRCamera3D can lag a few milliseconds behind what is used for rendering as a result.
	'''

  @staticmethod
  def constructor():
    class_ = XRCamera3D.construct_without_init()
    class_._ptr = constructor(1014,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRCamera3D.construct_without_init()
    class_._ptr = constructor(1014,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRCamera3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1014,0, ())


  def generate_wrapper(self):
    return CPPXRCamera3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XRCamera3D.__new__(XRCamera3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRCamera3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRCamera3D.construct_without_init()
    cls._ptr = CPPXRCamera3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRCamera3D.construct_without_init()
    cls._ptr = CPPXRCamera3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('XRCamera3D', XRCamera3D.cast)
register_class('XRCamera3D', XRCamera3D)
