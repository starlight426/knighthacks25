# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPCanvasModulateWrapper


class CanvasModulate(py4godot_node2d.Node2D):
  r'''
		`CanvasModulate` applies a color tint to all nodes on a canvas. Only one can be used to tint a canvas, but `CanvasLayer`s can be used to render things independently.
	'''

  @staticmethod
  def constructor():
    class_ = CanvasModulate.construct_without_init()
    class_._ptr = constructor(200,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CanvasModulate.construct_without_init()
    class_._ptr = constructor(200,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCanvasModulateWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(200,0, ())


  def generate_wrapper(self):
    return CPPCanvasModulateWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CanvasModulate.__new__(CanvasModulate)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CanvasModulate'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CanvasModulate.construct_without_init()
    cls._ptr = CPPCanvasModulateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CanvasModulate.construct_without_init()
    cls._ptr = CPPCanvasModulateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_color()
    return _ret
  @color.setter
  def color(self,  value:'Color'):
    self.set_color(value)
  @functools.native_method
  def set_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__color = color






    self._ptr.call_with_return(303,tuple([color._ptr]))

  @functools.native_method
  def get_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return _ret



register_cast_function('CanvasModulate', CanvasModulate.cast)
register_class('CanvasModulate', CanvasModulate)
