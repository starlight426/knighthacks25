# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPSkinWrapper


class Skin(py4godot_resource.Resource):
  r'''
'''

  @staticmethod
  def constructor():
    class_ = Skin.construct_without_init()
    class_._ptr = constructor(761,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Skin.construct_without_init()
    class_._ptr = constructor(761,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkinWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(761,0, ())


  def generate_wrapper(self):
    return CPPSkinWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Skin.__new__(Skin)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Skin'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Skin.construct_without_init()
    cls._ptr = CPPSkinWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Skin.construct_without_init()
    cls._ptr = CPPSkinWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_bind_count(self, bind_count:'int'   ) -> None:
    r'''
'''

    assert isinstance(bind_count, (int, float)), 'bind_count must be int or float'






    self._ptr.call_with_return(77,tuple([bind_count]))

  @functools.native_method
  def get_bind_count(self) -> typing.Union[int]:
    r'''
'''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))
    return _ret


  @functools.native_method
  def add_bind(self, bone:'int'   , pose:'Transform3D'   ) -> None:
    r'''
'''

    assert isinstance(bone, (int, float)), 'bone must be int or float'
    assert(not pose is None)
    assert isinstance(pose, Transform3D), 'pose must be Transform3D'







    self._ptr.call_with_return(79,tuple([bone, pose._ptr]))

  @functools.native_method
  def add_named_bind(self, name:'str'   , pose:'Transform3D'   ) -> None:
    r'''
'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert(not pose is None)
    assert isinstance(pose, Transform3D), 'pose must be Transform3D'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)


    self._ptr.call_with_return(80,tuple([py_string_name._ptr, pose._ptr]))

  @functools.native_method
  def set_bind_pose(self, bind_index:'int'   , pose:'Transform3D'   ) -> None:
    r'''
'''

    assert isinstance(bind_index, (int, float)), 'bind_index must be int or float'
    assert(not pose is None)
    assert isinstance(pose, Transform3D), 'pose must be Transform3D'







    self._ptr.call_with_return(81,tuple([bind_index, pose._ptr]))

  @functools.native_method
  def get_bind_pose(self, bind_index:'int'   ) -> typing.Union['Transform3D']:
    r'''
'''

    assert isinstance(bind_index, (int, float)), 'bind_index must be int or float'






    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([bind_index]))
    return _ret


  @functools.native_method
  def set_bind_name(self, bind_index:'int'   , name:'object'   ) -> None:
    r'''
'''

    assert isinstance(bind_index, (int, float)), 'bind_index must be int or float'
    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'





    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    self._ptr.call_with_return(83,tuple([bind_index, py_stringname_name._ptr]))

  @functools.native_method
  def get_bind_name(self, bind_index:'int'   ) -> typing.Union['StringName']:
    r'''
'''

    assert isinstance(bind_index, (int, float)), 'bind_index must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([bind_index]))
    return _ret


  @functools.native_method
  def set_bind_bone(self, bind_index:'int'   , bone:'int'   ) -> None:
    r'''
'''

    assert isinstance(bind_index, (int, float)), 'bind_index must be int or float'
    assert isinstance(bone, (int, float)), 'bone must be int or float'







    self._ptr.call_with_return(85,tuple([bind_index, bone]))

  @functools.native_method
  def get_bind_bone(self, bind_index:'int'   ) -> typing.Union[int]:
    r'''
'''

    assert isinstance(bind_index, (int, float)), 'bind_index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([bind_index]))
    return _ret


  @functools.native_method
  def clear_binds(self) -> None:
    r'''
'''




    self._ptr.call_with_return(87,tuple([]))


register_cast_function('Skin', Skin.cast)
register_class('Skin', Skin)
