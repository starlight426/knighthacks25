# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPPackedDataContainerWrapper


class PackedDataContainer(py4godot_resource.Resource):
  r'''
		`PackedDataContainer` can be used to efficiently store data from untyped containers. The data is packed into raw bytes and can be saved to file. Only `Array` and `Dictionary` can be stored this way.
		You can retrieve the data by iterating on the container, which will work as if iterating on the packed data itself. If the packed container is a `Dictionary`, the data can be retrieved by key names (`String`/`StringName` only).
		```gdscript
		var data = { "key": "value", "another_key": 123, "lock": Vector2() }
		var packed = PackedDataContainer.new()
		packed.pack(data)
		ResourceSaver.save(packed, "packed_data.res")
		```
		```gdscript
		var container = load("packed_data.res")
		for key in container:
			prints(key, container`key`)
		```
		Prints:
		`codeblock lang=text`
		key value
		lock (0, 0)
		another_key 123
		```
		Nested containers will be packed recursively. While iterating, they will be returned as `PackedDataContainerRef`.
	'''

  @staticmethod
  def constructor():
    class_ = PackedDataContainer.construct_without_init()
    class_._ptr = constructor(565,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PackedDataContainer.construct_without_init()
    class_._ptr = constructor(565,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPackedDataContainerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(565,0, ())


  def generate_wrapper(self):
    return CPPPackedDataContainerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PackedDataContainer.__new__(PackedDataContainer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PackedDataContainer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PackedDataContainer.construct_without_init()
    cls._ptr = CPPPackedDataContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PackedDataContainer.construct_without_init()
    cls._ptr = CPPPackedDataContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def pack(self, value:'object'   ) -> typing.Union[int]:
    r'''
				Packs the given container into a binary representation. The `value` must be either `Array` or `Dictionary`, any other type will result in invalid data error.
				**Note:** Subsequent calls to this method will overwrite the existing data.
			'''

    






    _ret:int
    _ret = self._ptr.call_with_return(77,tuple([value]))
    return _ret


  @functools.native_method
  def size(self) -> typing.Union[int]:
    r'''
				Returns the size of the packed container (see `Array.size` and `Dictionary.size`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))
    return _ret



register_cast_function('PackedDataContainer', PackedDataContainer.cast)
register_class('PackedDataContainer', PackedDataContainer)
