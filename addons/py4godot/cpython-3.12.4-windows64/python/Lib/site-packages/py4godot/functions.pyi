from py4godot.utils.Wrapper4 import *
from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__
import py4godot.classes.generated4_core as __projection__
import py4godot.classes.generated4_core as __vector2__
import py4godot.classes.generated4_core as __basis__
import py4godot.classes.generated4_core as __packedint64array__
import py4godot.classes.generated4_core as __packedfloat32array__
import py4godot.classes.generated4_core as __packedbytearray__
import py4godot.classes.generated4_core as __packedvector4array__
import py4godot.classes.generated4_core as __aabb__
import py4godot.classes.generated4_core as __string__
import py4godot.classes.generated4_core as __vector2i__
import py4godot.classes.generated4_core as __vector4__
import py4godot.classes.generated4_core as __rid__
import py4godot.classes.generated4_core as __vector4i__
import py4godot.classes.generated4_core as __rect2i__
import py4godot.classes.generated4_core as __transform2d__
import py4godot.classes.generated4_core as __nodepath__
import py4godot.classes.generated4_core as __quaternion__
import py4godot.classes.generated4_core as __packedfloat64array__
import py4godot.classes.generated4_core as __vector3__
import py4godot.classes.generated4_core as __packedstringarray__
import py4godot.classes.generated4_core as __rect2__
import py4godot.classes.generated4_core as __stringname__
import py4godot.classes.generated4_core as __vector3i__
import py4godot.classes.generated4_core as __packedint32array__
import py4godot.classes.generated4_core as __packedvector2array__
import py4godot.classes.generated4_core as __dictionary__
import py4godot.classes.generated4_core as __color__
import py4godot.classes.generated4_core as __plane__
import py4godot.classes.generated4_core as __transform3d__
import py4godot.classes.generated4_core as __signal__
import py4godot.classes.generated4_core as __array__
import py4godot.classes.generated4_core as __packedcolorarray__
import py4godot.classes.generated4_core as __callable__
import py4godot.classes.generated4_core as __packedvector3array__
def sin(angle_rad:float)->float: pass

def cos(angle_rad:float)->float: pass

def tan(angle_rad:float)->float: pass

def sinh(x:float)->float: pass

def cosh(x:float)->float: pass

def tanh(x:float)->float: pass

def asin(x:float)->float: pass

def acos(x:float)->float: pass

def atan(x:float)->float: pass

def atan2(y:float, x:float)->float: pass

def asinh(x:float)->float: pass

def acosh(x:float)->float: pass

def atanh(x:float)->float: pass

def sqrt(x:float)->float: pass

def fmod(x:float, y:float)->float: pass

def fposmod(x:float, y:float)->float: pass

def posmod(x:int, y:int)->int: pass

def floor(x:object)->object: pass

def floorf(x:float)->float: pass

def floori(x:float)->int: pass

def ceil(x:object)->object: pass

def ceilf(x:float)->float: pass

def ceili(x:float)->int: pass

def round(x:object)->object: pass

def roundf(x:float)->float: pass

def roundi(x:float)->int: pass

def abs(x:object)->object: pass

def absf(x:float)->float: pass

def absi(x:int)->int: pass

def sign(x:object)->object: pass

def signf(x:float)->float: pass

def signi(x:int)->int: pass

def snapped(x:object, step:object)->object: pass

def snappedf(x:float, step:float)->float: pass

def snappedi(x:float, step:int)->int: pass

def pow(base:float, exp:float)->float: pass

def log(x:float)->float: pass

def exp(x:float)->float: pass

def is_nan(x:float)->bool: pass

def is_inf(x:float)->bool: pass

def is_equal_approx(a:float, b:float)->bool: pass

def is_zero_approx(x:float)->bool: pass

def is_finite(x:float)->bool: pass

def ease(x:float, curve:float)->float: pass

def step_decimals(x:float)->int: pass

def lerp(from_:object, to:object, weight:object)->object: pass

def lerpf(from_:float, to:float, weight:float)->float: pass

def cubic_interpolate(from_:float, to:float, pre:float, post:float, weight:float)->float: pass

def cubic_interpolate_angle(from_:float, to:float, pre:float, post:float, weight:float)->float: pass

def cubic_interpolate_in_time(from_:float, to:float, pre:float, post:float, weight:float, to_t:float, pre_t:float, post_t:float)->float: pass

def cubic_interpolate_angle_in_time(from_:float, to:float, pre:float, post:float, weight:float, to_t:float, pre_t:float, post_t:float)->float: pass

def bezier_interpolate(start:float, control_1:float, control_2:float, end:float, t:float)->float: pass

def bezier_derivative(start:float, control_1:float, control_2:float, end:float, t:float)->float: pass

def angle_difference(from_:float, to:float)->float: pass

def lerp_angle(from_:float, to:float, weight:float)->float: pass

def inverse_lerp(from_:float, to:float, weight:float)->float: pass

def remap(value:float, istart:float, istop:float, ostart:float, ostop:float)->float: pass

def smoothstep(from_:float, to:float, x:float)->float: pass

def move_toward(from_:float, to:float, delta:float)->float: pass

def rotate_toward(from_:float, to:float, delta:float)->float: pass

def deg_to_rad(deg:float)->float: pass

def rad_to_deg(rad:float)->float: pass

def linear_to_db(lin:float)->float: pass

def db_to_linear(db:float)->float: pass

def wrap(value:object, min:object, max:object)->object: pass

def wrapi(value:int, min:int, max:int)->int: pass

def wrapf(value:float, min:float, max:float)->float: pass

def max(arg1:object, arg2:object)->object: pass

def maxi(a:int, b:int)->int: pass

def maxf(a:float, b:float)->float: pass

def min(arg1:object, arg2:object)->object: pass

def mini(a:int, b:int)->int: pass

def minf(a:float, b:float)->float: pass

def clamp(value:object, min:object, max:object)->object: pass

def clampi(value:int, min:int, max:int)->int: pass

def clampf(value:float, min:float, max:float)->float: pass

def nearest_po2(value:int)->int: pass

def pingpong(value:float, length:float)->float: pass

def randomize()->None: pass

def randi()->int: pass

def randf()->float: pass

def randi_range(from_:int, to:int)->int: pass

def randf_range(from_:float, to:float)->float: pass

def randfn(mean:float, deviation:float)->float: pass

def seed(base:int)->None: pass

def rand_from_seed(seed:int)->__packedint64array__.PackedInt64Array: pass

def weakref(obj:object)->object: pass

def typeof_(variable:object)->int: pass

def type_convert(variant:object, type:int)->object: pass

def str_(arg1:object)->str: pass

def error_string(error:int)->str: pass

def type_string(type:int)->str: pass

def print(arg1:object)->None: pass

def print_rich(arg1:object)->None: pass

def printerr(arg1:object)->None: pass

def printt(arg1:object)->None: pass

def prints(arg1:object)->None: pass

def printraw(arg1:object)->None: pass

def print_verbose(arg1:object)->None: pass

def push_error(arg1:object)->None: pass

def push_warning(arg1:object)->None: pass

def var_to_str(variable:object)->str: pass

def str_to_var(string:str)->object: pass

def var_to_bytes(variable:object)->__packedbytearray__.PackedByteArray: pass

def bytes_to_var(bytes:__packedbytearray__.PackedByteArray)->object: pass

def var_to_bytes_with_objects(variable:object)->__packedbytearray__.PackedByteArray: pass

def bytes_to_var_with_objects(bytes:__packedbytearray__.PackedByteArray)->object: pass

def hash(variable:object)->int: pass

def instance_from_id(instance_id:int)->__object__.Object: pass

def is_instance_id_valid(id:int)->bool: pass

def is_instance_valid(instance:object)->bool: pass

def rid_allocate_id()->int: pass

def rid_from_int64(base:int)->__rid__.RID: pass

def is_same(a:object, b:object)->bool: pass

