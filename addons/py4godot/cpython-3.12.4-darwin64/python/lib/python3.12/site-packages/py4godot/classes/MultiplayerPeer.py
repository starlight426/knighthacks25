# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.MultiplayerPeerExtension as py4godot_multiplayerpeerextension 
  import py4godot.classes.OfflineMultiplayerPeer as py4godot_offlinemultiplayerpeer 
  import py4godot.classes.WebRTCMultiplayerPeer as py4godot_webrtcmultiplayerpeer 
  import py4godot.classes.WebSocketMultiplayerPeer as py4godot_websocketmultiplayerpeer 
  import py4godot.classes.ENetMultiplayerPeer as py4godot_enetmultiplayerpeer 
import py4godot.classes.PacketPeer as py4godot_packetpeer 
from py4godot.wrappers.wrappers import CPPMultiplayerPeerWrapper

class ConnectionStatus:
  CONNECTION_DISCONNECTED = 0
  CONNECTION_CONNECTING = 1
  CONNECTION_CONNECTED = 2
class TransferMode:
  TRANSFER_MODE_UNRELIABLE = 0
  TRANSFER_MODE_UNRELIABLE_ORDERED = 1
  TRANSFER_MODE_RELIABLE = 2


class MultiplayerPeer(py4godot_packetpeer.PacketPeer):
  r'''
		Manages the connection with one or more remote peers acting as server or client and assigning unique IDs to each of them. See also `MultiplayerAPI`.
		**Note:** The `MultiplayerAPI` protocol is an implementation detail and isn't meant to be used by non-Godot servers. It may change without notice.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	'''
  TARGET_PEER_BROADCAST:typing.ClassVar[int]

  TARGET_PEER_SERVER:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = MultiplayerPeer.construct_without_init()
    class_._ptr = constructor(488,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MultiplayerPeer.construct_without_init()
    class_._ptr = constructor(488,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMultiplayerPeerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(488,0, ())


  def generate_wrapper(self):
    return CPPMultiplayerPeerWrapper()
  def init_signals(self):
    super().init_signals()
    peer_connected_name = utils.py_string_to_string_name("peer_connected")
    self.peer_connected = signals.BuiltinSignal(self, peer_connected_name)
    peer_disconnected_name = utils.py_string_to_string_name("peer_disconnected")
    self.peer_disconnected = signals.BuiltinSignal(self, peer_disconnected_name)

  @staticmethod
  def construct_without_init():
    cls = MultiplayerPeer.__new__(MultiplayerPeer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MultiplayerPeer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiplayerPeer.construct_without_init()
    cls._ptr = CPPMultiplayerPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiplayerPeer.construct_without_init()
    cls._ptr = CPPMultiplayerPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def refuse_new_connections(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_refusing_new_connections()
    return _ret
  @refuse_new_connections.setter
  def refuse_new_connections(self,  value:'bool'):
    self.set_refuse_new_connections(value)
  @property
  def transfer_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_transfer_mode()
    return _ret
  @transfer_mode.setter
  def transfer_mode(self,  value:'int'):
    self.set_transfer_mode(value)
  @property
  def transfer_channel(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_transfer_channel()
    return _ret
  @transfer_channel.setter
  def transfer_channel(self,  value:'int'):
    self.set_transfer_channel(value)
  @functools.native_method
  def set_transfer_channel(self, channel:'int'   ) -> None:
    r''''''

    assert isinstance(channel, (int, float)), 'channel must be int or float'

    self.py__transfer_channel = channel






    self._ptr.call_with_return(61,tuple([channel]))

  @functools.native_method
  def get_transfer_channel(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def set_transfer_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__transfer_mode = mode






    self._ptr.call_with_return(63,tuple([mode]))

  @functools.native_method
  def get_transfer_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(64,tuple([]))

    return _ret


  @functools.native_method
  def set_target_peer(self, id:'int'   ) -> None:
    r'''
				Sets the peer to which packets will be sent.
				The `id` can be one of: `constant TARGET_PEER_BROADCAST` to send to all connected peers, `constant TARGET_PEER_SERVER` to send to the peer acting as server, a valid peer ID to send to that specific peer, a negative peer ID to send to all peers except that one. By default, the target peer is `constant TARGET_PEER_BROADCAST`.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'






    self._ptr.call_with_return(65,tuple([id]))

  @functools.native_method
  def get_packet_peer(self) -> typing.Union[int]:
    r'''
				Returns the ID of the `MultiplayerPeer` who sent the next available packet. See `PacketPeer.get_available_packet_count`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([]))
    return _ret


  @functools.native_method
  def get_packet_channel(self) -> typing.Union[int]:
    r'''
				Returns the channel over which the next available packet was received. See `PacketPeer.get_available_packet_count`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(67,tuple([]))
    return _ret


  @functools.native_method
  def get_packet_mode(self) -> typing.Union[int]:
    r'''
				Returns the transfer mode the remote peer used to send the next available packet. See `PacketPeer.get_available_packet_count`.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(68,tuple([]))
    return _ret


  @functools.native_method
  def poll(self) -> None:
    r'''
				Waits up to 1 second to receive a new network event.
			'''




    self._ptr.call_with_return(69,tuple([]))

  @functools.native_method
  def close(self) -> None:
    r'''
				Immediately close the multiplayer peer returning to the state `constant CONNECTION_DISCONNECTED`. Connected peers will be dropped without emitting `signal peer_disconnected`.
			'''




    self._ptr.call_with_return(70,tuple([]))

  @functools.native_method
  def disconnect_peer(self, peer:'int'   , force:'bool' =False  ) -> None:
    r'''
				Disconnects the given `peer` from this host. If `force` is `true` the `signal peer_disconnected` signal will not be emitted for this peer.
			'''

    assert isinstance(peer, (int, float)), 'peer must be int or float'
    assert isinstance(force, bool), 'force must be bool'







    self._ptr.call_with_return(71,tuple([peer, force]))

  @functools.native_method
  def get_connection_status(self) -> typing.Union[int]:
    r'''
				Returns the current state of the connection.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(72,tuple([]))
    return _ret


  @functools.native_method
  def get_unique_id(self) -> typing.Union[int]:
    r'''
				Returns the ID of this `MultiplayerPeer`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([]))
    return _ret


  @functools.native_method
  def generate_unique_id(self) -> typing.Union[int]:
    r'''
				Returns a randomly generated integer that can be used as a network unique ID.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(74,tuple([]))
    return _ret


  @functools.native_method
  def set_refuse_new_connections(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__refuse_new_connections = enable






    self._ptr.call_with_return(75,tuple([enable]))

  @functools.native_method
  def is_refusing_new_connections(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(76,tuple([]))

    return _ret


  @functools.native_method
  def is_server_relay_supported(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the server can act as a relay in the current configuration. That is, if the higher level `MultiplayerAPI` should notify connected clients of other peers, and implement a relay protocol to allow communication between them.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([]))
    return _ret



register_cast_function('MultiplayerPeer', MultiplayerPeer.cast)
register_class('MultiplayerPeer', MultiplayerPeer)
