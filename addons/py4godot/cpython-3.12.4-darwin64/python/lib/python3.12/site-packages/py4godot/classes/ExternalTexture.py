# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPExternalTextureWrapper


class ExternalTexture(py4godot_texture2d.Texture2D):
  r'''
		Displays the content of an external buffer provided by the platform.
		Requires the `url=https://registry.khronos.org/OpenGL/extensions/OES/OES_EGL_image_external.txt`OES_EGL_image_external`/url` extension (OpenGL) or `url=https://registry.khronos.org/vulkan/specs/1.1-extensions/html/vkspec.html#VK_ANDROID_external_memory_android_hardware_buffer`VK_ANDROID_external_memory_android_hardware_buffer`/url` extension (Vulkan).
		**Note:** This is currently only supported in Android builds.
	'''

  @staticmethod
  def constructor():
    class_ = ExternalTexture.construct_without_init()
    class_._ptr = constructor(325,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ExternalTexture.construct_without_init()
    class_._ptr = constructor(325,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPExternalTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(325,0, ())


  def generate_wrapper(self):
    return CPPExternalTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ExternalTexture.__new__(ExternalTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ExternalTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ExternalTexture.construct_without_init()
    cls._ptr = CPPExternalTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ExternalTexture.construct_without_init()
    cls._ptr = CPPExternalTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def size(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector2'):
    self.set_size(value)
  @functools.native_method
  def set_size(self, size:'Vector2'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector2), 'size must be Vector2'

    self.py__size = size






    self._ptr.call_with_return(93,tuple([size._ptr]))

  @functools.native_method
  def get_external_texture_id(self) -> typing.Union[int]:
    r'''
				Returns the external texture ID.
				Depending on your use case, you may need to pass this to platform APIs, for example, when creating an `android.graphics.SurfaceTexture` on Android.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))
    return _ret


  @functools.native_method
  def set_external_buffer_id(self, external_buffer_id:'int'   ) -> None:
    r'''
				Sets the external buffer ID.
				Depending on your use case, you may need to call this with data received from a platform API, for example, `SurfaceTexture.getHardwareBuffer()` on Android.
			'''

    assert isinstance(external_buffer_id, (int, float)), 'external_buffer_id must be int or float'






    self._ptr.call_with_return(95,tuple([external_buffer_id]))


register_cast_function('ExternalTexture', ExternalTexture.cast)
register_class('ExternalTexture', ExternalTexture)
