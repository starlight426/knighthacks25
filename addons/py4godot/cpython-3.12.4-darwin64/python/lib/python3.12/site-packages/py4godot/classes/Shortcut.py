# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.InputEvent as py4godot_inputevent 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPShortcutWrapper


class Shortcut(py4godot_resource.Resource):
  r'''
		Shortcuts (also known as hotkeys) are containers of `InputEvent` resources. They are commonly used to interact with a `Control` element from an `InputEvent`.
		One shortcut can contain multiple `InputEvent` resources, making it possible to trigger one action with multiple different inputs.
		**Example:** Capture the `kbd`Ctrl + S`/kbd` shortcut using a `Shortcut` resource:
		
		```gdscript
		extends Node

		var save_shortcut = Shortcut.new()
		func _ready():
			var key_event = InputEventKey.new()
			key_event.keycode = KEY_S
			key_event.ctrl_pressed = true
			key_event.command_or_control_autoremap = true # Swaps Ctrl for Command on Mac.
			save_shortcut.events = `key_event`

		func _input(event):
			if save_shortcut.matches_event(event) and event.is_pressed() and not event.is_echo():
				print("Save shortcut pressed!")
				get_viewport().set_input_as_handled()
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = Shortcut.construct_without_init()
    class_._ptr = constructor(745,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Shortcut.construct_without_init()
    class_._ptr = constructor(745,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPShortcutWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(745,0, ())


  def generate_wrapper(self):
    return CPPShortcutWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Shortcut.__new__(Shortcut)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Shortcut'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Shortcut.construct_without_init()
    cls._ptr = CPPShortcutWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Shortcut.construct_without_init()
    cls._ptr = CPPShortcutWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def events(self) -> typing.Union['py4godot_inputeventtypedarray.InputEventTypedArray']:
    r''''''
    _ret = self. get_events()
    return _ret
  @events.setter
  def events(self, value:'Array'):
    self.set_events(value)
  @functools.native_method
  def set_events(self, events:'Array'   ) -> None:
    r''''''

    assert(not events is None)
    assert isinstance(events, Array), 'events must be Array'

    self.py__events = events






    self._ptr.call_with_return(77,tuple([events._ptr]))

  @functools.native_method
  def get_events(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def has_valid_event(self) -> typing.Union[bool]:
    r'''
				Returns whether `events` contains an `InputEvent` which is valid.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def matches_event(self, event:'py4godot_inputevent.InputEvent'   ) -> typing.Union[bool]:
    r'''
				Returns whether any `InputEvent` in `events` equals `event`. This uses `InputEvent.is_match` to compare events.
			'''

    assert(not event is None)
    assert isinstance(event, get_class('InputEvent')), 'event must be InputEvent'






    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([event._ptr]))
    return _ret


  @functools.native_method
  def get_as_text(self) -> typing.Union[str]:
    r'''
				Returns the shortcut's first valid `InputEvent` as a `String`.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([]))
    return utils.gd_string_to_py_string(_ret)



register_cast_function('Shortcut', Shortcut.cast)
register_class('Shortcut', Shortcut)
