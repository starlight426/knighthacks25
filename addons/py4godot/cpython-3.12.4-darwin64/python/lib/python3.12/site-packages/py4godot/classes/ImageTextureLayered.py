# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTypedArray as py4godot_imagetypedarray 
  import py4godot.classes.Image as py4godot_image 
import py4godot.classes.ImageTypedArray as py4godot_imagetypedarray 
import py4godot.classes.TextureLayered as py4godot_texturelayered 
from py4godot.wrappers.wrappers import CPPImageTextureLayeredWrapper


class ImageTextureLayered(py4godot_texturelayered.TextureLayered):
  r'''
		Base class for `Texture2DArray`, `Cubemap` and `CubemapArray`. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types. See also `Texture3D`.
	'''

  @staticmethod
  def constructor():
    class_ = ImageTextureLayered.construct_without_init()
    class_._ptr = constructor(408,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ImageTextureLayered.construct_without_init()
    class_._ptr = constructor(408,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPImageTextureLayeredWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(408,0, ())


  def generate_wrapper(self):
    return CPPImageTextureLayeredWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ImageTextureLayered.__new__(ImageTextureLayered)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ImageTextureLayered'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImageTextureLayered.construct_without_init()
    cls._ptr = CPPImageTextureLayeredWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImageTextureLayered.construct_without_init()
    cls._ptr = CPPImageTextureLayeredWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def create_from_images(self, images:'py4godot_imagetypedarray.ImageTypedArray'   ) -> typing.Union[int]:
    r'''
				Creates an `ImageTextureLayered` from an array of `Image`s. See `Image.create` for the expected data format. The first image decides the width, height, image format and mipmapping setting. The other images _must_ have the same width, height, image format and mipmapping setting.
				Each `Image` represents one `layer`.
				```gdscript
				# Fill in an array of Images with different colors.
				var images = ``
				const LAYERS = 6
				for i in LAYERS:
					var image = Image.create_empty(128, 128, false, Image.FORMAT_RGB8)
					if i % 3 == 0:
						image.fill(Color.RED)
					elif i % 3 == 1:
						image.fill(Color.GREEN)
					else:
						image.fill(Color.BLUE)
					images.push_back(image)

				# Create and save a 2D texture array. The array of images must have at least 1 Image.
				var texture_2d_array = Texture2DArray.new()
				texture_2d_array.create_from_images(images)
				ResourceSaver.save(texture_2d_array, "res://texture_2d_array.res", ResourceSaver.FLAG_COMPRESS)

				# Create and save a cubemap. The array of images must have exactly 6 Images.
				# The cubemap's images are specified in this order: X+, X-, Y+, Y-, Z+, Z-
				# (in Godot's coordinate system, so Y+ is "up" and Z- is "forward").
				var cubemap = Cubemap.new()
				cubemap.create_from_images(images)
				ResourceSaver.save(cubemap, "res://cubemap.res", ResourceSaver.FLAG_COMPRESS)

				# Create and save a cubemap array. The array of images must have a multiple of 6 Images.
				# Each cubemap's images are specified in this order: X+, X-, Y+, Y-, Z+, Z-
				# (in Godot's coordinate system, so Y+ is "up" and Z- is "forward").
				var cubemap_array = CubemapArray.new()
				cubemap_array.create_from_images(images)
				ResourceSaver.save(cubemap_array, "res://cubemap_array.res", ResourceSaver.FLAG_COMPRESS)
				```
			'''

    assert isinstance(images, get_class('ImageTypedArray')), 'images must be ImageTypedArray'






    _ret:int
    _ret = self._ptr.call_with_return(91,tuple([images._ptr]))
    return _ret


  @functools.native_method
  def update_layer(self, image:'py4godot_image.Image'   , layer:'int'   ) -> None:
    r'''
				Replaces the existing `Image` data at the given `layer` with this new image.
				The given `Image` must have the same width, height, image format, and mipmapping flag as the rest of the referenced images.
				If the image format is unsupported, it will be decompressed and converted to a similar and supported `enum Image.Format`.
				The update is immediate: it's synchronized with drawing.
			'''

    assert(not image is None)
    assert isinstance(image, get_class('Image')), 'image must be Image'
    assert isinstance(layer, (int, float)), 'layer must be int or float'







    self._ptr.call_with_return(92,tuple([image._ptr, layer]))


register_cast_function('ImageTextureLayered', ImageTextureLayered.cast)
register_class('ImageTextureLayered', ImageTextureLayered)
