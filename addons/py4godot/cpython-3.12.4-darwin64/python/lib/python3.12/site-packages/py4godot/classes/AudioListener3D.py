# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPAudioListener3DWrapper

class DopplerTracking:
  DOPPLER_TRACKING_DISABLED = 0
  DOPPLER_TRACKING_IDLE_STEP = 1
  DOPPLER_TRACKING_PHYSICS_STEP = 2


class AudioListener3D(py4godot_node3d.Node3D):
  r'''
		Once added to the scene tree and enabled using `make_current`, this node will override the location sounds are heard from. This can be used to listen from a location different from the `Camera3D`.
	'''

  @staticmethod
  def constructor():
    class_ = AudioListener3D.construct_without_init()
    class_._ptr = constructor(136,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioListener3D.construct_without_init()
    class_._ptr = constructor(136,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioListener3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(136,0, ())


  def generate_wrapper(self):
    return CPPAudioListener3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioListener3D.__new__(AudioListener3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioListener3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioListener3D.construct_without_init()
    cls._ptr = CPPAudioListener3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioListener3D.construct_without_init()
    cls._ptr = CPPAudioListener3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def doppler_tracking(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_doppler_tracking()
    return _ret
  @doppler_tracking.setter
  def doppler_tracking(self,  value:'int'):
    self.set_doppler_tracking(value)
  @functools.native_method
  def make_current(self) -> None:
    r'''
				Enables the listener. This will override the current camera's listener.
			'''




    self._ptr.call_with_return(251,tuple([]))

  @functools.native_method
  def clear_current(self) -> None:
    r'''
				Disables the listener to use the current camera's listener instead.
			'''




    self._ptr.call_with_return(252,tuple([]))

  @functools.native_method
  def is_current(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the listener was made current using `make_current`, `false` otherwise.
				**Note:** There may be more than one AudioListener3D marked as "current" in the scene tree, but only the one that was made current last will be used.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(253,tuple([]))
    return _ret


  @functools.native_method
  def get_listener_transform(self) -> typing.Union['Transform3D']:
    r'''
				Returns the listener's global orthonormalized `Transform3D`.
			'''




    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(254,tuple([]))
    return _ret


  @functools.native_method
  def set_doppler_tracking(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__doppler_tracking = mode






    self._ptr.call_with_return(255,tuple([mode]))

  @functools.native_method
  def get_doppler_tracking(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(256,tuple([]))

    return _ret



register_cast_function('AudioListener3D', AudioListener3D.cast)
register_class('AudioListener3D', AudioListener3D)
