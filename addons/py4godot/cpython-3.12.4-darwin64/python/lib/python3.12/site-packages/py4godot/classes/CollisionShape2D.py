# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Shape2D as py4godot_shape2d 
  import py4godot.classes.WorldBoundaryShape2D as py4godot_worldboundaryshape2d 
  import py4godot.classes.CircleShape2D as py4godot_circleshape2d 
  import py4godot.classes.SeparationRayShape2D as py4godot_separationrayshape2d 
  import py4godot.classes.CapsuleShape2D as py4godot_capsuleshape2d 
  import py4godot.classes.ConvexPolygonShape2D as py4godot_convexpolygonshape2d 
  import py4godot.classes.ConcavePolygonShape2D as py4godot_concavepolygonshape2d 
  import py4godot.classes.RectangleShape2D as py4godot_rectangleshape2d 
  import py4godot.classes.SegmentShape2D as py4godot_segmentshape2d 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPCollisionShape2DWrapper


class CollisionShape2D(py4godot_node2d.Node2D):
  r'''
		A node that provides a `Shape2D` to a `CollisionObject2D` parent and allows it to be edited. This can give a detection shape to an `Area2D` or turn a `PhysicsBody2D` into a solid object.
	'''

  @staticmethod
  def constructor():
    class_ = CollisionShape2D.construct_without_init()
    class_._ptr = constructor(219,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CollisionShape2D.construct_without_init()
    class_._ptr = constructor(219,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCollisionShape2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(219,0, ())


  def generate_wrapper(self):
    return CPPCollisionShape2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CollisionShape2D.__new__(CollisionShape2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CollisionShape2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CollisionShape2D.construct_without_init()
    cls._ptr = CPPCollisionShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CollisionShape2D.construct_without_init()
    cls._ptr = CPPCollisionShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def shape(self) -> typing.Any:
    r''''''
    _ret = self. get_shape()
    return _ret
  @shape.setter
  def shape(self,  value:'py4godot_object.Object'):
    self.set_shape(value)
  @property
  def disabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_disabled()
    return _ret
  @disabled.setter
  def disabled(self,  value:'bool'):
    self.set_disabled(value)
  @property
  def one_way_collision(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_one_way_collision_enabled()
    return _ret
  @one_way_collision.setter
  def one_way_collision(self,  value:'bool'):
    self.set_one_way_collision(value)
  @property
  def one_way_collision_margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_one_way_collision_margin()
    return _ret
  @one_way_collision_margin.setter
  def one_way_collision_margin(self,  value:'float'):
    self.set_one_way_collision_margin(value)
  @property
  def debug_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_debug_color()
    return _ret
  @debug_color.setter
  def debug_color(self,  value:'Color'):
    self.set_debug_color(value)
  @functools.native_method
  def set_shape(self, shape:'py4godot_shape2d.Shape2D'   ) -> None:
    r''''''

    assert(not shape is None)
    assert isinstance(shape, get_class('Shape2D')), 'shape must be Shape2D'

    self.py__shape = shape






    self._ptr.call_with_return(303,tuple([shape._ptr]))

  @functools.native_method
  def get_shape(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Shape2D
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_disabled(self, disabled:'bool'   ) -> None:
    r''''''

    assert isinstance(disabled, bool), 'disabled must be bool'

    self.py__disabled = disabled






    self._ptr.call_with_return(305,tuple([disabled]))

  @functools.native_method
  def is_disabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_one_way_collision(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__one_way_collision = enabled






    self._ptr.call_with_return(307,tuple([enabled]))

  @functools.native_method
  def is_one_way_collision_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(308,tuple([]))

    return _ret


  @functools.native_method
  def set_one_way_collision_margin(self, margin:'float'   ) -> None:
    r''''''

    assert isinstance(margin, (int, float)), 'margin must be int or float'

    self.py__one_way_collision_margin = margin






    self._ptr.call_with_return(309,tuple([margin]))

  @functools.native_method
  def get_one_way_collision_margin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(310,tuple([]))

    return _ret


  @functools.native_method
  def set_debug_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__debug_color = color






    self._ptr.call_with_return(311,tuple([color._ptr]))

  @functools.native_method
  def get_debug_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(312,tuple([]))

    return _ret



register_cast_function('CollisionShape2D', CollisionShape2D.cast)
register_class('CollisionShape2D', CollisionShape2D)
