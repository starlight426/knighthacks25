# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
  import py4godot.classes.RDFramebufferPassTypedArray as py4godot_rdframebufferpasstypedarray 
import py4godot.classes.Object as py4godot_object 
import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RDFramebufferPassTypedArray as py4godot_rdframebufferpasstypedarray 
from py4godot.wrappers.wrappers import CPPFramebufferCacheRDWrapper


class FramebufferCacheRD(py4godot_object.Object):
  r'''
		Framebuffer cache manager for Rendering Device based renderers. Provides a way to create a framebuffer and reuse it in subsequent calls for as long as the used textures exists. Framebuffers will automatically be cleaned up when dependent objects are freed.
	'''

  @staticmethod
  def constructor():
    class_ = FramebufferCacheRD.construct_without_init()
    class_._ptr = constructor(340,0, ())
    return class_
  @staticmethod
  def new():
    class_ = FramebufferCacheRD.construct_without_init()
    class_._ptr = constructor(340,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPFramebufferCacheRDWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(340,0, ())


  def generate_wrapper(self):
    return CPPFramebufferCacheRDWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = FramebufferCacheRD.__new__(FramebufferCacheRD)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'FramebufferCacheRD'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = FramebufferCacheRD.construct_without_init()
    cls._ptr = CPPFramebufferCacheRDWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = FramebufferCacheRD.construct_without_init()
    cls._ptr = CPPFramebufferCacheRDWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @staticmethod
  def get_cache_multipass(textures:'py4godot_ridtypedarray.RIDTypedArray'   , passes:'py4godot_rdframebufferpasstypedarray.RDFramebufferPassTypedArray'   , views:'int'   ) -> typing.Union['RID']:
    r'''
				Creates, or obtains a cached, framebuffer. `textures` lists textures accessed. `passes` defines the subpasses and texture allocation, if left empty a single pass is created and textures are allocated depending on their usage flags. `views` defines the number of views used when rendering.
			'''

    assert isinstance(textures, get_class('RIDTypedArray')), 'textures must be RIDTypedArray'
    assert isinstance(passes, get_class('RDFramebufferPassTypedArray')), 'passes must be RDFramebufferPassTypedArray'
    assert isinstance(views, (int, float)), 'views must be int or float'








    _ret = RID.construct_without_init()
    _ret._ptr = static_method(340,0,tuple([textures._ptr, passes._ptr, views]))
    return _ret



register_cast_function('FramebufferCacheRD', FramebufferCacheRD.cast)
register_class('FramebufferCacheRD', FramebufferCacheRD)
