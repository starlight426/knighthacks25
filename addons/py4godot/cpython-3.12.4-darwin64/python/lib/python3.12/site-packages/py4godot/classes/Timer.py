# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node as py4godot_node 
from py4godot.wrappers.wrappers import CPPTimerWrapper

class TimerProcessCallback:
  TIMER_PROCESS_PHYSICS = 0
  TIMER_PROCESS_IDLE = 1


class Timer(py4godot_node.Node):
  r'''
		The `Timer` node is a countdown timer and is the simplest way to handle time-based logic in the engine. When a timer reaches the end of its `wait_time`, it will emit the `signal timeout` signal.
		After a timer enters the scene tree, it can be manually started with `start`. A timer node is also started automatically if `autostart` is `true`.
		Without requiring much code, a timer node can be added and configured in the editor. The `signal timeout` signal it emits can also be connected through the Node dock in the editor:
		```gdscript
		func _on_timer_timeout():
			print("Time to attack!")
		```
		**Note:** To create a one-shot timer without instantiating a node, use `SceneTree.create_timer`.
		**Note:** Timers are affected by `Engine.time_scale` unless `ignore_time_scale` is `true`. The higher the time scale, the sooner timers will end. How often a timer processes may depend on the framerate or `Engine.physics_ticks_per_second`.
	'''

  @staticmethod
  def constructor():
    class_ = Timer.construct_without_init()
    class_._ptr = constructor(843,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Timer.construct_without_init()
    class_._ptr = constructor(843,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTimerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(843,0, ())


  def generate_wrapper(self):
    return CPPTimerWrapper()
  def init_signals(self):
    super().init_signals()
    timeout_name = utils.py_string_to_string_name("timeout")
    self.timeout = signals.BuiltinSignal(self, timeout_name)

  @staticmethod
  def construct_without_init():
    cls = Timer.__new__(Timer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Timer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Timer.construct_without_init()
    cls._ptr = CPPTimerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Timer.construct_without_init()
    cls._ptr = CPPTimerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def process_callback(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_timer_process_callback()
    return _ret
  @process_callback.setter
  def process_callback(self,  value:'int'):
    self.set_timer_process_callback(value)
  @property
  def wait_time(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_wait_time()
    return _ret
  @wait_time.setter
  def wait_time(self,  value:'float'):
    self.set_wait_time(value)
  @property
  def one_shot(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_one_shot()
    return _ret
  @one_shot.setter
  def one_shot(self,  value:'bool'):
    self.set_one_shot(value)
  @property
  def autostart(self) -> typing.Union[bool]:
    r''''''
    _ret = self. has_autostart()
    return _ret
  @autostart.setter
  def autostart(self,  value:'bool'):
    self.set_autostart(value)
  @property
  def paused(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_paused()
    return _ret
  @paused.setter
  def paused(self,  value:'bool'):
    self.set_paused(value)
  @property
  def ignore_time_scale(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_ignoring_time_scale()
    return _ret
  @ignore_time_scale.setter
  def ignore_time_scale(self,  value:'bool'):
    self.set_ignore_time_scale(value)
  @property
  def time_left(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_time_left()
    return _ret
  @functools.native_method
  def set_wait_time(self, time_sec:'float'   ) -> None:
    r''''''

    assert isinstance(time_sec, (int, float)), 'time_sec must be int or float'

    self.py__wait_time = time_sec






    self._ptr.call_with_return(180,tuple([time_sec]))

  @functools.native_method
  def get_wait_time(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(181,tuple([]))

    return _ret


  @functools.native_method
  def set_one_shot(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__one_shot = enable






    self._ptr.call_with_return(182,tuple([enable]))

  @functools.native_method
  def is_one_shot(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(183,tuple([]))

    return _ret


  @functools.native_method
  def set_autostart(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__autostart = enable






    self._ptr.call_with_return(184,tuple([enable]))

  @functools.native_method
  def has_autostart(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(185,tuple([]))

    return _ret


  @functools.native_method
  def start(self, time_sec:'float' =-1  ) -> None:
    r'''
				Starts the timer, or resets the timer if it was started already. Fails if the timer is not inside the scene tree. If `time_sec` is greater than `0`, this value is used for the `wait_time`.
				**Note:** This method does not resume a paused timer. See `paused`.
			'''

    assert isinstance(time_sec, (int, float)), 'time_sec must be int or float'






    self._ptr.call_with_return(186,tuple([time_sec]))

  @functools.native_method
  def stop(self) -> None:
    r'''
				Stops the timer. See also `paused`. Unlike `start`, this can safely be called if the timer is not inside the scene tree.
				**Note:** Calling `stop` does not emit the `signal timeout` signal, as the timer is not considered to have timed out. If this is desired, use `$Timer.timeout.emit()` after calling `stop` to manually emit the signal.
			'''




    self._ptr.call_with_return(187,tuple([]))

  @functools.native_method
  def set_paused(self, paused:'bool'   ) -> None:
    r''''''

    assert isinstance(paused, bool), 'paused must be bool'

    self.py__paused = paused






    self._ptr.call_with_return(188,tuple([paused]))

  @functools.native_method
  def is_paused(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(189,tuple([]))

    return _ret


  @functools.native_method
  def set_ignore_time_scale(self, ignore:'bool'   ) -> None:
    r''''''

    assert isinstance(ignore, bool), 'ignore must be bool'

    self.py__ignore_time_scale = ignore






    self._ptr.call_with_return(190,tuple([ignore]))

  @functools.native_method
  def is_ignoring_time_scale(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(191,tuple([]))

    return _ret


  @functools.native_method
  def is_stopped(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the timer is stopped or has not started.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(192,tuple([]))
    return _ret


  @functools.native_method
  def get_time_left(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(193,tuple([]))

    return _ret


  @functools.native_method
  def set_timer_process_callback(self, callback:'int'  ) -> None:
    r''''''

    assert isinstance(callback, (int, float)), 'callback must be int or float'

    self.py__process_callback = callback






    self._ptr.call_with_return(194,tuple([callback]))

  @functools.native_method
  def get_timer_process_callback(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(195,tuple([]))

    return _ret



register_cast_function('Timer', Timer.cast)
register_class('Timer', Timer)
