# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Image as py4godot_image 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPImageTextureWrapper


class ImageTexture(py4godot_texture2d.Texture2D):
  r'''
		A `Texture2D` based on an `Image`. For an image to be displayed, an `ImageTexture` has to be created from it using the `create_from_image` method:
		```gdscript
		var image = Image.load_from_file("res://icon.svg")
		var texture = ImageTexture.create_from_image(image)
		$Sprite2D.texture = texture
		```
		This way, textures can be created at run-time by loading images both from within the editor and externally.
		**Warning:** Prefer to load imported textures with `@GDScript.load` over loading them from within the filesystem dynamically with `Image.load`, as it may not work in exported projects:
		```gdscript
		var texture = load("res://icon.svg")
		$Sprite2D.texture = texture
		```
		This is because images have to be imported as a `CompressedTexture2D` first to be loaded with `@GDScript.load`. If you'd still like to load an image file just like any other `Resource`, import it as an `Image` resource instead, and then load it normally using the `@GDScript.load` method.
		**Note:** The image can be retrieved from an imported texture using the `Texture2D.get_image` method, which returns a copy of the image:
		```gdscript
		var texture = load("res://icon.svg")
		var image = texture.get_image()
		```
		An `ImageTexture` is not meant to be operated from within the editor interface directly, and is mostly useful for rendering images on screen dynamically via code. If you need to generate images procedurally from within the editor, consider saving and importing images as custom texture resources implementing a new `EditorImportPlugin`.
		**Note:** The maximum texture size is 16384Ã—16384 pixels due to graphics hardware limitations.
	'''

  @staticmethod
  def constructor():
    class_ = ImageTexture.construct_without_init()
    class_._ptr = constructor(406,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ImageTexture.construct_without_init()
    class_._ptr = constructor(406,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPImageTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(406,0, ())


  def generate_wrapper(self):
    return CPPImageTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ImageTexture.__new__(ImageTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ImageTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImageTexture.construct_without_init()
    cls._ptr = CPPImageTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImageTexture.construct_without_init()
    cls._ptr = CPPImageTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @staticmethod
  def create_from_image(image:'py4godot_image.Image'   ) -> typing.Union['typing.Self']:
    r'''
				Creates a new `ImageTexture` and initializes it by allocating and setting the data from an `Image`.
			'''

    assert(not image is None)
    assert isinstance(image, get_class('Image')), 'image must be Image'






    _ret = ImageTexture.construct_without_init()
    _ret._ptr = static_method(406,1,tuple([image._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_format(self) -> typing.Union[int]:
    r'''
				Returns the format of the texture.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(93,tuple([]))
    return _ret


  @functools.native_method
  def set_image(self, image:'py4godot_image.Image'   ) -> None:
    r'''
				Replaces the texture's data with a new `Image`. This will re-allocate new memory for the texture.
				If you want to update the image, but don't need to change its parameters (format, size), use `update` instead for better performance.
			'''

    assert(not image is None)
    assert isinstance(image, get_class('Image')), 'image must be Image'






    self._ptr.call_with_return(94,tuple([image._ptr]))

  @functools.native_method
  def update(self, image:'py4godot_image.Image'   ) -> None:
    r'''
				Replaces the texture's data with a new `Image`.
				**Note:** The texture has to be created using `create_from_image` or initialized first with the `set_image` method before it can be updated. The new image dimensions, format, and mipmaps configuration should match the existing texture's image configuration.
				Use this method over `set_image` if you need to update the texture frequently, which is faster than allocating additional memory for a new texture each time.
			'''

    assert(not image is None)
    assert isinstance(image, get_class('Image')), 'image must be Image'






    self._ptr.call_with_return(95,tuple([image._ptr]))

  @functools.native_method
  def set_size_override(self, size:'Vector2i'   ) -> None:
    r'''
				Resizes the texture to the specified dimensions.
			'''

    assert(not size is None)
    assert isinstance(size, Vector2i), 'size must be Vector2i'






    self._ptr.call_with_return(96,tuple([size._ptr]))


register_cast_function('ImageTexture', ImageTexture.cast)
register_class('ImageTexture', ImageTexture)
