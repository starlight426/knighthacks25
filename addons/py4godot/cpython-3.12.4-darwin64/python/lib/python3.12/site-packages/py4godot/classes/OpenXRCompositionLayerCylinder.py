# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.OpenXRCompositionLayer as py4godot_openxrcompositionlayer 
from py4godot.wrappers.wrappers import CPPOpenXRCompositionLayerCylinderWrapper


class OpenXRCompositionLayerCylinder(py4godot_openxrcompositionlayer.OpenXRCompositionLayer):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRCompositionLayerCylinder.construct_without_init()
    class_._ptr = constructor(540,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRCompositionLayerCylinder.construct_without_init()
    class_._ptr = constructor(540,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRCompositionLayerCylinderWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(540,0, ())


  def generate_wrapper(self):
    return CPPOpenXRCompositionLayerCylinderWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRCompositionLayerCylinder.__new__(OpenXRCompositionLayerCylinder)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRCompositionLayerCylinder'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRCompositionLayerCylinder.construct_without_init()
    cls._ptr = CPPOpenXRCompositionLayerCylinderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRCompositionLayerCylinder.construct_without_init()
    cls._ptr = CPPOpenXRCompositionLayerCylinderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def radius(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_radius()
    return _ret
  @radius.setter
  def radius(self,  value:'float'):
    self.set_radius(value)
  @property
  def aspect_ratio(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_aspect_ratio()
    return _ret
  @aspect_ratio.setter
  def aspect_ratio(self,  value:'float'):
    self.set_aspect_ratio(value)
  @property
  def central_angle(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_central_angle()
    return _ret
  @central_angle.setter
  def central_angle(self,  value:'float'):
    self.set_central_angle(value)
  @property
  def fallback_segments(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_fallback_segments()
    return _ret
  @fallback_segments.setter
  def fallback_segments(self,  value:'int'):
    self.set_fallback_segments(value)
  @functools.native_method
  def set_radius(self, radius:'float'   ) -> None:
    r''''''

    assert isinstance(radius, (int, float)), 'radius must be int or float'

    self.py__radius = radius






    self._ptr.call_with_return(288,tuple([radius]))

  @functools.native_method
  def get_radius(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(289,tuple([]))

    return _ret


  @functools.native_method
  def set_aspect_ratio(self, aspect_ratio:'float'   ) -> None:
    r''''''

    assert isinstance(aspect_ratio, (int, float)), 'aspect_ratio must be int or float'

    self.py__aspect_ratio = aspect_ratio






    self._ptr.call_with_return(290,tuple([aspect_ratio]))

  @functools.native_method
  def get_aspect_ratio(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(291,tuple([]))

    return _ret


  @functools.native_method
  def set_central_angle(self, angle:'float'   ) -> None:
    r''''''

    assert isinstance(angle, (int, float)), 'angle must be int or float'

    self.py__central_angle = angle






    self._ptr.call_with_return(292,tuple([angle]))

  @functools.native_method
  def get_central_angle(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(293,tuple([]))

    return _ret


  @functools.native_method
  def set_fallback_segments(self, segments:'int'   ) -> None:
    r''''''

    assert isinstance(segments, (int, float)), 'segments must be int or float'

    self.py__fallback_segments = segments






    self._ptr.call_with_return(294,tuple([segments]))

  @functools.native_method
  def get_fallback_segments(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(295,tuple([]))

    return _ret



register_cast_function('OpenXRCompositionLayerCylinder', OpenXRCompositionLayerCylinder.cast)
register_class('OpenXRCompositionLayerCylinder', OpenXRCompositionLayerCylinder)
