# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.OpenXRHapticBase as py4godot_openxrhapticbase 
from py4godot.wrappers.wrappers import CPPOpenXRHapticVibrationWrapper


class OpenXRHapticVibration(py4godot_openxrhapticbase.OpenXRHapticBase):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRHapticVibration.construct_without_init()
    class_._ptr = constructor(550,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRHapticVibration.construct_without_init()
    class_._ptr = constructor(550,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRHapticVibrationWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(550,0, ())


  def generate_wrapper(self):
    return CPPOpenXRHapticVibrationWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRHapticVibration.__new__(OpenXRHapticVibration)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRHapticVibration'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRHapticVibration.construct_without_init()
    cls._ptr = CPPOpenXRHapticVibrationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRHapticVibration.construct_without_init()
    cls._ptr = CPPOpenXRHapticVibrationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def duration(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_duration()
    return _ret
  @duration.setter
  def duration(self,  value:'int'):
    self.set_duration(value)
  @property
  def frequency(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_frequency()
    return _ret
  @frequency.setter
  def frequency(self,  value:'float'):
    self.set_frequency(value)
  @property
  def amplitude(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_amplitude()
    return _ret
  @amplitude.setter
  def amplitude(self,  value:'float'):
    self.set_amplitude(value)
  @functools.native_method
  def set_duration(self, duration:'int'   ) -> None:
    r''''''

    assert isinstance(duration, (int, float)), 'duration must be int or float'

    self.py__duration = duration






    self._ptr.call_with_return(77,tuple([duration]))

  @functools.native_method
  def get_duration(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_frequency(self, frequency:'float'   ) -> None:
    r''''''

    assert isinstance(frequency, (int, float)), 'frequency must be int or float'

    self.py__frequency = frequency






    self._ptr.call_with_return(79,tuple([frequency]))

  @functools.native_method
  def get_frequency(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_amplitude(self, amplitude:'float'   ) -> None:
    r''''''

    assert isinstance(amplitude, (int, float)), 'amplitude must be int or float'

    self.py__amplitude = amplitude






    self._ptr.call_with_return(81,tuple([amplitude]))

  @functools.native_method
  def get_amplitude(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret



register_cast_function('OpenXRHapticVibration', OpenXRHapticVibration.cast)
register_class('OpenXRHapticVibration', OpenXRHapticVibration)
