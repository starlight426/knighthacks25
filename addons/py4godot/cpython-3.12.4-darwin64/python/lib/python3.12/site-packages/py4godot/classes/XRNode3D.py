# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.XRPose as py4godot_xrpose 
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPXRNode3DWrapper


class XRNode3D(py4godot_node3d.Node3D):
  r'''
		This node can be bound to a specific pose of an `XRPositionalTracker` and will automatically have its `Node3D.transform` updated by the `XRServer`. Nodes of this type must be added as children of the `XROrigin3D` node.
	'''

  @staticmethod
  def constructor():
    class_ = XRNode3D.construct_without_init()
    class_._ptr = constructor(1023,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRNode3D.construct_without_init()
    class_._ptr = constructor(1023,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRNode3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1023,0, ())


  def generate_wrapper(self):
    return CPPXRNode3DWrapper()
  def init_signals(self):
    super().init_signals()
    tracking_changed_name = utils.py_string_to_string_name("tracking_changed")
    self.tracking_changed = signals.BuiltinSignal(self, tracking_changed_name)

  @staticmethod
  def construct_without_init():
    cls = XRNode3D.__new__(XRNode3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRNode3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRNode3D.construct_without_init()
    cls._ptr = CPPXRNode3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRNode3D.construct_without_init()
    cls._ptr = CPPXRNode3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def tracker(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_tracker()
    return _ret
  @tracker.setter
  def tracker(self,  value:'str'):
    self.set_tracker(value)
  @property
  def pose(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_pose_name()
    return _ret
  @pose.setter
  def pose(self,  value:'str'):
    self.set_pose_name(value)
  @property
  def show_when_tracked(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_show_when_tracked()
    return _ret
  @show_when_tracked.setter
  def show_when_tracked(self,  value:'bool'):
    self.set_show_when_tracked(value)
  @functools.native_method
  def set_tracker(self, tracker_name:'object'   ) -> None:
    r''''''

    assert(not tracker_name is None)
    assert isinstance(tracker_name, (str, StringName)), 'tracker_name must be str or StringName'

    self.py__tracker = tracker_name



    assert(isinstance(tracker_name, (str, StringName)))
    py_stringname_tracker_name = tracker_name if isinstance(tracker_name, StringName) else c_utils.py_string_to_string_name(tracker_name)


    self._ptr.call_with_return(251,tuple([py_stringname_tracker_name._ptr]))

  @functools.native_method
  def get_tracker(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(252,tuple([]))

    return _ret


  @functools.native_method
  def set_pose_name(self, pose:'object'   ) -> None:
    r''''''

    assert(not pose is None)
    assert isinstance(pose, (str, StringName)), 'pose must be str or StringName'

    self.py__pose = pose



    assert(isinstance(pose, (str, StringName)))
    py_stringname_pose = pose if isinstance(pose, StringName) else c_utils.py_string_to_string_name(pose)


    self._ptr.call_with_return(253,tuple([py_stringname_pose._ptr]))

  @functools.native_method
  def get_pose_name(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(254,tuple([]))

    return _ret


  @functools.native_method
  def set_show_when_tracked(self, show:'bool'   ) -> None:
    r''''''

    assert isinstance(show, bool), 'show must be bool'

    self.py__show_when_tracked = show






    self._ptr.call_with_return(255,tuple([show]))

  @functools.native_method
  def get_show_when_tracked(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(256,tuple([]))

    return _ret


  @functools.native_method
  def get_is_active(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the `tracker` has been registered and the `pose` is being tracked.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(257,tuple([]))
    return _ret


  @functools.native_method
  def get_has_tracking_data(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the `tracker` has current tracking data for the `pose` being tracked.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(258,tuple([]))
    return _ret


  @functools.native_method
  def get_pose(self) -> typing.Union['py4godot_xrpose.XRPose']:
    r'''
				Returns the `XRPose` containing the current state of the pose being tracked. This gives access to additional properties of this pose.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: XRPose
    _ret._ptr = self._ptr.call_with_return(259,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def trigger_haptic_pulse(self, action_name:'str'   , frequency:'float'   , amplitude:'float'   , duration_sec:'float'   , delay_sec:'float'   ) -> None:
    r'''
				Triggers a haptic pulse on a device associated with this interface.
				`action_name` is the name of the action for this pulse.
				`frequency` is the frequency of the pulse, set to `0.0` to have the system use a default frequency.
				`amplitude` is the amplitude of the pulse between `0.0` and `1.0`.
				`duration_sec` is the duration of the pulse in seconds.
				`delay_sec` is a delay in seconds before the pulse is given.
			'''

    assert(not action_name is None)
    assert isinstance(action_name, (str, String)), 'action_name must be str or String'
    assert isinstance(frequency, (int, float)), 'frequency must be int or float'
    assert isinstance(amplitude, (int, float)), 'amplitude must be int or float'
    assert isinstance(duration_sec, (int, float)), 'duration_sec must be int or float'
    assert isinstance(delay_sec, (int, float)), 'delay_sec must be int or float'




    assert(isinstance(action_name, (str, String)))
    py_string_action_name = action_name if isinstance(action_name, StringName) else c_utils.py_string_to_string(action_name)





    self._ptr.call_with_return(260,tuple([py_string_action_name._ptr, frequency, amplitude, duration_sec, delay_sec]))


register_cast_function('XRNode3D', XRNode3D.cast)
register_class('XRNode3D', XRNode3D)
