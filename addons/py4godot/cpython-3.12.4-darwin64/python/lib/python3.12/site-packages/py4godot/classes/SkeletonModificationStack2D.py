# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.SkeletonModification2DLookAt as py4godot_skeletonmodification2dlookat 
  import py4godot.classes.SkeletonModification2DFABRIK as py4godot_skeletonmodification2dfabrik 
  import py4godot.classes.SkeletonModification2DTwoBoneIK as py4godot_skeletonmodification2dtwoboneik 
  import py4godot.classes.Skeleton2D as py4godot_skeleton2d 
  import py4godot.classes.SkeletonModification2D as py4godot_skeletonmodification2d 
  import py4godot.classes.SkeletonModification2DPhysicalBones as py4godot_skeletonmodification2dphysicalbones 
  import py4godot.classes.SkeletonModification2DCCDIK as py4godot_skeletonmodification2dccdik 
  import py4godot.classes.SkeletonModification2DStackHolder as py4godot_skeletonmodification2dstackholder 
  import py4godot.classes.SkeletonModification2DJiggle as py4godot_skeletonmodification2djiggle 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPSkeletonModificationStack2DWrapper


class SkeletonModificationStack2D(py4godot_resource.Resource):
  r'''
		This resource is used by the Skeleton and holds a stack of `SkeletonModification2D`s.
		This controls the order of the modifications and how they are applied. Modification order is especially important for full-body IK setups, as you need to execute the modifications in the correct order to get the desired results. For example, you want to execute a modification on the spine _before_ the arms on a humanoid skeleton.
		This resource also controls how strongly all of the modifications are applied to the `Skeleton2D`.
	'''

  @staticmethod
  def constructor():
    class_ = SkeletonModificationStack2D.construct_without_init()
    class_._ptr = constructor(757,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SkeletonModificationStack2D.construct_without_init()
    class_._ptr = constructor(757,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkeletonModificationStack2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(757,0, ())


  def generate_wrapper(self):
    return CPPSkeletonModificationStack2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SkeletonModificationStack2D.__new__(SkeletonModificationStack2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SkeletonModificationStack2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonModificationStack2D.construct_without_init()
    cls._ptr = CPPSkeletonModificationStack2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonModificationStack2D.construct_without_init()
    cls._ptr = CPPSkeletonModificationStack2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enabled()
    return _ret
  @enabled.setter
  def enabled(self,  value:'bool'):
    self.set_enabled(value)
  @property
  def strength(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_strength()
    return _ret
  @strength.setter
  def strength(self,  value:'float'):
    self.set_strength(value)
  @property
  def modification_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_modification_count()
    return _ret
  @modification_count.setter
  def modification_count(self,  value:'int'):
    self.set_modification_count(value)
  @functools.native_method
  def setup(self) -> None:
    r'''
				Sets up the modification stack so it can execute. This function should be called by `Skeleton2D` and shouldn't be manually called unless you know what you are doing.
			'''




    self._ptr.call_with_return(77,tuple([]))

  @functools.native_method
  def execute(self, delta:'float'   , execution_mode:'int'   ) -> None:
    r'''
				Executes all of the `SkeletonModification2D`s in the stack that use the same execution mode as the passed-in `execution_mode`, starting from index `0` to `modification_count`.
				**Note:** The order of the modifications can matter depending on the modifications. For example, modifications on a spine should operate before modifications on the arms in order to get proper results.
			'''

    assert isinstance(delta, (int, float)), 'delta must be int or float'
    assert isinstance(execution_mode, (int, float)), 'execution_mode must be int or float'







    self._ptr.call_with_return(78,tuple([delta, execution_mode]))

  @functools.native_method
  def enable_all_modifications(self, enabled:'bool'   ) -> None:
    r'''
				Enables all `SkeletonModification2D`s in the stack.
			'''

    assert isinstance(enabled, bool), 'enabled must be bool'






    self._ptr.call_with_return(79,tuple([enabled]))

  @functools.native_method
  def get_modification(self, mod_idx:'int'   ) -> typing.Any:
    r'''
				Returns the `SkeletonModification2D` at the passed-in index, `mod_idx`.
			'''

    assert isinstance(mod_idx, (int, float)), 'mod_idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: SkeletonModification2D
    _ret._ptr = self._ptr.call_with_return(80,tuple([mod_idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def add_modification(self, modification:'py4godot_skeletonmodification2d.SkeletonModification2D'   ) -> None:
    r'''
				Adds the passed-in `SkeletonModification2D` to the stack.
			'''

    assert(not modification is None)
    assert isinstance(modification, get_class('SkeletonModification2D')), 'modification must be SkeletonModification2D'






    self._ptr.call_with_return(81,tuple([modification._ptr]))

  @functools.native_method
  def delete_modification(self, mod_idx:'int'   ) -> None:
    r'''
				Deletes the `SkeletonModification2D` at the index position `mod_idx`, if it exists.
			'''

    assert isinstance(mod_idx, (int, float)), 'mod_idx must be int or float'






    self._ptr.call_with_return(82,tuple([mod_idx]))

  @functools.native_method
  def set_modification(self, mod_idx:'int'   , modification:'py4godot_skeletonmodification2d.SkeletonModification2D'   ) -> None:
    r'''
				Sets the modification at `mod_idx` to the passed-in modification, `modification`.
			'''

    assert isinstance(mod_idx, (int, float)), 'mod_idx must be int or float'
    assert(not modification is None)
    assert isinstance(modification, get_class('SkeletonModification2D')), 'modification must be SkeletonModification2D'







    self._ptr.call_with_return(83,tuple([mod_idx, modification._ptr]))

  @functools.native_method
  def set_modification_count(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__modification_count = count






    self._ptr.call_with_return(84,tuple([count]))

  @functools.native_method
  def get_modification_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def get_is_setup(self) -> typing.Union[bool]:
    r'''
				Returns a boolean that indicates whether the modification stack is setup and can execute.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))
    return _ret


  @functools.native_method
  def set_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__enabled = enabled






    self._ptr.call_with_return(87,tuple([enabled]))

  @functools.native_method
  def get_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_strength(self, strength:'float'   ) -> None:
    r''''''

    assert isinstance(strength, (int, float)), 'strength must be int or float'

    self.py__strength = strength






    self._ptr.call_with_return(89,tuple([strength]))

  @functools.native_method
  def get_strength(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def get_skeleton(self) -> typing.Union['py4godot_skeleton2d.Skeleton2D']:
    r'''
				Returns the `Skeleton2D` node that the SkeletonModificationStack2D is bound to.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Skeleton2D
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('SkeletonModificationStack2D', SkeletonModificationStack2D.cast)
register_class('SkeletonModificationStack2D', SkeletonModificationStack2D)
