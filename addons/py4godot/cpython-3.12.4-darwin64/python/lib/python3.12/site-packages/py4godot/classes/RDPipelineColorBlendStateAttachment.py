# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDPipelineColorBlendStateAttachmentWrapper


class RDPipelineColorBlendStateAttachment(py4godot_refcounted.RefCounted):
  r'''
		Controls how blending between source and destination fragments is performed when using `RenderingDevice`.
		For reference, this is how common user-facing blend modes are implemented in Godot's 2D renderer:
		**Mix:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
		```
		**Add:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		```
		**Subtract:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_REVERSE_SUBTRACT
		attachment.color_blend_op = RenderingDevice.BLEND_OP_REVERSE_SUBTRACT
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_SRC_ALPHA
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		```
		**Multiply:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_DST_COLOR
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ZERO
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_DST_ALPHA
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ZERO
		```
		**Pre-multiplied alpha:**
		```gdscript
		var attachment = RDPipelineColorBlendStateAttachment.new()
		attachment.enable_blend = true
		attachment.alpha_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.color_blend_op = RenderingDevice.BLEND_OP_ADD
		attachment.src_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.dst_color_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
		attachment.src_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE
		attachment.dst_alpha_blend_factor = RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
		```
	'''

  @staticmethod
  def constructor():
    class_ = RDPipelineColorBlendStateAttachment.construct_without_init()
    class_._ptr = constructor(648,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDPipelineColorBlendStateAttachment.construct_without_init()
    class_._ptr = constructor(648,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDPipelineColorBlendStateAttachmentWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(648,0, ())


  def generate_wrapper(self):
    return CPPRDPipelineColorBlendStateAttachmentWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDPipelineColorBlendStateAttachment.__new__(RDPipelineColorBlendStateAttachment)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDPipelineColorBlendStateAttachment'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineColorBlendStateAttachment.construct_without_init()
    cls._ptr = CPPRDPipelineColorBlendStateAttachmentWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineColorBlendStateAttachment.construct_without_init()
    cls._ptr = CPPRDPipelineColorBlendStateAttachmentWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def enable_blend(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_blend()
    return _ret
  @enable_blend.setter
  def enable_blend(self,  value:'bool'):
    self.set_enable_blend(value)
  @property
  def src_color_blend_factor(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_src_color_blend_factor()
    return _ret
  @src_color_blend_factor.setter
  def src_color_blend_factor(self,  value:'int'):
    self.set_src_color_blend_factor(value)
  @property
  def dst_color_blend_factor(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_dst_color_blend_factor()
    return _ret
  @dst_color_blend_factor.setter
  def dst_color_blend_factor(self,  value:'int'):
    self.set_dst_color_blend_factor(value)
  @property
  def color_blend_op(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_color_blend_op()
    return _ret
  @color_blend_op.setter
  def color_blend_op(self,  value:'int'):
    self.set_color_blend_op(value)
  @property
  def src_alpha_blend_factor(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_src_alpha_blend_factor()
    return _ret
  @src_alpha_blend_factor.setter
  def src_alpha_blend_factor(self,  value:'int'):
    self.set_src_alpha_blend_factor(value)
  @property
  def dst_alpha_blend_factor(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_dst_alpha_blend_factor()
    return _ret
  @dst_alpha_blend_factor.setter
  def dst_alpha_blend_factor(self,  value:'int'):
    self.set_dst_alpha_blend_factor(value)
  @property
  def alpha_blend_op(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_alpha_blend_op()
    return _ret
  @alpha_blend_op.setter
  def alpha_blend_op(self,  value:'int'):
    self.set_alpha_blend_op(value)
  @property
  def write_r(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_write_r()
    return _ret
  @write_r.setter
  def write_r(self,  value:'bool'):
    self.set_write_r(value)
  @property
  def write_g(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_write_g()
    return _ret
  @write_g.setter
  def write_g(self,  value:'bool'):
    self.set_write_g(value)
  @property
  def write_b(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_write_b()
    return _ret
  @write_b.setter
  def write_b(self,  value:'bool'):
    self.set_write_b(value)
  @property
  def write_a(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_write_a()
    return _ret
  @write_a.setter
  def write_a(self,  value:'bool'):
    self.set_write_a(value)
  @functools.native_method
  def set_as_mix(self) -> None:
    r'''
				Convenience method to perform standard mix blending with straight (non-premultiplied) alpha. This sets `enable_blend` to `true`, `src_color_blend_factor` to `constant RenderingDevice.BLEND_FACTOR_SRC_ALPHA`, `dst_color_blend_factor` to `constant RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA`, `src_alpha_blend_factor` to `constant RenderingDevice.BLEND_FACTOR_SRC_ALPHA` and `dst_alpha_blend_factor` to `constant RenderingDevice.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA`.
			'''




    self._ptr.call_with_return(53,tuple([]))

  @functools.native_method
  def set_enable_blend(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_blend = p_member






    self._ptr.call_with_return(54,tuple([p_member]))

  @functools.native_method
  def get_enable_blend(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([]))

    return _ret


  @functools.native_method
  def set_src_color_blend_factor(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__src_color_blend_factor = p_member






    self._ptr.call_with_return(56,tuple([p_member]))

  @functools.native_method
  def get_src_color_blend_factor(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(57,tuple([]))

    return _ret


  @functools.native_method
  def set_dst_color_blend_factor(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__dst_color_blend_factor = p_member






    self._ptr.call_with_return(58,tuple([p_member]))

  @functools.native_method
  def get_dst_color_blend_factor(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(59,tuple([]))

    return _ret


  @functools.native_method
  def set_color_blend_op(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__color_blend_op = p_member






    self._ptr.call_with_return(60,tuple([p_member]))

  @functools.native_method
  def get_color_blend_op(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([]))

    return _ret


  @functools.native_method
  def set_src_alpha_blend_factor(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__src_alpha_blend_factor = p_member






    self._ptr.call_with_return(62,tuple([p_member]))

  @functools.native_method
  def get_src_alpha_blend_factor(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([]))

    return _ret


  @functools.native_method
  def set_dst_alpha_blend_factor(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__dst_alpha_blend_factor = p_member






    self._ptr.call_with_return(64,tuple([p_member]))

  @functools.native_method
  def get_dst_alpha_blend_factor(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(65,tuple([]))

    return _ret


  @functools.native_method
  def set_alpha_blend_op(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__alpha_blend_op = p_member






    self._ptr.call_with_return(66,tuple([p_member]))

  @functools.native_method
  def get_alpha_blend_op(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(67,tuple([]))

    return _ret


  @functools.native_method
  def set_write_r(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__write_r = p_member






    self._ptr.call_with_return(68,tuple([p_member]))

  @functools.native_method
  def get_write_r(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(69,tuple([]))

    return _ret


  @functools.native_method
  def set_write_g(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__write_g = p_member






    self._ptr.call_with_return(70,tuple([p_member]))

  @functools.native_method
  def get_write_g(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(71,tuple([]))

    return _ret


  @functools.native_method
  def set_write_b(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__write_b = p_member






    self._ptr.call_with_return(72,tuple([p_member]))

  @functools.native_method
  def get_write_b(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([]))

    return _ret


  @functools.native_method
  def set_write_a(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__write_a = p_member






    self._ptr.call_with_return(74,tuple([p_member]))

  @functools.native_method
  def get_write_a(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(75,tuple([]))

    return _ret



register_cast_function('RDPipelineColorBlendStateAttachment', RDPipelineColorBlendStateAttachment.cast)
register_class('RDPipelineColorBlendStateAttachment', RDPipelineColorBlendStateAttachment)
