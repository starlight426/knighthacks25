# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRIPBindingModifier as py4godot_openxripbindingmodifier 
  import py4godot.classes.OpenXRDpadBindingModifier as py4godot_openxrdpadbindingmodifier 
  import py4godot.classes.OpenXRBindingModifier as py4godot_openxrbindingmodifier 
  import py4godot.classes.OpenXRActionMap as py4godot_openxractionmap 
  import py4godot.classes.OpenXRActionBindingModifier as py4godot_openxractionbindingmodifier 
  import py4godot.classes.OpenXRAnalogThresholdModifier as py4godot_openxranalogthresholdmodifier 
import py4godot.classes.PanelContainer as py4godot_panelcontainer 
from py4godot.wrappers.wrappers import CPPOpenXRBindingModifierEditorWrapper


class OpenXRBindingModifierEditor(py4godot_panelcontainer.PanelContainer):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRBindingModifierEditor.construct_without_init()
    class_._ptr = constructor(538,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRBindingModifierEditor.construct_without_init()
    class_._ptr = constructor(538,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRBindingModifierEditorWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(538,0, ())


  def generate_wrapper(self):
    return CPPOpenXRBindingModifierEditorWrapper()
  def init_signals(self):
    super().init_signals()
    binding_modifier_removed_name = utils.py_string_to_string_name("binding_modifier_removed")
    self.binding_modifier_removed = signals.BuiltinSignal(self, binding_modifier_removed_name)

  @staticmethod
  def construct_without_init():
    cls = OpenXRBindingModifierEditor.__new__(OpenXRBindingModifierEditor)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRBindingModifierEditor'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRBindingModifierEditor.construct_without_init()
    cls._ptr = CPPOpenXRBindingModifierEditorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRBindingModifierEditor.construct_without_init()
    cls._ptr = CPPOpenXRBindingModifierEditorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_binding_modifier(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRBindingModifier
    _ret._ptr = self._ptr.call_with_return(437,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def setup(self, action_map:'py4godot_openxractionmap.OpenXRActionMap'   , binding_modifier:'py4godot_openxrbindingmodifier.OpenXRBindingModifier'   ) -> None:
    r''''''

    assert(not action_map is None)
    assert isinstance(action_map, get_class('OpenXRActionMap')), 'action_map must be OpenXRActionMap'
    assert(not binding_modifier is None)
    assert isinstance(binding_modifier, get_class('OpenXRBindingModifier')), 'binding_modifier must be OpenXRBindingModifier'







    self._ptr.call_with_return(438,tuple([action_map._ptr, binding_modifier._ptr]))


register_cast_function('OpenXRBindingModifierEditor', OpenXRBindingModifierEditor.cast)
register_class('OpenXRBindingModifierEditor', OpenXRBindingModifierEditor)
