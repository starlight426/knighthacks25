# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ConcavePolygonShape3D as py4godot_concavepolygonshape3d 
  import py4godot.classes.CollisionShape3D as py4godot_collisionshape3d 
  import py4godot.classes.CapsuleShape3D as py4godot_capsuleshape3d 
  import py4godot.classes.WorldBoundaryShape3D as py4godot_worldboundaryshape3d 
  import py4godot.classes.BoxShape3D as py4godot_boxshape3d 
  import py4godot.classes.SphereShape3D as py4godot_sphereshape3d 
  import py4godot.classes.Shape3D as py4godot_shape3d 
  import py4godot.classes.HeightMapShape3D as py4godot_heightmapshape3d 
  import py4godot.classes.CylinderShape3D as py4godot_cylindershape3d 
  import py4godot.classes.ConvexPolygonShape3D as py4godot_convexpolygonshape3d 
  import py4godot.classes.ImporterMesh as py4godot_importermesh 
  import py4godot.classes.SeparationRayShape3D as py4godot_separationrayshape3d 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFPhysicsShapeWrapper


class GLTFPhysicsShape(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFPhysicsShape.construct_without_init()
    class_._ptr = constructor(357,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFPhysicsShape.construct_without_init()
    class_._ptr = constructor(357,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFPhysicsShapeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(357,0, ())


  def generate_wrapper(self):
    return CPPGLTFPhysicsShapeWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFPhysicsShape.__new__(GLTFPhysicsShape)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFPhysicsShape'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFPhysicsShape.construct_without_init()
    cls._ptr = CPPGLTFPhysicsShapeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFPhysicsShape.construct_without_init()
    cls._ptr = CPPGLTFPhysicsShapeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def shape_type(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_shape_type()
    return _ret
  @shape_type.setter
  def shape_type(self,  value:'str'):
    self.set_shape_type(value)
  @property
  def size(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector3'):
    self.set_size(value)
  @property
  def radius(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_radius()
    return _ret
  @radius.setter
  def radius(self,  value:'float'):
    self.set_radius(value)
  @property
  def height(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'float'):
    self.set_height(value)
  @property
  def is_trigger(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_is_trigger()
    return _ret
  @is_trigger.setter
  def is_trigger(self,  value:'bool'):
    self.set_is_trigger(value)
  @property
  def mesh_index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mesh_index()
    return _ret
  @mesh_index.setter
  def mesh_index(self,  value:'int'):
    self.set_mesh_index(value)
  @property
  def importer_mesh(self) -> typing.Union['py4godot_importermesh.ImporterMesh']:
    r''''''
    _ret = self. get_importer_mesh()
    return _ret
  @importer_mesh.setter
  def importer_mesh(self,  value:'py4godot_object.Object'):
    self.set_importer_mesh(value)
  @staticmethod
  def from_node(shape_node:'py4godot_collisionshape3d.CollisionShape3D'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not shape_node is None)
    assert isinstance(shape_node, get_class('CollisionShape3D')), 'shape_node must be CollisionShape3D'






    _ret = GLTFPhysicsShape.construct_without_init()
    _ret._ptr = static_method(357,1,tuple([shape_node._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def to_node(self, cache_shapes:'bool' =False  ) -> typing.Union['py4godot_collisionshape3d.CollisionShape3D']:
    r''''''

    assert isinstance(cache_shapes, bool), 'cache_shapes must be bool'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: CollisionShape3D
    _ret._ptr = self._ptr.call_with_return(77,tuple([cache_shapes]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def from_resource(shape_resource:'py4godot_shape3d.Shape3D'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not shape_resource is None)
    assert isinstance(shape_resource, get_class('Shape3D')), 'shape_resource must be Shape3D'






    _ret = GLTFPhysicsShape.construct_without_init()
    _ret._ptr = static_method(357,2,tuple([shape_resource._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def to_resource(self, cache_shapes:'bool' =False  ) -> typing.Any:
    r''''''

    assert isinstance(cache_shapes, bool), 'cache_shapes must be bool'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Shape3D
    _ret._ptr = self._ptr.call_with_return(78,tuple([cache_shapes]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def from_dictionary(dictionary:'Dictionary'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not dictionary is None)
    assert isinstance(dictionary, Dictionary), 'dictionary must be Dictionary'






    _ret = GLTFPhysicsShape.construct_without_init()
    _ret._ptr = static_method(357,3,tuple([dictionary._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def to_dictionary(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def get_shape_type(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_shape_type(self, shape_type:'str'   ) -> None:
    r''''''

    assert(not shape_type is None)
    assert isinstance(shape_type, (str, String)), 'shape_type must be str or String'

    self.py__shape_type = shape_type



    assert(isinstance(shape_type, (str, String)))
    py_string_shape_type = shape_type if isinstance(shape_type, StringName) else c_utils.py_string_to_string(shape_type)

    py__string_shape_type = utils.py_string_to_string(shape_type)
    py__string_shape_type.shouldBeDeleted = False


    self._ptr.call_with_return(81,tuple([py__string_shape_type._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_size(self, size:'Vector3'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector3), 'size must be Vector3'

    self.py__size = size






    self._ptr.call_with_return(83,tuple([size._ptr]))

  @functools.native_method
  def get_radius(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_radius(self, radius:'float'   ) -> None:
    r''''''

    assert isinstance(radius, (int, float)), 'radius must be int or float'

    self.py__radius = radius






    self._ptr.call_with_return(85,tuple([radius]))

  @functools.native_method
  def get_height(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_height(self, height:'float'   ) -> None:
    r''''''

    assert isinstance(height, (int, float)), 'height must be int or float'

    self.py__height = height






    self._ptr.call_with_return(87,tuple([height]))

  @functools.native_method
  def get_is_trigger(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_is_trigger(self, is_trigger:'bool'   ) -> None:
    r''''''

    assert isinstance(is_trigger, bool), 'is_trigger must be bool'

    self.py__is_trigger = is_trigger






    self._ptr.call_with_return(89,tuple([is_trigger]))

  @functools.native_method
  def get_mesh_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_mesh_index(self, mesh_index:'int'   ) -> None:
    r''''''

    assert isinstance(mesh_index, (int, float)), 'mesh_index must be int or float'

    self.py__mesh_index = mesh_index






    self._ptr.call_with_return(91,tuple([mesh_index]))

  @functools.native_method
  def get_importer_mesh(self) -> typing.Union['py4godot_importermesh.ImporterMesh']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ImporterMesh
    _ret._ptr = self._ptr.call_with_return(92,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_importer_mesh(self, importer_mesh:'py4godot_importermesh.ImporterMesh'   ) -> None:
    r''''''

    assert(not importer_mesh is None)
    assert isinstance(importer_mesh, get_class('ImporterMesh')), 'importer_mesh must be ImporterMesh'

    self.py__importer_mesh = importer_mesh






    self._ptr.call_with_return(93,tuple([importer_mesh._ptr]))


register_cast_function('GLTFPhysicsShape', GLTFPhysicsShape.cast)
register_class('GLTFPhysicsShape', GLTFPhysicsShape)
