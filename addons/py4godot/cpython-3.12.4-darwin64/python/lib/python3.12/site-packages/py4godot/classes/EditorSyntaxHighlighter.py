# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.GDScriptSyntaxHighlighter as py4godot_gdscriptsyntaxhighlighter 
import py4godot.classes.SyntaxHighlighter as py4godot_syntaxhighlighter 
from py4godot.wrappers.wrappers import CPPEditorSyntaxHighlighterWrapper


class EditorSyntaxHighlighter(py4godot_syntaxhighlighter.SyntaxHighlighter):
  r'''
		Base class that all `SyntaxHighlighter`s used by the `ScriptEditor` extend from.
		Add a syntax highlighter to an individual script by calling `ScriptEditorBase.add_syntax_highlighter`. To apply to all scripts on open, call `ScriptEditor.register_syntax_highlighter`.
	'''

  @staticmethod
  def constructor():
    class_ = EditorSyntaxHighlighter.construct_without_init()
    class_._ptr = constructor(314,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorSyntaxHighlighter.construct_without_init()
    class_._ptr = constructor(314,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorSyntaxHighlighterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(314,0, ())


  def generate_wrapper(self):
    return CPPEditorSyntaxHighlighterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EditorSyntaxHighlighter.__new__(EditorSyntaxHighlighter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorSyntaxHighlighter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorSyntaxHighlighter.construct_without_init()
    cls._ptr = CPPEditorSyntaxHighlighterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorSyntaxHighlighter.construct_without_init()
    cls._ptr = CPPEditorSyntaxHighlighterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_name(self) -> typing.Union[str]:
    r'''
				Virtual method which can be overridden to return the syntax highlighter name.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _get_supported_languages(self) -> typing.Union['PackedStringArray']:
    r'''
				Virtual method which can be overridden to return the supported language names.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))
    return _ret


  @functools.native_method
  def _create(self) -> typing.Union['py4godot_gdscriptsyntaxhighlighter.GDScriptSyntaxHighlighter','typing.Self']:
    r'''
				Virtual method which creates a new instance of the syntax highlighter.
			'''




    _ret = EditorSyntaxHighlighter.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('EditorSyntaxHighlighter', EditorSyntaxHighlighter.cast)
register_class('EditorSyntaxHighlighter', EditorSyntaxHighlighter)
