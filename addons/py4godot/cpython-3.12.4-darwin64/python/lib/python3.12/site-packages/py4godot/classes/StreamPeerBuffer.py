# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.StreamPeer as py4godot_streampeer 
from py4godot.wrappers.wrappers import CPPStreamPeerBufferWrapper


class StreamPeerBuffer(py4godot_streampeer.StreamPeer):
  r'''
		A data buffer stream peer that uses a byte array as the stream. This object can be used to handle binary data from network sessions. To handle binary data stored in files, `FileAccess` can be used directly.
		A `StreamPeerBuffer` object keeps an internal cursor which is the offset in bytes to the start of the buffer. Get and put operations are performed at the cursor position and will move the cursor accordingly.
	'''

  @staticmethod
  def constructor():
    class_ = StreamPeerBuffer.construct_without_init()
    class_._ptr = constructor(788,0, ())
    return class_
  @staticmethod
  def new():
    class_ = StreamPeerBuffer.construct_without_init()
    class_._ptr = constructor(788,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPStreamPeerBufferWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(788,0, ())


  def generate_wrapper(self):
    return CPPStreamPeerBufferWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = StreamPeerBuffer.__new__(StreamPeerBuffer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'StreamPeerBuffer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = StreamPeerBuffer.construct_without_init()
    cls._ptr = CPPStreamPeerBufferWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = StreamPeerBuffer.construct_without_init()
    cls._ptr = CPPStreamPeerBufferWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def data_array(self) -> typing.Union['PackedByteArray']:
    r''''''
    _ret = self. get_data_array()
    return _ret
  @data_array.setter
  def data_array(self,  value:'PackedByteArray'):
    self.set_data_array(value)
  @functools.native_method
  def seek(self, position:'int'   ) -> None:
    r'''
				Moves the cursor to the specified position. `position` must be a valid index of `data_array`.
			'''

    assert isinstance(position, (int, float)), 'position must be int or float'






    self._ptr.call_with_return(88,tuple([position]))

  @functools.native_method
  def get_size(self) -> typing.Union[int]:
    r'''
				Returns the size of `data_array`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))
    return _ret


  @functools.native_method
  def get_position(self) -> typing.Union[int]:
    r'''
				Returns the current cursor position.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([]))
    return _ret


  @functools.native_method
  def resize(self, size:'int'   ) -> None:
    r'''
				Resizes the `data_array`. This _doesn't_ update the cursor.
			'''

    assert isinstance(size, (int, float)), 'size must be int or float'






    self._ptr.call_with_return(91,tuple([size]))

  @functools.native_method
  def set_data_array(self, data:'PackedByteArray'   ) -> None:
    r''''''

    assert(not data is None)
    assert isinstance(data, PackedByteArray), 'data must be PackedByteArray'

    self.py__data_array = data






    self._ptr.call_with_return(92,tuple([data._ptr]))

  @functools.native_method
  def get_data_array(self) -> typing.Union['PackedByteArray']:
    r''''''




    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def clear(self) -> None:
    r'''
				Clears the `data_array` and resets the cursor.
			'''




    self._ptr.call_with_return(94,tuple([]))

  @functools.native_method
  def duplicate(self) -> typing.Union['typing.Self']:
    r'''
				Returns a new `StreamPeerBuffer` with the same `data_array` content.
			'''




    _ret = StreamPeerBuffer.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(95,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('StreamPeerBuffer', StreamPeerBuffer.cast)
register_class('StreamPeerBuffer', StreamPeerBuffer)
