# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AnimationNode as py4godot_animationnode 
from py4godot.wrappers.wrappers import CPPAnimationNodeTimeSeekWrapper


class AnimationNodeTimeSeek(py4godot_animationnode.AnimationNode):
  r'''
		This animation node can be used to cause a seek command to happen to any sub-children of the animation graph. Use to play an `Animation` from the start or a certain playback position inside the `AnimationNodeBlendTree`.
		After setting the time and changing the animation playback, the time seek node automatically goes into sleep mode on the next process frame by setting its `seek_request` value to `-1.0`.
		
		```gdscript
		# Play child animation from the start.
		animation_tree.set("parameters/TimeSeek/seek_request", 0.0)
		# Alternative syntax (same result as above).
		animation_tree`"parameters/TimeSeek/seek_request"` = 0.0

		# Play child animation from 12 second timestamp.
		animation_tree.set("parameters/TimeSeek/seek_request", 12.0)
		# Alternative syntax (same result as above).
		animation_tree`"parameters/TimeSeek/seek_request"` = 12.0
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = AnimationNodeTimeSeek.construct_without_init()
    class_._ptr = constructor(93,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeTimeSeek.construct_without_init()
    class_._ptr = constructor(93,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeTimeSeekWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(93,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeTimeSeekWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeTimeSeek.__new__(AnimationNodeTimeSeek)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeTimeSeek'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeTimeSeek.construct_without_init()
    cls._ptr = CPPAnimationNodeTimeSeekWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeTimeSeek.construct_without_init()
    cls._ptr = CPPAnimationNodeTimeSeekWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def explicit_elapse(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_explicit_elapse()
    return _ret
  @explicit_elapse.setter
  def explicit_elapse(self,  value:'bool'):
    self.set_explicit_elapse(value)
  @functools.native_method
  def set_explicit_elapse(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__explicit_elapse = enable






    self._ptr.call_with_return(102,tuple([enable]))

  @functools.native_method
  def is_explicit_elapse(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(103,tuple([]))

    return _ret



register_cast_function('AnimationNodeTimeSeek', AnimationNodeTimeSeek.cast)
register_class('AnimationNodeTimeSeek', AnimationNodeTimeSeek)
