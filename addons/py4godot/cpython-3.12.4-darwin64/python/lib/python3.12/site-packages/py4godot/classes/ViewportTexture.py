# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPViewportTextureWrapper


class ViewportTexture(py4godot_texture2d.Texture2D):
  r'''
		A `ViewportTexture` provides the content of a `Viewport` as a dynamic `Texture2D`. This can be used to combine the rendering of `Control`, `Node2D` and `Node3D` nodes. For example, you can use this texture to display a 3D scene inside a `TextureRect`, or a 2D overlay in a `Sprite3D`.
		To get a `ViewportTexture` in code, use the `Viewport.get_texture` method on the target viewport.
		**Note:** A `ViewportTexture` is always local to its scene (see `Resource.resource_local_to_scene`). If the scene root is not ready, it may return incorrect data (see `signal Node.ready`).
		**Note:** Instantiating scenes containing a high-resolution `ViewportTexture` may cause noticeable stutter.
		**Note:** When using a `Viewport` with `Viewport.use_hdr_2d` set to `true`, the returned texture will be an HDR image that uses linear encoding. This may look darker than normal when displayed directly on screen. To convert to nonlinear sRGB encoding, you can do the following:
		```gdscript
		img.convert(Image.FORMAT_RGBA8)
		img.linear_to_srgb()
		```
		**Note:** Some nodes such as `Decal`, `Light3D`, and `PointLight2D` do not support using `ViewportTexture` directly. To use texture data from a `ViewportTexture` in these nodes, you need to create an `ImageTexture` by calling `Texture2D.get_image` on the `ViewportTexture` and passing the result to `ImageTexture.create_from_image`. This conversion is a slow operation, so it should not be performed every frame.
	'''

  @staticmethod
  def constructor():
    class_ = ViewportTexture.construct_without_init()
    class_._ptr = constructor(873,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ViewportTexture.construct_without_init()
    class_._ptr = constructor(873,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPViewportTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(873,0, ())


  def generate_wrapper(self):
    return CPPViewportTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ViewportTexture.__new__(ViewportTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ViewportTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ViewportTexture.construct_without_init()
    cls._ptr = CPPViewportTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ViewportTexture.construct_without_init()
    cls._ptr = CPPViewportTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def viewport_path(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_viewport_path_in_scene()
    return _ret
  @viewport_path.setter
  def viewport_path(self,  value:'object'):
    self.set_viewport_path_in_scene(value)
  @functools.native_method
  def set_viewport_path_in_scene(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__viewport_path = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(93,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_viewport_path_in_scene(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return _ret



register_cast_function('ViewportTexture', ViewportTexture.cast)
register_class('ViewportTexture', ViewportTexture)
