# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPLightmapProbeWrapper


class LightmapProbe(py4godot_node3d.Node3D):
  r'''
		`LightmapProbe` represents the position of a single manually placed probe for dynamic object lighting with `LightmapGI`. Lightmap probes affect the lighting of `GeometryInstance3D`-derived nodes that have their `GeometryInstance3D.gi_mode` set to `constant GeometryInstance3D.GI_MODE_DYNAMIC`.
		Typically, `LightmapGI` probes are placed automatically by setting `LightmapGI.generate_probes_subdiv` to a value other than `constant LightmapGI.GENERATE_PROBES_DISABLED`. By creating `LightmapProbe` nodes before baking lightmaps, you can add more probes in specific areas for greater detail, or disable automatic generation and rely only on manually placed probes instead.
		**Note:** `LightmapProbe` nodes that are placed after baking lightmaps are ignored by dynamic objects. You must bake lightmaps again after creating or modifying `LightmapProbe`s for the probes to be effective.
	'''

  @staticmethod
  def constructor():
    class_ = LightmapProbe.construct_without_init()
    class_._ptr = constructor(454,0, ())
    return class_
  @staticmethod
  def new():
    class_ = LightmapProbe.construct_without_init()
    class_._ptr = constructor(454,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPLightmapProbeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(454,0, ())


  def generate_wrapper(self):
    return CPPLightmapProbeWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = LightmapProbe.__new__(LightmapProbe)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'LightmapProbe'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = LightmapProbe.construct_without_init()
    cls._ptr = CPPLightmapProbeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = LightmapProbe.construct_without_init()
    cls._ptr = CPPLightmapProbeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('LightmapProbe', LightmapProbe.cast)
register_class('LightmapProbe', LightmapProbe)
