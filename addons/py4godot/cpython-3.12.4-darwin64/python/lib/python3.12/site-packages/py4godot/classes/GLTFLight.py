# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.DirectionalLight3D as py4godot_directionallight3d 
  import py4godot.classes.OmniLight3D as py4godot_omnilight3d 
  import py4godot.classes.Light3D as py4godot_light3d 
  import py4godot.classes.SpotLight3D as py4godot_spotlight3d 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFLightWrapper


class GLTFLight(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFLight.construct_without_init()
    class_._ptr = constructor(352,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFLight.construct_without_init()
    class_._ptr = constructor(352,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFLightWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(352,0, ())


  def generate_wrapper(self):
    return CPPGLTFLightWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFLight.__new__(GLTFLight)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFLight'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFLight.construct_without_init()
    cls._ptr = CPPGLTFLightWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFLight.construct_without_init()
    cls._ptr = CPPGLTFLightWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_color()
    return _ret
  @color.setter
  def color(self,  value:'Color'):
    self.set_color(value)
  @property
  def intensity(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_intensity()
    return _ret
  @intensity.setter
  def intensity(self,  value:'float'):
    self.set_intensity(value)
  @property
  def light_type(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_light_type()
    return _ret
  @light_type.setter
  def light_type(self,  value:'str'):
    self.set_light_type(value)
  @property
  def range(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_range()
    return _ret
  @range.setter
  def range(self,  value:'float'):
    self.set_range(value)
  @property
  def inner_cone_angle(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_inner_cone_angle()
    return _ret
  @inner_cone_angle.setter
  def inner_cone_angle(self,  value:'float'):
    self.set_inner_cone_angle(value)
  @property
  def outer_cone_angle(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_outer_cone_angle()
    return _ret
  @outer_cone_angle.setter
  def outer_cone_angle(self,  value:'float'):
    self.set_outer_cone_angle(value)
  @staticmethod
  def from_node(light_node:'py4godot_light3d.Light3D'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not light_node is None)
    assert isinstance(light_node, get_class('Light3D')), 'light_node must be Light3D'






    _ret = GLTFLight.construct_without_init()
    _ret._ptr = static_method(352,1,tuple([light_node._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def to_node(self) -> typing.Union['py4godot_directionallight3d.DirectionalLight3D','py4godot_spotlight3d.SpotLight3D','py4godot_omnilight3d.OmniLight3D','py4godot_light3d.Light3D']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Light3D
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def from_dictionary(dictionary:'Dictionary'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not dictionary is None)
    assert isinstance(dictionary, Dictionary), 'dictionary must be Dictionary'






    _ret = GLTFLight.construct_without_init()
    _ret._ptr = static_method(352,2,tuple([dictionary._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def to_dictionary(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))
    return _ret


  @functools.native_method
  def get_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__color = color






    self._ptr.call_with_return(80,tuple([color._ptr]))

  @functools.native_method
  def get_intensity(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_intensity(self, intensity:'float'   ) -> None:
    r''''''

    assert isinstance(intensity, (int, float)), 'intensity must be int or float'

    self.py__intensity = intensity






    self._ptr.call_with_return(82,tuple([intensity]))

  @functools.native_method
  def get_light_type(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_light_type(self, light_type:'str'   ) -> None:
    r''''''

    assert(not light_type is None)
    assert isinstance(light_type, (str, String)), 'light_type must be str or String'

    self.py__light_type = light_type



    assert(isinstance(light_type, (str, String)))
    py_string_light_type = light_type if isinstance(light_type, StringName) else c_utils.py_string_to_string(light_type)

    py__string_light_type = utils.py_string_to_string(light_type)
    py__string_light_type.shouldBeDeleted = False


    self._ptr.call_with_return(84,tuple([py__string_light_type._ptr]))

  @functools.native_method
  def get_range(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_range(self, range:'float'   ) -> None:
    r''''''

    assert isinstance(range, (int, float)), 'range must be int or float'

    self.py__range = range






    self._ptr.call_with_return(86,tuple([range]))

  @functools.native_method
  def get_inner_cone_angle(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_inner_cone_angle(self, inner_cone_angle:'float'   ) -> None:
    r''''''

    assert isinstance(inner_cone_angle, (int, float)), 'inner_cone_angle must be int or float'

    self.py__inner_cone_angle = inner_cone_angle






    self._ptr.call_with_return(88,tuple([inner_cone_angle]))

  @functools.native_method
  def get_outer_cone_angle(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_outer_cone_angle(self, outer_cone_angle:'float'   ) -> None:
    r''''''

    assert isinstance(outer_cone_angle, (int, float)), 'outer_cone_angle must be int or float'

    self.py__outer_cone_angle = outer_cone_angle






    self._ptr.call_with_return(90,tuple([outer_cone_angle]))

  @functools.native_method
  def get_additional_data(self, extension_name:'object'   ) -> typing.Union[typing.Any]:
    r''''''

    assert(not extension_name is None)
    assert isinstance(extension_name, (str, StringName)), 'extension_name must be str or StringName'




    assert(isinstance(extension_name, (str, StringName)))
    py_stringname_extension_name = extension_name if isinstance(extension_name, StringName) else c_utils.py_string_to_string_name(extension_name)

    _ret = None
    _ret = self._ptr.call_with_return(91,tuple([py_stringname_extension_name._ptr]))
    return _ret


  @functools.native_method
  def set_additional_data(self, extension_name:'object'   , additional_data:'object'   ) -> None:
    r''''''

    assert(not extension_name is None)
    assert isinstance(extension_name, (str, StringName)), 'extension_name must be str or StringName'
    




    assert(isinstance(extension_name, (str, StringName)))
    py_stringname_extension_name = extension_name if isinstance(extension_name, StringName) else c_utils.py_string_to_string_name(extension_name)


    self._ptr.call_with_return(92,tuple([py_stringname_extension_name._ptr, additional_data]))


register_cast_function('GLTFLight', GLTFLight.cast)
register_class('GLTFLight', GLTFLight)
