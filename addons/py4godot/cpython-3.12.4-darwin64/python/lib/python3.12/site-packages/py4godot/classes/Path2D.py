# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Curve2D as py4godot_curve2d 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPPath2DWrapper


class Path2D(py4godot_node2d.Node2D):
  r'''
		Can have `PathFollow2D` child nodes moving along the `Curve2D`. See `PathFollow2D` for more information on usage.
		**Note:** The path is considered as relative to the moved nodes (children of `PathFollow2D`). As such, the curve should usually start with a zero vector (`(0, 0)`).
	'''

  @staticmethod
  def constructor():
    class_ = Path2D.construct_without_init()
    class_._ptr = constructor(580,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Path2D.construct_without_init()
    class_._ptr = constructor(580,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPath2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(580,0, ())


  def generate_wrapper(self):
    return CPPPath2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Path2D.__new__(Path2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Path2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Path2D.construct_without_init()
    cls._ptr = CPPPath2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Path2D.construct_without_init()
    cls._ptr = CPPPath2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def curve(self) -> typing.Union['py4godot_curve2d.Curve2D']:
    r''''''
    _ret = self. get_curve()
    return _ret
  @curve.setter
  def curve(self,  value:'py4godot_object.Object'):
    self.set_curve(value)
  @functools.native_method
  def set_curve(self, curve:'py4godot_curve2d.Curve2D'   ) -> None:
    r''''''

    assert(not curve is None)
    assert isinstance(curve, get_class('Curve2D')), 'curve must be Curve2D'

    self.py__curve = curve






    self._ptr.call_with_return(303,tuple([curve._ptr]))

  @functools.native_method
  def get_curve(self) -> typing.Union['py4godot_curve2d.Curve2D']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Curve2D
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('Path2D', Path2D.cast)
register_class('Path2D', Path2D)
