# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Control as py4godot_control 
from py4godot.wrappers.wrappers import CPPReferenceRectWrapper


class ReferenceRect(py4godot_control.Control):
  r'''
		A rectangular box that displays only a colored border around its rectangle (see `Control.get_rect`). It can be used to visualize the extents of a `Control` node, for testing purposes.
	'''

  @staticmethod
  def constructor():
    class_ = ReferenceRect.construct_without_init()
    class_._ptr = constructor(667,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ReferenceRect.construct_without_init()
    class_._ptr = constructor(667,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPReferenceRectWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(667,0, ())


  def generate_wrapper(self):
    return CPPReferenceRectWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ReferenceRect.__new__(ReferenceRect)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ReferenceRect'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ReferenceRect.construct_without_init()
    cls._ptr = CPPReferenceRectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ReferenceRect.construct_without_init()
    cls._ptr = CPPReferenceRectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def border_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_border_color()
    return _ret
  @border_color.setter
  def border_color(self,  value:'Color'):
    self.set_border_color(value)
  @property
  def border_width(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_border_width()
    return _ret
  @border_width.setter
  def border_width(self,  value:'float'):
    self.set_border_width(value)
  @property
  def editor_only(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_editor_only()
    return _ret
  @editor_only.setter
  def editor_only(self,  value:'bool'):
    self.set_editor_only(value)
  @functools.native_method
  def get_border_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(433,tuple([]))

    return _ret


  @functools.native_method
  def set_border_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__border_color = color






    self._ptr.call_with_return(434,tuple([color._ptr]))

  @functools.native_method
  def get_border_width(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(435,tuple([]))

    return _ret


  @functools.native_method
  def set_border_width(self, width:'float'   ) -> None:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'

    self.py__border_width = width






    self._ptr.call_with_return(436,tuple([width]))

  @functools.native_method
  def get_editor_only(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(437,tuple([]))

    return _ret


  @functools.native_method
  def set_editor_only(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__editor_only = enabled






    self._ptr.call_with_return(438,tuple([enabled]))


register_cast_function('ReferenceRect', ReferenceRect.cast)
register_class('ReferenceRect', ReferenceRect)
