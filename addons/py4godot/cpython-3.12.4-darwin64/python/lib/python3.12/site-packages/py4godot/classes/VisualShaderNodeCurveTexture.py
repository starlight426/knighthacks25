# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
import py4godot.classes.VisualShaderNodeResizableBase as py4godot_visualshadernoderesizablebase 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeCurveTextureWrapper


class VisualShaderNodeCurveTexture(py4godot_visualshadernoderesizablebase.VisualShaderNodeResizableBase):
  r'''
		Comes with a built-in editor for texture's curves.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeCurveTexture.construct_without_init()
    class_._ptr = constructor(894,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeCurveTexture.construct_without_init()
    class_._ptr = constructor(894,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeCurveTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(894,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeCurveTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeCurveTexture.__new__(VisualShaderNodeCurveTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeCurveTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeCurveTexture.construct_without_init()
    cls._ptr = CPPVisualShaderNodeCurveTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeCurveTexture.construct_without_init()
    cls._ptr = CPPVisualShaderNodeCurveTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture(self) -> typing.Union['py4godot_curvetexture.CurveTexture']:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @functools.native_method
  def set_texture(self, texture:'py4godot_curvetexture.CurveTexture'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('CurveTexture')), 'texture must be CurveTexture'

    self.py__texture = texture






    self._ptr.call_with_return(90,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Union['py4godot_curvetexture.CurveTexture']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: CurveTexture
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('VisualShaderNodeCurveTexture', VisualShaderNodeCurveTexture.cast)
register_class('VisualShaderNodeCurveTexture', VisualShaderNodeCurveTexture)
