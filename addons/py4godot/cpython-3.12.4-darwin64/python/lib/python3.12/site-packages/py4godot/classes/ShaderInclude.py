# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPShaderIncludeWrapper


class ShaderInclude(py4godot_resource.Resource):
  r'''
		A shader include file, saved with the `.gdshaderinc` extension. This class allows you to define a custom shader snippet that can be included in a `Shader` by using the preprocessor directive `#include`, followed by the file path (e.g. `#include "res://shader_lib.gdshaderinc"`). The snippet doesn't have to be a valid shader on its own.
	'''

  @staticmethod
  def constructor():
    class_ = ShaderInclude.construct_without_init()
    class_._ptr = constructor(738,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ShaderInclude.construct_without_init()
    class_._ptr = constructor(738,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPShaderIncludeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(738,0, ())


  def generate_wrapper(self):
    return CPPShaderIncludeWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ShaderInclude.__new__(ShaderInclude)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ShaderInclude'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ShaderInclude.construct_without_init()
    cls._ptr = CPPShaderIncludeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ShaderInclude.construct_without_init()
    cls._ptr = CPPShaderIncludeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def code(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_code()
    return _ret
  @code.setter
  def code(self,  value:'str'):
    self.set_code(value)
  @functools.native_method
  def set_code(self, code:'str'   ) -> None:
    r''''''

    assert(not code is None)
    assert isinstance(code, (str, String)), 'code must be str or String'

    self.py__code = code



    assert(isinstance(code, (str, String)))
    py_string_code = code if isinstance(code, StringName) else c_utils.py_string_to_string(code)

    py__string_code = utils.py_string_to_string(code)
    py__string_code.shouldBeDeleted = False


    self._ptr.call_with_return(77,tuple([py__string_code._ptr]))

  @functools.native_method
  def get_code(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return utils.gd_string_to_py_string(_ret)



register_cast_function('ShaderInclude', ShaderInclude.cast)
register_class('ShaderInclude', ShaderInclude)
