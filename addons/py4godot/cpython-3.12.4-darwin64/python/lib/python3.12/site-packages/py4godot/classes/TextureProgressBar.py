# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Range as py4godot_range 
from py4godot.wrappers.wrappers import CPPTextureProgressBarWrapper

class FillMode:
  FILL_LEFT_TO_RIGHT = 0
  FILL_RIGHT_TO_LEFT = 1
  FILL_TOP_TO_BOTTOM = 2
  FILL_BOTTOM_TO_TOP = 3
  FILL_CLOCKWISE = 4
  FILL_COUNTER_CLOCKWISE = 5
  FILL_BILINEAR_LEFT_AND_RIGHT = 6
  FILL_BILINEAR_TOP_AND_BOTTOM = 7
  FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE = 8


class TextureProgressBar(py4godot_range.Range):
  r'''
		TextureProgressBar works like `ProgressBar`, but uses up to 3 textures instead of Godot's `Theme` resource. It can be used to create horizontal, vertical and radial progress bars.
	'''

  @staticmethod
  def constructor():
    class_ = TextureProgressBar.construct_without_init()
    class_._ptr = constructor(829,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TextureProgressBar.construct_without_init()
    class_._ptr = constructor(829,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTextureProgressBarWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(829,0, ())


  def generate_wrapper(self):
    return CPPTextureProgressBarWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = TextureProgressBar.__new__(TextureProgressBar)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TextureProgressBar'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextureProgressBar.construct_without_init()
    cls._ptr = CPPTextureProgressBarWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextureProgressBar.construct_without_init()
    cls._ptr = CPPTextureProgressBarWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def fill_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_fill_mode()
    return _ret
  @fill_mode.setter
  def fill_mode(self,  value:'int'):
    self.set_fill_mode(value)
  @property
  def radial_initial_angle(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_radial_initial_angle()
    return _ret
  @radial_initial_angle.setter
  def radial_initial_angle(self,  value:'float'):
    self.set_radial_initial_angle(value)
  @property
  def radial_fill_degrees(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_fill_degrees()
    return _ret
  @radial_fill_degrees.setter
  def radial_fill_degrees(self,  value:'float'):
    self.set_fill_degrees(value)
  @property
  def radial_center_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_radial_center_offset()
    return _ret
  @radial_center_offset.setter
  def radial_center_offset(self,  value:'Vector2'):
    self.set_radial_center_offset(value)
  @property
  def nine_patch_stretch(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_nine_patch_stretch()
    return _ret
  @nine_patch_stretch.setter
  def nine_patch_stretch(self,  value:'bool'):
    self.set_nine_patch_stretch(value)
  @property
  def stretch_margin_left(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stretch_margin(0)
    return _ret
  @stretch_margin_left.setter
  def stretch_margin_left(self,  value:'int'):
    self.set_stretch_margin(value)
  @property
  def stretch_margin_top(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stretch_margin(1)
    return _ret
  @stretch_margin_top.setter
  def stretch_margin_top(self,  value:'int'):
    self.set_stretch_margin(value)
  @property
  def stretch_margin_right(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stretch_margin(2)
    return _ret
  @stretch_margin_right.setter
  def stretch_margin_right(self,  value:'int'):
    self.set_stretch_margin(value)
  @property
  def stretch_margin_bottom(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stretch_margin(3)
    return _ret
  @stretch_margin_bottom.setter
  def stretch_margin_bottom(self,  value:'int'):
    self.set_stretch_margin(value)
  @property
  def texture_under(self) -> typing.Any:
    r''''''
    _ret = self. get_under_texture()
    return _ret
  @texture_under.setter
  def texture_under(self,  value:'py4godot_object.Object'):
    self.set_under_texture(value)
  @property
  def texture_over(self) -> typing.Any:
    r''''''
    _ret = self. get_over_texture()
    return _ret
  @texture_over.setter
  def texture_over(self,  value:'py4godot_object.Object'):
    self.set_over_texture(value)
  @property
  def texture_progress(self) -> typing.Any:
    r''''''
    _ret = self. get_progress_texture()
    return _ret
  @texture_progress.setter
  def texture_progress(self,  value:'py4godot_object.Object'):
    self.set_progress_texture(value)
  @property
  def texture_progress_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_texture_progress_offset()
    return _ret
  @texture_progress_offset.setter
  def texture_progress_offset(self,  value:'Vector2'):
    self.set_texture_progress_offset(value)
  @property
  def tint_under(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_tint_under()
    return _ret
  @tint_under.setter
  def tint_under(self,  value:'Color'):
    self.set_tint_under(value)
  @property
  def tint_over(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_tint_over()
    return _ret
  @tint_over.setter
  def tint_over(self,  value:'Color'):
    self.set_tint_over(value)
  @property
  def tint_progress(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_tint_progress()
    return _ret
  @tint_progress.setter
  def tint_progress(self,  value:'Color'):
    self.set_tint_progress(value)
  @functools.native_method
  def set_under_texture(self, tex:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not tex is None)
    assert isinstance(tex, get_class('Texture2D')), 'tex must be Texture2D'

    self.py__texture_under = tex






    self._ptr.call_with_return(457,tuple([tex._ptr]))

  @functools.native_method
  def get_under_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(458,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_progress_texture(self, tex:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not tex is None)
    assert isinstance(tex, get_class('Texture2D')), 'tex must be Texture2D'

    self.py__texture_progress = tex






    self._ptr.call_with_return(459,tuple([tex._ptr]))

  @functools.native_method
  def get_progress_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(460,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_over_texture(self, tex:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not tex is None)
    assert isinstance(tex, get_class('Texture2D')), 'tex must be Texture2D'

    self.py__texture_over = tex






    self._ptr.call_with_return(461,tuple([tex._ptr]))

  @functools.native_method
  def get_over_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(462,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_fill_mode(self, mode:'int'   ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__fill_mode = mode






    self._ptr.call_with_return(463,tuple([mode]))

  @functools.native_method
  def get_fill_mode(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(464,tuple([]))

    return _ret


  @functools.native_method
  def set_tint_under(self, tint:'Color'   ) -> None:
    r''''''

    assert(not tint is None)
    assert isinstance(tint, Color), 'tint must be Color'

    self.py__tint_under = tint






    self._ptr.call_with_return(465,tuple([tint._ptr]))

  @functools.native_method
  def get_tint_under(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(466,tuple([]))

    return _ret


  @functools.native_method
  def set_tint_progress(self, tint:'Color'   ) -> None:
    r''''''

    assert(not tint is None)
    assert isinstance(tint, Color), 'tint must be Color'

    self.py__tint_progress = tint






    self._ptr.call_with_return(467,tuple([tint._ptr]))

  @functools.native_method
  def get_tint_progress(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(468,tuple([]))

    return _ret


  @functools.native_method
  def set_tint_over(self, tint:'Color'   ) -> None:
    r''''''

    assert(not tint is None)
    assert isinstance(tint, Color), 'tint must be Color'

    self.py__tint_over = tint






    self._ptr.call_with_return(469,tuple([tint._ptr]))

  @functools.native_method
  def get_tint_over(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(470,tuple([]))

    return _ret


  @functools.native_method
  def set_texture_progress_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__texture_progress_offset = offset






    self._ptr.call_with_return(471,tuple([offset._ptr]))

  @functools.native_method
  def get_texture_progress_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(472,tuple([]))

    return _ret


  @functools.native_method
  def set_radial_initial_angle(self, mode:'float'   ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__radial_initial_angle = mode






    self._ptr.call_with_return(473,tuple([mode]))

  @functools.native_method
  def get_radial_initial_angle(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(474,tuple([]))

    return _ret


  @functools.native_method
  def set_radial_center_offset(self, mode:'Vector2'   ) -> None:
    r''''''

    assert(not mode is None)
    assert isinstance(mode, Vector2), 'mode must be Vector2'

    self.py__radial_center_offset = mode






    self._ptr.call_with_return(475,tuple([mode._ptr]))

  @functools.native_method
  def get_radial_center_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(476,tuple([]))

    return _ret


  @functools.native_method
  def set_fill_degrees(self, mode:'float'   ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__radial_fill_degrees = mode






    self._ptr.call_with_return(477,tuple([mode]))

  @functools.native_method
  def get_fill_degrees(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(478,tuple([]))

    return _ret


  @functools.native_method
  def set_stretch_margin(self, margin:'int'  , value:'int'   ) -> None:
    r'''
				Sets the stretch margin with the specified index. See `stretch_margin_bottom` and related properties.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__stretch_margin_left = margin







    self._ptr.call_with_return(479,tuple([margin, value]))

  @functools.native_method
  def get_stretch_margin(self, margin:'int'  ) -> typing.Union[int]:
    r'''
				Returns the stretch margin with the specified index. See `stretch_margin_bottom` and related properties.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(480,tuple([margin]))

    return _ret


  @functools.native_method
  def set_nine_patch_stretch(self, stretch:'bool'   ) -> None:
    r''''''

    assert isinstance(stretch, bool), 'stretch must be bool'

    self.py__nine_patch_stretch = stretch






    self._ptr.call_with_return(481,tuple([stretch]))

  @functools.native_method
  def get_nine_patch_stretch(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(482,tuple([]))

    return _ret



register_cast_function('TextureProgressBar', TextureProgressBar.cast)
register_class('TextureProgressBar', TextureProgressBar)
