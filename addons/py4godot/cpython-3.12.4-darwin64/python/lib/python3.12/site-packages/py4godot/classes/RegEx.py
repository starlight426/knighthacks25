# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RegExMatch as py4godot_regexmatch 
  import py4godot.classes.RegExMatchTypedArray as py4godot_regexmatchtypedarray 
import py4godot.classes.RegExMatchTypedArray as py4godot_regexmatchtypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRegExWrapper


class RegEx(py4godot_refcounted.RefCounted):
  r''''''

  @staticmethod
  def constructor():
    class_ = RegEx.construct_without_init()
    class_._ptr = constructor(669,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RegEx.construct_without_init()
    class_._ptr = constructor(669,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRegExWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(669,0, ())


  def generate_wrapper(self):
    return CPPRegExWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RegEx.__new__(RegEx)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RegEx'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RegEx.construct_without_init()
    cls._ptr = CPPRegExWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RegEx.construct_without_init()
    cls._ptr = CPPRegExWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @staticmethod
  def create_from_string(pattern:'str'   , show_error:'bool' =True  ) -> typing.Union['typing.Self']:
    r''''''

    assert(not pattern is None)
    assert isinstance(pattern, (str, String)), 'pattern must be str or String'
    assert isinstance(show_error, bool), 'show_error must be bool'




    assert(isinstance(pattern, (str, String)))
    py_string_pattern = pattern if isinstance(pattern, StringName) else c_utils.py_string_to_string(pattern)


    _ret = RegEx.construct_without_init()
    _ret._ptr = static_method(669,0,tuple([py_string_pattern._ptr, show_error]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def clear(self) -> None:
    r''''''




    self._ptr.call_with_return(53,tuple([]))

  @functools.native_method
  def compile(self, pattern:'str'   , show_error:'bool' =True  ) -> typing.Union[int]:
    r''''''

    assert(not pattern is None)
    assert isinstance(pattern, (str, String)), 'pattern must be str or String'
    assert isinstance(show_error, bool), 'show_error must be bool'




    assert(isinstance(pattern, (str, String)))
    py_string_pattern = pattern if isinstance(pattern, StringName) else c_utils.py_string_to_string(pattern)


    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([py_string_pattern._ptr, show_error]))
    return _ret


  @functools.native_method
  def search(self, subject:'str'   , offset:'int' =0  , end:'int' =-1  ) -> typing.Union['py4godot_regexmatch.RegExMatch']:
    r''''''

    assert(not subject is None)
    assert isinstance(subject, (str, String)), 'subject must be str or String'
    assert isinstance(offset, (int, float)), 'offset must be int or float'
    assert isinstance(end, (int, float)), 'end must be int or float'




    assert(isinstance(subject, (str, String)))
    py_string_subject = subject if isinstance(subject, StringName) else c_utils.py_string_to_string(subject)



    _ret = classes.Object.Object.construct_without_init() #Smart casted to: RegExMatch
    _ret._ptr = self._ptr.call_with_return(55,tuple([py_string_subject._ptr, offset, end]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def search_all(self, subject:'str'   , offset:'int' =0  , end:'int' =-1  ) -> typing.Union['py4godot_regexmatchtypedarray.RegExMatchTypedArray']:
    r''''''

    assert(not subject is None)
    assert isinstance(subject, (str, String)), 'subject must be str or String'
    assert isinstance(offset, (int, float)), 'offset must be int or float'
    assert isinstance(end, (int, float)), 'end must be int or float'




    assert(isinstance(subject, (str, String)))
    py_string_subject = subject if isinstance(subject, StringName) else c_utils.py_string_to_string(subject)



    _ret = py4godot_regexmatchtypedarray.RegExMatchTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([py_string_subject._ptr, offset, end]))
    return _ret


  @functools.native_method
  def sub(self, subject:'str'   , replacement:'str'   , all:'bool' =False  , offset:'int' =0  , end:'int' =-1  ) -> typing.Union[str]:
    r''''''

    assert(not subject is None)
    assert isinstance(subject, (str, String)), 'subject must be str or String'
    assert(not replacement is None)
    assert isinstance(replacement, (str, String)), 'replacement must be str or String'
    assert isinstance(all, bool), 'all must be bool'
    assert isinstance(offset, (int, float)), 'offset must be int or float'
    assert isinstance(end, (int, float)), 'end must be int or float'




    assert(isinstance(subject, (str, String)))
    py_string_subject = subject if isinstance(subject, StringName) else c_utils.py_string_to_string(subject)
    assert(isinstance(replacement, (str, String)))
    py_string_replacement = replacement if isinstance(replacement, StringName) else c_utils.py_string_to_string(replacement)




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(57,tuple([py_string_subject._ptr, py_string_replacement._ptr, all, offset, end]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def is_valid(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))
    return _ret


  @functools.native_method
  def get_pattern(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(59,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_group_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(60,tuple([]))
    return _ret


  @functools.native_method
  def get_names(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(61,tuple([]))
    return _ret



register_cast_function('RegEx', RegEx.cast)
register_class('RegEx', RegEx)
