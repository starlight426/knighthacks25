# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRFutureResult as py4godot_openxrfutureresult 
import py4godot.classes.OpenXRExtensionWrapper as py4godot_openxrextensionwrapper 
from py4godot.wrappers.wrappers import CPPOpenXRFutureExtensionWrapper


class OpenXRFutureExtension(py4godot_openxrextensionwrapper.OpenXRExtensionWrapper):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRFutureExtension.construct_without_init()
    class_._ptr = constructor(546,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRFutureExtension.construct_without_init()
    class_._ptr = constructor(546,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRFutureExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(546,0, ())


  def generate_wrapper(self):
    return CPPOpenXRFutureExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRFutureExtension.__new__(OpenXRFutureExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRFutureExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRFutureExtension.construct_without_init()
    cls._ptr = CPPOpenXRFutureExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRFutureExtension.construct_without_init()
    cls._ptr = CPPOpenXRFutureExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def is_active(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))
    return _ret


  @functools.native_method
  def register_future(self, future:'int'   , on_success:'Callable' = None  ) -> typing.Union['py4godot_openxrfutureresult.OpenXRFutureResult']:
    r''''''
    if on_success is None:
      on_success = Callable.new0()
    if on_success is None:
      on_success = Callable.new0()

    assert isinstance(future, (int, float)), 'future must be int or float'







    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRFutureResult
    _ret._ptr = self._ptr.call_with_return(79,tuple([future, on_success._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def cancel_future(self, future:'int'   ) -> None:
    r''''''

    assert isinstance(future, (int, float)), 'future must be int or float'






    self._ptr.call_with_return(80,tuple([future]))


register_cast_function('OpenXRFutureExtension', OpenXRFutureExtension.cast)
register_class('OpenXRFutureExtension', OpenXRFutureExtension)
