# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectReverbWrapper


class AudioEffectReverb(py4godot_audioeffect.AudioEffect):
  r'''
		Simulates the sound of acoustic environments such as rooms, concert halls, caverns, or an open spaces.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectReverb.construct_without_init()
    class_._ptr = constructor(131,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectReverb.construct_without_init()
    class_._ptr = constructor(131,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectReverbWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(131,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectReverbWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectReverb.__new__(AudioEffectReverb)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectReverb'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectReverb.construct_without_init()
    cls._ptr = CPPAudioEffectReverbWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectReverb.construct_without_init()
    cls._ptr = CPPAudioEffectReverbWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def predelay_msec(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_predelay_msec()
    return _ret
  @predelay_msec.setter
  def predelay_msec(self,  value:'float'):
    self.set_predelay_msec(value)
  @property
  def predelay_feedback(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_predelay_feedback()
    return _ret
  @predelay_feedback.setter
  def predelay_feedback(self,  value:'float'):
    self.set_predelay_feedback(value)
  @property
  def room_size(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_room_size()
    return _ret
  @room_size.setter
  def room_size(self,  value:'float'):
    self.set_room_size(value)
  @property
  def damping(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_damping()
    return _ret
  @damping.setter
  def damping(self,  value:'float'):
    self.set_damping(value)
  @property
  def spread(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_spread()
    return _ret
  @spread.setter
  def spread(self,  value:'float'):
    self.set_spread(value)
  @property
  def hipass(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_hpf()
    return _ret
  @hipass.setter
  def hipass(self,  value:'float'):
    self.set_hpf(value)
  @property
  def dry(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_dry()
    return _ret
  @dry.setter
  def dry(self,  value:'float'):
    self.set_dry(value)
  @property
  def wet(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_wet()
    return _ret
  @wet.setter
  def wet(self,  value:'float'):
    self.set_wet(value)
  @functools.native_method
  def set_predelay_msec(self, msec:'float'   ) -> None:
    r''''''

    assert isinstance(msec, (int, float)), 'msec must be int or float'

    self.py__predelay_msec = msec






    self._ptr.call_with_return(78,tuple([msec]))

  @functools.native_method
  def get_predelay_msec(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_predelay_feedback(self, feedback:'float'   ) -> None:
    r''''''

    assert isinstance(feedback, (int, float)), 'feedback must be int or float'

    self.py__predelay_feedback = feedback






    self._ptr.call_with_return(80,tuple([feedback]))

  @functools.native_method
  def get_predelay_feedback(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_room_size(self, size:'float'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__room_size = size






    self._ptr.call_with_return(82,tuple([size]))

  @functools.native_method
  def get_room_size(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_damping(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__damping = amount






    self._ptr.call_with_return(84,tuple([amount]))

  @functools.native_method
  def get_damping(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_spread(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__spread = amount






    self._ptr.call_with_return(86,tuple([amount]))

  @functools.native_method
  def get_spread(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_dry(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__dry = amount






    self._ptr.call_with_return(88,tuple([amount]))

  @functools.native_method
  def get_dry(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_wet(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__wet = amount






    self._ptr.call_with_return(90,tuple([amount]))

  @functools.native_method
  def get_wet(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([]))

    return _ret


  @functools.native_method
  def set_hpf(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__hipass = amount






    self._ptr.call_with_return(92,tuple([amount]))

  @functools.native_method
  def get_hpf(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret



register_cast_function('AudioEffectReverb', AudioEffectReverb.cast)
register_class('AudioEffectReverb', AudioEffectReverb)
