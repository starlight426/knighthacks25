# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Light3D as py4godot_light3d 
from py4godot.wrappers.wrappers import CPPSpotLight3DWrapper


class SpotLight3D(py4godot_light3d.Light3D):
  r'''
		A Spotlight is a type of `Light3D` node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance. This attenuation can be configured by changing the energy, radius and attenuation parameters of `Light3D`.
		Light is emitted in the -Z direction of the node's global basis. For an unrotated light, this means that the light is emitted forwards, illuminating the front side of a 3D model (see `constant Vector3.FORWARD` and `constant Vector3.MODEL_FRONT`).
		**Note:** When using the Mobile rendering method, only 8 spot lights can be displayed on each mesh resource. Attempting to display more than 8 spot lights on a single mesh resource will result in spot lights flickering in and out as the camera moves. When using the Compatibility rendering method, only 8 spot lights can be displayed on each mesh resource by default, but this can be increased by adjusting `ProjectSettings.rendering/limits/opengl/max_lights_per_object`.
		**Note:** When using the Mobile or Compatibility rendering methods, spot lights will only correctly affect meshes whose visibility AABB intersects with the light's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, `GeometryInstance3D.extra_cull_margin` must be increased on the mesh. Otherwise, the light may not be visible on the mesh.
	'''

  @staticmethod
  def constructor():
    class_ = SpotLight3D.construct_without_init()
    class_._ptr = constructor(772,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SpotLight3D.construct_without_init()
    class_._ptr = constructor(772,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSpotLight3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(772,0, ())


  def generate_wrapper(self):
    return CPPSpotLight3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SpotLight3D.__new__(SpotLight3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SpotLight3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SpotLight3D.construct_without_init()
    cls._ptr = CPPSpotLight3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SpotLight3D.construct_without_init()
    cls._ptr = CPPSpotLight3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('SpotLight3D', SpotLight3D.cast)
register_class('SpotLight3D', SpotLight3D)
