# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectPitchShiftWrapper

class FFTSize:
  FFT_SIZE_256 = 0
  FFT_SIZE_512 = 1
  FFT_SIZE_1024 = 2
  FFT_SIZE_2048 = 3
  FFT_SIZE_4096 = 4
  FFT_SIZE_MAX = 5


class AudioEffectPitchShift(py4godot_audioeffect.AudioEffect):
  r'''
		Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectPitchShift.construct_without_init()
    class_._ptr = constructor(129,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectPitchShift.construct_without_init()
    class_._ptr = constructor(129,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectPitchShiftWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(129,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectPitchShiftWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectPitchShift.__new__(AudioEffectPitchShift)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectPitchShift'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectPitchShift.construct_without_init()
    cls._ptr = CPPAudioEffectPitchShiftWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectPitchShift.construct_without_init()
    cls._ptr = CPPAudioEffectPitchShiftWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def pitch_scale(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_pitch_scale()
    return _ret
  @pitch_scale.setter
  def pitch_scale(self,  value:'float'):
    self.set_pitch_scale(value)
  @property
  def oversampling(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_oversampling()
    return _ret
  @oversampling.setter
  def oversampling(self,  value:'float'):
    self.set_oversampling(value)
  @property
  def fft_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_fft_size()
    return _ret
  @fft_size.setter
  def fft_size(self,  value:'int'):
    self.set_fft_size(value)
  @functools.native_method
  def set_pitch_scale(self, rate:'float'   ) -> None:
    r''''''

    assert isinstance(rate, (int, float)), 'rate must be int or float'

    self.py__pitch_scale = rate






    self._ptr.call_with_return(78,tuple([rate]))

  @functools.native_method
  def get_pitch_scale(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_oversampling(self, amount:'int'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__oversampling = amount






    self._ptr.call_with_return(80,tuple([amount]))

  @functools.native_method
  def get_oversampling(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_fft_size(self, size:'int'  ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__fft_size = size






    self._ptr.call_with_return(82,tuple([size]))

  @functools.native_method
  def get_fft_size(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret



register_cast_function('AudioEffectPitchShift', AudioEffectPitchShift.cast)
register_class('AudioEffectPitchShift', AudioEffectPitchShift)
