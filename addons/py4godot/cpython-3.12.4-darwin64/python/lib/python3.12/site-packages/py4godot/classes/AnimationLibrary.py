# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Animation as py4godot_animation 
  import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
import py4godot.classes.Resource as py4godot_resource 
import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
from py4godot.wrappers.wrappers import CPPAnimationLibraryWrapper


class AnimationLibrary(py4godot_resource.Resource):
  r'''
		An animation library stores a set of animations accessible through `StringName` keys, for use with `AnimationPlayer` nodes.
	'''

  @staticmethod
  def constructor():
    class_ = AnimationLibrary.construct_without_init()
    class_._ptr = constructor(73,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationLibrary.construct_without_init()
    class_._ptr = constructor(73,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationLibraryWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(73,0, ())


  def generate_wrapper(self):
    return CPPAnimationLibraryWrapper()
  def init_signals(self):
    super().init_signals()
    animation_added_name = utils.py_string_to_string_name("animation_added")
    self.animation_added = signals.BuiltinSignal(self, animation_added_name)
    animation_removed_name = utils.py_string_to_string_name("animation_removed")
    self.animation_removed = signals.BuiltinSignal(self, animation_removed_name)
    animation_renamed_name = utils.py_string_to_string_name("animation_renamed")
    self.animation_renamed = signals.BuiltinSignal(self, animation_renamed_name)
    animation_changed_name = utils.py_string_to_string_name("animation_changed")
    self.animation_changed = signals.BuiltinSignal(self, animation_changed_name)

  @staticmethod
  def construct_without_init():
    cls = AnimationLibrary.__new__(AnimationLibrary)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationLibrary'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationLibrary.construct_without_init()
    cls._ptr = CPPAnimationLibraryWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationLibrary.construct_without_init()
    cls._ptr = CPPAnimationLibraryWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def add_animation(self, name:'object'   , animation:'py4godot_animation.Animation'   ) -> typing.Union[int]:
    r'''
				Adds the `animation` to the library, accessible by the key `name`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not animation is None)
    assert isinstance(animation, get_class('Animation')), 'animation must be Animation'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)


    _ret:int
    _ret = self._ptr.call_with_return(77,tuple([py_stringname_name._ptr, animation._ptr]))
    return _ret


  @functools.native_method
  def remove_animation(self, name:'object'   ) -> None:
    r'''
				Removes the `Animation` with the key `name`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    self._ptr.call_with_return(78,tuple([py_stringname_name._ptr]))

  @functools.native_method
  def rename_animation(self, name:'object'   , newname:'object'   ) -> None:
    r'''
				Changes the key of the `Animation` associated with the key `name` to `newname`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not newname is None)
    assert isinstance(newname, (str, StringName)), 'newname must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)
    assert(isinstance(newname, (str, StringName)))
    py_stringname_newname = newname if isinstance(newname, StringName) else c_utils.py_string_to_string_name(newname)

    self._ptr.call_with_return(79,tuple([py_stringname_name._ptr, py_stringname_newname._ptr]))

  @functools.native_method
  def has_animation(self, name:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the library stores an `Animation` with `name` as the key.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([py_stringname_name._ptr]))
    return _ret


  @functools.native_method
  def get_animation(self, name:'object'   ) -> typing.Union['py4godot_animation.Animation']:
    r'''
				Returns the `Animation` with the key `name`. If the animation does not exist, `null` is returned and an error is logged.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Animation
    _ret._ptr = self._ptr.call_with_return(81,tuple([py_stringname_name._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_animation_list(self) -> typing.Union['py4godot_stringnametypedarray.StringNameTypedArray']:
    r'''
				Returns the keys for the `Animation`s stored in the library.
			'''




    _ret = py4godot_stringnametypedarray.StringNameTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))
    return _ret


  @functools.native_method
  def get_animation_list_size(self) -> typing.Union[int]:
    r'''
				Returns the key count for the `Animation`s stored in the library.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))
    return _ret



register_cast_function('AnimationLibrary', AnimationLibrary.cast)
register_class('AnimationLibrary', AnimationLibrary)
