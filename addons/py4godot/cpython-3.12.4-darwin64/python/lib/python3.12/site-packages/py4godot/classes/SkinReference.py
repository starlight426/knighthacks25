# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Skin as py4godot_skin 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPSkinReferenceWrapper


class SkinReference(py4godot_refcounted.RefCounted):
  r'''
		An internal object containing a mapping from a `Skin` used within the context of a particular `MeshInstance3D` to refer to the skeleton's `RID` in the RenderingServer.
		See also `MeshInstance3D.get_skin_reference` and `RenderingServer.instance_attach_skeleton`.
		Note that despite the similar naming, the skeleton RID used in the `RenderingServer` does not have a direct one-to-one correspondence to a `Skeleton3D` node.
		In particular, a `Skeleton3D` node with no `MeshInstance3D` children may be unknown to the `RenderingServer`.
		On the other hand, a `Skeleton3D` with multiple `MeshInstance3D` nodes which each have different `MeshInstance3D.skin` objects may have multiple SkinReference instances (and hence, multiple skeleton `RID`s).
	'''

  @staticmethod
  def constructor():
    class_ = SkinReference.construct_without_init()
    class_._ptr = constructor(762,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SkinReference.construct_without_init()
    class_._ptr = constructor(762,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkinReferenceWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(762,0, ())


  def generate_wrapper(self):
    return CPPSkinReferenceWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SkinReference.__new__(SkinReference)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SkinReference'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkinReference.construct_without_init()
    cls._ptr = CPPSkinReferenceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkinReference.construct_without_init()
    cls._ptr = CPPSkinReferenceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_skeleton(self) -> typing.Union['RID']:
    r'''
				Returns the `RID` owned by this SkinReference, as returned by `RenderingServer.skeleton_create`.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def get_skin(self) -> typing.Union['py4godot_skin.Skin']:
    r'''
				Returns the `Skin` connected to this SkinReference. In the case of `MeshInstance3D` with no `MeshInstance3D.skin` assigned, this will reference an internal default `Skin` owned by that `MeshInstance3D`.
				Note that a single `Skin` may have more than one `SkinReference` in the case that it is shared by meshes across multiple `Skeleton3D` nodes.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Skin
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('SkinReference', SkinReference.cast)
register_class('SkinReference', SkinReference)
