# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ArrayMesh as py4godot_arraymesh 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPShape3DWrapper


class Shape3D(py4godot_resource.Resource):
  r'''
		Abstract base class for all 3D shapes, intended for use in physics.
		**Performance:** Primitive shapes, especially `SphereShape3D`, are fast to check collisions against. `ConvexPolygonShape3D` and `HeightMapShape3D` are slower, and `ConcavePolygonShape3D` is the slowest.
	'''

  @staticmethod
  def constructor():
    class_ = Shape3D.construct_without_init()
    class_._ptr = constructor(742,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Shape3D.construct_without_init()
    class_._ptr = constructor(742,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPShape3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(742,0, ())


  def generate_wrapper(self):
    return CPPShape3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Shape3D.__new__(Shape3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Shape3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Shape3D.construct_without_init()
    cls._ptr = CPPShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Shape3D.construct_without_init()
    cls._ptr = CPPShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def custom_solver_bias(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_custom_solver_bias()
    return _ret
  @custom_solver_bias.setter
  def custom_solver_bias(self,  value:'float'):
    self.set_custom_solver_bias(value)
  @property
  def margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_margin()
    return _ret
  @margin.setter
  def margin(self,  value:'float'):
    self.set_margin(value)
  @functools.native_method
  def set_custom_solver_bias(self, bias:'float'   ) -> None:
    r''''''

    assert isinstance(bias, (int, float)), 'bias must be int or float'

    self.py__custom_solver_bias = bias






    self._ptr.call_with_return(77,tuple([bias]))

  @functools.native_method
  def get_custom_solver_bias(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_margin(self, margin:'float'   ) -> None:
    r''''''

    assert isinstance(margin, (int, float)), 'margin must be int or float'

    self.py__margin = margin






    self._ptr.call_with_return(79,tuple([margin]))

  @functools.native_method
  def get_margin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def get_debug_mesh(self) -> typing.Union['py4godot_arraymesh.ArrayMesh']:
    r'''
				Returns the `ArrayMesh` used to draw the debug collision for this `Shape3D`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ArrayMesh
    _ret._ptr = self._ptr.call_with_return(81,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('Shape3D', Shape3D.cast)
register_class('Shape3D', Shape3D)
