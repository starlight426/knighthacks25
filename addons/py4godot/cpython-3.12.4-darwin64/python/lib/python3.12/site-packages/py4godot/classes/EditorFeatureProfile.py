# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPEditorFeatureProfileWrapper

class Feature:
  FEATURE_3D = 0
  FEATURE_SCRIPT = 1
  FEATURE_ASSET_LIB = 2
  FEATURE_SCENE_TREE = 3
  FEATURE_NODE_DOCK = 4
  FEATURE_FILESYSTEM_DOCK = 5
  FEATURE_IMPORT_DOCK = 6
  FEATURE_HISTORY_DOCK = 7
  FEATURE_GAME = 8
  FEATURE_MAX = 9


class EditorFeatureProfile(py4godot_refcounted.RefCounted):
  r'''
		An editor feature profile can be used to disable specific features of the Godot editor. When disabled, the features won't appear in the editor, which makes the editor less cluttered. This is useful in education settings to reduce confusion or when working in a team. For example, artists and level designers could use a feature profile that disables the script editor to avoid accidentally making changes to files they aren't supposed to edit.
		To manage editor feature profiles visually, use **Editor > Manage Feature Profiles...** at the top of the editor window.
	'''

  @staticmethod
  def constructor():
    class_ = EditorFeatureProfile.construct_without_init()
    class_._ptr = constructor(283,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorFeatureProfile.construct_without_init()
    class_._ptr = constructor(283,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorFeatureProfileWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(283,0, ())


  def generate_wrapper(self):
    return CPPEditorFeatureProfileWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EditorFeatureProfile.__new__(EditorFeatureProfile)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorFeatureProfile'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorFeatureProfile.construct_without_init()
    cls._ptr = CPPEditorFeatureProfileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorFeatureProfile.construct_without_init()
    cls._ptr = CPPEditorFeatureProfileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_disable_class(self, class_name:'object'   , disable:'bool'   ) -> None:
    r'''
				If `disable` is `true`, disables the class specified by `class_name`. When disabled, the class won't appear in the Create New Node dialog.
			'''

    assert(not class_name is None)
    assert isinstance(class_name, (str, StringName)), 'class_name must be str or StringName'
    assert isinstance(disable, bool), 'disable must be bool'




    assert(isinstance(class_name, (str, StringName)))
    py_stringname_class_name = class_name if isinstance(class_name, StringName) else c_utils.py_string_to_string_name(class_name)


    self._ptr.call_with_return(53,tuple([py_stringname_class_name._ptr, disable]))

  @functools.native_method
  def is_class_disabled(self, class_name:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the class specified by `class_name` is disabled. When disabled, the class won't appear in the Create New Node dialog.
			'''

    assert(not class_name is None)
    assert isinstance(class_name, (str, StringName)), 'class_name must be str or StringName'




    assert(isinstance(class_name, (str, StringName)))
    py_stringname_class_name = class_name if isinstance(class_name, StringName) else c_utils.py_string_to_string_name(class_name)

    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([py_stringname_class_name._ptr]))
    return _ret


  @functools.native_method
  def set_disable_class_editor(self, class_name:'object'   , disable:'bool'   ) -> None:
    r'''
				If `disable` is `true`, disables editing for the class specified by `class_name`. When disabled, the class will still appear in the Create New Node dialog but the Inspector will be read-only when selecting a node that extends the class.
			'''

    assert(not class_name is None)
    assert isinstance(class_name, (str, StringName)), 'class_name must be str or StringName'
    assert isinstance(disable, bool), 'disable must be bool'




    assert(isinstance(class_name, (str, StringName)))
    py_stringname_class_name = class_name if isinstance(class_name, StringName) else c_utils.py_string_to_string_name(class_name)


    self._ptr.call_with_return(55,tuple([py_stringname_class_name._ptr, disable]))

  @functools.native_method
  def is_class_editor_disabled(self, class_name:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if editing for the class specified by `class_name` is disabled. When disabled, the class will still appear in the Create New Node dialog but the Inspector will be read-only when selecting a node that extends the class.
			'''

    assert(not class_name is None)
    assert isinstance(class_name, (str, StringName)), 'class_name must be str or StringName'




    assert(isinstance(class_name, (str, StringName)))
    py_stringname_class_name = class_name if isinstance(class_name, StringName) else c_utils.py_string_to_string_name(class_name)

    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([py_stringname_class_name._ptr]))
    return _ret


  @functools.native_method
  def set_disable_class_property(self, class_name:'object'   , property:'object'   , disable:'bool'   ) -> None:
    r'''
				If `disable` is `true`, disables editing for `property` in the class specified by `class_name`. When a property is disabled, it won't appear in the Inspector when selecting a node that extends the class specified by `class_name`.
			'''

    assert(not class_name is None)
    assert isinstance(class_name, (str, StringName)), 'class_name must be str or StringName'
    assert(not property is None)
    assert isinstance(property, (str, StringName)), 'property must be str or StringName'
    assert isinstance(disable, bool), 'disable must be bool'




    assert(isinstance(class_name, (str, StringName)))
    py_stringname_class_name = class_name if isinstance(class_name, StringName) else c_utils.py_string_to_string_name(class_name)
    assert(isinstance(property, (str, StringName)))
    py_stringname_property = property if isinstance(property, StringName) else c_utils.py_string_to_string_name(property)


    self._ptr.call_with_return(57,tuple([py_stringname_class_name._ptr, py_stringname_property._ptr, disable]))

  @functools.native_method
  def is_class_property_disabled(self, class_name:'object'   , property:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if `property` is disabled in the class specified by `class_name`. When a property is disabled, it won't appear in the Inspector when selecting a node that extends the class specified by `class_name`.
			'''

    assert(not class_name is None)
    assert isinstance(class_name, (str, StringName)), 'class_name must be str or StringName'
    assert(not property is None)
    assert isinstance(property, (str, StringName)), 'property must be str or StringName'




    assert(isinstance(class_name, (str, StringName)))
    py_stringname_class_name = class_name if isinstance(class_name, StringName) else c_utils.py_string_to_string_name(class_name)
    assert(isinstance(property, (str, StringName)))
    py_stringname_property = property if isinstance(property, StringName) else c_utils.py_string_to_string_name(property)

    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([py_stringname_class_name._ptr, py_stringname_property._ptr]))
    return _ret


  @functools.native_method
  def set_disable_feature(self, feature:'int'  , disable:'bool'   ) -> None:
    r'''
				If `disable` is `true`, disables the editor feature specified in `feature`. When a feature is disabled, it will disappear from the editor entirely.
			'''

    assert isinstance(feature, (int, float)), 'feature must be int or float'
    assert isinstance(disable, bool), 'disable must be bool'







    self._ptr.call_with_return(59,tuple([feature, disable]))

  @functools.native_method
  def is_feature_disabled(self, feature:'int'  ) -> typing.Union[bool]:
    r'''
				Returns `true` if the `feature` is disabled. When a feature is disabled, it will disappear from the editor entirely.
			'''

    assert isinstance(feature, (int, float)), 'feature must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(60,tuple([feature]))
    return _ret


  @functools.native_method
  def get_feature_name(self, feature:'int'  ) -> typing.Union[str]:
    r'''
				Returns the specified `feature`'s human-readable name.
			'''

    assert isinstance(feature, (int, float)), 'feature must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(61,tuple([feature]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def save_to_file(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Saves the editor feature profile to a file in JSON format. It can then be imported using the feature profile manager's **Import** button or the `load_from_file` method.
				**Note:** Feature profiles created via the user interface are saved in the `feature_profiles` directory, as a file with the `.profile` extension. The editor configuration folder can be found by using `EditorPaths.get_config_dir`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(62,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def load_from_file(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Loads an editor feature profile from a file. The file must follow the JSON format obtained by using the feature profile manager's **Export** button or the `save_to_file` method.
				**Note:** Feature profiles created via the user interface are loaded from the `feature_profiles` directory, as a file with the `.profile` extension. The editor configuration folder can be found by using `EditorPaths.get_config_dir`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([py_string_path._ptr]))
    return _ret



register_cast_function('EditorFeatureProfile', EditorFeatureProfile.cast)
register_class('EditorFeatureProfile', EditorFeatureProfile)
