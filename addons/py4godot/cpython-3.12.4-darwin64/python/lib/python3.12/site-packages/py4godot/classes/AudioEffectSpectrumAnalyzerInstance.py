# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffectInstance as py4godot_audioeffectinstance 
from py4godot.wrappers.wrappers import CPPAudioEffectSpectrumAnalyzerInstanceWrapper

class MagnitudeMode:
  MAGNITUDE_AVERAGE = 0
  MAGNITUDE_MAX = 1


class AudioEffectSpectrumAnalyzerInstance(py4godot_audioeffectinstance.AudioEffectInstance):
  r'''
		The runtime part of an `AudioEffectSpectrumAnalyzer`, which can be used to query the magnitude of a frequency range on its host bus.
		An instance of this class can be obtained with `AudioServer.get_bus_effect_instance`.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectSpectrumAnalyzerInstance.construct_without_init()
    class_._ptr = constructor(133,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectSpectrumAnalyzerInstance.construct_without_init()
    class_._ptr = constructor(133,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectSpectrumAnalyzerInstanceWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(133,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectSpectrumAnalyzerInstanceWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectSpectrumAnalyzerInstance.__new__(AudioEffectSpectrumAnalyzerInstance)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectSpectrumAnalyzerInstance'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectSpectrumAnalyzerInstance.construct_without_init()
    cls._ptr = CPPAudioEffectSpectrumAnalyzerInstanceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectSpectrumAnalyzerInstance.construct_without_init()
    cls._ptr = CPPAudioEffectSpectrumAnalyzerInstanceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_magnitude_for_frequency_range(self, from_hz:'float'   , to_hz:'float'   , mode:'int'  =1) -> typing.Union['Vector2']:
    r'''
				Returns the magnitude of the frequencies from `from_hz` to `to_hz` in linear energy as a Vector2. The `x` component of the return value represents the left stereo channel, and `y` represents the right channel.
				`mode` determines how the frequency range will be processed.
			'''



    assert isinstance(from_hz, (int, float)), 'from_hz must be int or float'
    assert isinstance(to_hz, (int, float)), 'to_hz must be int or float'
    assert isinstance(mode, (int, float)), 'mode must be int or float'








    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([from_hz, to_hz, mode]))
    return _ret



register_cast_function('AudioEffectSpectrumAnalyzerInstance', AudioEffectSpectrumAnalyzerInstance.cast)
register_class('AudioEffectSpectrumAnalyzerInstance', AudioEffectSpectrumAnalyzerInstance)
