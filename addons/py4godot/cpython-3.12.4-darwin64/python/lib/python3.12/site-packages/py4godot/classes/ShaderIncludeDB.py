# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPShaderIncludeDBWrapper


class ShaderIncludeDB(py4godot_object.Object):
  r'''
		This object contains shader fragments from Godot's internal shaders. These can be used when access to internal uniform buffers and/or internal functions is required for instance when composing compositor effects or compute shaders. Only fragments for the current rendering device are loaded.
	'''

  @staticmethod
  def constructor():
    class_ = ShaderIncludeDB.construct_without_init()
    class_._ptr = constructor(739,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ShaderIncludeDB.construct_without_init()
    class_._ptr = constructor(739,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPShaderIncludeDBWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(739,0, ())


  def generate_wrapper(self):
    return CPPShaderIncludeDBWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ShaderIncludeDB.__new__(ShaderIncludeDB)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ShaderIncludeDB'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ShaderIncludeDB.construct_without_init()
    cls._ptr = CPPShaderIncludeDBWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ShaderIncludeDB.construct_without_init()
    cls._ptr = CPPShaderIncludeDBWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @staticmethod
  def list_built_in_include_files() -> typing.Union['PackedStringArray']:
    r'''
				Returns a list of built-in include files that are currently registered.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = static_method(739,0,tuple([]))
    return _ret


  @staticmethod
  def has_built_in_include_file(filename:'str'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if an include file with this name exists.
			'''

    assert(not filename is None)
    assert isinstance(filename, (str, String)), 'filename must be str or String'




    assert(isinstance(filename, (str, String)))
    py_string_filename = filename if isinstance(filename, StringName) else c_utils.py_string_to_string(filename)

    _ret = 0
    _ret = static_method(739,1,tuple([py_string_filename._ptr]))
    return _ret


  @staticmethod
  def get_built_in_include_file(filename:'str'   ) -> typing.Union[str]:
    r'''
				Returns the code for the built-in shader fragment. You can also access this in your shader code through `#include "filename"`.
			'''

    assert(not filename is None)
    assert isinstance(filename, (str, String)), 'filename must be str or String'




    assert(isinstance(filename, (str, String)))
    py_string_filename = filename if isinstance(filename, StringName) else c_utils.py_string_to_string(filename)

    _ret = String.construct_without_init()
    _ret._ptr = static_method(739,2,tuple([py_string_filename._ptr]))
    return utils.gd_string_to_py_string(_ret)



register_cast_function('ShaderIncludeDB', ShaderIncludeDB.cast)
register_class('ShaderIncludeDB', ShaderIncludeDB)
