# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.InputEvent as py4godot_inputevent 
from py4godot.wrappers.wrappers import CPPInputEventJoypadMotionWrapper


class InputEventJoypadMotion(py4godot_inputevent.InputEvent):
  r'''
		Stores information about joystick motions. One `InputEventJoypadMotion` represents one axis at a time. For gamepad buttons, see `InputEventJoypadButton`.
	'''

  @staticmethod
  def constructor():
    class_ = InputEventJoypadMotion.construct_without_init()
    class_._ptr = constructor(418,0, ())
    return class_
  @staticmethod
  def new():
    class_ = InputEventJoypadMotion.construct_without_init()
    class_._ptr = constructor(418,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPInputEventJoypadMotionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(418,0, ())


  def generate_wrapper(self):
    return CPPInputEventJoypadMotionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = InputEventJoypadMotion.__new__(InputEventJoypadMotion)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'InputEventJoypadMotion'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventJoypadMotion.construct_without_init()
    cls._ptr = CPPInputEventJoypadMotionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventJoypadMotion.construct_without_init()
    cls._ptr = CPPInputEventJoypadMotionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def axis(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_axis()
    return _ret
  @axis.setter
  def axis(self,  value:'int'):
    self.set_axis(value)
  @property
  def axis_value(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_axis_value()
    return _ret
  @axis_value.setter
  def axis_value(self,  value:'float'):
    self.set_axis_value(value)
  @functools.native_method
  def set_axis(self, axis:'int'  ) -> None:
    r''''''

    assert isinstance(axis, (int, float)), 'axis must be int or float'

    self.py__axis = axis






    self._ptr.call_with_return(92,tuple([axis]))

  @functools.native_method
  def get_axis(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_axis_value(self, axis_value:'float'   ) -> None:
    r''''''

    assert isinstance(axis_value, (int, float)), 'axis_value must be int or float'

    self.py__axis_value = axis_value






    self._ptr.call_with_return(94,tuple([axis_value]))

  @functools.native_method
  def get_axis_value(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret



register_cast_function('InputEventJoypadMotion', InputEventJoypadMotion.cast)
register_class('InputEventJoypadMotion', InputEventJoypadMotion)
