# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Tweener as py4godot_tweener 
from py4godot.wrappers.wrappers import CPPSubtweenTweenerWrapper


class SubtweenTweener(py4godot_tweener.Tweener):
  r'''
		`SubtweenTweener` is used to execute a `Tween` as one step in a sequence defined by another `Tween`. See `Tween.tween_subtween` for more usage information.
		**Note:** `Tween.tween_subtween` is the only correct way to create `SubtweenTweener`. Any `SubtweenTweener` created manually will not function correctly.
	'''

  @staticmethod
  def constructor():
    class_ = SubtweenTweener.construct_without_init()
    class_._ptr = constructor(800,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SubtweenTweener.construct_without_init()
    class_._ptr = constructor(800,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSubtweenTweenerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(800,0, ())


  def generate_wrapper(self):
    return CPPSubtweenTweenerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SubtweenTweener.__new__(SubtweenTweener)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SubtweenTweener'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SubtweenTweener.construct_without_init()
    cls._ptr = CPPSubtweenTweenerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SubtweenTweener.construct_without_init()
    cls._ptr = CPPSubtweenTweenerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_delay(self, delay:'float'   ) -> typing.Union['typing.Self']:
    r'''
				Sets the time in seconds after which the `SubtweenTweener` will start running the subtween. By default there's no delay.
			'''

    assert isinstance(delay, (int, float)), 'delay must be int or float'






    _ret = SubtweenTweener.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([delay]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('SubtweenTweener', SubtweenTweener.cast)
register_class('SubtweenTweener', SubtweenTweener)
