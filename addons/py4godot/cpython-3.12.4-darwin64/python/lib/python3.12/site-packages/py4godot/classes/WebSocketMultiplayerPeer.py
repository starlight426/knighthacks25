# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.WebSocketPeer as py4godot_websocketpeer 
  import py4godot.classes.TLSOptions as py4godot_tlsoptions 
import py4godot.classes.MultiplayerPeer as py4godot_multiplayerpeer 
from py4godot.wrappers.wrappers import CPPWebSocketMultiplayerPeerWrapper


class WebSocketMultiplayerPeer(py4godot_multiplayerpeer.MultiplayerPeer):
  r''''''

  @staticmethod
  def constructor():
    class_ = WebSocketMultiplayerPeer.construct_without_init()
    class_._ptr = constructor(999,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WebSocketMultiplayerPeer.construct_without_init()
    class_._ptr = constructor(999,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWebSocketMultiplayerPeerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(999,0, ())


  def generate_wrapper(self):
    return CPPWebSocketMultiplayerPeerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WebSocketMultiplayerPeer.__new__(WebSocketMultiplayerPeer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WebSocketMultiplayerPeer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebSocketMultiplayerPeer.construct_without_init()
    cls._ptr = CPPWebSocketMultiplayerPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebSocketMultiplayerPeer.construct_without_init()
    cls._ptr = CPPWebSocketMultiplayerPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def supported_protocols(self) -> typing.Union['PackedStringArray']:
    r''''''
    _ret = self. get_supported_protocols()
    return _ret
  @supported_protocols.setter
  def supported_protocols(self,  value:'PackedStringArray'):
    self.set_supported_protocols(value)
  @property
  def handshake_headers(self) -> typing.Union['PackedStringArray']:
    r''''''
    _ret = self. get_handshake_headers()
    return _ret
  @handshake_headers.setter
  def handshake_headers(self,  value:'PackedStringArray'):
    self.set_handshake_headers(value)
  @property
  def inbound_buffer_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_inbound_buffer_size()
    return _ret
  @inbound_buffer_size.setter
  def inbound_buffer_size(self,  value:'int'):
    self.set_inbound_buffer_size(value)
  @property
  def outbound_buffer_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_outbound_buffer_size()
    return _ret
  @outbound_buffer_size.setter
  def outbound_buffer_size(self,  value:'int'):
    self.set_outbound_buffer_size(value)
  @property
  def handshake_timeout(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_handshake_timeout()
    return _ret
  @handshake_timeout.setter
  def handshake_timeout(self,  value:'float'):
    self.set_handshake_timeout(value)
  @property
  def max_queued_packets(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_max_queued_packets()
    return _ret
  @max_queued_packets.setter
  def max_queued_packets(self,  value:'int'):
    self.set_max_queued_packets(value)
  @functools.native_method
  def create_client(self, url:'str'   , tls_client_options:'py4godot_tlsoptions.TLSOptions' = None  ) -> typing.Union[int]:
    r''''''
    if tls_client_options is None:
      tls_client_options = c_utils.empty_object
    if tls_client_options is None:
      tls_client_options = c_utils.empty_object

    assert(not url is None)
    assert isinstance(url, (str, String)), 'url must be str or String'




    assert(isinstance(url, (str, String)))
    py_string_url = url if isinstance(url, StringName) else c_utils.py_string_to_string(url)


    _ret:int
    _ret = self._ptr.call_with_return(78,tuple([py_string_url._ptr, tls_client_options._ptr]))
    return _ret


  @functools.native_method
  def create_server(self, port:'int'   , bind_address:'str' ="*"  , tls_server_options:'py4godot_tlsoptions.TLSOptions' = None  ) -> typing.Union[int]:
    r''''''
    if bind_address is None:
      bind_address = String.new0()
    if tls_server_options is None:
      tls_server_options = c_utils.empty_object
    if bind_address is None:
      bind_address = String.new0()
    if tls_server_options is None:
      tls_server_options = c_utils.empty_object

    assert isinstance(port, (int, float)), 'port must be int or float'





    assert(isinstance(bind_address, (str, String)))
    py_string_bind_address = bind_address if isinstance(bind_address, StringName) else c_utils.py_string_to_string(bind_address)


    _ret:int
    _ret = self._ptr.call_with_return(79,tuple([port, py_string_bind_address._ptr, tls_server_options._ptr]))
    return _ret


  @functools.native_method
  def get_peer(self, peer_id:'int'   ) -> typing.Union['py4godot_websocketpeer.WebSocketPeer']:
    r''''''

    assert isinstance(peer_id, (int, float)), 'peer_id must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: WebSocketPeer
    _ret._ptr = self._ptr.call_with_return(80,tuple([peer_id]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_peer_address(self, id:'int'   ) -> typing.Union[str]:
    r''''''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([id]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_peer_port(self, id:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([id]))
    return _ret


  @functools.native_method
  def get_supported_protocols(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_supported_protocols(self, protocols:'PackedStringArray'   ) -> None:
    r''''''

    assert(not protocols is None)
    assert isinstance(protocols, PackedStringArray), 'protocols must be PackedStringArray'

    self.py__supported_protocols = protocols






    self._ptr.call_with_return(84,tuple([protocols._ptr]))

  @functools.native_method
  def get_handshake_headers(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_handshake_headers(self, protocols:'PackedStringArray'   ) -> None:
    r''''''

    assert(not protocols is None)
    assert isinstance(protocols, PackedStringArray), 'protocols must be PackedStringArray'

    self.py__handshake_headers = protocols






    self._ptr.call_with_return(86,tuple([protocols._ptr]))

  @functools.native_method
  def get_inbound_buffer_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_inbound_buffer_size(self, buffer_size:'int'   ) -> None:
    r''''''

    assert isinstance(buffer_size, (int, float)), 'buffer_size must be int or float'

    self.py__inbound_buffer_size = buffer_size






    self._ptr.call_with_return(88,tuple([buffer_size]))

  @functools.native_method
  def get_outbound_buffer_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_outbound_buffer_size(self, buffer_size:'int'   ) -> None:
    r''''''

    assert isinstance(buffer_size, (int, float)), 'buffer_size must be int or float'

    self.py__outbound_buffer_size = buffer_size






    self._ptr.call_with_return(90,tuple([buffer_size]))

  @functools.native_method
  def get_handshake_timeout(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([]))

    return _ret


  @functools.native_method
  def set_handshake_timeout(self, timeout:'float'   ) -> None:
    r''''''

    assert isinstance(timeout, (int, float)), 'timeout must be int or float'

    self.py__handshake_timeout = timeout






    self._ptr.call_with_return(92,tuple([timeout]))

  @functools.native_method
  def set_max_queued_packets(self, max_queued_packets:'int'   ) -> None:
    r''''''

    assert isinstance(max_queued_packets, (int, float)), 'max_queued_packets must be int or float'

    self.py__max_queued_packets = max_queued_packets






    self._ptr.call_with_return(93,tuple([max_queued_packets]))

  @functools.native_method
  def get_max_queued_packets(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret



register_cast_function('WebSocketMultiplayerPeer', WebSocketMultiplayerPeer.cast)
register_class('WebSocketMultiplayerPeer', WebSocketMultiplayerPeer)
