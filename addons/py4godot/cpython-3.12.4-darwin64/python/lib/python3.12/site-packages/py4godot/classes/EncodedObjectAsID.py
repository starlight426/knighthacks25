# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPEncodedObjectAsIDWrapper


class EncodedObjectAsID(py4godot_refcounted.RefCounted):
  r'''
		Utility class which holds a reference to the internal identifier of an `Object` instance, as given by `Object.get_instance_id`. This ID can then be used to retrieve the object instance with `@GlobalScope.instance_from_id`.
		This class is used internally by the editor inspector and script debugger, but can also be used in plugins to pass and display objects as their IDs.
	'''

  @staticmethod
  def constructor():
    class_ = EncodedObjectAsID.construct_without_init()
    class_._ptr = constructor(319,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EncodedObjectAsID.construct_without_init()
    class_._ptr = constructor(319,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEncodedObjectAsIDWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(319,0, ())


  def generate_wrapper(self):
    return CPPEncodedObjectAsIDWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EncodedObjectAsID.__new__(EncodedObjectAsID)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EncodedObjectAsID'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EncodedObjectAsID.construct_without_init()
    cls._ptr = CPPEncodedObjectAsIDWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EncodedObjectAsID.construct_without_init()
    cls._ptr = CPPEncodedObjectAsIDWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def object_id(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_object_id()
    return _ret
  @object_id.setter
  def object_id(self,  value:'int'):
    self.set_object_id(value)
  @functools.native_method
  def set_object_id(self, id:'int'   ) -> None:
    r''''''

    assert isinstance(id, (int, float)), 'id must be int or float'

    self.py__object_id = id






    self._ptr.call_with_return(53,tuple([id]))

  @functools.native_method
  def get_object_id(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret



register_cast_function('EncodedObjectAsID', EncodedObjectAsID.cast)
register_class('EncodedObjectAsID', EncodedObjectAsID)
