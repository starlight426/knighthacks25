# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Translation as py4godot_translation 
from py4godot.wrappers.wrappers import CPPOptimizedTranslationWrapper


class OptimizedTranslation(py4godot_translation.Translation):
  r'''
		An optimized translation, used by default for CSV Translations. Uses real-time compressed translations, which results in very small dictionaries.
	'''

  @staticmethod
  def constructor():
    class_ = OptimizedTranslation.construct_without_init()
    class_._ptr = constructor(562,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OptimizedTranslation.construct_without_init()
    class_._ptr = constructor(562,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOptimizedTranslationWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(562,0, ())


  def generate_wrapper(self):
    return CPPOptimizedTranslationWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OptimizedTranslation.__new__(OptimizedTranslation)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OptimizedTranslation'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OptimizedTranslation.construct_without_init()
    cls._ptr = CPPOptimizedTranslationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OptimizedTranslation.construct_without_init()
    cls._ptr = CPPOptimizedTranslationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def generate(self, from_:'py4godot_translation.Translation'   ) -> None:
    r'''
				Generates and sets an optimized translation from the given `Translation` resource.
				**Note:** This method is intended to be used in the editor. It does nothing when called from an exported project.
			'''

    assert(not from_ is None)
    assert isinstance(from_, get_class('Translation')), 'from_ must be Translation'






    self._ptr.call_with_return(89,tuple([from_._ptr]))


register_cast_function('OptimizedTranslation', OptimizedTranslation.cast)
register_class('OptimizedTranslation', OptimizedTranslation)
