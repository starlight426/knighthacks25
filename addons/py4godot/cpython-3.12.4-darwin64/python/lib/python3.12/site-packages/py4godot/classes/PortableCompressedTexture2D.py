# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Image as py4godot_image 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPPortableCompressedTexture2DWrapper

class CompressionMode:
  COMPRESSION_MODE_LOSSLESS = 0
  COMPRESSION_MODE_LOSSY = 1
  COMPRESSION_MODE_BASIS_UNIVERSAL = 2
  COMPRESSION_MODE_S3TC = 3
  COMPRESSION_MODE_ETC2 = 4
  COMPRESSION_MODE_BPTC = 5
  COMPRESSION_MODE_ASTC = 6


class PortableCompressedTexture2D(py4godot_texture2d.Texture2D):
  r'''
		This class allows storing compressed textures as self contained (not imported) resources.
		For 2D usage (compressed on disk, uncompressed on VRAM), the lossy and lossless modes are recommended. For 3D usage (compressed on VRAM) it depends on the target platform.
		If you intend to only use desktop, S3TC or BPTC are recommended. For only mobile, ETC2 is recommended.
		For portable, self contained 3D textures that work on both desktop and mobile, Basis Universal is recommended (although it has a small quality cost and longer compression time as a tradeoff).
		This resource is intended to be created from code.
	'''

  @staticmethod
  def constructor():
    class_ = PortableCompressedTexture2D.construct_without_init()
    class_._ptr = constructor(636,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PortableCompressedTexture2D.construct_without_init()
    class_._ptr = constructor(636,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPortableCompressedTexture2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(636,0, ())


  def generate_wrapper(self):
    return CPPPortableCompressedTexture2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PortableCompressedTexture2D.__new__(PortableCompressedTexture2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PortableCompressedTexture2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PortableCompressedTexture2D.construct_without_init()
    cls._ptr = CPPPortableCompressedTexture2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PortableCompressedTexture2D.construct_without_init()
    cls._ptr = CPPPortableCompressedTexture2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def size_override(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_size_override()
    return _ret
  @size_override.setter
  def size_override(self,  value:'Vector2'):
    self.set_size_override(value)
  @property
  def keep_compressed_buffer(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_keeping_compressed_buffer()
    return _ret
  @keep_compressed_buffer.setter
  def keep_compressed_buffer(self,  value:'bool'):
    self.set_keep_compressed_buffer(value)
  @functools.native_method
  def create_from_image(self, image:'py4godot_image.Image'   , compression_mode:'int'  , normal_map:'bool' =False  , lossy_quality:'float' =0.8  ) -> None:
    r'''
				Initializes the compressed texture from a base image. The compression mode must be provided.
				`normal_map` is recommended to ensure optimum quality if this image will be used as a normal map.
				If lossy compression is requested, the quality setting can optionally be provided. This maps to Lossy WebP compression quality.
			'''

    assert(not image is None)
    assert isinstance(image, get_class('Image')), 'image must be Image'
    assert isinstance(compression_mode, (int, float)), 'compression_mode must be int or float'
    assert isinstance(normal_map, bool), 'normal_map must be bool'
    assert isinstance(lossy_quality, (int, float)), 'lossy_quality must be int or float'









    self._ptr.call_with_return(93,tuple([image._ptr, compression_mode, normal_map, lossy_quality]))

  @functools.native_method
  def get_format(self) -> typing.Union[int]:
    r'''
				Return the image format used (valid after initialized).
			'''




    _ret:int
    _ret = self._ptr.call_with_return(94,tuple([]))
    return _ret


  @functools.native_method
  def get_compression_mode(self) -> typing.Union[int]:
    r'''
				Return the compression mode used (valid after initialized).
			'''




    _ret:int
    _ret = self._ptr.call_with_return(95,tuple([]))
    return _ret


  @functools.native_method
  def set_size_override(self, size:'Vector2'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector2), 'size must be Vector2'

    self.py__size_override = size






    self._ptr.call_with_return(96,tuple([size._ptr]))

  @functools.native_method
  def get_size_override(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_keep_compressed_buffer(self, keep:'bool'   ) -> None:
    r''''''

    assert isinstance(keep, bool), 'keep must be bool'

    self.py__keep_compressed_buffer = keep






    self._ptr.call_with_return(98,tuple([keep]))

  @functools.native_method
  def is_keeping_compressed_buffer(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_basisu_compressor_params(self, uastc_level:'int'   , rdo_quality_loss:'float'   ) -> None:
    r'''
				Sets the compressor parameters for Basis Universal compression. See also the settings in `ResourceImporterTexture`.
				**Note:** This must be set before `create_from_image` to take effect.
			'''

    assert isinstance(uastc_level, (int, float)), 'uastc_level must be int or float'
    assert isinstance(rdo_quality_loss, (int, float)), 'rdo_quality_loss must be int or float'







    self._ptr.call_with_return(100,tuple([uastc_level, rdo_quality_loss]))

  @staticmethod
  def set_keep_all_compressed_buffers(keep:'bool'   ) -> None:
    r'''
				Overrides the flag globally for all textures of this type. This is used primarily by the editor.
			'''

    assert isinstance(keep, bool), 'keep must be bool'






    static_method(636,1,tuple([keep]))

  @staticmethod
  def is_keeping_all_compressed_buffers() -> typing.Union[bool]:
    r'''
				Return whether the flag is overridden for all textures of this type.
			'''




    _ret = 0
    _ret = static_method(636,2,tuple([]))
    return _ret



register_cast_function('PortableCompressedTexture2D', PortableCompressedTexture2D.cast)
register_class('PortableCompressedTexture2D', PortableCompressedTexture2D)
