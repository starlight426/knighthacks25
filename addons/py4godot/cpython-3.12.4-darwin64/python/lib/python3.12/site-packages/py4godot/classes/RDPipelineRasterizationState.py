# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDPipelineRasterizationStateWrapper


class RDPipelineRasterizationState(py4godot_refcounted.RefCounted):
  r'''
		This object is used by `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDPipelineRasterizationState.construct_without_init()
    class_._ptr = constructor(651,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDPipelineRasterizationState.construct_without_init()
    class_._ptr = constructor(651,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDPipelineRasterizationStateWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(651,0, ())


  def generate_wrapper(self):
    return CPPRDPipelineRasterizationStateWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDPipelineRasterizationState.__new__(RDPipelineRasterizationState)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDPipelineRasterizationState'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineRasterizationState.construct_without_init()
    cls._ptr = CPPRDPipelineRasterizationStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineRasterizationState.construct_without_init()
    cls._ptr = CPPRDPipelineRasterizationStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def enable_depth_clamp(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_depth_clamp()
    return _ret
  @enable_depth_clamp.setter
  def enable_depth_clamp(self,  value:'bool'):
    self.set_enable_depth_clamp(value)
  @property
  def discard_primitives(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_discard_primitives()
    return _ret
  @discard_primitives.setter
  def discard_primitives(self,  value:'bool'):
    self.set_discard_primitives(value)
  @property
  def wireframe(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_wireframe()
    return _ret
  @wireframe.setter
  def wireframe(self,  value:'bool'):
    self.set_wireframe(value)
  @property
  def cull_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_cull_mode()
    return _ret
  @cull_mode.setter
  def cull_mode(self,  value:'int'):
    self.set_cull_mode(value)
  @property
  def front_face(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_front_face()
    return _ret
  @front_face.setter
  def front_face(self,  value:'int'):
    self.set_front_face(value)
  @property
  def depth_bias_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_depth_bias_enabled()
    return _ret
  @depth_bias_enabled.setter
  def depth_bias_enabled(self,  value:'bool'):
    self.set_depth_bias_enabled(value)
  @property
  def depth_bias_constant_factor(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth_bias_constant_factor()
    return _ret
  @depth_bias_constant_factor.setter
  def depth_bias_constant_factor(self,  value:'float'):
    self.set_depth_bias_constant_factor(value)
  @property
  def depth_bias_clamp(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth_bias_clamp()
    return _ret
  @depth_bias_clamp.setter
  def depth_bias_clamp(self,  value:'float'):
    self.set_depth_bias_clamp(value)
  @property
  def depth_bias_slope_factor(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth_bias_slope_factor()
    return _ret
  @depth_bias_slope_factor.setter
  def depth_bias_slope_factor(self,  value:'float'):
    self.set_depth_bias_slope_factor(value)
  @property
  def line_width(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_line_width()
    return _ret
  @line_width.setter
  def line_width(self,  value:'float'):
    self.set_line_width(value)
  @property
  def patch_control_points(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_patch_control_points()
    return _ret
  @patch_control_points.setter
  def patch_control_points(self,  value:'int'):
    self.set_patch_control_points(value)
  @functools.native_method
  def set_enable_depth_clamp(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_depth_clamp = p_member






    self._ptr.call_with_return(53,tuple([p_member]))

  @functools.native_method
  def get_enable_depth_clamp(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_discard_primitives(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__discard_primitives = p_member






    self._ptr.call_with_return(55,tuple([p_member]))

  @functools.native_method
  def get_discard_primitives(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_wireframe(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__wireframe = p_member






    self._ptr.call_with_return(57,tuple([p_member]))

  @functools.native_method
  def get_wireframe(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_cull_mode(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__cull_mode = p_member






    self._ptr.call_with_return(59,tuple([p_member]))

  @functools.native_method
  def get_cull_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_front_face(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__front_face = p_member






    self._ptr.call_with_return(61,tuple([p_member]))

  @functools.native_method
  def get_front_face(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_bias_enabled(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__depth_bias_enabled = p_member






    self._ptr.call_with_return(63,tuple([p_member]))

  @functools.native_method
  def get_depth_bias_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_bias_constant_factor(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__depth_bias_constant_factor = p_member






    self._ptr.call_with_return(65,tuple([p_member]))

  @functools.native_method
  def get_depth_bias_constant_factor(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_bias_clamp(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__depth_bias_clamp = p_member






    self._ptr.call_with_return(67,tuple([p_member]))

  @functools.native_method
  def get_depth_bias_clamp(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_bias_slope_factor(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__depth_bias_slope_factor = p_member






    self._ptr.call_with_return(69,tuple([p_member]))

  @functools.native_method
  def get_depth_bias_slope_factor(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(70,tuple([]))

    return _ret


  @functools.native_method
  def set_line_width(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__line_width = p_member






    self._ptr.call_with_return(71,tuple([p_member]))

  @functools.native_method
  def get_line_width(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(72,tuple([]))

    return _ret


  @functools.native_method
  def set_patch_control_points(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__patch_control_points = p_member






    self._ptr.call_with_return(73,tuple([p_member]))

  @functools.native_method
  def get_patch_control_points(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(74,tuple([]))

    return _ret



register_cast_function('RDPipelineRasterizationState', RDPipelineRasterizationState.cast)
register_class('RDPipelineRasterizationState', RDPipelineRasterizationState)
