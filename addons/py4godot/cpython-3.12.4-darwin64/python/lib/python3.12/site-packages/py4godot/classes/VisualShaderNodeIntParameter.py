# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNodeParameter as py4godot_visualshadernodeparameter 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeIntParameterWrapper

class Hint:
  HINT_NONE = 0
  HINT_RANGE = 1
  HINT_RANGE_STEP = 2
  HINT_ENUM = 3
  HINT_MAX = 4


class VisualShaderNodeIntParameter(py4godot_visualshadernodeparameter.VisualShaderNodeParameter):
  r'''
		A `VisualShaderNodeParameter` of type `int`. Offers additional customization for range of accepted values.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeIntParameter.construct_without_init()
    class_._ptr = constructor(916,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeIntParameter.construct_without_init()
    class_._ptr = constructor(916,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeIntParameterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(916,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeIntParameterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeIntParameter.__new__(VisualShaderNodeIntParameter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeIntParameter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeIntParameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeIntParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeIntParameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeIntParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def hint(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_hint()
    return _ret
  @hint.setter
  def hint(self,  value:'int'):
    self.set_hint(value)
  @property
  def min(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_min()
    return _ret
  @min.setter
  def min(self,  value:'int'):
    self.set_min(value)
  @property
  def max(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_max()
    return _ret
  @max.setter
  def max(self,  value:'int'):
    self.set_max(value)
  @property
  def step(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_step()
    return _ret
  @step.setter
  def step(self,  value:'int'):
    self.set_step(value)
  @property
  def enum_names(self) -> typing.Union['PackedStringArray']:
    r''''''
    _ret = self. get_enum_names()
    return _ret
  @enum_names.setter
  def enum_names(self,  value:'PackedStringArray'):
    self.set_enum_names(value)
  @property
  def default_value_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_default_value_enabled()
    return _ret
  @default_value_enabled.setter
  def default_value_enabled(self,  value:'bool'):
    self.set_default_value_enabled(value)
  @property
  def default_value(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_default_value()
    return _ret
  @default_value.setter
  def default_value(self,  value:'int'):
    self.set_default_value(value)
  @functools.native_method
  def set_hint(self, hint:'int'  ) -> None:
    r''''''

    assert isinstance(hint, (int, float)), 'hint must be int or float'

    self.py__hint = hint






    self._ptr.call_with_return(92,tuple([hint]))

  @functools.native_method
  def get_hint(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_min(self, value:'int'   ) -> None:
    r''''''

    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__min = value






    self._ptr.call_with_return(94,tuple([value]))

  @functools.native_method
  def get_min(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_max(self, value:'int'   ) -> None:
    r''''''

    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__max = value






    self._ptr.call_with_return(96,tuple([value]))

  @functools.native_method
  def get_max(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_step(self, value:'int'   ) -> None:
    r''''''

    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__step = value






    self._ptr.call_with_return(98,tuple([value]))

  @functools.native_method
  def get_step(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_enum_names(self, names:'PackedStringArray'   ) -> None:
    r''''''

    assert(not names is None)
    assert isinstance(names, PackedStringArray), 'names must be PackedStringArray'

    self.py__enum_names = names






    self._ptr.call_with_return(100,tuple([names._ptr]))

  @functools.native_method
  def get_enum_names(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(101,tuple([]))

    return _ret


  @functools.native_method
  def set_default_value_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__default_value_enabled = enabled






    self._ptr.call_with_return(102,tuple([enabled]))

  @functools.native_method
  def is_default_value_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(103,tuple([]))

    return _ret


  @functools.native_method
  def set_default_value(self, value:'int'   ) -> None:
    r''''''

    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__default_value = value






    self._ptr.call_with_return(104,tuple([value]))

  @functools.native_method
  def get_default_value(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(105,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeIntParameter', VisualShaderNodeIntParameter.cast)
register_class('VisualShaderNodeIntParameter', VisualShaderNodeIntParameter)
