# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.DampedSpringJoint2D as py4godot_dampedspringjoint2d 
  import py4godot.classes.Joint2D as py4godot_joint2d 
  import py4godot.classes.PinJoint2D as py4godot_pinjoint2d 
  import py4godot.classes.GrooveJoint2D as py4godot_groovejoint2d 
import py4godot.classes.RigidBody2D as py4godot_rigidbody2d 
from py4godot.wrappers.wrappers import CPPPhysicalBone2DWrapper


class PhysicalBone2D(py4godot_rigidbody2d.RigidBody2D):
  r'''
		The `PhysicalBone2D` node is a `RigidBody2D`-based node that can be used to make `Bone2D`s in a `Skeleton2D` react to physics.
		**Note:** To make the `Bone2D`s visually follow the `PhysicalBone2D` node, use a `SkeletonModification2DPhysicalBones` modification on the `Skeleton2D` parent.
		**Note:** The `PhysicalBone2D` node does not automatically create a `Joint2D` node to keep `PhysicalBone2D` nodes together. They must be created manually. For most cases, you want to use a `PinJoint2D` node. The `PhysicalBone2D` node will automatically configure the `Joint2D` node once it's been added as a child node.
	'''

  @staticmethod
  def constructor():
    class_ = PhysicalBone2D.construct_without_init()
    class_._ptr = constructor(585,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PhysicalBone2D.construct_without_init()
    class_._ptr = constructor(585,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPhysicalBone2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(585,0, ())


  def generate_wrapper(self):
    return CPPPhysicalBone2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicalBone2D.__new__(PhysicalBone2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicalBone2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicalBone2D.construct_without_init()
    cls._ptr = CPPPhysicalBone2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicalBone2D.construct_without_init()
    cls._ptr = CPPPhysicalBone2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def bone2d_nodepath(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_bone2d_nodepath()
    return _ret
  @bone2d_nodepath.setter
  def bone2d_nodepath(self,  value:'object'):
    self.set_bone2d_nodepath(value)
  @property
  def bone2d_index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_bone2d_index()
    return _ret
  @bone2d_index.setter
  def bone2d_index(self,  value:'int'):
    self.set_bone2d_index(value)
  @property
  def auto_configure_joint(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_auto_configure_joint()
    return _ret
  @auto_configure_joint.setter
  def auto_configure_joint(self,  value:'bool'):
    self.set_auto_configure_joint(value)
  @property
  def simulate_physics(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_simulate_physics()
    return _ret
  @simulate_physics.setter
  def simulate_physics(self,  value:'bool'):
    self.set_simulate_physics(value)
  @property
  def follow_bone_when_simulating(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_follow_bone_when_simulating()
    return _ret
  @follow_bone_when_simulating.setter
  def follow_bone_when_simulating(self,  value:'bool'):
    self.set_follow_bone_when_simulating(value)
  @functools.native_method
  def get_joint(self) -> typing.Union['py4godot_dampedspringjoint2d.DampedSpringJoint2D','py4godot_pinjoint2d.PinJoint2D','py4godot_joint2d.Joint2D','py4godot_groovejoint2d.GrooveJoint2D']:
    r'''
				Returns the first `Joint2D` child node, if one exists. This is mainly a helper function to make it easier to get the `Joint2D` that the `PhysicalBone2D` is autoconfiguring.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Joint2D
    _ret._ptr = self._ptr.call_with_return(407,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_auto_configure_joint(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(408,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_configure_joint(self, auto_configure_joint:'bool'   ) -> None:
    r''''''

    assert isinstance(auto_configure_joint, bool), 'auto_configure_joint must be bool'

    self.py__auto_configure_joint = auto_configure_joint






    self._ptr.call_with_return(409,tuple([auto_configure_joint]))

  @functools.native_method
  def set_simulate_physics(self, simulate_physics:'bool'   ) -> None:
    r''''''

    assert isinstance(simulate_physics, bool), 'simulate_physics must be bool'

    self.py__simulate_physics = simulate_physics






    self._ptr.call_with_return(410,tuple([simulate_physics]))

  @functools.native_method
  def get_simulate_physics(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(411,tuple([]))

    return _ret


  @functools.native_method
  def is_simulating_physics(self) -> typing.Union[bool]:
    r'''
				Returns a boolean that indicates whether the `PhysicalBone2D` is running and simulating using the Godot 2D physics engine. When `true`, the PhysicalBone2D node is using physics.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(412,tuple([]))
    return _ret


  @functools.native_method
  def set_bone2d_nodepath(self, nodepath:'object'   ) -> None:
    r''''''

    assert(not nodepath is None)
    assert isinstance(nodepath, (str, NodePath)), 'nodepath must be str or NodePath'

    self.py__bone2d_nodepath = nodepath



    assert(isinstance(nodepath, (str, NodePath)))
    py_nodepath_nodepath = nodepath if isinstance(nodepath,NodePath) else NodePath.new2(nodepath)


    self._ptr.call_with_return(413,tuple([py_nodepath_nodepath._ptr]))

  @functools.native_method
  def get_bone2d_nodepath(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(414,tuple([]))

    return _ret


  @functools.native_method
  def set_bone2d_index(self, bone_index:'int'   ) -> None:
    r''''''

    assert isinstance(bone_index, (int, float)), 'bone_index must be int or float'

    self.py__bone2d_index = bone_index






    self._ptr.call_with_return(415,tuple([bone_index]))

  @functools.native_method
  def get_bone2d_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(416,tuple([]))

    return _ret


  @functools.native_method
  def set_follow_bone_when_simulating(self, follow_bone:'bool'   ) -> None:
    r''''''

    assert isinstance(follow_bone, bool), 'follow_bone must be bool'

    self.py__follow_bone_when_simulating = follow_bone






    self._ptr.call_with_return(417,tuple([follow_bone]))

  @functools.native_method
  def get_follow_bone_when_simulating(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(418,tuple([]))

    return _ret



register_cast_function('PhysicalBone2D', PhysicalBone2D.cast)
register_class('PhysicalBone2D', PhysicalBone2D)
