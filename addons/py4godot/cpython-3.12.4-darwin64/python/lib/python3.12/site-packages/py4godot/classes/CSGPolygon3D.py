# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Material as py4godot_material 
  import py4godot.classes.PanoramaSkyMaterial as py4godot_panoramaskymaterial 
  import py4godot.classes.FogMaterial as py4godot_fogmaterial 
  import py4godot.classes.ORMMaterial3D as py4godot_ormmaterial3d 
  import py4godot.classes.PhysicalSkyMaterial as py4godot_physicalskymaterial 
  import py4godot.classes.PlaceholderMaterial as py4godot_placeholdermaterial 
  import py4godot.classes.CanvasItemMaterial as py4godot_canvasitemmaterial 
  import py4godot.classes.ParticleProcessMaterial as py4godot_particleprocessmaterial 
  import py4godot.classes.ProceduralSkyMaterial as py4godot_proceduralskymaterial 
  import py4godot.classes.BaseMaterial3D as py4godot_basematerial3d 
  import py4godot.classes.ShaderMaterial as py4godot_shadermaterial 
  import py4godot.classes.StandardMaterial3D as py4godot_standardmaterial3d 
import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
from py4godot.wrappers.wrappers import CPPCSGPolygon3DWrapper

class Mode:
  MODE_DEPTH = 0
  MODE_SPIN = 1
  MODE_PATH = 2
class PathRotation:
  PATH_ROTATION_POLYGON = 0
  PATH_ROTATION_PATH = 1
  PATH_ROTATION_PATH_FOLLOW = 2
class PathIntervalType:
  PATH_INTERVAL_DISTANCE = 0
  PATH_INTERVAL_SUBDIVIDE = 1


class CSGPolygon3D(py4godot_csgprimitive3d.CSGPrimitive3D):
  r''''''

  @staticmethod
  def constructor():
    class_ = CSGPolygon3D.construct_without_init()
    class_._ptr = constructor(182,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CSGPolygon3D.construct_without_init()
    class_._ptr = constructor(182,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCSGPolygon3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(182,0, ())


  def generate_wrapper(self):
    return CPPCSGPolygon3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CSGPolygon3D.__new__(CSGPolygon3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CSGPolygon3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CSGPolygon3D.construct_without_init()
    cls._ptr = CPPCSGPolygon3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CSGPolygon3D.construct_without_init()
    cls._ptr = CPPCSGPolygon3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''
    _ret = self. get_polygon()
    return _ret
  @polygon.setter
  def polygon(self,  value:'PackedVector2Array'):
    self.set_polygon(value)
  @property
  def mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mode()
    return _ret
  @mode.setter
  def mode(self,  value:'int'):
    self.set_mode(value)
  @property
  def depth(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth()
    return _ret
  @depth.setter
  def depth(self,  value:'float'):
    self.set_depth(value)
  @property
  def spin_degrees(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_spin_degrees()
    return _ret
  @spin_degrees.setter
  def spin_degrees(self,  value:'float'):
    self.set_spin_degrees(value)
  @property
  def spin_sides(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_spin_sides()
    return _ret
  @spin_sides.setter
  def spin_sides(self,  value:'int'):
    self.set_spin_sides(value)
  @property
  def path_node(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_path_node()
    return _ret
  @path_node.setter
  def path_node(self,  value:'object'):
    self.set_path_node(value)
  @property
  def path_interval_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_path_interval_type()
    return _ret
  @path_interval_type.setter
  def path_interval_type(self,  value:'int'):
    self.set_path_interval_type(value)
  @property
  def path_interval(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_path_interval()
    return _ret
  @path_interval.setter
  def path_interval(self,  value:'float'):
    self.set_path_interval(value)
  @property
  def path_simplify_angle(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_path_simplify_angle()
    return _ret
  @path_simplify_angle.setter
  def path_simplify_angle(self,  value:'float'):
    self.set_path_simplify_angle(value)
  @property
  def path_rotation(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_path_rotation()
    return _ret
  @path_rotation.setter
  def path_rotation(self,  value:'int'):
    self.set_path_rotation(value)
  @property
  def path_rotation_accurate(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_path_rotation_accurate()
    return _ret
  @path_rotation_accurate.setter
  def path_rotation_accurate(self,  value:'bool'):
    self.set_path_rotation_accurate(value)
  @property
  def path_local(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_path_local()
    return _ret
  @path_local.setter
  def path_local(self,  value:'bool'):
    self.set_path_local(value)
  @property
  def path_continuous_u(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_path_continuous_u()
    return _ret
  @path_continuous_u.setter
  def path_continuous_u(self,  value:'bool'):
    self.set_path_continuous_u(value)
  @property
  def path_u_distance(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_path_u_distance()
    return _ret
  @path_u_distance.setter
  def path_u_distance(self,  value:'float'):
    self.set_path_u_distance(value)
  @property
  def path_joined(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_path_joined()
    return _ret
  @path_joined.setter
  def path_joined(self,  value:'bool'):
    self.set_path_joined(value)
  @property
  def smooth_faces(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_smooth_faces()
    return _ret
  @smooth_faces.setter
  def smooth_faces(self,  value:'bool'):
    self.set_smooth_faces(value)
  @property
  def material(self) -> typing.Union['py4godot_basematerial3d.BaseMaterial3D','py4godot_ormmaterial3d.ORMMaterial3D','py4godot_standardmaterial3d.StandardMaterial3D']:
    r''''''
    _ret = self. get_material()
    return _ret
  @material.setter
  def material(self,  value:'py4godot_object.Object'):
    self.set_material(value)
  @functools.native_method
  def set_polygon(self, polygon:'PackedVector2Array'   ) -> None:
    r''''''

    assert(not polygon is None)
    assert isinstance(polygon, PackedVector2Array), 'polygon must be PackedVector2Array'

    self.py__polygon = polygon






    self._ptr.call_with_return(322,tuple([polygon._ptr]))

  @functools.native_method
  def get_polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''




    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(323,tuple([]))

    return _ret


  @functools.native_method
  def set_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__mode = mode






    self._ptr.call_with_return(324,tuple([mode]))

  @functools.native_method
  def get_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(325,tuple([]))

    return _ret


  @functools.native_method
  def set_depth(self, depth:'float'   ) -> None:
    r''''''

    assert isinstance(depth, (int, float)), 'depth must be int or float'

    self.py__depth = depth






    self._ptr.call_with_return(326,tuple([depth]))

  @functools.native_method
  def get_depth(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(327,tuple([]))

    return _ret


  @functools.native_method
  def set_spin_degrees(self, degrees:'float'   ) -> None:
    r''''''

    assert isinstance(degrees, (int, float)), 'degrees must be int or float'

    self.py__spin_degrees = degrees






    self._ptr.call_with_return(328,tuple([degrees]))

  @functools.native_method
  def get_spin_degrees(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(329,tuple([]))

    return _ret


  @functools.native_method
  def set_spin_sides(self, spin_sides:'int'   ) -> None:
    r''''''

    assert isinstance(spin_sides, (int, float)), 'spin_sides must be int or float'

    self.py__spin_sides = spin_sides






    self._ptr.call_with_return(330,tuple([spin_sides]))

  @functools.native_method
  def get_spin_sides(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(331,tuple([]))

    return _ret


  @functools.native_method
  def set_path_node(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__path_node = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(332,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_path_node(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(333,tuple([]))

    return _ret


  @functools.native_method
  def set_path_interval_type(self, interval_type:'int'  ) -> None:
    r''''''

    assert isinstance(interval_type, (int, float)), 'interval_type must be int or float'

    self.py__path_interval_type = interval_type






    self._ptr.call_with_return(334,tuple([interval_type]))

  @functools.native_method
  def get_path_interval_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(335,tuple([]))

    return _ret


  @functools.native_method
  def set_path_interval(self, interval:'float'   ) -> None:
    r''''''

    assert isinstance(interval, (int, float)), 'interval must be int or float'

    self.py__path_interval = interval






    self._ptr.call_with_return(336,tuple([interval]))

  @functools.native_method
  def get_path_interval(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(337,tuple([]))

    return _ret


  @functools.native_method
  def set_path_simplify_angle(self, degrees:'float'   ) -> None:
    r''''''

    assert isinstance(degrees, (int, float)), 'degrees must be int or float'

    self.py__path_simplify_angle = degrees






    self._ptr.call_with_return(338,tuple([degrees]))

  @functools.native_method
  def get_path_simplify_angle(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(339,tuple([]))

    return _ret


  @functools.native_method
  def set_path_rotation(self, path_rotation:'int'  ) -> None:
    r''''''

    assert isinstance(path_rotation, (int, float)), 'path_rotation must be int or float'

    self.py__path_rotation = path_rotation






    self._ptr.call_with_return(340,tuple([path_rotation]))

  @functools.native_method
  def get_path_rotation(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(341,tuple([]))

    return _ret


  @functools.native_method
  def set_path_rotation_accurate(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__path_rotation_accurate = enable






    self._ptr.call_with_return(342,tuple([enable]))

  @functools.native_method
  def get_path_rotation_accurate(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(343,tuple([]))

    return _ret


  @functools.native_method
  def set_path_local(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__path_local = enable






    self._ptr.call_with_return(344,tuple([enable]))

  @functools.native_method
  def is_path_local(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(345,tuple([]))

    return _ret


  @functools.native_method
  def set_path_continuous_u(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__path_continuous_u = enable






    self._ptr.call_with_return(346,tuple([enable]))

  @functools.native_method
  def is_path_continuous_u(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(347,tuple([]))

    return _ret


  @functools.native_method
  def set_path_u_distance(self, distance:'float'   ) -> None:
    r''''''

    assert isinstance(distance, (int, float)), 'distance must be int or float'

    self.py__path_u_distance = distance






    self._ptr.call_with_return(348,tuple([distance]))

  @functools.native_method
  def get_path_u_distance(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(349,tuple([]))

    return _ret


  @functools.native_method
  def set_path_joined(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__path_joined = enable






    self._ptr.call_with_return(350,tuple([enable]))

  @functools.native_method
  def is_path_joined(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(351,tuple([]))

    return _ret


  @functools.native_method
  def set_material(self, material:'py4godot_material.Material'   ) -> None:
    r''''''

    assert(not material is None)
    assert isinstance(material, get_class('Material')), 'material must be Material'

    self.py__material = material






    self._ptr.call_with_return(352,tuple([material._ptr]))

  @functools.native_method
  def get_material(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Material
    _ret._ptr = self._ptr.call_with_return(353,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_smooth_faces(self, smooth_faces:'bool'   ) -> None:
    r''''''

    assert isinstance(smooth_faces, bool), 'smooth_faces must be bool'

    self.py__smooth_faces = smooth_faces






    self._ptr.call_with_return(354,tuple([smooth_faces]))

  @functools.native_method
  def get_smooth_faces(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(355,tuple([]))

    return _ret



register_cast_function('CSGPolygon3D', CSGPolygon3D.cast)
register_class('CSGPolygon3D', CSGPolygon3D)
