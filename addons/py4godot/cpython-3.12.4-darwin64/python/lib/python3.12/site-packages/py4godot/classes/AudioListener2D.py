# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPAudioListener2DWrapper


class AudioListener2D(py4godot_node2d.Node2D):
  r'''
		Once added to the scene tree and enabled using `make_current`, this node will override the location sounds are heard from. Only one `AudioListener2D` can be current. Using `make_current` will disable the previous `AudioListener2D`.
		If there is no active `AudioListener2D` in the current `Viewport`, center of the screen will be used as a hearing point for the audio. `AudioListener2D` needs to be inside `SceneTree` to function.
	'''

  @staticmethod
  def constructor():
    class_ = AudioListener2D.construct_without_init()
    class_._ptr = constructor(135,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioListener2D.construct_without_init()
    class_._ptr = constructor(135,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioListener2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(135,0, ())


  def generate_wrapper(self):
    return CPPAudioListener2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioListener2D.__new__(AudioListener2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioListener2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioListener2D.construct_without_init()
    cls._ptr = CPPAudioListener2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioListener2D.construct_without_init()
    cls._ptr = CPPAudioListener2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def make_current(self) -> None:
    r'''
				Makes the `AudioListener2D` active, setting it as the hearing point for the sounds. If there is already another active `AudioListener2D`, it will be disabled.
				This method will have no effect if the `AudioListener2D` is not added to `SceneTree`.
			'''




    self._ptr.call_with_return(303,tuple([]))

  @functools.native_method
  def clear_current(self) -> None:
    r'''
				Disables the `AudioListener2D`. If it's not set as current, this method will have no effect.
			'''




    self._ptr.call_with_return(304,tuple([]))

  @functools.native_method
  def is_current(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this `AudioListener2D` is currently active.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(305,tuple([]))
    return _ret



register_cast_function('AudioListener2D', AudioListener2D.cast)
register_class('AudioListener2D', AudioListener2D)
