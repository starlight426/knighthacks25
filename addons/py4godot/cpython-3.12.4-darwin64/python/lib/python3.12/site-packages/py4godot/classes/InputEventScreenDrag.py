# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.InputEventFromWindow as py4godot_inputeventfromwindow 
from py4godot.wrappers.wrappers import CPPInputEventScreenDragWrapper


class InputEventScreenDrag(py4godot_inputeventfromwindow.InputEventFromWindow):
  r'''
		Stores information about screen drag events. See `Node._input`.
	'''

  @staticmethod
  def constructor():
    class_ = InputEventScreenDrag.construct_without_init()
    class_._ptr = constructor(426,0, ())
    return class_
  @staticmethod
  def new():
    class_ = InputEventScreenDrag.construct_without_init()
    class_._ptr = constructor(426,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPInputEventScreenDragWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(426,0, ())


  def generate_wrapper(self):
    return CPPInputEventScreenDragWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = InputEventScreenDrag.__new__(InputEventScreenDrag)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'InputEventScreenDrag'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventScreenDrag.construct_without_init()
    cls._ptr = CPPInputEventScreenDragWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventScreenDrag.construct_without_init()
    cls._ptr = CPPInputEventScreenDragWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_index()
    return _ret
  @index.setter
  def index(self,  value:'int'):
    self.set_index(value)
  @property
  def tilt(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_tilt()
    return _ret
  @tilt.setter
  def tilt(self,  value:'Vector2'):
    self.set_tilt(value)
  @property
  def pressure(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_pressure()
    return _ret
  @pressure.setter
  def pressure(self,  value:'float'):
    self.set_pressure(value)
  @property
  def pen_inverted(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_pen_inverted()
    return _ret
  @pen_inverted.setter
  def pen_inverted(self,  value:'bool'):
    self.set_pen_inverted(value)
  @property
  def position(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_position()
    return _ret
  @position.setter
  def position(self,  value:'Vector2'):
    self.set_position(value)
  @property
  def relative(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_relative()
    return _ret
  @relative.setter
  def relative(self,  value:'Vector2'):
    self.set_relative(value)
  @property
  def screen_relative(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_screen_relative()
    return _ret
  @screen_relative.setter
  def screen_relative(self,  value:'Vector2'):
    self.set_screen_relative(value)
  @property
  def velocity(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_velocity()
    return _ret
  @velocity.setter
  def velocity(self,  value:'Vector2'):
    self.set_velocity(value)
  @property
  def screen_velocity(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_screen_velocity()
    return _ret
  @screen_velocity.setter
  def screen_velocity(self,  value:'Vector2'):
    self.set_screen_velocity(value)
  @functools.native_method
  def set_index(self, index:'int'   ) -> None:
    r''''''

    assert isinstance(index, (int, float)), 'index must be int or float'

    self.py__index = index






    self._ptr.call_with_return(94,tuple([index]))

  @functools.native_method
  def get_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_tilt(self, tilt:'Vector2'   ) -> None:
    r''''''

    assert(not tilt is None)
    assert isinstance(tilt, Vector2), 'tilt must be Vector2'

    self.py__tilt = tilt






    self._ptr.call_with_return(96,tuple([tilt._ptr]))

  @functools.native_method
  def get_tilt(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_pressure(self, pressure:'float'   ) -> None:
    r''''''

    assert isinstance(pressure, (int, float)), 'pressure must be int or float'

    self.py__pressure = pressure






    self._ptr.call_with_return(98,tuple([pressure]))

  @functools.native_method
  def get_pressure(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_pen_inverted(self, pen_inverted:'bool'   ) -> None:
    r''''''

    assert isinstance(pen_inverted, bool), 'pen_inverted must be bool'

    self.py__pen_inverted = pen_inverted






    self._ptr.call_with_return(100,tuple([pen_inverted]))

  @functools.native_method
  def get_pen_inverted(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(101,tuple([]))

    return _ret


  @functools.native_method
  def set_position(self, position:'Vector2'   ) -> None:
    r''''''

    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'

    self.py__position = position






    self._ptr.call_with_return(102,tuple([position._ptr]))

  @functools.native_method
  def get_position(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(103,tuple([]))

    return _ret


  @functools.native_method
  def set_relative(self, relative:'Vector2'   ) -> None:
    r''''''

    assert(not relative is None)
    assert isinstance(relative, Vector2), 'relative must be Vector2'

    self.py__relative = relative






    self._ptr.call_with_return(104,tuple([relative._ptr]))

  @functools.native_method
  def get_relative(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(105,tuple([]))

    return _ret


  @functools.native_method
  def set_screen_relative(self, relative:'Vector2'   ) -> None:
    r''''''

    assert(not relative is None)
    assert isinstance(relative, Vector2), 'relative must be Vector2'

    self.py__screen_relative = relative






    self._ptr.call_with_return(106,tuple([relative._ptr]))

  @functools.native_method
  def get_screen_relative(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(107,tuple([]))

    return _ret


  @functools.native_method
  def set_velocity(self, velocity:'Vector2'   ) -> None:
    r''''''

    assert(not velocity is None)
    assert isinstance(velocity, Vector2), 'velocity must be Vector2'

    self.py__velocity = velocity






    self._ptr.call_with_return(108,tuple([velocity._ptr]))

  @functools.native_method
  def get_velocity(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(109,tuple([]))

    return _ret


  @functools.native_method
  def set_screen_velocity(self, velocity:'Vector2'   ) -> None:
    r''''''

    assert(not velocity is None)
    assert isinstance(velocity, Vector2), 'velocity must be Vector2'

    self.py__screen_velocity = velocity






    self._ptr.call_with_return(110,tuple([velocity._ptr]))

  @functools.native_method
  def get_screen_velocity(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(111,tuple([]))

    return _ret



register_cast_function('InputEventScreenDrag', InputEventScreenDrag.cast)
register_class('InputEventScreenDrag', InputEventScreenDrag)
