# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPWorkerThreadPoolWrapper

_WorkerThreadPool_singleton_instance = None

class WorkerThreadPool(py4godot_object.Object):
  r'''
		The `WorkerThreadPool` singleton allocates a set of `Thread`s (called worker threads) on project startup and provides methods for offloading tasks to them. This can be used for simple multithreading without having to create `Thread`s.
		Tasks hold the `Callable` to be run by the threads. `WorkerThreadPool` can be used to create regular tasks, which will be taken by one worker thread, or group tasks, which can be distributed between multiple worker threads. Group tasks execute the `Callable` multiple times, which makes them useful for iterating over a lot of elements, such as the enemies in an arena.
		Here's a sample on how to offload an expensive function to worker threads:
		
		```gdscript
		var enemies = `` # An array to be filled with enemies.

		func process_enemy_ai(enemy_index):
			var processed_enemy = enemies`enemy_index`
			# Expensive logic...

		func _process(delta):
			var task_id = WorkerThreadPool.add_group_task(process_enemy_ai, enemies.size())
			# Other code...
			WorkerThreadPool.wait_for_group_task_completion(task_id)
			# Other code that depends on the enemy AI already being processed.
		```
		
		
		The above code relies on the number of elements in the `enemies` array remaining constant during the multithreaded part.
		**Note:** Using this singleton could affect performance negatively if the task being distributed between threads is not computationally expensive.
	'''


  def generate_wrapper(self):
    return CPPWorkerThreadPoolWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WorkerThreadPool.__new__(WorkerThreadPool)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WorkerThreadPool'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WorkerThreadPool.construct_without_init()
    cls._ptr = CPPWorkerThreadPoolWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WorkerThreadPool.construct_without_init()
    cls._ptr = CPPWorkerThreadPoolWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _WorkerThreadPool_singleton_instance
    if _WorkerThreadPool_singleton_instance is None:
      singleton = WorkerThreadPool()
      singleton._ptr = constructor(1003,0, ())
      _WorkerThreadPool_singleton_instance = singleton
    return _WorkerThreadPool_singleton_instance

  @functools.native_method
  def add_task(self, action:'Callable'   , high_priority:'bool' =False  , description:'str' =""  ) -> typing.Union[int]:
    r'''
				Adds `action` as a task to be executed by a worker thread. `high_priority` determines if the task has a high priority or a low priority (default). You can optionally provide a `description` to help with debugging.
				Returns a task ID that can be used by other methods.
				**Warning:** Every task must be waited for completion using `wait_for_task_completion` or `wait_for_group_task_completion` at some point so that any allocated resources inside the task can be cleaned up.
			'''
    if description is None:
      description = String.new0()
    if description is None:
      description = String.new0()

    assert(not action is None)
    assert isinstance(action, Callable), 'action must be Callable'
    assert isinstance(high_priority, bool), 'high_priority must be bool'






    assert(isinstance(description, (str, String)))
    py_string_description = description if isinstance(description, StringName) else c_utils.py_string_to_string(description)

    _ret = 0
    _ret = self._ptr.call_with_return(49,tuple([action._ptr, high_priority, py_string_description._ptr]))
    return _ret


  @functools.native_method
  def is_task_completed(self, task_id:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the task with the given ID is completed.
				**Note:** You should only call this method between adding the task and awaiting its completion.
			'''

    assert isinstance(task_id, (int, float)), 'task_id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(50,tuple([task_id]))
    return _ret


  @functools.native_method
  def wait_for_task_completion(self, task_id:'int'   ) -> typing.Union[int]:
    r'''
				Pauses the thread that calls this method until the task with the given ID is completed.
				Returns `constant @GlobalScope.OK` if the task could be successfully awaited.
				Returns `constant @GlobalScope.ERR_INVALID_PARAMETER` if a task with the passed ID does not exist (maybe because it was already awaited and disposed of).
				Returns `constant @GlobalScope.ERR_BUSY` if the call is made from another running task and, due to task scheduling, there's potential for deadlocking (e.g., the task to await may be at a lower level in the call stack and therefore can't progress). This is an advanced situation that should only matter when some tasks depend on others (in the current implementation, the tricky case is a task trying to wait on an older one).
			'''

    assert isinstance(task_id, (int, float)), 'task_id must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(51,tuple([task_id]))
    return _ret


  @functools.native_method
  def get_caller_task_id(self) -> typing.Union[int]:
    r'''
				Returns the task ID of the current thread calling this method, or `-1` if the task is a group task, invalid or the current thread is not part of the thread pool (e.g. the main thread).
				Can be used by a task to get its own task ID, or to determine whether the current code is running inside the worker thread pool.
				**Note:** Group tasks have their own IDs, so this method will return `-1` for group tasks.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(52,tuple([]))
    return _ret


  @functools.native_method
  def add_group_task(self, action:'Callable'   , elements:'int'   , tasks_needed:'int' =-1  , high_priority:'bool' =False  , description:'str' =""  ) -> typing.Union[int]:
    r'''
				Adds `action` as a group task to be executed by the worker threads. The `Callable` will be called a number of times based on `elements`, with the first thread calling it with the value `0` as a parameter, and each consecutive execution incrementing this value by 1 until it reaches `element - 1`.
				The number of threads the task is distributed to is defined by `tasks_needed`, where the default value `-1` means it is distributed to all worker threads. `high_priority` determines if the task has a high priority or a low priority (default). You can optionally provide a `description` to help with debugging.
				Returns a group task ID that can be used by other methods.
				**Warning:** Every task must be waited for completion using `wait_for_task_completion` or `wait_for_group_task_completion` at some point so that any allocated resources inside the task can be cleaned up.
			'''
    if description is None:
      description = String.new0()
    if description is None:
      description = String.new0()

    assert(not action is None)
    assert isinstance(action, Callable), 'action must be Callable'
    assert isinstance(elements, (int, float)), 'elements must be int or float'
    assert isinstance(tasks_needed, (int, float)), 'tasks_needed must be int or float'
    assert isinstance(high_priority, bool), 'high_priority must be bool'








    assert(isinstance(description, (str, String)))
    py_string_description = description if isinstance(description, StringName) else c_utils.py_string_to_string(description)

    _ret = 0
    _ret = self._ptr.call_with_return(53,tuple([action._ptr, elements, tasks_needed, high_priority, py_string_description._ptr]))
    return _ret


  @functools.native_method
  def is_group_task_completed(self, group_id:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the group task with the given ID is completed.
				**Note:** You should only call this method between adding the group task and awaiting its completion.
			'''

    assert isinstance(group_id, (int, float)), 'group_id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([group_id]))
    return _ret


  @functools.native_method
  def get_group_processed_element_count(self, group_id:'int'   ) -> typing.Union[int]:
    r'''
				Returns how many times the `Callable` of the group task with the given ID has already been executed by the worker threads.
				**Note:** If a thread has started executing the `Callable` but is yet to finish, it won't be counted.
			'''

    assert isinstance(group_id, (int, float)), 'group_id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([group_id]))
    return _ret


  @functools.native_method
  def wait_for_group_task_completion(self, group_id:'int'   ) -> None:
    r'''
				Pauses the thread that calls this method until the group task with the given ID is completed.
			'''

    assert isinstance(group_id, (int, float)), 'group_id must be int or float'






    self._ptr.call_with_return(56,tuple([group_id]))

  @functools.native_method
  def get_caller_group_id(self) -> typing.Union[int]:
    r'''
				Returns the task group ID of the current thread calling this method, or `-1` if invalid or the current thread is not part of a task group.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))
    return _ret



register_cast_function('WorkerThreadPool', WorkerThreadPool.cast)
register_class('WorkerThreadPool', WorkerThreadPool)
