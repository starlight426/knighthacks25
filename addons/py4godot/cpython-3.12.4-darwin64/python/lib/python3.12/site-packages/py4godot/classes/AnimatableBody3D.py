# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.StaticBody3D as py4godot_staticbody3d 
from py4godot.wrappers.wrappers import CPPAnimatableBody3DWrapper


class AnimatableBody3D(py4godot_staticbody3d.StaticBody3D):
  r'''
		An animatable 3D physics body. It can't be moved by external forces or contacts, but can be moved manually by other means such as code, `AnimationMixer`s (with `AnimationMixer.callback_mode_process` set to `constant AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS`), and `RemoteTransform3D`.
		When `AnimatableBody3D` is moved, its linear and angular velocity are estimated and used to affect other physics bodies in its path. This makes it useful for moving platforms, doors, and other moving objects.
	'''

  @staticmethod
  def constructor():
    class_ = AnimatableBody3D.construct_without_init()
    class_._ptr = constructor(68,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimatableBody3D.construct_without_init()
    class_._ptr = constructor(68,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimatableBody3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(68,0, ())


  def generate_wrapper(self):
    return CPPAnimatableBody3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimatableBody3D.__new__(AnimatableBody3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimatableBody3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimatableBody3D.construct_without_init()
    cls._ptr = CPPAnimatableBody3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimatableBody3D.construct_without_init()
    cls._ptr = CPPAnimatableBody3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def sync_to_physics(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_sync_to_physics_enabled()
    return _ret
  @sync_to_physics.setter
  def sync_to_physics(self,  value:'bool'):
    self.set_sync_to_physics(value)
  @functools.native_method
  def set_sync_to_physics(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__sync_to_physics = enable






    self._ptr.call_with_return(300,tuple([enable]))

  @functools.native_method
  def is_sync_to_physics_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(301,tuple([]))

    return _ret



register_cast_function('AnimatableBody3D', AnimatableBody3D.cast)
register_class('AnimatableBody3D', AnimatableBody3D)
