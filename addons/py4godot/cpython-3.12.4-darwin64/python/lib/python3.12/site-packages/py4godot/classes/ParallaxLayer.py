# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPParallaxLayerWrapper


class ParallaxLayer(py4godot_node2d.Node2D):
  r'''
		A ParallaxLayer must be the child of a `ParallaxBackground` node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the `ParallaxBackground.scroll_offset` value.
		This node's children will be affected by its scroll offset.
		**Note:** Any changes to this node's position and scale made after it enters the scene will be ignored.
	'''

  @staticmethod
  def constructor():
    class_ = ParallaxLayer.construct_without_init()
    class_._ptr = constructor(578,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ParallaxLayer.construct_without_init()
    class_._ptr = constructor(578,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPParallaxLayerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(578,0, ())


  def generate_wrapper(self):
    return CPPParallaxLayerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ParallaxLayer.__new__(ParallaxLayer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ParallaxLayer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ParallaxLayer.construct_without_init()
    cls._ptr = CPPParallaxLayerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ParallaxLayer.construct_without_init()
    cls._ptr = CPPParallaxLayerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def motion_scale(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_motion_scale()
    return _ret
  @motion_scale.setter
  def motion_scale(self,  value:'Vector2'):
    self.set_motion_scale(value)
  @property
  def motion_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_motion_offset()
    return _ret
  @motion_offset.setter
  def motion_offset(self,  value:'Vector2'):
    self.set_motion_offset(value)
  @property
  def motion_mirroring(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_mirroring()
    return _ret
  @motion_mirroring.setter
  def motion_mirroring(self,  value:'Vector2'):
    self.set_mirroring(value)
  @functools.native_method
  def set_motion_scale(self, scale:'Vector2'   ) -> None:
    r''''''

    assert(not scale is None)
    assert isinstance(scale, Vector2), 'scale must be Vector2'

    self.py__motion_scale = scale






    self._ptr.call_with_return(303,tuple([scale._ptr]))

  @functools.native_method
  def get_motion_scale(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def set_motion_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__motion_offset = offset






    self._ptr.call_with_return(305,tuple([offset._ptr]))

  @functools.native_method
  def get_motion_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_mirroring(self, mirror:'Vector2'   ) -> None:
    r''''''

    assert(not mirror is None)
    assert isinstance(mirror, Vector2), 'mirror must be Vector2'

    self.py__motion_mirroring = mirror






    self._ptr.call_with_return(307,tuple([mirror._ptr]))

  @functools.native_method
  def get_mirroring(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(308,tuple([]))

    return _ret



register_cast_function('ParallaxLayer', ParallaxLayer.cast)
register_class('ParallaxLayer', ParallaxLayer)
