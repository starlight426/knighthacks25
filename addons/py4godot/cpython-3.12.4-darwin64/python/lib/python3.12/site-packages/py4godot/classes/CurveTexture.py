# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Curve as py4godot_curve 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPCurveTextureWrapper

class TextureMode:
  TEXTURE_MODE_RGB = 0
  TEXTURE_MODE_RED = 1


class CurveTexture(py4godot_texture2d.Texture2D):
  r'''
		A 1D texture where pixel brightness corresponds to points on a unit `Curve` resource, either in grayscale or in red. This visual representation simplifies the task of saving curves as image files.
		If you need to store up to 3 curves within a single texture, use `CurveXYZTexture` instead. See also `GradientTexture1D` and `GradientTexture2D`.
	'''

  @staticmethod
  def constructor():
    class_ = CurveTexture.construct_without_init()
    class_._ptr = constructor(251,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CurveTexture.construct_without_init()
    class_._ptr = constructor(251,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCurveTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(251,0, ())


  def generate_wrapper(self):
    return CPPCurveTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CurveTexture.__new__(CurveTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CurveTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CurveTexture.construct_without_init()
    cls._ptr = CPPCurveTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CurveTexture.construct_without_init()
    cls._ptr = CPPCurveTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def width(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_width()
    return _ret
  @width.setter
  def width(self,  value:'int'):
    self.set_width(value)
  @property
  def texture_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_mode()
    return _ret
  @texture_mode.setter
  def texture_mode(self,  value:'int'):
    self.set_texture_mode(value)
  @property
  def curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''
    _ret = self. get_curve()
    return _ret
  @curve.setter
  def curve(self,  value:'py4godot_object.Object'):
    self.set_curve(value)
  @functools.native_method
  def set_width(self, width:'int'   ) -> None:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'

    self.py__width = width






    self._ptr.call_with_return(93,tuple([width]))

  @functools.native_method
  def set_curve(self, curve:'py4godot_curve.Curve'   ) -> None:
    r''''''

    assert(not curve is None)
    assert isinstance(curve, get_class('Curve')), 'curve must be Curve'

    self.py__curve = curve






    self._ptr.call_with_return(94,tuple([curve._ptr]))

  @functools.native_method
  def get_curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Curve
    _ret._ptr = self._ptr.call_with_return(95,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture_mode(self, texture_mode:'int'  ) -> None:
    r''''''

    assert isinstance(texture_mode, (int, float)), 'texture_mode must be int or float'

    self.py__texture_mode = texture_mode






    self._ptr.call_with_return(96,tuple([texture_mode]))

  @functools.native_method
  def get_texture_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret



register_cast_function('CurveTexture', CurveTexture.cast)
register_class('CurveTexture', CurveTexture)
