# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.PacketPeerUDP as py4godot_packetpeerudp 
  import py4godot.classes.TLSOptions as py4godot_tlsoptions 
import py4godot.classes.PacketPeer as py4godot_packetpeer 
from py4godot.wrappers.wrappers import CPPPacketPeerDTLSWrapper

class Status:
  STATUS_DISCONNECTED = 0
  STATUS_HANDSHAKING = 1
  STATUS_CONNECTED = 2
  STATUS_ERROR = 3
  STATUS_ERROR_HOSTNAME_MISMATCH = 4


class PacketPeerDTLS(py4godot_packetpeer.PacketPeer):
  r'''
		This class represents a DTLS peer connection. It can be used to connect to a DTLS server, and is returned by `DTLSServer.take_connection`.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
		**Warning:** TLS certificate revocation and certificate pinning are currently not supported. Revoked certificates are accepted as long as they are otherwise valid. If this is a concern, you may want to use automatically managed certificates with a short validity period.
	'''

  @staticmethod
  def constructor():
    class_ = PacketPeerDTLS.construct_without_init()
    class_._ptr = constructor(569,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PacketPeerDTLS.construct_without_init()
    class_._ptr = constructor(569,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPacketPeerDTLSWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(569,0, ())


  def generate_wrapper(self):
    return CPPPacketPeerDTLSWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PacketPeerDTLS.__new__(PacketPeerDTLS)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PacketPeerDTLS'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PacketPeerDTLS.construct_without_init()
    cls._ptr = CPPPacketPeerDTLSWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PacketPeerDTLS.construct_without_init()
    cls._ptr = CPPPacketPeerDTLSWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def poll(self) -> None:
    r'''
				Poll the connection to check for incoming packets. Call this frequently to update the status and keep the connection working.
			'''




    self._ptr.call_with_return(61,tuple([]))

  @functools.native_method
  def connect_to_peer(self, packet_peer:'py4godot_packetpeerudp.PacketPeerUDP'   , hostname:'str'   , client_options:'py4godot_tlsoptions.TLSOptions' = None  ) -> typing.Union[int]:
    r'''
				Connects a `packet_peer` beginning the DTLS handshake using the underlying `PacketPeerUDP` which must be connected (see `PacketPeerUDP.connect_to_host`). You can optionally specify the `client_options` to be used while verifying the TLS connections. See `TLSOptions.client` and `TLSOptions.client_unsafe`.
			'''
    if client_options is None:
      client_options = c_utils.empty_object
    if client_options is None:
      client_options = c_utils.empty_object

    assert(not packet_peer is None)
    assert isinstance(packet_peer, get_class('PacketPeerUDP')), 'packet_peer must be PacketPeerUDP'
    assert(not hostname is None)
    assert isinstance(hostname, (str, String)), 'hostname must be str or String'





    assert(isinstance(hostname, (str, String)))
    py_string_hostname = hostname if isinstance(hostname, StringName) else c_utils.py_string_to_string(hostname)


    _ret:int
    _ret = self._ptr.call_with_return(62,tuple([packet_peer._ptr, py_string_hostname._ptr, client_options._ptr]))
    return _ret


  @functools.native_method
  def get_status(self) -> typing.Union[int]:
    r'''
				Returns the status of the connection.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([]))
    return _ret


  @functools.native_method
  def disconnect_from_peer(self) -> None:
    r'''
				Disconnects this peer, terminating the DTLS session.
			'''




    self._ptr.call_with_return(64,tuple([]))


register_cast_function('PacketPeerDTLS', PacketPeerDTLS.cast)
register_class('PacketPeerDTLS', PacketPeerDTLS)
