# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTypedArray as py4godot_imagetypedarray 
  import py4godot.classes.Image as py4godot_image 
import py4godot.classes.ImageTypedArray as py4godot_imagetypedarray 
import py4godot.classes.Texture3D as py4godot_texture3d 
from py4godot.wrappers.wrappers import CPPImageTexture3DWrapper


class ImageTexture3D(py4godot_texture3d.Texture3D):
  r'''
		`ImageTexture3D` is a 3-dimensional `ImageTexture` that has a width, height, and depth. See also `ImageTextureLayered`.
		3D textures are typically used to store density maps for `FogMaterial`, color correction LUTs for `Environment`, vector fields for `GPUParticlesAttractorVectorField3D` and collision maps for `GPUParticlesCollisionSDF3D`. 3D textures can also be used in custom shaders.
	'''

  @staticmethod
  def constructor():
    class_ = ImageTexture3D.construct_without_init()
    class_._ptr = constructor(407,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ImageTexture3D.construct_without_init()
    class_._ptr = constructor(407,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPImageTexture3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(407,0, ())


  def generate_wrapper(self):
    return CPPImageTexture3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ImageTexture3D.__new__(ImageTexture3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ImageTexture3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImageTexture3D.construct_without_init()
    cls._ptr = CPPImageTexture3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImageTexture3D.construct_without_init()
    cls._ptr = CPPImageTexture3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def create(self, format:'int'  , width:'int'   , height:'int'   , depth:'int'   , use_mipmaps:'bool'   , data:'py4godot_imagetypedarray.ImageTypedArray'   ) -> typing.Union[int]:
    r'''
				Creates the `ImageTexture3D` with specified `format`, `width`, `height`, and `depth`. If `use_mipmaps` is `true`, generates mipmaps for the `ImageTexture3D`.
			'''

    assert isinstance(format, (int, float)), 'format must be int or float'
    assert isinstance(width, (int, float)), 'width must be int or float'
    assert isinstance(height, (int, float)), 'height must be int or float'
    assert isinstance(depth, (int, float)), 'depth must be int or float'
    assert isinstance(use_mipmaps, bool), 'use_mipmaps must be bool'
    assert isinstance(data, get_class('ImageTypedArray')), 'data must be ImageTypedArray'











    _ret:int
    _ret = self._ptr.call_with_return(90,tuple([format, width, height, depth, use_mipmaps, data._ptr]))
    return _ret


  @functools.native_method
  def update(self, data:'py4godot_imagetypedarray.ImageTypedArray'   ) -> None:
    r'''
				Replaces the texture's existing data with the layers specified in `data`. The size of `data` must match the parameters that were used for `create`. In other words, the texture cannot be resized or have its format changed by calling `update`.
			'''

    assert isinstance(data, get_class('ImageTypedArray')), 'data must be ImageTypedArray'






    self._ptr.call_with_return(91,tuple([data._ptr]))


register_cast_function('ImageTexture3D', ImageTexture3D.cast)
register_class('ImageTexture3D', ImageTexture3D)
