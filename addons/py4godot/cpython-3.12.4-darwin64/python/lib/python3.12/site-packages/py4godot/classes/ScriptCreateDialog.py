# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.ConfirmationDialog as py4godot_confirmationdialog 
from py4godot.wrappers.wrappers import CPPScriptCreateDialogWrapper


class ScriptCreateDialog(py4godot_confirmationdialog.ConfirmationDialog):
  r'''
		The `ScriptCreateDialog` creates script files according to a given template for a given scripting language. The standard use is to configure its fields prior to calling one of the `Window.popup` methods.
		
		```gdscript
		func _ready():
			var dialog = ScriptCreateDialog.new();
			dialog.config("Node", "res://new_node.gd") # For in-engine types.
			dialog.config("\"res://base_node.gd\"", "res://derived_node.gd") # For script types.
			dialog.popup_centered()
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = ScriptCreateDialog.construct_without_init()
    class_._ptr = constructor(723,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ScriptCreateDialog.construct_without_init()
    class_._ptr = constructor(723,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPScriptCreateDialogWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(723,0, ())


  def generate_wrapper(self):
    return CPPScriptCreateDialogWrapper()
  def init_signals(self):
    super().init_signals()
    script_created_name = utils.py_string_to_string_name("script_created")
    self.script_created = signals.BuiltinSignal(self, script_created_name)

  @staticmethod
  def construct_without_init():
    cls = ScriptCreateDialog.__new__(ScriptCreateDialog)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ScriptCreateDialog'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ScriptCreateDialog.construct_without_init()
    cls._ptr = CPPScriptCreateDialogWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ScriptCreateDialog.construct_without_init()
    cls._ptr = CPPScriptCreateDialogWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def config(self, inherits:'str'   , path:'str'   , built_in_enabled:'bool' =True  , load_enabled:'bool' =True  ) -> None:
    r'''
				Prefills required fields to configure the ScriptCreateDialog for use.
			'''

    assert(not inherits is None)
    assert isinstance(inherits, (str, String)), 'inherits must be str or String'
    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(built_in_enabled, bool), 'built_in_enabled must be bool'
    assert isinstance(load_enabled, bool), 'load_enabled must be bool'




    assert(isinstance(inherits, (str, String)))
    py_string_inherits = inherits if isinstance(inherits, StringName) else c_utils.py_string_to_string(inherits)
    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)



    self._ptr.call_with_return(453,tuple([py_string_inherits._ptr, py_string_path._ptr, built_in_enabled, load_enabled]))


register_cast_function('ScriptCreateDialog', ScriptCreateDialog.cast)
register_class('ScriptCreateDialog', ScriptCreateDialog)
