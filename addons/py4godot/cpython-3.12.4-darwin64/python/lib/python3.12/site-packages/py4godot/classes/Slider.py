# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.VSlider as py4godot_vslider 
import py4godot.classes.Range as py4godot_range 
from py4godot.wrappers.wrappers import CPPSliderWrapper

class TickPosition:
  TICK_POSITION_BOTTOM_RIGHT = 0
  TICK_POSITION_TOP_LEFT = 1
  TICK_POSITION_BOTH = 2
  TICK_POSITION_CENTER = 3


class Slider(py4godot_range.Range):
  r'''
		Abstract base class for sliders, used to adjust a value by moving a grabber along a horizontal or vertical axis. Sliders are `Range`-based controls.
	'''

  @staticmethod
  def constructor():
    class_ = Slider.construct_without_init()
    class_._ptr = constructor(764,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Slider.construct_without_init()
    class_._ptr = constructor(764,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSliderWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(764,0, ())


  def generate_wrapper(self):
    return CPPSliderWrapper()
  def init_signals(self):
    super().init_signals()
    drag_started_name = utils.py_string_to_string_name("drag_started")
    self.drag_started = signals.BuiltinSignal(self, drag_started_name)
    drag_ended_name = utils.py_string_to_string_name("drag_ended")
    self.drag_ended = signals.BuiltinSignal(self, drag_ended_name)

  @staticmethod
  def construct_without_init():
    cls = Slider.__new__(Slider)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Slider'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Slider.construct_without_init()
    cls._ptr = CPPSliderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Slider.construct_without_init()
    cls._ptr = CPPSliderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def editable(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_editable()
    return _ret
  @editable.setter
  def editable(self,  value:'bool'):
    self.set_editable(value)
  @property
  def scrollable(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_scrollable()
    return _ret
  @scrollable.setter
  def scrollable(self,  value:'bool'):
    self.set_scrollable(value)
  @property
  def tick_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_ticks()
    return _ret
  @tick_count.setter
  def tick_count(self,  value:'int'):
    self.set_ticks(value)
  @property
  def ticks_on_borders(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_ticks_on_borders()
    return _ret
  @ticks_on_borders.setter
  def ticks_on_borders(self,  value:'bool'):
    self.set_ticks_on_borders(value)
  @property
  def ticks_position(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_ticks_position()
    return _ret
  @ticks_position.setter
  def ticks_position(self,  value:'int'):
    self.set_ticks_position(value)
  @functools.native_method
  def set_ticks(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__tick_count = count






    self._ptr.call_with_return(457,tuple([count]))

  @functools.native_method
  def get_ticks(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(458,tuple([]))

    return _ret


  @functools.native_method
  def get_ticks_on_borders(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(459,tuple([]))

    return _ret


  @functools.native_method
  def set_ticks_on_borders(self, ticks_on_border:'bool'   ) -> None:
    r''''''

    assert isinstance(ticks_on_border, bool), 'ticks_on_border must be bool'

    self.py__ticks_on_borders = ticks_on_border






    self._ptr.call_with_return(460,tuple([ticks_on_border]))

  @functools.native_method
  def get_ticks_position(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(461,tuple([]))

    return _ret


  @functools.native_method
  def set_ticks_position(self, ticks_on_border:'int'  ) -> None:
    r''''''

    assert isinstance(ticks_on_border, (int, float)), 'ticks_on_border must be int or float'

    self.py__ticks_position = ticks_on_border






    self._ptr.call_with_return(462,tuple([ticks_on_border]))

  @functools.native_method
  def set_editable(self, editable:'bool'   ) -> None:
    r''''''

    assert isinstance(editable, bool), 'editable must be bool'

    self.py__editable = editable






    self._ptr.call_with_return(463,tuple([editable]))

  @functools.native_method
  def is_editable(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(464,tuple([]))

    return _ret


  @functools.native_method
  def set_scrollable(self, scrollable:'bool'   ) -> None:
    r''''''

    assert isinstance(scrollable, bool), 'scrollable must be bool'

    self.py__scrollable = scrollable






    self._ptr.call_with_return(465,tuple([scrollable]))

  @functools.native_method
  def is_scrollable(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(466,tuple([]))

    return _ret



register_cast_function('Slider', Slider.cast)
register_class('Slider', Slider)
