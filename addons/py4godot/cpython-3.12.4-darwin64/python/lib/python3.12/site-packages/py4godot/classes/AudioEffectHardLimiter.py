# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectHardLimiterWrapper


class AudioEffectHardLimiter(py4godot_audioeffect.AudioEffect):
  r'''
		A limiter is an effect designed to disallow sound from going over a given dB threshold. Hard limiters predict volume peaks, and will smoothly apply gain reduction when a peak crosses the ceiling threshold to prevent clipping and distortion. It preserves the waveform and prevents it from crossing the ceiling threshold. Adding one in the Master bus is recommended as a safety measure to prevent sudden volume peaks from occurring, and to prevent distortion caused by clipping.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectHardLimiter.construct_without_init()
    class_._ptr = constructor(119,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectHardLimiter.construct_without_init()
    class_._ptr = constructor(119,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectHardLimiterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(119,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectHardLimiterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectHardLimiter.__new__(AudioEffectHardLimiter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectHardLimiter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectHardLimiter.construct_without_init()
    cls._ptr = CPPAudioEffectHardLimiterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectHardLimiter.construct_without_init()
    cls._ptr = CPPAudioEffectHardLimiterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def pre_gain_db(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_pre_gain_db()
    return _ret
  @pre_gain_db.setter
  def pre_gain_db(self,  value:'float'):
    self.set_pre_gain_db(value)
  @property
  def ceiling_db(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_ceiling_db()
    return _ret
  @ceiling_db.setter
  def ceiling_db(self,  value:'float'):
    self.set_ceiling_db(value)
  @property
  def release(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_release()
    return _ret
  @release.setter
  def release(self,  value:'float'):
    self.set_release(value)
  @functools.native_method
  def set_ceiling_db(self, ceiling:'float'   ) -> None:
    r''''''

    assert isinstance(ceiling, (int, float)), 'ceiling must be int or float'

    self.py__ceiling_db = ceiling






    self._ptr.call_with_return(78,tuple([ceiling]))

  @functools.native_method
  def get_ceiling_db(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_pre_gain_db(self, p_pre_gain:'float'   ) -> None:
    r''''''

    assert isinstance(p_pre_gain, (int, float)), 'p_pre_gain must be int or float'

    self.py__pre_gain_db = p_pre_gain






    self._ptr.call_with_return(80,tuple([p_pre_gain]))

  @functools.native_method
  def get_pre_gain_db(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_release(self, p_release:'float'   ) -> None:
    r''''''

    assert isinstance(p_release, (int, float)), 'p_release must be int or float'

    self.py__release = p_release






    self._ptr.call_with_return(82,tuple([p_release]))

  @functools.native_method
  def get_release(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret



register_cast_function('AudioEffectHardLimiter', AudioEffectHardLimiter.cast)
register_class('AudioEffectHardLimiter', AudioEffectHardLimiter)
