# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPAtlasTextureWrapper


class AtlasTexture(py4godot_texture2d.Texture2D):
  r'''
		`Texture2D` resource that draws only part of its `atlas` texture, as defined by the `region`. An additional `margin` can also be set, which is useful for small adjustments.
		Multiple `AtlasTexture` resources can be cropped from the same `atlas`. Packing many smaller textures into a singular large texture helps to optimize video memory costs and render calls.
		**Note:** `AtlasTexture` cannot be used in an `AnimatedTexture`, and will not tile properly in nodes such as `TextureRect` or `Sprite2D`. To tile an `AtlasTexture`, modify its `region` instead.
	'''

  @staticmethod
  def constructor():
    class_ = AtlasTexture.construct_without_init()
    class_._ptr = constructor(103,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AtlasTexture.construct_without_init()
    class_._ptr = constructor(103,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAtlasTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(103,0, ())


  def generate_wrapper(self):
    return CPPAtlasTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AtlasTexture.__new__(AtlasTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AtlasTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AtlasTexture.construct_without_init()
    cls._ptr = CPPAtlasTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AtlasTexture.construct_without_init()
    cls._ptr = CPPAtlasTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def atlas(self) -> typing.Any:
    r''''''
    _ret = self. get_atlas()
    return _ret
  @atlas.setter
  def atlas(self,  value:'py4godot_object.Object'):
    self.set_atlas(value)
  @property
  def region(self) -> typing.Union['Rect2']:
    r''''''
    _ret = self. get_region()
    return _ret
  @region.setter
  def region(self,  value:'Rect2'):
    self.set_region(value)
  @property
  def margin(self) -> typing.Union['Rect2']:
    r''''''
    _ret = self. get_margin()
    return _ret
  @margin.setter
  def margin(self,  value:'Rect2'):
    self.set_margin(value)
  @property
  def filter_clip(self) -> typing.Union[bool]:
    r''''''
    _ret = self. has_filter_clip()
    return _ret
  @filter_clip.setter
  def filter_clip(self,  value:'bool'):
    self.set_filter_clip(value)
  @functools.native_method
  def set_atlas(self, atlas:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not atlas is None)
    assert isinstance(atlas, get_class('Texture2D')), 'atlas must be Texture2D'

    self.py__atlas = atlas






    self._ptr.call_with_return(93,tuple([atlas._ptr]))

  @functools.native_method
  def get_atlas(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_region(self, region:'Rect2'   ) -> None:
    r''''''

    assert(not region is None)
    assert isinstance(region, Rect2), 'region must be Rect2'

    self.py__region = region






    self._ptr.call_with_return(95,tuple([region._ptr]))

  @functools.native_method
  def get_region(self) -> typing.Union['Rect2']:
    r''''''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_margin(self, margin:'Rect2'   ) -> None:
    r''''''

    assert(not margin is None)
    assert isinstance(margin, Rect2), 'margin must be Rect2'

    self.py__margin = margin






    self._ptr.call_with_return(97,tuple([margin._ptr]))

  @functools.native_method
  def get_margin(self) -> typing.Union['Rect2']:
    r''''''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(98,tuple([]))

    return _ret


  @functools.native_method
  def set_filter_clip(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__filter_clip = enable






    self._ptr.call_with_return(99,tuple([enable]))

  @functools.native_method
  def has_filter_clip(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(100,tuple([]))

    return _ret



register_cast_function('AtlasTexture', AtlasTexture.cast)
register_class('AtlasTexture', AtlasTexture)
