# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPNavigationPathQueryParameters2DWrapper

class PathfindingAlgorithm:
  PATHFINDING_ALGORITHM_ASTAR = 0
class PathPostProcessing:
  PATH_POSTPROCESSING_CORRIDORFUNNEL = 0
  PATH_POSTPROCESSING_EDGECENTERED = 1
  PATH_POSTPROCESSING_NONE = 2
class PathMetadataFlags:
  PATH_METADATA_INCLUDE_NONE = 0
  PATH_METADATA_INCLUDE_TYPES = 1
  PATH_METADATA_INCLUDE_RIDS = 2
  PATH_METADATA_INCLUDE_OWNERS = 4
  PATH_METADATA_INCLUDE_ALL = 7


class NavigationPathQueryParameters2D(py4godot_refcounted.RefCounted):
  r'''
		By changing various properties of this object, such as the start and target position, you can configure path queries to the `NavigationServer2D`.
	'''

  @staticmethod
  def constructor():
    class_ = NavigationPathQueryParameters2D.construct_without_init()
    class_._ptr = constructor(504,0, ())
    return class_
  @staticmethod
  def new():
    class_ = NavigationPathQueryParameters2D.construct_without_init()
    class_._ptr = constructor(504,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPNavigationPathQueryParameters2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(504,0, ())


  def generate_wrapper(self):
    return CPPNavigationPathQueryParameters2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = NavigationPathQueryParameters2D.__new__(NavigationPathQueryParameters2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'NavigationPathQueryParameters2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = NavigationPathQueryParameters2D.construct_without_init()
    cls._ptr = CPPNavigationPathQueryParameters2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = NavigationPathQueryParameters2D.construct_without_init()
    cls._ptr = CPPNavigationPathQueryParameters2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def map(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_map()
    return _ret
  @map.setter
  def map(self,  value:'RID'):
    self.set_map(value)
  @property
  def start_position(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_start_position()
    return _ret
  @start_position.setter
  def start_position(self,  value:'Vector2'):
    self.set_start_position(value)
  @property
  def target_position(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_target_position()
    return _ret
  @target_position.setter
  def target_position(self,  value:'Vector2'):
    self.set_target_position(value)
  @property
  def navigation_layers(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_navigation_layers()
    return _ret
  @navigation_layers.setter
  def navigation_layers(self,  value:'int'):
    self.set_navigation_layers(value)
  @property
  def pathfinding_algorithm(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_pathfinding_algorithm()
    return _ret
  @pathfinding_algorithm.setter
  def pathfinding_algorithm(self,  value:'int'):
    self.set_pathfinding_algorithm(value)
  @property
  def path_postprocessing(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_path_postprocessing()
    return _ret
  @path_postprocessing.setter
  def path_postprocessing(self,  value:'int'):
    self.set_path_postprocessing(value)
  @property
  def metadata_flags(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_metadata_flags()
    return _ret
  @metadata_flags.setter
  def metadata_flags(self,  value:'int'):
    self.set_metadata_flags(value)
  @property
  def simplify_path(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_simplify_path()
    return _ret
  @simplify_path.setter
  def simplify_path(self,  value:'bool'):
    self.set_simplify_path(value)
  @property
  def simplify_epsilon(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_simplify_epsilon()
    return _ret
  @simplify_epsilon.setter
  def simplify_epsilon(self,  value:'float'):
    self.set_simplify_epsilon(value)
  @property
  def excluded_regions(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''
    _ret = self. get_excluded_regions()
    return _ret
  @excluded_regions.setter
  def excluded_regions(self, value:'Array'):
    self.set_excluded_regions(value)
  @property
  def included_regions(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''
    _ret = self. get_included_regions()
    return _ret
  @included_regions.setter
  def included_regions(self, value:'Array'):
    self.set_included_regions(value)
  @property
  def path_return_max_length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_path_return_max_length()
    return _ret
  @path_return_max_length.setter
  def path_return_max_length(self,  value:'float'):
    self.set_path_return_max_length(value)
  @property
  def path_return_max_radius(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_path_return_max_radius()
    return _ret
  @path_return_max_radius.setter
  def path_return_max_radius(self,  value:'float'):
    self.set_path_return_max_radius(value)
  @property
  def path_search_max_polygons(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_path_search_max_polygons()
    return _ret
  @path_search_max_polygons.setter
  def path_search_max_polygons(self,  value:'int'):
    self.set_path_search_max_polygons(value)
  @property
  def path_search_max_distance(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_path_search_max_distance()
    return _ret
  @path_search_max_distance.setter
  def path_search_max_distance(self,  value:'float'):
    self.set_path_search_max_distance(value)
  @functools.native_method
  def set_pathfinding_algorithm(self, pathfinding_algorithm:'int'  ) -> None:
    r''''''

    assert isinstance(pathfinding_algorithm, (int, float)), 'pathfinding_algorithm must be int or float'

    self.py__pathfinding_algorithm = pathfinding_algorithm






    self._ptr.call_with_return(53,tuple([pathfinding_algorithm]))

  @functools.native_method
  def get_pathfinding_algorithm(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_path_postprocessing(self, path_postprocessing:'int'  ) -> None:
    r''''''

    assert isinstance(path_postprocessing, (int, float)), 'path_postprocessing must be int or float'

    self.py__path_postprocessing = path_postprocessing






    self._ptr.call_with_return(55,tuple([path_postprocessing]))

  @functools.native_method
  def get_path_postprocessing(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_map(self, map:'RID'   ) -> None:
    r''''''

    assert(not map is None)
    assert isinstance(map, RID), 'map must be RID'

    self.py__map = map






    self._ptr.call_with_return(57,tuple([map._ptr]))

  @functools.native_method
  def get_map(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_start_position(self, start_position:'Vector2'   ) -> None:
    r''''''

    assert(not start_position is None)
    assert isinstance(start_position, Vector2), 'start_position must be Vector2'

    self.py__start_position = start_position






    self._ptr.call_with_return(59,tuple([start_position._ptr]))

  @functools.native_method
  def get_start_position(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_target_position(self, target_position:'Vector2'   ) -> None:
    r''''''

    assert(not target_position is None)
    assert isinstance(target_position, Vector2), 'target_position must be Vector2'

    self.py__target_position = target_position






    self._ptr.call_with_return(61,tuple([target_position._ptr]))

  @functools.native_method
  def get_target_position(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def set_navigation_layers(self, navigation_layers:'int'   ) -> None:
    r''''''

    assert isinstance(navigation_layers, (int, float)), 'navigation_layers must be int or float'

    self.py__navigation_layers = navigation_layers






    self._ptr.call_with_return(63,tuple([navigation_layers]))

  @functools.native_method
  def get_navigation_layers(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([]))

    return _ret


  @functools.native_method
  def set_metadata_flags(self, flags:'int'   ) -> None:
    r''''''

    assert isinstance(flags, (int, float)), 'flags must be int or float'

    self.py__metadata_flags = flags






    self._ptr.call_with_return(65,tuple([flags]))

  @functools.native_method
  def get_metadata_flags(self) -> typing.Union[int]:
    r''''''




    _ret
    _ret = self._ptr.call_with_return(66,tuple([]))

    return _ret


  @functools.native_method
  def set_simplify_path(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__simplify_path = enabled






    self._ptr.call_with_return(67,tuple([enabled]))

  @functools.native_method
  def get_simplify_path(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([]))

    return _ret


  @functools.native_method
  def set_simplify_epsilon(self, epsilon:'float'   ) -> None:
    r''''''

    assert isinstance(epsilon, (int, float)), 'epsilon must be int or float'

    self.py__simplify_epsilon = epsilon






    self._ptr.call_with_return(69,tuple([epsilon]))

  @functools.native_method
  def get_simplify_epsilon(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(70,tuple([]))

    return _ret


  @functools.native_method
  def set_included_regions(self, regions:'py4godot_ridtypedarray.RIDTypedArray'   ) -> None:
    r''''''

    assert isinstance(regions, get_class('RIDTypedArray')), 'regions must be RIDTypedArray'

    self.py__included_regions = regions






    self._ptr.call_with_return(71,tuple([regions._ptr]))

  @functools.native_method
  def get_included_regions(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''




    _ret = py4godot_ridtypedarray.RIDTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(72,tuple([]))

    return _ret


  @functools.native_method
  def set_excluded_regions(self, regions:'py4godot_ridtypedarray.RIDTypedArray'   ) -> None:
    r''''''

    assert isinstance(regions, get_class('RIDTypedArray')), 'regions must be RIDTypedArray'

    self.py__excluded_regions = regions






    self._ptr.call_with_return(73,tuple([regions._ptr]))

  @functools.native_method
  def get_excluded_regions(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''




    _ret = py4godot_ridtypedarray.RIDTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(74,tuple([]))

    return _ret


  @functools.native_method
  def set_path_return_max_length(self, length:'float'   ) -> None:
    r''''''

    assert isinstance(length, (int, float)), 'length must be int or float'

    self.py__path_return_max_length = length






    self._ptr.call_with_return(75,tuple([length]))

  @functools.native_method
  def get_path_return_max_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(76,tuple([]))

    return _ret


  @functools.native_method
  def set_path_return_max_radius(self, radius:'float'   ) -> None:
    r''''''

    assert isinstance(radius, (int, float)), 'radius must be int or float'

    self.py__path_return_max_radius = radius






    self._ptr.call_with_return(77,tuple([radius]))

  @functools.native_method
  def get_path_return_max_radius(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_path_search_max_polygons(self, max_polygons:'int'   ) -> None:
    r''''''

    assert isinstance(max_polygons, (int, float)), 'max_polygons must be int or float'

    self.py__path_search_max_polygons = max_polygons






    self._ptr.call_with_return(79,tuple([max_polygons]))

  @functools.native_method
  def get_path_search_max_polygons(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_path_search_max_distance(self, distance:'float'   ) -> None:
    r''''''

    assert isinstance(distance, (int, float)), 'distance must be int or float'

    self.py__path_search_max_distance = distance






    self._ptr.call_with_return(81,tuple([distance]))

  @functools.native_method
  def get_path_search_max_distance(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret



register_cast_function('NavigationPathQueryParameters2D', NavigationPathQueryParameters2D.cast)
register_class('NavigationPathQueryParameters2D', NavigationPathQueryParameters2D)
