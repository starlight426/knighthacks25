# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRAction as py4godot_openxraction 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPOpenXRActionSetWrapper


class OpenXRActionSet(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRActionSet.construct_without_init()
    class_._ptr = constructor(535,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRActionSet.construct_without_init()
    class_._ptr = constructor(535,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRActionSetWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(535,0, ())


  def generate_wrapper(self):
    return CPPOpenXRActionSetWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRActionSet.__new__(OpenXRActionSet)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRActionSet'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRActionSet.construct_without_init()
    cls._ptr = CPPOpenXRActionSetWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRActionSet.construct_without_init()
    cls._ptr = CPPOpenXRActionSetWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def localized_name(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_localized_name()
    return _ret
  @localized_name.setter
  def localized_name(self,  value:'str'):
    self.set_localized_name(value)
  @property
  def priority(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_priority()
    return _ret
  @priority.setter
  def priority(self,  value:'int'):
    self.set_priority(value)
  @property
  def actions(self) -> typing.Union['py4godot_openxraction.OpenXRAction']:
    r''''''
    _ret = self. get_actions()
    return _ret
  @actions.setter
  def actions(self,  value:'py4godot_object.Object'):
    self.set_actions(value)
  @functools.native_method
  def set_localized_name(self, localized_name:'str'   ) -> None:
    r''''''

    assert(not localized_name is None)
    assert isinstance(localized_name, (str, String)), 'localized_name must be str or String'

    self.py__localized_name = localized_name



    assert(isinstance(localized_name, (str, String)))
    py_string_localized_name = localized_name if isinstance(localized_name, StringName) else c_utils.py_string_to_string(localized_name)

    py__string_localized_name = utils.py_string_to_string(localized_name)
    py__string_localized_name.shouldBeDeleted = False


    self._ptr.call_with_return(77,tuple([py__string_localized_name._ptr]))

  @functools.native_method
  def get_localized_name(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_priority(self, priority:'int'   ) -> None:
    r''''''

    assert isinstance(priority, (int, float)), 'priority must be int or float'

    self.py__priority = priority






    self._ptr.call_with_return(79,tuple([priority]))

  @functools.native_method
  def get_priority(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def get_action_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))
    return _ret


  @functools.native_method
  def set_actions(self, actions:'Array'   ) -> None:
    r''''''

    assert(not actions is None)
    assert isinstance(actions, Array), 'actions must be Array'

    self.py__actions = actions






    self._ptr.call_with_return(82,tuple([actions._ptr]))

  @functools.native_method
  def get_actions(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def add_action(self, action:'py4godot_openxraction.OpenXRAction'   ) -> None:
    r''''''

    assert(not action is None)
    assert isinstance(action, get_class('OpenXRAction')), 'action must be OpenXRAction'






    self._ptr.call_with_return(84,tuple([action._ptr]))

  @functools.native_method
  def remove_action(self, action:'py4godot_openxraction.OpenXRAction'   ) -> None:
    r''''''

    assert(not action is None)
    assert isinstance(action, get_class('OpenXRAction')), 'action must be OpenXRAction'






    self._ptr.call_with_return(85,tuple([action._ptr]))


register_cast_function('OpenXRActionSet', OpenXRActionSet.cast)
register_class('OpenXRActionSet', OpenXRActionSet)
