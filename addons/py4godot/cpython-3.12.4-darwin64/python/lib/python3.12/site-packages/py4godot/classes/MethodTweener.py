# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Tween as py4godot_tween 
import py4godot.classes.Tweener as py4godot_tweener 
from py4godot.wrappers.wrappers import CPPMethodTweenerWrapper


class MethodTweener(py4godot_tweener.Tweener):
  r'''
		`MethodTweener` is similar to a combination of `CallbackTweener` and `PropertyTweener`. It calls a method providing an interpolated value as a parameter. See `Tween.tween_method` for more usage information.
		The tweener will finish automatically if the callback's target object is freed.
		**Note:** `Tween.tween_method` is the only correct way to create `MethodTweener`. Any `MethodTweener` created manually will not function correctly.
	'''

  @staticmethod
  def constructor():
    class_ = MethodTweener.construct_without_init()
    class_._ptr = constructor(477,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MethodTweener.construct_without_init()
    class_._ptr = constructor(477,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMethodTweenerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(477,0, ())


  def generate_wrapper(self):
    return CPPMethodTweenerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = MethodTweener.__new__(MethodTweener)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MethodTweener'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MethodTweener.construct_without_init()
    cls._ptr = CPPMethodTweenerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MethodTweener.construct_without_init()
    cls._ptr = CPPMethodTweenerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_delay(self, delay:'float'   ) -> typing.Union['typing.Self']:
    r'''
				Sets the time in seconds after which the `MethodTweener` will start interpolating. By default there's no delay.
			'''

    assert isinstance(delay, (int, float)), 'delay must be int or float'






    _ret = MethodTweener.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([delay]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_trans(self, trans:'int'  ) -> typing.Union['typing.Self']:
    r'''
				Sets the type of used transition from `enum Tween.TransitionType`. If not set, the default transition is used from the `Tween` that contains this Tweener.
			'''

    assert isinstance(trans, (int, float)), 'trans must be int or float'






    _ret = MethodTweener.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([trans]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_ease(self, ease:'int'  ) -> typing.Union['typing.Self']:
    r'''
				Sets the type of used easing from `enum Tween.EaseType`. If not set, the default easing is used from the `Tween` that contains this Tweener.
			'''

    assert isinstance(ease, (int, float)), 'ease must be int or float'






    _ret = MethodTweener.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([ease]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('MethodTweener', MethodTweener.cast)
register_class('MethodTweener', MethodTweener)
