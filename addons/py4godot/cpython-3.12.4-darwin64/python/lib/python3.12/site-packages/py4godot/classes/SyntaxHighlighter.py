# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.TextEdit as py4godot_textedit 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPSyntaxHighlighterWrapper


class SyntaxHighlighter(py4godot_resource.Resource):
  r'''
		Base class for syntax highlighters. Provides syntax highlighting data to a `TextEdit`. The associated `TextEdit` will call into the `SyntaxHighlighter` on an as-needed basis.
		**Note:** A `SyntaxHighlighter` instance should not be used across multiple `TextEdit` nodes.
	'''

  @staticmethod
  def constructor():
    class_ = SyntaxHighlighter.construct_without_init()
    class_._ptr = constructor(802,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SyntaxHighlighter.construct_without_init()
    class_._ptr = constructor(802,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSyntaxHighlighterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(802,0, ())


  def generate_wrapper(self):
    return CPPSyntaxHighlighterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SyntaxHighlighter.__new__(SyntaxHighlighter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SyntaxHighlighter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SyntaxHighlighter.construct_without_init()
    cls._ptr = CPPSyntaxHighlighterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SyntaxHighlighter.construct_without_init()
    cls._ptr = CPPSyntaxHighlighterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_line_syntax_highlighting(self, line:'int'   ) -> typing.Union['Dictionary']:
    r'''
				Virtual method which can be overridden to return syntax highlighting data.
				See `get_line_syntax_highlighting` for more details.
			'''

    assert isinstance(line, (int, float)), 'line must be int or float'






    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([line]))
    return _ret


  @functools.native_method
  def _clear_highlighting_cache(self) -> None:
    r'''
				Virtual method which can be overridden to clear any local caches.
			'''




    self._ptr.call_with_return(78,tuple([]))

  @functools.native_method
  def _update_cache(self) -> None:
    r'''
				Virtual method which can be overridden to update any local caches.
			'''




    self._ptr.call_with_return(79,tuple([]))

  @functools.native_method
  def get_line_syntax_highlighting(self, line:'int'   ) -> typing.Union['Dictionary']:
    r'''
				Returns the syntax highlighting data for the line at index `line`. If the line is not cached, calls `_get_line_syntax_highlighting` first to calculate the data.
				Each entry is a column number containing a nested `Dictionary`. The column number denotes the start of a region, the region will end if another region is found, or at the end of the line. The nested `Dictionary` contains the data for that region. Currently only the key `"color"` is supported.
				**Example:** Possible return value. This means columns `0` to `4` should be red, and columns `5` to the end of the line should be green:
				```gdscript
				{
					0: {
						"color": Color(1, 0, 0)
					},
					5: {
						"color": Color(0, 1, 0)
					}
				}
				```
			'''

    assert isinstance(line, (int, float)), 'line must be int or float'






    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([line]))
    return _ret


  @functools.native_method
  def update_cache(self) -> None:
    r'''
				Clears then updates the `SyntaxHighlighter` caches. Override `_update_cache` for a callback.
				**Note:** This is called automatically when the associated `TextEdit` node, updates its own cache.
			'''




    self._ptr.call_with_return(81,tuple([]))

  @functools.native_method
  def clear_highlighting_cache(self) -> None:
    r'''
				Clears all cached syntax highlighting data.
				Then calls overridable method `_clear_highlighting_cache`.
			'''




    self._ptr.call_with_return(82,tuple([]))

  @functools.native_method
  def get_text_edit(self) -> typing.Union['py4godot_codeedit.CodeEdit','py4godot_textedit.TextEdit']:
    r'''
				Returns the associated `TextEdit` node.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: TextEdit
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('SyntaxHighlighter', SyntaxHighlighter.cast)
register_class('SyntaxHighlighter', SyntaxHighlighter)
