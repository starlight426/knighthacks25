# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.PhysicalSkyMaterial as py4godot_physicalskymaterial 
  import py4godot.classes.PlaceholderMaterial as py4godot_placeholdermaterial 
  import py4godot.classes.CanvasItemMaterial as py4godot_canvasitemmaterial 
  import py4godot.classes.ProceduralSkyMaterial as py4godot_proceduralskymaterial 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.BaseMaterial3D as py4godot_basematerial3d 
  import py4godot.classes.ShaderMaterial as py4godot_shadermaterial 
  import py4godot.classes.FogMaterial as py4godot_fogmaterial 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.StandardMaterial3D as py4godot_standardmaterial3d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.ORMMaterial3D as py4godot_ormmaterial3d 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.ParticleProcessMaterial as py4godot_particleprocessmaterial 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.Node as py4godot_node 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.Material as py4godot_material 
  import py4godot.classes.PanoramaSkyMaterial as py4godot_panoramaskymaterial 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPGPUParticles2DWrapper

class DrawOrder:
  DRAW_ORDER_INDEX = 0
  DRAW_ORDER_LIFETIME = 1
  DRAW_ORDER_REVERSE_LIFETIME = 2
class EmitFlags:
  EMIT_FLAG_POSITION = 1
  EMIT_FLAG_ROTATION_SCALE = 2
  EMIT_FLAG_VELOCITY = 4
  EMIT_FLAG_COLOR = 8
  EMIT_FLAG_CUSTOM = 16


class GPUParticles2D(py4godot_node2d.Node2D):
  r'''
		2D particle node used to create a variety of particle systems and effects. `GPUParticles2D` features an emitter that generates some number of particles at a given rate.
		Use the `process_material` property to add a `ParticleProcessMaterial` to configure particle appearance and behavior. Alternatively, you can add a `ShaderMaterial` which will be applied to all particles.
		2D particles can optionally collide with `LightOccluder2D`, but they don't collide with `PhysicsBody2D` nodes.
	'''

  @staticmethod
  def constructor():
    class_ = GPUParticles2D.construct_without_init()
    class_._ptr = constructor(364,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GPUParticles2D.construct_without_init()
    class_._ptr = constructor(364,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGPUParticles2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(364,0, ())


  def generate_wrapper(self):
    return CPPGPUParticles2DWrapper()
  def init_signals(self):
    super().init_signals()
    finished_name = utils.py_string_to_string_name("finished")
    self.finished = signals.BuiltinSignal(self, finished_name)

  @staticmethod
  def construct_without_init():
    cls = GPUParticles2D.__new__(GPUParticles2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GPUParticles2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GPUParticles2D.construct_without_init()
    cls._ptr = CPPGPUParticles2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GPUParticles2D.construct_without_init()
    cls._ptr = CPPGPUParticles2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def emitting(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_emitting()
    return _ret
  @emitting.setter
  def emitting(self,  value:'bool'):
    self.set_emitting(value)
  @property
  def amount(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_amount()
    return _ret
  @amount.setter
  def amount(self,  value:'int'):
    self.set_amount(value)
  @property
  def amount_ratio(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_amount_ratio()
    return _ret
  @amount_ratio.setter
  def amount_ratio(self,  value:'float'):
    self.set_amount_ratio(value)
  @property
  def sub_emitter(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_sub_emitter()
    return _ret
  @sub_emitter.setter
  def sub_emitter(self,  value:'object'):
    self.set_sub_emitter(value)
  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @property
  def lifetime(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_lifetime()
    return _ret
  @lifetime.setter
  def lifetime(self,  value:'float'):
    self.set_lifetime(value)
  @property
  def interp_to_end(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_interp_to_end()
    return _ret
  @interp_to_end.setter
  def interp_to_end(self,  value:'float'):
    self.set_interp_to_end(value)
  @property
  def one_shot(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_one_shot()
    return _ret
  @one_shot.setter
  def one_shot(self,  value:'bool'):
    self.set_one_shot(value)
  @property
  def preprocess(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_pre_process_time()
    return _ret
  @preprocess.setter
  def preprocess(self,  value:'float'):
    self.set_pre_process_time(value)
  @property
  def speed_scale(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_speed_scale()
    return _ret
  @speed_scale.setter
  def speed_scale(self,  value:'float'):
    self.set_speed_scale(value)
  @property
  def explosiveness(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_explosiveness_ratio()
    return _ret
  @explosiveness.setter
  def explosiveness(self,  value:'float'):
    self.set_explosiveness_ratio(value)
  @property
  def randomness(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_randomness_ratio()
    return _ret
  @randomness.setter
  def randomness(self,  value:'float'):
    self.set_randomness_ratio(value)
  @property
  def use_fixed_seed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_use_fixed_seed()
    return _ret
  @use_fixed_seed.setter
  def use_fixed_seed(self,  value:'bool'):
    self.set_use_fixed_seed(value)
  @property
  def seed(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_seed()
    return _ret
  @seed.setter
  def seed(self,  value:'int'):
    self.set_seed(value)
  @property
  def fixed_fps(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_fixed_fps()
    return _ret
  @fixed_fps.setter
  def fixed_fps(self,  value:'int'):
    self.set_fixed_fps(value)
  @property
  def interpolate(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_interpolate()
    return _ret
  @interpolate.setter
  def interpolate(self,  value:'bool'):
    self.set_interpolate(value)
  @property
  def fract_delta(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_fractional_delta()
    return _ret
  @fract_delta.setter
  def fract_delta(self,  value:'bool'):
    self.set_fractional_delta(value)
  @property
  def collision_base_size(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_collision_base_size()
    return _ret
  @collision_base_size.setter
  def collision_base_size(self,  value:'float'):
    self.set_collision_base_size(value)
  @property
  def visibility_rect(self) -> typing.Union['Rect2']:
    r''''''
    _ret = self. get_visibility_rect()
    return _ret
  @visibility_rect.setter
  def visibility_rect(self,  value:'Rect2'):
    self.set_visibility_rect(value)
  @property
  def local_coords(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_use_local_coordinates()
    return _ret
  @local_coords.setter
  def local_coords(self,  value:'bool'):
    self.set_use_local_coordinates(value)
  @property
  def draw_order(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_draw_order()
    return _ret
  @draw_order.setter
  def draw_order(self,  value:'int'):
    self.set_draw_order(value)
  @property
  def trail_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_trail_enabled()
    return _ret
  @trail_enabled.setter
  def trail_enabled(self,  value:'bool'):
    self.set_trail_enabled(value)
  @property
  def trail_lifetime(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_trail_lifetime()
    return _ret
  @trail_lifetime.setter
  def trail_lifetime(self,  value:'float'):
    self.set_trail_lifetime(value)
  @property
  def trail_sections(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_trail_sections()
    return _ret
  @trail_sections.setter
  def trail_sections(self,  value:'int'):
    self.set_trail_sections(value)
  @property
  def trail_section_subdivisions(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_trail_section_subdivisions()
    return _ret
  @trail_section_subdivisions.setter
  def trail_section_subdivisions(self,  value:'int'):
    self.set_trail_section_subdivisions(value)
  @property
  def process_material(self) -> typing.Union['py4godot_particleprocessmaterial.ParticleProcessMaterial']:
    r''''''
    _ret = self. get_process_material()
    return _ret
  @process_material.setter
  def process_material(self,  value:'py4godot_object.Object'):
    self.set_process_material(value)
  @functools.native_method
  def set_emitting(self, emitting:'bool'   ) -> None:
    r''''''

    assert isinstance(emitting, bool), 'emitting must be bool'

    self.py__emitting = emitting






    self._ptr.call_with_return(303,tuple([emitting]))

  @functools.native_method
  def set_amount(self, amount:'int'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__amount = amount






    self._ptr.call_with_return(304,tuple([amount]))

  @functools.native_method
  def set_lifetime(self, secs:'float'   ) -> None:
    r''''''

    assert isinstance(secs, (int, float)), 'secs must be int or float'

    self.py__lifetime = secs






    self._ptr.call_with_return(305,tuple([secs]))

  @functools.native_method
  def set_one_shot(self, secs:'bool'   ) -> None:
    r''''''

    assert isinstance(secs, bool), 'secs must be bool'

    self.py__one_shot = secs






    self._ptr.call_with_return(306,tuple([secs]))

  @functools.native_method
  def set_pre_process_time(self, secs:'float'   ) -> None:
    r''''''

    assert isinstance(secs, (int, float)), 'secs must be int or float'

    self.py__preprocess = secs






    self._ptr.call_with_return(307,tuple([secs]))

  @functools.native_method
  def set_explosiveness_ratio(self, ratio:'float'   ) -> None:
    r''''''

    assert isinstance(ratio, (int, float)), 'ratio must be int or float'

    self.py__explosiveness = ratio






    self._ptr.call_with_return(308,tuple([ratio]))

  @functools.native_method
  def set_randomness_ratio(self, ratio:'float'   ) -> None:
    r''''''

    assert isinstance(ratio, (int, float)), 'ratio must be int or float'

    self.py__randomness = ratio






    self._ptr.call_with_return(309,tuple([ratio]))

  @functools.native_method
  def set_visibility_rect(self, visibility_rect:'Rect2'   ) -> None:
    r''''''

    assert(not visibility_rect is None)
    assert isinstance(visibility_rect, Rect2), 'visibility_rect must be Rect2'

    self.py__visibility_rect = visibility_rect






    self._ptr.call_with_return(310,tuple([visibility_rect._ptr]))

  @functools.native_method
  def set_use_local_coordinates(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__local_coords = enable






    self._ptr.call_with_return(311,tuple([enable]))

  @functools.native_method
  def set_fixed_fps(self, fps:'int'   ) -> None:
    r''''''

    assert isinstance(fps, (int, float)), 'fps must be int or float'

    self.py__fixed_fps = fps






    self._ptr.call_with_return(312,tuple([fps]))

  @functools.native_method
  def set_fractional_delta(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__fract_delta = enable






    self._ptr.call_with_return(313,tuple([enable]))

  @functools.native_method
  def set_interpolate(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__interpolate = enable






    self._ptr.call_with_return(314,tuple([enable]))

  @functools.native_method
  def set_process_material(self, material:'py4godot_material.Material'   ) -> None:
    r''''''

    assert(not material is None)
    assert isinstance(material, get_class('Material')), 'material must be Material'

    self.py__process_material = material






    self._ptr.call_with_return(315,tuple([material._ptr]))

  @functools.native_method
  def set_speed_scale(self, scale:'float'   ) -> None:
    r''''''

    assert isinstance(scale, (int, float)), 'scale must be int or float'

    self.py__speed_scale = scale






    self._ptr.call_with_return(316,tuple([scale]))

  @functools.native_method
  def set_collision_base_size(self, size:'float'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__collision_base_size = size






    self._ptr.call_with_return(317,tuple([size]))

  @functools.native_method
  def set_interp_to_end(self, interp:'float'   ) -> None:
    r''''''

    assert isinstance(interp, (int, float)), 'interp must be int or float'

    self.py__interp_to_end = interp






    self._ptr.call_with_return(318,tuple([interp]))

  @functools.native_method
  def request_particles_process(self, process_time:'float'   ) -> None:
    r'''
				Requests the particles to process for extra process time during a single frame.
				Useful for particle playback, if used in combination with `use_fixed_seed` or by calling `restart` with parameter `keep_seed` set to `true`.
			'''

    assert isinstance(process_time, (int, float)), 'process_time must be int or float'






    self._ptr.call_with_return(319,tuple([process_time]))

  @functools.native_method
  def is_emitting(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(320,tuple([]))

    return _ret


  @functools.native_method
  def get_amount(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(321,tuple([]))

    return _ret


  @functools.native_method
  def get_lifetime(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(322,tuple([]))

    return _ret


  @functools.native_method
  def get_one_shot(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(323,tuple([]))

    return _ret


  @functools.native_method
  def get_pre_process_time(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(324,tuple([]))

    return _ret


  @functools.native_method
  def get_explosiveness_ratio(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(325,tuple([]))

    return _ret


  @functools.native_method
  def get_randomness_ratio(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(326,tuple([]))

    return _ret


  @functools.native_method
  def get_visibility_rect(self) -> typing.Union['Rect2']:
    r''''''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(327,tuple([]))

    return _ret


  @functools.native_method
  def get_use_local_coordinates(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(328,tuple([]))

    return _ret


  @functools.native_method
  def get_fixed_fps(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(329,tuple([]))

    return _ret


  @functools.native_method
  def get_fractional_delta(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(330,tuple([]))

    return _ret


  @functools.native_method
  def get_interpolate(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(331,tuple([]))

    return _ret


  @functools.native_method
  def get_process_material(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Material
    _ret._ptr = self._ptr.call_with_return(332,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_speed_scale(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(333,tuple([]))

    return _ret


  @functools.native_method
  def get_collision_base_size(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(334,tuple([]))

    return _ret


  @functools.native_method
  def get_interp_to_end(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(335,tuple([]))

    return _ret


  @functools.native_method
  def set_draw_order(self, order:'int'  ) -> None:
    r''''''

    assert isinstance(order, (int, float)), 'order must be int or float'

    self.py__draw_order = order






    self._ptr.call_with_return(336,tuple([order]))

  @functools.native_method
  def get_draw_order(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(337,tuple([]))

    return _ret


  @functools.native_method
  def set_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture = texture






    self._ptr.call_with_return(338,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(339,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def capture_rect(self) -> typing.Union['Rect2']:
    r'''
				Returns a rectangle containing the positions of all existing particles.
				**Note:** When using threaded rendering this method synchronizes the rendering thread. Calling it often may have a negative impact on performance.
			'''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(340,tuple([]))
    return _ret


  @functools.native_method
  def restart(self, keep_seed:'bool' =False  ) -> None:
    r'''
				Restarts the particle emission cycle, clearing existing particles. To avoid particles vanishing from the viewport, wait for the `signal finished` signal before calling.
				**Note:** The `signal finished` signal is only emitted by `one_shot` emitters.
				If `keep_seed` is `true`, the current random seed will be preserved. Useful for seeking and playback.
			'''

    assert isinstance(keep_seed, bool), 'keep_seed must be bool'






    self._ptr.call_with_return(341,tuple([keep_seed]))

  @functools.native_method
  def set_sub_emitter(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__sub_emitter = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(342,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_sub_emitter(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(343,tuple([]))

    return _ret


  @functools.native_method
  def emit_particle(self, xform:'Transform2D'   , velocity:'Vector2'   , color:'Color'   , custom:'Color'   , flags:'int'   ) -> None:
    r'''
				Emits a single particle. Whether `xform`, `velocity`, `color` and `custom` are applied depends on the value of `flags`. See `enum EmitFlags`.
				The default ParticleProcessMaterial will overwrite `color` and use the contents of `custom` as `(rotation, age, animation, lifetime)`.
				**Note:** `emit_particle` is only supported on the Forward+ and Mobile rendering methods, not Compatibility.
			'''

    assert(not xform is None)
    assert isinstance(xform, Transform2D), 'xform must be Transform2D'
    assert(not velocity is None)
    assert isinstance(velocity, Vector2), 'velocity must be Vector2'
    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'
    assert(not custom is None)
    assert isinstance(custom, Color), 'custom must be Color'
    assert isinstance(flags, (int, float)), 'flags must be int or float'










    self._ptr.call_with_return(344,tuple([xform._ptr, velocity._ptr, color._ptr, custom._ptr, flags]))

  @functools.native_method
  def set_trail_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__trail_enabled = enabled






    self._ptr.call_with_return(345,tuple([enabled]))

  @functools.native_method
  def set_trail_lifetime(self, secs:'float'   ) -> None:
    r''''''

    assert isinstance(secs, (int, float)), 'secs must be int or float'

    self.py__trail_lifetime = secs






    self._ptr.call_with_return(346,tuple([secs]))

  @functools.native_method
  def is_trail_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(347,tuple([]))

    return _ret


  @functools.native_method
  def get_trail_lifetime(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(348,tuple([]))

    return _ret


  @functools.native_method
  def set_trail_sections(self, sections:'int'   ) -> None:
    r''''''

    assert isinstance(sections, (int, float)), 'sections must be int or float'

    self.py__trail_sections = sections






    self._ptr.call_with_return(349,tuple([sections]))

  @functools.native_method
  def get_trail_sections(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(350,tuple([]))

    return _ret


  @functools.native_method
  def set_trail_section_subdivisions(self, subdivisions:'int'   ) -> None:
    r''''''

    assert isinstance(subdivisions, (int, float)), 'subdivisions must be int or float'

    self.py__trail_section_subdivisions = subdivisions






    self._ptr.call_with_return(351,tuple([subdivisions]))

  @functools.native_method
  def get_trail_section_subdivisions(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(352,tuple([]))

    return _ret


  @functools.native_method
  def convert_from_particles(self, particles:'py4godot_node.Node'   ) -> None:
    r'''
				Sets this node's properties to match a given `CPUParticles2D` node.
			'''

    assert(not particles is None)
    assert isinstance(particles, get_class('Node')), 'particles must be Node'






    self._ptr.call_with_return(353,tuple([particles._ptr]))

  @functools.native_method
  def set_amount_ratio(self, ratio:'float'   ) -> None:
    r''''''

    assert isinstance(ratio, (int, float)), 'ratio must be int or float'

    self.py__amount_ratio = ratio






    self._ptr.call_with_return(354,tuple([ratio]))

  @functools.native_method
  def get_amount_ratio(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(355,tuple([]))

    return _ret


  @functools.native_method
  def set_use_fixed_seed(self, use_fixed_seed:'bool'   ) -> None:
    r''''''

    assert isinstance(use_fixed_seed, bool), 'use_fixed_seed must be bool'

    self.py__use_fixed_seed = use_fixed_seed






    self._ptr.call_with_return(356,tuple([use_fixed_seed]))

  @functools.native_method
  def get_use_fixed_seed(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(357,tuple([]))

    return _ret


  @functools.native_method
  def set_seed(self, seed:'int'   ) -> None:
    r''''''

    assert isinstance(seed, (int, float)), 'seed must be int or float'

    self.py__seed = seed






    self._ptr.call_with_return(358,tuple([seed]))

  @functools.native_method
  def get_seed(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(359,tuple([]))

    return _ret



register_cast_function('GPUParticles2D', GPUParticles2D.cast)
register_class('GPUParticles2D', GPUParticles2D)
