# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.SkeletonModificationStack2D as py4godot_skeletonmodificationstack2d 
import py4godot.classes.SkeletonModification2D as py4godot_skeletonmodification2d 
from py4godot.wrappers.wrappers import CPPSkeletonModification2DStackHolderWrapper


class SkeletonModification2DStackHolder(py4godot_skeletonmodification2d.SkeletonModification2D):
  r'''
		This `SkeletonModification2D` holds a reference to a `SkeletonModificationStack2D`, allowing you to use multiple modification stacks on a single `Skeleton2D`.
		**Note:** The modifications in the held `SkeletonModificationStack2D` will only be executed if their execution mode matches the execution mode of the SkeletonModification2DStackHolder.
	'''

  @staticmethod
  def constructor():
    class_ = SkeletonModification2DStackHolder.construct_without_init()
    class_._ptr = constructor(755,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SkeletonModification2DStackHolder.construct_without_init()
    class_._ptr = constructor(755,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkeletonModification2DStackHolderWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(755,0, ())


  def generate_wrapper(self):
    return CPPSkeletonModification2DStackHolderWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SkeletonModification2DStackHolder.__new__(SkeletonModification2DStackHolder)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SkeletonModification2DStackHolder'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonModification2DStackHolder.construct_without_init()
    cls._ptr = CPPSkeletonModification2DStackHolderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonModification2DStackHolder.construct_without_init()
    cls._ptr = CPPSkeletonModification2DStackHolderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_held_modification_stack(self, held_modification_stack:'py4godot_skeletonmodificationstack2d.SkeletonModificationStack2D'   ) -> None:
    r'''
				Sets the `SkeletonModificationStack2D` that this modification is holding. This modification stack will then be executed when this modification is executed.
			'''

    assert(not held_modification_stack is None)
    assert isinstance(held_modification_stack, get_class('SkeletonModificationStack2D')), 'held_modification_stack must be SkeletonModificationStack2D'






    self._ptr.call_with_return(90,tuple([held_modification_stack._ptr]))

  @functools.native_method
  def get_held_modification_stack(self) -> typing.Union['py4godot_skeletonmodificationstack2d.SkeletonModificationStack2D']:
    r'''
				Returns the `SkeletonModificationStack2D` that this modification is holding.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: SkeletonModificationStack2D
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('SkeletonModification2DStackHolder', SkeletonModification2DStackHolder.cast)
register_class('SkeletonModification2DStackHolder', SkeletonModification2DStackHolder)
