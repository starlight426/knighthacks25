# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.StreamPeerTCP as py4godot_streampeertcp 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPTCPServerWrapper


class TCPServer(py4godot_refcounted.RefCounted):
  r'''
		A TCP server. Listens to connections on a port and returns a `StreamPeerTCP` when it gets an incoming connection.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	'''

  @staticmethod
  def constructor():
    class_ = TCPServer.construct_without_init()
    class_._ptr = constructor(804,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TCPServer.construct_without_init()
    class_._ptr = constructor(804,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTCPServerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(804,0, ())


  def generate_wrapper(self):
    return CPPTCPServerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = TCPServer.__new__(TCPServer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TCPServer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TCPServer.construct_without_init()
    cls._ptr = CPPTCPServerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TCPServer.construct_without_init()
    cls._ptr = CPPTCPServerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def listen(self, port:'int'   , bind_address:'str' ="*"  ) -> typing.Union[int]:
    r'''
				Listen on the `port` binding to `bind_address`.
				If `bind_address` is set as `"*"` (default), the server will listen on all available addresses (both IPv4 and IPv6).
				If `bind_address` is set as `"0.0.0.0"` (for IPv4) or `"::"` (for IPv6), the server will listen on all available addresses matching that IP type.
				If `bind_address` is set to any valid address (e.g. `"192.168.1.101"`, `"::1"`, etc.), the server will only listen on the interface with that address (or fail if no interface with the given address exists).
			'''
    if bind_address is None:
      bind_address = String.new0()
    if bind_address is None:
      bind_address = String.new0()

    assert isinstance(port, (int, float)), 'port must be int or float'





    assert(isinstance(bind_address, (str, String)))
    py_string_bind_address = bind_address if isinstance(bind_address, StringName) else c_utils.py_string_to_string(bind_address)

    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([port, py_string_bind_address._ptr]))
    return _ret


  @functools.native_method
  def is_connection_available(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def is_listening(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def get_local_port(self) -> typing.Union[int]:
    r'''
				Returns the local port this server is listening to.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))
    return _ret


  @functools.native_method
  def take_connection(self) -> typing.Union['py4godot_streampeertcp.StreamPeerTCP']:
    r'''
				If a connection is available, returns a StreamPeerTCP with the connection.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: StreamPeerTCP
    _ret._ptr = self._ptr.call_with_return(57,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def stop(self) -> None:
    r''''''




    self._ptr.call_with_return(58,tuple([]))


register_cast_function('TCPServer', TCPServer.cast)
register_class('TCPServer', TCPServer)
