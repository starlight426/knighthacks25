# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeFloatFuncWrapper

class Function:
  FUNC_SIN = 0
  FUNC_COS = 1
  FUNC_TAN = 2
  FUNC_ASIN = 3
  FUNC_ACOS = 4
  FUNC_ATAN = 5
  FUNC_SINH = 6
  FUNC_COSH = 7
  FUNC_TANH = 8
  FUNC_LOG = 9
  FUNC_EXP = 10
  FUNC_SQRT = 11
  FUNC_ABS = 12
  FUNC_SIGN = 13
  FUNC_FLOOR = 14
  FUNC_ROUND = 15
  FUNC_CEIL = 16
  FUNC_FRACT = 17
  FUNC_SATURATE = 18
  FUNC_NEGATE = 19
  FUNC_ACOSH = 20
  FUNC_ASINH = 21
  FUNC_ATANH = 22
  FUNC_DEGREES = 23
  FUNC_EXP2 = 24
  FUNC_INVERSE_SQRT = 25
  FUNC_LOG2 = 26
  FUNC_RADIANS = 27
  FUNC_RECIPROCAL = 28
  FUNC_ROUNDEVEN = 29
  FUNC_TRUNC = 30
  FUNC_ONEMINUS = 31
  FUNC_MAX = 32


class VisualShaderNodeFloatFunc(py4godot_visualshadernode.VisualShaderNode):
  r'''
		Accept a floating-point scalar (`x`) to the input port and transform it according to `function`.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeFloatFunc.construct_without_init()
    class_._ptr = constructor(904,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeFloatFunc.construct_without_init()
    class_._ptr = constructor(904,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeFloatFuncWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(904,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeFloatFuncWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeFloatFunc.__new__(VisualShaderNodeFloatFunc)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeFloatFunc'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeFloatFunc.construct_without_init()
    cls._ptr = CPPVisualShaderNodeFloatFuncWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeFloatFunc.construct_without_init()
    cls._ptr = CPPVisualShaderNodeFloatFuncWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def function(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_function()
    return _ret
  @function.setter
  def function(self,  value:'int'):
    self.set_function(value)
  @functools.native_method
  def set_function(self, func:'int'  ) -> None:
    r''''''

    assert isinstance(func, (int, float)), 'func must be int or float'

    self.py__function = func






    self._ptr.call_with_return(88,tuple([func]))

  @functools.native_method
  def get_function(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeFloatFunc', VisualShaderNodeFloatFunc.cast)
register_class('VisualShaderNodeFloatFunc', VisualShaderNodeFloatFunc)
