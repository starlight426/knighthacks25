# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Container as py4godot_container 
from py4godot.wrappers.wrappers import CPPGridContainerWrapper


class GridContainer(py4godot_container.Container):
  r'''
		`GridContainer` arranges its child controls in a grid layout. The number of columns is specified by the `columns` property, whereas the number of rows depends on how many are needed for the child controls. The number of rows and columns is preserved for every size of the container.
		**Note:** `GridContainer` only works with child nodes inheriting from `Control`. It won't rearrange child nodes inheriting from `Node2D`.
	'''

  @staticmethod
  def constructor():
    class_ = GridContainer.construct_without_init()
    class_._ptr = constructor(386,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GridContainer.construct_without_init()
    class_._ptr = constructor(386,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGridContainerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(386,0, ())


  def generate_wrapper(self):
    return CPPGridContainerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GridContainer.__new__(GridContainer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GridContainer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GridContainer.construct_without_init()
    cls._ptr = CPPGridContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GridContainer.construct_without_init()
    cls._ptr = CPPGridContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def columns(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_columns()
    return _ret
  @columns.setter
  def columns(self,  value:'int'):
    self.set_columns(value)
  @functools.native_method
  def set_columns(self, columns:'int'   ) -> None:
    r''''''

    assert isinstance(columns, (int, float)), 'columns must be int or float'

    self.py__columns = columns






    self._ptr.call_with_return(437,tuple([columns]))

  @functools.native_method
  def get_columns(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(438,tuple([]))

    return _ret



register_cast_function('GridContainer', GridContainer.cast)
register_class('GridContainer', GridContainer)
