# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPBone2DWrapper


class Bone2D(py4godot_node2d.Node2D):
  r'''
		A hierarchy of `Bone2D`s can be bound to a `Skeleton2D` to control and animate other `Node2D` nodes.
		You can use `Bone2D` and `Skeleton2D` nodes to animate 2D meshes created with the `Polygon2D` UV editor.
		Each bone has a `rest` transform that you can reset to with `apply_rest`. These rest poses are relative to the bone's parent.
		If in the editor, you can set the rest pose of an entire skeleton using a menu option, from the code, you need to iterate over the bones to set their individual rest poses.
	'''

  @staticmethod
  def constructor():
    class_ = Bone2D.construct_without_init()
    class_._ptr = constructor(166,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Bone2D.construct_without_init()
    class_._ptr = constructor(166,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPBone2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(166,0, ())


  def generate_wrapper(self):
    return CPPBone2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Bone2D.__new__(Bone2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Bone2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Bone2D.construct_without_init()
    cls._ptr = CPPBone2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Bone2D.construct_without_init()
    cls._ptr = CPPBone2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def rest(self) -> typing.Union['Transform2D']:
    r''''''
    _ret = self. get_rest()
    return _ret
  @rest.setter
  def rest(self,  value:'Transform2D'):
    self.set_rest(value)
  @functools.native_method
  def set_rest(self, rest:'Transform2D'   ) -> None:
    r''''''

    assert(not rest is None)
    assert isinstance(rest, Transform2D), 'rest must be Transform2D'

    self.py__rest = rest






    self._ptr.call_with_return(303,tuple([rest._ptr]))

  @functools.native_method
  def get_rest(self) -> typing.Union['Transform2D']:
    r''''''




    _ret = Transform2D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def apply_rest(self) -> None:
    r'''
				Resets the bone to the rest pose. This is equivalent to setting `Node2D.transform` to `rest`.
			'''




    self._ptr.call_with_return(305,tuple([]))

  @functools.native_method
  def get_skeleton_rest(self) -> typing.Union['Transform2D']:
    r'''
				Returns the node's `rest` `Transform2D` if it doesn't have a parent, or its rest pose relative to its parent.
			'''




    _ret = Transform2D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(306,tuple([]))
    return _ret


  @functools.native_method
  def get_index_in_skeleton(self) -> typing.Union[int]:
    r'''
				Returns the node's index as part of the entire skeleton. See `Skeleton2D`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(307,tuple([]))
    return _ret


  @functools.native_method
  def set_autocalculate_length_and_angle(self, auto_calculate:'bool'   ) -> None:
    r'''
				When set to `true`, the `Bone2D` node will attempt to automatically calculate the bone angle and length using the first child `Bone2D` node, if one exists. If none exist, the `Bone2D` cannot automatically calculate these values and will print a warning.
			'''

    assert isinstance(auto_calculate, bool), 'auto_calculate must be bool'






    self._ptr.call_with_return(308,tuple([auto_calculate]))

  @functools.native_method
  def get_autocalculate_length_and_angle(self) -> typing.Union[bool]:
    r'''
				Returns whether this `Bone2D` is going to autocalculate its length and bone angle using its first `Bone2D` child node, if one exists. If there are no `Bone2D` children, then it cannot autocalculate these values and will print a warning.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(309,tuple([]))
    return _ret


  @functools.native_method
  def set_length(self, length:'float'   ) -> None:
    r'''
				Sets the length of the bone in the `Bone2D`.
			'''

    assert isinstance(length, (int, float)), 'length must be int or float'






    self._ptr.call_with_return(310,tuple([length]))

  @functools.native_method
  def get_length(self) -> typing.Union[float]:
    r'''
				Returns the length of the bone in the `Bone2D` node.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(311,tuple([]))
    return _ret


  @functools.native_method
  def set_bone_angle(self, angle:'float'   ) -> None:
    r'''
				Sets the bone angle for the `Bone2D`. This is typically set to the rotation from the `Bone2D` to a child `Bone2D` node.
				**Note:** This is different from the `Bone2D`'s rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the `Bone2D`'s `Node2D.transform`.
			'''

    assert isinstance(angle, (int, float)), 'angle must be int or float'






    self._ptr.call_with_return(312,tuple([angle]))

  @functools.native_method
  def get_bone_angle(self) -> typing.Union[float]:
    r'''
				Returns the angle of the bone in the `Bone2D`.
				**Note:** This is different from the `Bone2D`'s rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the `Bone2D`'s `Node2D.transform`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(313,tuple([]))
    return _ret



register_cast_function('Bone2D', Bone2D.cast)
register_class('Bone2D', Bone2D)
