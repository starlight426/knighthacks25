# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.SystemFont as py4godot_systemfont 
  import py4godot.classes.TextServerDummy as py4godot_textserverdummy 
  import py4godot.classes.FontFile as py4godot_fontfile 
  import py4godot.classes.TextServerExtension as py4godot_textserverextension 
  import py4godot.classes.Font as py4godot_font 
  import py4godot.classes.TextServer as py4godot_textserver 
  import py4godot.classes.TextServerAdvanced as py4godot_textserveradvanced 
  import py4godot.classes.FontVariation as py4godot_fontvariation 
import py4godot.classes.PrimitiveMesh as py4godot_primitivemesh 
from py4godot.wrappers.wrappers import CPPTextMeshWrapper


class TextMesh(py4godot_primitivemesh.PrimitiveMesh):
  r'''
		Generate a `PrimitiveMesh` from the text.
		TextMesh can be generated only when using dynamic fonts with vector glyph contours. Bitmap fonts (including bitmap data in the TrueType/OpenType containers, like color emoji fonts) are not supported.
		The UV layout is arranged in 4 horizontal strips, top to bottom: 40% of the height for the front face, 40% for the back face, 10% for the outer edges and 10% for the inner edges.
	'''

  @staticmethod
  def constructor():
    class_ = TextMesh.construct_without_init()
    class_._ptr = constructor(810,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TextMesh.construct_without_init()
    class_._ptr = constructor(810,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTextMeshWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(810,0, ())


  def generate_wrapper(self):
    return CPPTextMeshWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = TextMesh.__new__(TextMesh)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TextMesh'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextMesh.construct_without_init()
    cls._ptr = CPPTextMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextMesh.construct_without_init()
    cls._ptr = CPPTextMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def text(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_text()
    return _ret
  @text.setter
  def text(self,  value:'str'):
    self.set_text(value)
  @property
  def font(self) -> typing.Union['py4godot_font.Font','py4godot_systemfont.SystemFont','py4godot_fontfile.FontFile','py4godot_fontvariation.FontVariation']:
    r''''''
    _ret = self. get_font()
    return _ret
  @font.setter
  def font(self,  value:'py4godot_object.Object'):
    self.set_font(value)
  @property
  def font_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_font_size()
    return _ret
  @font_size.setter
  def font_size(self,  value:'int'):
    self.set_font_size(value)
  @property
  def horizontal_alignment(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_horizontal_alignment()
    return _ret
  @horizontal_alignment.setter
  def horizontal_alignment(self,  value:'int'):
    self.set_horizontal_alignment(value)
  @property
  def vertical_alignment(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_vertical_alignment()
    return _ret
  @vertical_alignment.setter
  def vertical_alignment(self,  value:'int'):
    self.set_vertical_alignment(value)
  @property
  def uppercase(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_uppercase()
    return _ret
  @uppercase.setter
  def uppercase(self,  value:'bool'):
    self.set_uppercase(value)
  @property
  def line_spacing(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_line_spacing()
    return _ret
  @line_spacing.setter
  def line_spacing(self,  value:'float'):
    self.set_line_spacing(value)
  @property
  def autowrap_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_autowrap_mode()
    return _ret
  @autowrap_mode.setter
  def autowrap_mode(self,  value:'int'):
    self.set_autowrap_mode(value)
  @property
  def justification_flags(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_justification_flags()
    return _ret
  @justification_flags.setter
  def justification_flags(self,  value:'int'):
    self.set_justification_flags(value)
  @property
  def pixel_size(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_pixel_size()
    return _ret
  @pixel_size.setter
  def pixel_size(self,  value:'float'):
    self.set_pixel_size(value)
  @property
  def curve_step(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_curve_step()
    return _ret
  @curve_step.setter
  def curve_step(self,  value:'float'):
    self.set_curve_step(value)
  @property
  def depth(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth()
    return _ret
  @depth.setter
  def depth(self,  value:'float'):
    self.set_depth(value)
  @property
  def width(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_width()
    return _ret
  @width.setter
  def width(self,  value:'float'):
    self.set_width(value)
  @property
  def offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_offset()
    return _ret
  @offset.setter
  def offset(self,  value:'Vector2'):
    self.set_offset(value)
  @property
  def text_direction(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_text_direction()
    return _ret
  @text_direction.setter
  def text_direction(self,  value:'int'):
    self.set_text_direction(value)
  @property
  def language(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_language()
    return _ret
  @language.setter
  def language(self,  value:'str'):
    self.set_language(value)
  @property
  def structured_text_bidi_override(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_structured_text_bidi_override()
    return _ret
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:'int'):
    self.set_structured_text_bidi_override(value)
  @property
  def structured_text_bidi_override_options(self) -> typing.Union['Array']:
    r''''''
    _ret = self. get_structured_text_bidi_override_options()
    return _ret
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:'Array'):
    self.set_structured_text_bidi_override_options(value)
  @functools.native_method
  def set_horizontal_alignment(self, alignment:'int'  ) -> None:
    r''''''

    assert isinstance(alignment, (int, float)), 'alignment must be int or float'

    self.py__horizontal_alignment = alignment






    self._ptr.call_with_return(118,tuple([alignment]))

  @functools.native_method
  def get_horizontal_alignment(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(119,tuple([]))

    return _ret


  @functools.native_method
  def set_vertical_alignment(self, alignment:'int'  ) -> None:
    r''''''

    assert isinstance(alignment, (int, float)), 'alignment must be int or float'

    self.py__vertical_alignment = alignment






    self._ptr.call_with_return(120,tuple([alignment]))

  @functools.native_method
  def get_vertical_alignment(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(121,tuple([]))

    return _ret


  @functools.native_method
  def set_text(self, text:'str'   ) -> None:
    r''''''

    assert(not text is None)
    assert isinstance(text, (str, String)), 'text must be str or String'

    self.py__text = text



    assert(isinstance(text, (str, String)))
    py_string_text = text if isinstance(text, StringName) else c_utils.py_string_to_string(text)

    py__string_text = utils.py_string_to_string(text)
    py__string_text.shouldBeDeleted = False


    self._ptr.call_with_return(122,tuple([py__string_text._ptr]))

  @functools.native_method
  def get_text(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(123,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_font(self, font:'py4godot_font.Font'   ) -> None:
    r''''''

    assert(not font is None)
    assert isinstance(font, get_class('Font')), 'font must be Font'

    self.py__font = font






    self._ptr.call_with_return(124,tuple([font._ptr]))

  @functools.native_method
  def get_font(self) -> typing.Union['py4godot_font.Font','py4godot_systemfont.SystemFont','py4godot_fontfile.FontFile','py4godot_fontvariation.FontVariation']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Font
    _ret._ptr = self._ptr.call_with_return(125,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_font_size(self, font_size:'int'   ) -> None:
    r''''''

    assert isinstance(font_size, (int, float)), 'font_size must be int or float'

    self.py__font_size = font_size






    self._ptr.call_with_return(126,tuple([font_size]))

  @functools.native_method
  def get_font_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(127,tuple([]))

    return _ret


  @functools.native_method
  def set_line_spacing(self, line_spacing:'float'   ) -> None:
    r''''''

    assert isinstance(line_spacing, (int, float)), 'line_spacing must be int or float'

    self.py__line_spacing = line_spacing






    self._ptr.call_with_return(128,tuple([line_spacing]))

  @functools.native_method
  def get_line_spacing(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(129,tuple([]))

    return _ret


  @functools.native_method
  def set_autowrap_mode(self, autowrap_mode:'int'  ) -> None:
    r''''''

    assert isinstance(autowrap_mode, (int, float)), 'autowrap_mode must be int or float'

    self.py__autowrap_mode = autowrap_mode






    self._ptr.call_with_return(130,tuple([autowrap_mode]))

  @functools.native_method
  def get_autowrap_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(131,tuple([]))

    return _ret


  @functools.native_method
  def set_justification_flags(self, justification_flags:'int'   ) -> None:
    r''''''

    assert isinstance(justification_flags, (int, float)), 'justification_flags must be int or float'

    self.py__justification_flags = justification_flags






    self._ptr.call_with_return(132,tuple([justification_flags]))

  @functools.native_method
  def get_justification_flags(self) -> typing.Union[int]:
    r''''''




    _ret
    _ret = self._ptr.call_with_return(133,tuple([]))

    return _ret


  @functools.native_method
  def set_depth(self, depth:'float'   ) -> None:
    r''''''

    assert isinstance(depth, (int, float)), 'depth must be int or float'

    self.py__depth = depth






    self._ptr.call_with_return(134,tuple([depth]))

  @functools.native_method
  def get_depth(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(135,tuple([]))

    return _ret


  @functools.native_method
  def set_width(self, width:'float'   ) -> None:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'

    self.py__width = width






    self._ptr.call_with_return(136,tuple([width]))

  @functools.native_method
  def get_width(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(137,tuple([]))

    return _ret


  @functools.native_method
  def set_pixel_size(self, pixel_size:'float'   ) -> None:
    r''''''

    assert isinstance(pixel_size, (int, float)), 'pixel_size must be int or float'

    self.py__pixel_size = pixel_size






    self._ptr.call_with_return(138,tuple([pixel_size]))

  @functools.native_method
  def get_pixel_size(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(139,tuple([]))

    return _ret


  @functools.native_method
  def set_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__offset = offset






    self._ptr.call_with_return(140,tuple([offset._ptr]))

  @functools.native_method
  def get_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(141,tuple([]))

    return _ret


  @functools.native_method
  def set_curve_step(self, curve_step:'float'   ) -> None:
    r''''''

    assert isinstance(curve_step, (int, float)), 'curve_step must be int or float'

    self.py__curve_step = curve_step






    self._ptr.call_with_return(142,tuple([curve_step]))

  @functools.native_method
  def get_curve_step(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(143,tuple([]))

    return _ret


  @functools.native_method
  def set_text_direction(self, direction:'int'  ) -> None:
    r''''''

    assert isinstance(direction, (int, float)), 'direction must be int or float'

    self.py__text_direction = direction






    self._ptr.call_with_return(144,tuple([direction]))

  @functools.native_method
  def get_text_direction(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(145,tuple([]))

    return _ret


  @functools.native_method
  def set_language(self, language:'str'   ) -> None:
    r''''''

    assert(not language is None)
    assert isinstance(language, (str, String)), 'language must be str or String'

    self.py__language = language



    assert(isinstance(language, (str, String)))
    py_string_language = language if isinstance(language, StringName) else c_utils.py_string_to_string(language)

    py__string_language = utils.py_string_to_string(language)
    py__string_language.shouldBeDeleted = False


    self._ptr.call_with_return(146,tuple([py__string_language._ptr]))

  @functools.native_method
  def get_language(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(147,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_structured_text_bidi_override(self, parser:'int'  ) -> None:
    r''''''

    assert isinstance(parser, (int, float)), 'parser must be int or float'

    self.py__structured_text_bidi_override = parser






    self._ptr.call_with_return(148,tuple([parser]))

  @functools.native_method
  def get_structured_text_bidi_override(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(149,tuple([]))

    return _ret


  @functools.native_method
  def set_structured_text_bidi_override_options(self, args:'Array'   ) -> None:
    r''''''

    assert(not args is None)
    assert isinstance(args, Array), 'args must be Array'

    self.py__structured_text_bidi_override_options = args






    self._ptr.call_with_return(150,tuple([args._ptr]))

  @functools.native_method
  def get_structured_text_bidi_override_options(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(151,tuple([]))

    return _ret


  @functools.native_method
  def set_uppercase(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__uppercase = enable






    self._ptr.call_with_return(152,tuple([enable]))

  @functools.native_method
  def is_uppercase(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(153,tuple([]))

    return _ret



register_cast_function('TextMesh', TextMesh.cast)
register_class('TextMesh', TextMesh)
