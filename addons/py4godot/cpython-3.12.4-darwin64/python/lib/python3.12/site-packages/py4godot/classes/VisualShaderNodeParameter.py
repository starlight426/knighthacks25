# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.VisualShaderNodeTexture2DArrayParameter as py4godot_visualshadernodetexture2darrayparameter 
  import py4godot.classes.VisualShaderNodeIntParameter as py4godot_visualshadernodeintparameter 
  import py4godot.classes.VisualShaderNodeVec3Parameter as py4godot_visualshadernodevec3parameter 
  import py4godot.classes.VisualShaderNodeUIntParameter as py4godot_visualshadernodeuintparameter 
  import py4godot.classes.VisualShaderNodeCubemapParameter as py4godot_visualshadernodecubemapparameter 
  import py4godot.classes.VisualShaderNodeColorParameter as py4godot_visualshadernodecolorparameter 
  import py4godot.classes.VisualShaderNodeTransformParameter as py4godot_visualshadernodetransformparameter 
  import py4godot.classes.VisualShaderNodeTexture3DParameter as py4godot_visualshadernodetexture3dparameter 
  import py4godot.classes.VisualShaderNodeVec2Parameter as py4godot_visualshadernodevec2parameter 
  import py4godot.classes.VisualShaderNodeBooleanParameter as py4godot_visualshadernodebooleanparameter 
  import py4godot.classes.VisualShaderNodeTextureParameter as py4godot_visualshadernodetextureparameter 
  import py4godot.classes.VisualShaderNodeFloatParameter as py4godot_visualshadernodefloatparameter 
  import py4godot.classes.VisualShaderNodeTextureParameterTriplanar as py4godot_visualshadernodetextureparametertriplanar 
  import py4godot.classes.VisualShaderNodeTexture2DParameter as py4godot_visualshadernodetexture2dparameter 
  import py4godot.classes.VisualShaderNodeVec4Parameter as py4godot_visualshadernodevec4parameter 
import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeParameterWrapper

class Qualifier:
  QUAL_NONE = 0
  QUAL_GLOBAL = 1
  QUAL_INSTANCE = 2
  QUAL_MAX = 3


class VisualShaderNodeParameter(py4godot_visualshadernode.VisualShaderNode):
  r'''
		A parameter represents a variable in the shader which is set externally, i.e. from the `ShaderMaterial`. Parameters are exposed as properties in the `ShaderMaterial` and can be assigned from the Inspector or from a script.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeParameter.construct_without_init()
    class_._ptr = constructor(923,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeParameter.construct_without_init()
    class_._ptr = constructor(923,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeParameterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(923,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeParameterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeParameter.__new__(VisualShaderNodeParameter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeParameter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeParameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeParameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def parameter_name(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_parameter_name()
    return _ret
  @parameter_name.setter
  def parameter_name(self,  value:'object'):
    self.set_parameter_name(value)
  @property
  def qualifier(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_qualifier()
    return _ret
  @qualifier.setter
  def qualifier(self,  value:'int'):
    self.set_qualifier(value)
  @functools.native_method
  def set_parameter_name(self, name:'str'   ) -> None:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'

    self.py__parameter_name = name



    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    py__string_name = utils.py_string_to_string(name)
    py__string_name.shouldBeDeleted = False


    self._ptr.call_with_return(88,tuple([py__string_name._ptr]))

  @functools.native_method
  def get_parameter_name(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(89,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_qualifier(self, qualifier:'int'  ) -> None:
    r''''''

    assert isinstance(qualifier, (int, float)), 'qualifier must be int or float'

    self.py__qualifier = qualifier






    self._ptr.call_with_return(90,tuple([qualifier]))

  @functools.native_method
  def get_qualifier(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(91,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeParameter', VisualShaderNodeParameter.cast)
register_class('VisualShaderNodeParameter', VisualShaderNodeParameter)
