# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.SegmentShape2D as py4godot_segmentshape2d 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.ConvexPolygonShape2D as py4godot_convexpolygonshape2d 
  import py4godot.classes.ConcavePolygonShape2D as py4godot_concavepolygonshape2d 
  import py4godot.classes.RectangleShape2D as py4godot_rectangleshape2d 
  import py4godot.classes.WorldBoundaryShape2D as py4godot_worldboundaryshape2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.Shape2D as py4godot_shape2d 
  import py4godot.classes.BitMap as py4godot_bitmap 
  import py4godot.classes.CircleShape2D as py4godot_circleshape2d 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.SeparationRayShape2D as py4godot_separationrayshape2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.CapsuleShape2D as py4godot_capsuleshape2d 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPTouchScreenButtonWrapper

class VisibilityMode:
  VISIBILITY_ALWAYS = 0
  VISIBILITY_TOUCHSCREEN_ONLY = 1


class TouchScreenButton(py4godot_node2d.Node2D):
  r'''
		TouchScreenButton allows you to create on-screen buttons for touch devices. It's intended for gameplay use, such as a unit you have to touch to move. Unlike `Button`, TouchScreenButton supports multitouch out of the box. Several TouchScreenButtons can be pressed at the same time with touch input.
		This node inherits from `Node2D`. Unlike with `Control` nodes, you cannot set anchors on it. If you want to create menus or user interfaces, you may want to use `Button` nodes instead. To make button nodes react to touch events, you can enable `ProjectSettings.input_devices/pointing/emulate_mouse_from_touch` in the Project Settings.
		You can configure TouchScreenButton to be visible only on touch devices, helping you develop your game both for desktop and mobile devices.
	'''

  @staticmethod
  def constructor():
    class_ = TouchScreenButton.construct_without_init()
    class_._ptr = constructor(845,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TouchScreenButton.construct_without_init()
    class_._ptr = constructor(845,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTouchScreenButtonWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(845,0, ())


  def generate_wrapper(self):
    return CPPTouchScreenButtonWrapper()
  def init_signals(self):
    super().init_signals()
    pressed_name = utils.py_string_to_string_name("pressed")
    self.pressed = signals.BuiltinSignal(self, pressed_name)
    released_name = utils.py_string_to_string_name("released")
    self.released = signals.BuiltinSignal(self, released_name)

  @staticmethod
  def construct_without_init():
    cls = TouchScreenButton.__new__(TouchScreenButton)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TouchScreenButton'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TouchScreenButton.construct_without_init()
    cls._ptr = CPPTouchScreenButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TouchScreenButton.construct_without_init()
    cls._ptr = CPPTouchScreenButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture_normal(self) -> typing.Any:
    r''''''
    _ret = self. get_texture_normal()
    return _ret
  @texture_normal.setter
  def texture_normal(self,  value:'py4godot_object.Object'):
    self.set_texture_normal(value)
  @property
  def texture_pressed(self) -> typing.Any:
    r''''''
    _ret = self. get_texture_pressed()
    return _ret
  @texture_pressed.setter
  def texture_pressed(self,  value:'py4godot_object.Object'):
    self.set_texture_pressed(value)
  @property
  def bitmask(self) -> typing.Union['py4godot_bitmap.BitMap']:
    r''''''
    _ret = self. get_bitmask()
    return _ret
  @bitmask.setter
  def bitmask(self,  value:'py4godot_object.Object'):
    self.set_bitmask(value)
  @property
  def shape(self) -> typing.Any:
    r''''''
    _ret = self. get_shape()
    return _ret
  @shape.setter
  def shape(self,  value:'py4godot_object.Object'):
    self.set_shape(value)
  @property
  def shape_centered(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_shape_centered()
    return _ret
  @shape_centered.setter
  def shape_centered(self,  value:'bool'):
    self.set_shape_centered(value)
  @property
  def shape_visible(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_shape_visible()
    return _ret
  @shape_visible.setter
  def shape_visible(self,  value:'bool'):
    self.set_shape_visible(value)
  @property
  def passby_press(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_passby_press_enabled()
    return _ret
  @passby_press.setter
  def passby_press(self,  value:'bool'):
    self.set_passby_press(value)
  @property
  def action(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_action()
    return _ret
  @action.setter
  def action(self,  value:'object'):
    self.set_action(value)
  @property
  def visibility_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_visibility_mode()
    return _ret
  @visibility_mode.setter
  def visibility_mode(self,  value:'int'):
    self.set_visibility_mode(value)
  @functools.native_method
  def set_texture_normal(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture_normal = texture






    self._ptr.call_with_return(303,tuple([texture._ptr]))

  @functools.native_method
  def get_texture_normal(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture_pressed(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture_pressed = texture






    self._ptr.call_with_return(305,tuple([texture._ptr]))

  @functools.native_method
  def get_texture_pressed(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(306,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_bitmask(self, bitmask:'py4godot_bitmap.BitMap'   ) -> None:
    r''''''

    assert(not bitmask is None)
    assert isinstance(bitmask, get_class('BitMap')), 'bitmask must be BitMap'

    self.py__bitmask = bitmask






    self._ptr.call_with_return(307,tuple([bitmask._ptr]))

  @functools.native_method
  def get_bitmask(self) -> typing.Union['py4godot_bitmap.BitMap']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: BitMap
    _ret._ptr = self._ptr.call_with_return(308,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_shape(self, shape:'py4godot_shape2d.Shape2D'   ) -> None:
    r''''''

    assert(not shape is None)
    assert isinstance(shape, get_class('Shape2D')), 'shape must be Shape2D'

    self.py__shape = shape






    self._ptr.call_with_return(309,tuple([shape._ptr]))

  @functools.native_method
  def get_shape(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Shape2D
    _ret._ptr = self._ptr.call_with_return(310,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_shape_centered(self, bool:'bool'   ) -> None:
    r''''''

    assert isinstance(bool, bool), 'bool must be bool'

    self.py__shape_centered = bool






    self._ptr.call_with_return(311,tuple([bool]))

  @functools.native_method
  def is_shape_centered(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(312,tuple([]))

    return _ret


  @functools.native_method
  def set_shape_visible(self, bool:'bool'   ) -> None:
    r''''''

    assert isinstance(bool, bool), 'bool must be bool'

    self.py__shape_visible = bool






    self._ptr.call_with_return(313,tuple([bool]))

  @functools.native_method
  def is_shape_visible(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(314,tuple([]))

    return _ret


  @functools.native_method
  def set_action(self, action:'str'   ) -> None:
    r''''''

    assert(not action is None)
    assert isinstance(action, (str, String)), 'action must be str or String'

    self.py__action = action



    assert(isinstance(action, (str, String)))
    py_string_action = action if isinstance(action, StringName) else c_utils.py_string_to_string(action)

    py__string_action = utils.py_string_to_string(action)
    py__string_action.shouldBeDeleted = False


    self._ptr.call_with_return(315,tuple([py__string_action._ptr]))

  @functools.native_method
  def get_action(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(316,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_visibility_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__visibility_mode = mode






    self._ptr.call_with_return(317,tuple([mode]))

  @functools.native_method
  def get_visibility_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(318,tuple([]))

    return _ret


  @functools.native_method
  def set_passby_press(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__passby_press = enabled






    self._ptr.call_with_return(319,tuple([enabled]))

  @functools.native_method
  def is_passby_press_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(320,tuple([]))

    return _ret


  @functools.native_method
  def is_pressed(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this button is currently pressed.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(321,tuple([]))
    return _ret



register_cast_function('TouchScreenButton', TouchScreenButton.cast)
register_class('TouchScreenButton', TouchScreenButton)
