# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPPhysicsServer2DManagerWrapper

_PhysicsServer2DManager_singleton_instance = None

class PhysicsServer2DManager(py4godot_object.Object):
  r'''
		`PhysicsServer2DManager` is the API for registering `PhysicsServer2D` implementations and for setting the default implementation.
		**Note:** It is not possible to switch physics servers at runtime. This class is only used on startup at the server initialization level, by Godot itself and possibly by GDExtensions.
	'''


  def generate_wrapper(self):
    return CPPPhysicsServer2DManagerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsServer2DManager.__new__(PhysicsServer2DManager)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsServer2DManager'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsServer2DManager.construct_without_init()
    cls._ptr = CPPPhysicsServer2DManagerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsServer2DManager.construct_without_init()
    cls._ptr = CPPPhysicsServer2DManagerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _PhysicsServer2DManager_singleton_instance
    if _PhysicsServer2DManager_singleton_instance is None:
      singleton = PhysicsServer2DManager()
      singleton._ptr = constructor(606,0, ())
      _PhysicsServer2DManager_singleton_instance = singleton
    return _PhysicsServer2DManager_singleton_instance

  @functools.native_method
  def register_server(self, name:'str'   , create_callback:'Callable'   ) -> None:
    r'''
				Register a `PhysicsServer2D` implementation by passing a `name` and a `Callable` that returns a `PhysicsServer2D` object.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert(not create_callback is None)
    assert isinstance(create_callback, Callable), 'create_callback must be Callable'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)


    self._ptr.call_with_return(49,tuple([py_string_name._ptr, create_callback._ptr]))

  @functools.native_method
  def set_default_server(self, name:'str'   , priority:'int'   ) -> None:
    r'''
				Set the default `PhysicsServer2D` implementation to the one identified by `name`, if `priority` is greater than the priority of the current default implementation.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert isinstance(priority, (int, float)), 'priority must be int or float'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)


    self._ptr.call_with_return(50,tuple([py_string_name._ptr, priority]))


register_cast_function('PhysicsServer2DManager', PhysicsServer2DManager.cast)
register_class('PhysicsServer2DManager', PhysicsServer2DManager)
