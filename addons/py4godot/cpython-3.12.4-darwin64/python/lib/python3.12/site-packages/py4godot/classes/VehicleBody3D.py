# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RigidBody3D as py4godot_rigidbody3d 
from py4godot.wrappers.wrappers import CPPVehicleBody3DWrapper


class VehicleBody3D(py4godot_rigidbody3d.RigidBody3D):
  r'''
		This physics body implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. Aside from a `CollisionShape3D` for the main body of the vehicle, you must also add a `VehicleWheel3D` node for each wheel. You should also add a `MeshInstance3D` to this node for the 3D model of the vehicle, but this model should generally not include meshes for the wheels. You can control the vehicle by using the `brake`, `engine_force`, and `steering` properties. The position or orientation of this node shouldn't be changed directly.
		**Note:** The local forward for this node is `constant Vector3.MODEL_FRONT`.
		**Note:** The origin point of your VehicleBody3D will determine the center of gravity of your vehicle. To make the vehicle more grounded, the origin point is usually kept low, moving the `CollisionShape3D` and `MeshInstance3D` upwards.
		**Note:** This class has known issues and isn't designed to provide realistic 3D vehicle physics. If you want advanced vehicle physics, you may have to write your own physics integration using `CharacterBody3D` or `RigidBody3D`.
	'''

  @staticmethod
  def constructor():
    class_ = VehicleBody3D.construct_without_init()
    class_._ptr = constructor(866,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VehicleBody3D.construct_without_init()
    class_._ptr = constructor(866,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVehicleBody3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(866,0, ())


  def generate_wrapper(self):
    return CPPVehicleBody3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VehicleBody3D.__new__(VehicleBody3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VehicleBody3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VehicleBody3D.construct_without_init()
    cls._ptr = CPPVehicleBody3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VehicleBody3D.construct_without_init()
    cls._ptr = CPPVehicleBody3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def engine_force(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_engine_force()
    return _ret
  @engine_force.setter
  def engine_force(self,  value:'float'):
    self.set_engine_force(value)
  @property
  def brake(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_brake()
    return _ret
  @brake.setter
  def brake(self,  value:'float'):
    self.set_brake(value)
  @property
  def steering(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_steering()
    return _ret
  @steering.setter
  def steering(self,  value:'float'):
    self.set_steering(value)
  @functools.native_method
  def set_engine_force(self, engine_force:'float'   ) -> None:
    r''''''

    assert isinstance(engine_force, (int, float)), 'engine_force must be int or float'

    self.py__engine_force = engine_force






    self._ptr.call_with_return(354,tuple([engine_force]))

  @functools.native_method
  def get_engine_force(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(355,tuple([]))

    return _ret


  @functools.native_method
  def set_brake(self, brake:'float'   ) -> None:
    r''''''

    assert isinstance(brake, (int, float)), 'brake must be int or float'

    self.py__brake = brake






    self._ptr.call_with_return(356,tuple([brake]))

  @functools.native_method
  def get_brake(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(357,tuple([]))

    return _ret


  @functools.native_method
  def set_steering(self, steering:'float'   ) -> None:
    r''''''

    assert isinstance(steering, (int, float)), 'steering must be int or float'

    self.py__steering = steering






    self._ptr.call_with_return(358,tuple([steering]))

  @functools.native_method
  def get_steering(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(359,tuple([]))

    return _ret



register_cast_function('VehicleBody3D', VehicleBody3D.cast)
register_class('VehicleBody3D', VehicleBody3D)
