# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
from py4godot.wrappers.wrappers import CPPPhysicalBoneSimulator3DWrapper


class PhysicalBoneSimulator3D(py4godot_skeletonmodifier3d.SkeletonModifier3D):
  r'''
		Node that can be the parent of `PhysicalBone3D` and can apply the simulation results to `Skeleton3D`.
	'''

  @staticmethod
  def constructor():
    class_ = PhysicalBoneSimulator3D.construct_without_init()
    class_._ptr = constructor(587,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PhysicalBoneSimulator3D.construct_without_init()
    class_._ptr = constructor(587,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPhysicalBoneSimulator3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(587,0, ())


  def generate_wrapper(self):
    return CPPPhysicalBoneSimulator3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicalBoneSimulator3D.__new__(PhysicalBoneSimulator3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicalBoneSimulator3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicalBoneSimulator3D.construct_without_init()
    cls._ptr = CPPPhysicalBoneSimulator3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicalBoneSimulator3D.construct_without_init()
    cls._ptr = CPPPhysicalBoneSimulator3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def is_simulating_physics(self) -> typing.Union[bool]:
    r'''
				Returns a boolean that indicates whether the `PhysicalBoneSimulator3D` is running and simulating.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(260,tuple([]))
    return _ret


  @functools.native_method
  def physical_bones_stop_simulation(self) -> None:
    r'''
				Tells the `PhysicalBone3D` nodes in the Skeleton to stop simulating.
			'''




    self._ptr.call_with_return(261,tuple([]))

  @functools.native_method
  def physical_bones_start_simulation(self, bones:'py4godot_stringnametypedarray.StringNameTypedArray' = None  ) -> None:
    r'''
				Tells the `PhysicalBone3D` nodes in the Skeleton to start simulating and reacting to the physics world.
				Optionally, a list of bone names can be passed-in, allowing only the passed-in bones to be simulated.
			'''



    assert isinstance(bones, get_class('StringNameTypedArray')), 'bones must be StringNameTypedArray'






    self._ptr.call_with_return(262,tuple([bones._ptr]))

  @functools.native_method
  def physical_bones_add_collision_exception(self, exception:'RID'   ) -> None:
    r'''
				Adds a collision exception to the physical bone.
				Works just like the `RigidBody3D` node.
			'''

    assert(not exception is None)
    assert isinstance(exception, RID), 'exception must be RID'






    self._ptr.call_with_return(263,tuple([exception._ptr]))

  @functools.native_method
  def physical_bones_remove_collision_exception(self, exception:'RID'   ) -> None:
    r'''
				Removes a collision exception to the physical bone.
				Works just like the `RigidBody3D` node.
			'''

    assert(not exception is None)
    assert isinstance(exception, RID), 'exception must be RID'






    self._ptr.call_with_return(264,tuple([exception._ptr]))


register_cast_function('PhysicalBoneSimulator3D', PhysicalBoneSimulator3D.cast)
register_class('PhysicalBoneSimulator3D', PhysicalBoneSimulator3D)
