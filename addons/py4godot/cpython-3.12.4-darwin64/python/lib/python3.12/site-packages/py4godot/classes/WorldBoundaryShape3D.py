# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Shape3D as py4godot_shape3d 
from py4godot.wrappers.wrappers import CPPWorldBoundaryShape3DWrapper


class WorldBoundaryShape3D(py4godot_shape3d.Shape3D):
  r'''
		A 3D world boundary shape, intended for use in physics. `WorldBoundaryShape3D` works like an infinite plane that forces all physics bodies to stay above it. The `plane`'s normal determines which direction is considered as "above" and in the editor, the line over the plane represents this direction. It can for example be used for endless flat floors.
		**Note:** When the physics engine is set to **Jolt Physics** in the project settings (`ProjectSettings.physics/3d/physics_engine`), `WorldBoundaryShape3D` has a finite size (centered at the shape's origin). It can be adjusted by changing `ProjectSettings.physics/jolt_physics_3d/limits/world_boundary_shape_size`.
	'''

  @staticmethod
  def constructor():
    class_ = WorldBoundaryShape3D.construct_without_init()
    class_._ptr = constructor(1007,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WorldBoundaryShape3D.construct_without_init()
    class_._ptr = constructor(1007,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWorldBoundaryShape3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1007,0, ())


  def generate_wrapper(self):
    return CPPWorldBoundaryShape3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WorldBoundaryShape3D.__new__(WorldBoundaryShape3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WorldBoundaryShape3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WorldBoundaryShape3D.construct_without_init()
    cls._ptr = CPPWorldBoundaryShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WorldBoundaryShape3D.construct_without_init()
    cls._ptr = CPPWorldBoundaryShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def plane(self) -> typing.Union['Plane']:
    r''''''
    _ret = self. get_plane()
    return _ret
  @plane.setter
  def plane(self,  value:'Plane'):
    self.set_plane(value)
  @functools.native_method
  def set_plane(self, plane:'Plane'   ) -> None:
    r''''''

    assert(not plane is None)
    assert isinstance(plane, Plane), 'plane must be Plane'

    self.py__plane = plane






    self._ptr.call_with_return(82,tuple([plane._ptr]))

  @functools.native_method
  def get_plane(self) -> typing.Union['Plane']:
    r''''''




    _ret = Plane.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return _ret



register_cast_function('WorldBoundaryShape3D', WorldBoundaryShape3D.cast)
register_class('WorldBoundaryShape3D', WorldBoundaryShape3D)
