# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNodeResizableBase as py4godot_visualshadernoderesizablebase 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeFrameWrapper


class VisualShaderNodeFrame(py4godot_visualshadernoderesizablebase.VisualShaderNodeResizableBase):
  r'''
		A rectangular frame that can be used to group visual shader nodes together to improve organization.
		Nodes attached to the frame will move with it when it is dragged and it can automatically resize to enclose all attached nodes.
		Its title, description and color can be customized.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeFrame.construct_without_init()
    class_._ptr = constructor(907,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeFrame.construct_without_init()
    class_._ptr = constructor(907,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeFrameWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(907,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeFrameWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeFrame.__new__(VisualShaderNodeFrame)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeFrame'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeFrame.construct_without_init()
    cls._ptr = CPPVisualShaderNodeFrameWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeFrame.construct_without_init()
    cls._ptr = CPPVisualShaderNodeFrameWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def title(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_title()
    return _ret
  @title.setter
  def title(self,  value:'str'):
    self.set_title(value)
  @property
  def tint_color_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_tint_color_enabled()
    return _ret
  @tint_color_enabled.setter
  def tint_color_enabled(self,  value:'bool'):
    self.set_tint_color_enabled(value)
  @property
  def tint_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_tint_color()
    return _ret
  @tint_color.setter
  def tint_color(self,  value:'Color'):
    self.set_tint_color(value)
  @property
  def autoshrink(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_autoshrink_enabled()
    return _ret
  @autoshrink.setter
  def autoshrink(self,  value:'bool'):
    self.set_autoshrink_enabled(value)
  @property
  def attached_nodes(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_attached_nodes()
    return _ret
  @attached_nodes.setter
  def attached_nodes(self,  value:'PackedInt32Array'):
    self.set_attached_nodes(value)
  @functools.native_method
  def set_title(self, title:'str'   ) -> None:
    r''''''

    assert(not title is None)
    assert isinstance(title, (str, String)), 'title must be str or String'

    self.py__title = title



    assert(isinstance(title, (str, String)))
    py_string_title = title if isinstance(title, StringName) else c_utils.py_string_to_string(title)

    py__string_title = utils.py_string_to_string(title)
    py__string_title.shouldBeDeleted = False


    self._ptr.call_with_return(90,tuple([py__string_title._ptr]))

  @functools.native_method
  def get_title(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_tint_color_enabled(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__tint_color_enabled = enable






    self._ptr.call_with_return(92,tuple([enable]))

  @functools.native_method
  def is_tint_color_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_tint_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__tint_color = color






    self._ptr.call_with_return(94,tuple([color._ptr]))

  @functools.native_method
  def get_tint_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_autoshrink_enabled(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__autoshrink = enable






    self._ptr.call_with_return(96,tuple([enable]))

  @functools.native_method
  def is_autoshrink_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def add_attached_node(self, node:'int'   ) -> None:
    r'''
				Adds a node to the list of nodes attached to the frame. Should not be called directly, use the `VisualShader.attach_node_to_frame` method instead.
			'''

    assert isinstance(node, (int, float)), 'node must be int or float'






    self._ptr.call_with_return(98,tuple([node]))

  @functools.native_method
  def remove_attached_node(self, node:'int'   ) -> None:
    r'''
				Removes a node from the list of nodes attached to the frame. Should not be called directly, use the `VisualShader.detach_node_from_frame` method instead.
			'''

    assert isinstance(node, (int, float)), 'node must be int or float'






    self._ptr.call_with_return(99,tuple([node]))

  @functools.native_method
  def set_attached_nodes(self, attached_nodes:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not attached_nodes is None)
    assert isinstance(attached_nodes, PackedInt32Array), 'attached_nodes must be PackedInt32Array'

    self.py__attached_nodes = attached_nodes






    self._ptr.call_with_return(100,tuple([attached_nodes._ptr]))

  @functools.native_method
  def get_attached_nodes(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(101,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeFrame', VisualShaderNodeFrame.cast)
register_class('VisualShaderNodeFrame', VisualShaderNodeFrame)
