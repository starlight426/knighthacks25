# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.NodePathTypedArray as py4godot_nodepathtypedarray 
import py4godot.classes.Resource as py4godot_resource 
import py4godot.classes.NodePathTypedArray as py4godot_nodepathtypedarray 
from py4godot.wrappers.wrappers import CPPSceneReplicationConfigWrapper

class ReplicationMode:
  REPLICATION_MODE_NEVER = 0
  REPLICATION_MODE_ALWAYS = 1
  REPLICATION_MODE_ON_CHANGE = 2


class SceneReplicationConfig(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = SceneReplicationConfig.construct_without_init()
    class_._ptr = constructor(717,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SceneReplicationConfig.construct_without_init()
    class_._ptr = constructor(717,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSceneReplicationConfigWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(717,0, ())


  def generate_wrapper(self):
    return CPPSceneReplicationConfigWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SceneReplicationConfig.__new__(SceneReplicationConfig)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SceneReplicationConfig'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SceneReplicationConfig.construct_without_init()
    cls._ptr = CPPSceneReplicationConfigWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SceneReplicationConfig.construct_without_init()
    cls._ptr = CPPSceneReplicationConfigWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_properties(self) -> typing.Union['py4godot_nodepathtypedarray.NodePathTypedArray']:
    r''''''




    _ret = py4godot_nodepathtypedarray.NodePathTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))
    return _ret


  @functools.native_method
  def add_property(self, path:'object'   , index:'int' =-1  ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'
    assert isinstance(index, (int, float)), 'index must be int or float'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(78,tuple([py_nodepath_path._ptr, index]))

  @functools.native_method
  def has_property(self, path:'object'   ) -> typing.Union[bool]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([py_nodepath_path._ptr]))
    return _ret


  @functools.native_method
  def remove_property(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    self._ptr.call_with_return(80,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def property_get_index(self, path:'object'   ) -> typing.Union[int]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([py_nodepath_path._ptr]))
    return _ret


  @functools.native_method
  def property_get_spawn(self, path:'object'   ) -> typing.Union[bool]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([py_nodepath_path._ptr]))
    return _ret


  @functools.native_method
  def property_set_spawn(self, path:'object'   , enabled:'bool'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'
    assert isinstance(enabled, bool), 'enabled must be bool'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(83,tuple([py_nodepath_path._ptr, enabled]))

  @functools.native_method
  def property_get_replication_mode(self, path:'object'   ) -> typing.Union[int]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret:int
    _ret = self._ptr.call_with_return(84,tuple([py_nodepath_path._ptr]))
    return _ret


  @functools.native_method
  def property_set_replication_mode(self, path:'object'   , mode:'int'  ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'
    assert isinstance(mode, (int, float)), 'mode must be int or float'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(85,tuple([py_nodepath_path._ptr, mode]))

  @functools.native_method
  def property_get_sync(self, path:'object'   ) -> typing.Union[bool]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([py_nodepath_path._ptr]))
    return _ret


  @functools.native_method
  def property_set_sync(self, path:'object'   , enabled:'bool'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'
    assert isinstance(enabled, bool), 'enabled must be bool'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(87,tuple([py_nodepath_path._ptr, enabled]))

  @functools.native_method
  def property_get_watch(self, path:'object'   ) -> typing.Union[bool]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([py_nodepath_path._ptr]))
    return _ret


  @functools.native_method
  def property_set_watch(self, path:'object'   , enabled:'bool'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'
    assert isinstance(enabled, bool), 'enabled must be bool'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(89,tuple([py_nodepath_path._ptr, enabled]))


register_cast_function('SceneReplicationConfig', SceneReplicationConfig.cast)
register_class('SceneReplicationConfig', SceneReplicationConfig)
