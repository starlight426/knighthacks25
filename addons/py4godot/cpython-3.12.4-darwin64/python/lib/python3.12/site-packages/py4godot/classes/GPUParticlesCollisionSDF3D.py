# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.NoiseTexture3D as py4godot_noisetexture3d 
  import py4godot.classes.ImageTexture3D as py4godot_imagetexture3d 
  import py4godot.classes.Texture3DRD as py4godot_texture3drd 
  import py4godot.classes.CompressedTexture3D as py4godot_compressedtexture3d 
  import py4godot.classes.PlaceholderTexture3D as py4godot_placeholdertexture3d 
  import py4godot.classes.Texture3D as py4godot_texture3d 
import py4godot.classes.GPUParticlesCollision3D as py4godot_gpuparticlescollision3d 
from py4godot.wrappers.wrappers import CPPGPUParticlesCollisionSDF3DWrapper

class Resolution:
  RESOLUTION_16 = 0
  RESOLUTION_32 = 1
  RESOLUTION_64 = 2
  RESOLUTION_128 = 3
  RESOLUTION_256 = 4
  RESOLUTION_512 = 5
  RESOLUTION_MAX = 6


class GPUParticlesCollisionSDF3D(py4godot_gpuparticlescollision3d.GPUParticlesCollision3D):
  r'''
		A baked signed distance field 3D particle collision shape affecting `GPUParticles3D` nodes.
		Signed distance fields (SDF) allow for efficiently representing approximate collision shapes for convex and concave objects of any shape. This is more flexible than `GPUParticlesCollisionHeightField3D`, but it requires a baking step.
		**Baking:** The signed distance field texture can be baked by selecting the `GPUParticlesCollisionSDF3D` node in the editor, then clicking **Bake SDF** at the top of the 3D viewport. Any _visible_ `MeshInstance3D`s within the `size` will be taken into account for baking, regardless of their `GeometryInstance3D.gi_mode`.
		**Note:** Baking a `GPUParticlesCollisionSDF3D`'s `texture` is only possible within the editor, as there is no bake method exposed for use in exported projects. However, it's still possible to load pre-baked `Texture3D`s into its `texture` property in an exported project.
		**Note:** `ParticleProcessMaterial.collision_mode` must be `constant ParticleProcessMaterial.COLLISION_RIGID` or `constant ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT` on the `GPUParticles3D`'s process material for collision to work.
		**Note:** Particle collision only affects `GPUParticles3D`, not `CPUParticles3D`.
	'''

  @staticmethod
  def constructor():
    class_ = GPUParticlesCollisionSDF3D.construct_without_init()
    class_._ptr = constructor(373,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GPUParticlesCollisionSDF3D.construct_without_init()
    class_._ptr = constructor(373,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGPUParticlesCollisionSDF3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(373,0, ())


  def generate_wrapper(self):
    return CPPGPUParticlesCollisionSDF3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GPUParticlesCollisionSDF3D.__new__(GPUParticlesCollisionSDF3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GPUParticlesCollisionSDF3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GPUParticlesCollisionSDF3D.construct_without_init()
    cls._ptr = CPPGPUParticlesCollisionSDF3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GPUParticlesCollisionSDF3D.construct_without_init()
    cls._ptr = CPPGPUParticlesCollisionSDF3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def size(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector3'):
    self.set_size(value)
  @property
  def resolution(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_resolution()
    return _ret
  @resolution.setter
  def resolution(self,  value:'int'):
    self.set_resolution(value)
  @property
  def thickness(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_thickness()
    return _ret
  @thickness.setter
  def thickness(self,  value:'float'):
    self.set_thickness(value)
  @property
  def bake_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_bake_mask()
    return _ret
  @bake_mask.setter
  def bake_mask(self,  value:'int'):
    self.set_bake_mask(value)
  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @functools.native_method
  def set_size(self, size:'Vector3'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector3), 'size must be Vector3'

    self.py__size = size






    self._ptr.call_with_return(266,tuple([size._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(267,tuple([]))

    return _ret


  @functools.native_method
  def set_resolution(self, resolution:'int'  ) -> None:
    r''''''

    assert isinstance(resolution, (int, float)), 'resolution must be int or float'

    self.py__resolution = resolution






    self._ptr.call_with_return(268,tuple([resolution]))

  @functools.native_method
  def get_resolution(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(269,tuple([]))

    return _ret


  @functools.native_method
  def set_texture(self, texture:'py4godot_texture3d.Texture3D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture3D')), 'texture must be Texture3D'

    self.py__texture = texture






    self._ptr.call_with_return(270,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture3D
    _ret._ptr = self._ptr.call_with_return(271,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_thickness(self, thickness:'float'   ) -> None:
    r''''''

    assert isinstance(thickness, (int, float)), 'thickness must be int or float'

    self.py__thickness = thickness






    self._ptr.call_with_return(272,tuple([thickness]))

  @functools.native_method
  def get_thickness(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(273,tuple([]))

    return _ret


  @functools.native_method
  def set_bake_mask(self, mask:'int'   ) -> None:
    r''''''

    assert isinstance(mask, (int, float)), 'mask must be int or float'

    self.py__bake_mask = mask






    self._ptr.call_with_return(274,tuple([mask]))

  @functools.native_method
  def get_bake_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(275,tuple([]))

    return _ret


  @functools.native_method
  def set_bake_mask_value(self, layer_number:'int'   , value:'bool'   ) -> None:
    r'''
				Based on `value`, enables or disables the specified layer in the `bake_mask`, given a `layer_number` between 1 and 32.
			'''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'
    assert isinstance(value, bool), 'value must be bool'







    self._ptr.call_with_return(276,tuple([layer_number, value]))

  @functools.native_method
  def get_bake_mask_value(self, layer_number:'int'   ) -> typing.Union[bool]:
    r'''
				Returns whether or not the specified layer of the `bake_mask` is enabled, given a `layer_number` between 1 and 32.
			'''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(277,tuple([layer_number]))
    return _ret



register_cast_function('GPUParticlesCollisionSDF3D', GPUParticlesCollisionSDF3D.cast)
register_class('GPUParticlesCollisionSDF3D', GPUParticlesCollisionSDF3D)
