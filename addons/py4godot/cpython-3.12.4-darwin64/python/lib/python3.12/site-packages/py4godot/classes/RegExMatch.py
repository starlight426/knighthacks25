# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRegExMatchWrapper


class RegExMatch(py4godot_refcounted.RefCounted):
  r''''''

  @staticmethod
  def constructor():
    class_ = RegExMatch.construct_without_init()
    class_._ptr = constructor(670,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RegExMatch.construct_without_init()
    class_._ptr = constructor(670,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRegExMatchWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(670,0, ())


  def generate_wrapper(self):
    return CPPRegExMatchWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RegExMatch.__new__(RegExMatch)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RegExMatch'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RegExMatch.construct_without_init()
    cls._ptr = CPPRegExMatchWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RegExMatch.construct_without_init()
    cls._ptr = CPPRegExMatchWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def subject(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_subject()
    return _ret
  @property
  def names(self) -> typing.Union['Dictionary']:
    r''''''
    _ret = self. get_names()
    return _ret
  @property
  def strings(self) -> typing.Union['Array']:
    r''''''
    _ret = self. get_strings()
    return _ret
  @functools.native_method
  def get_subject(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_group_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def get_names(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))

    return _ret


  @functools.native_method
  def get_strings(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def get_string(self, name:'object' =0  ) -> typing.Union[str]:
    r''''''



    






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(57,tuple([name]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_start(self, name:'object' =0  ) -> typing.Union[int]:
    r''''''



    






    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([name]))
    return _ret


  @functools.native_method
  def get_end(self, name:'object' =0  ) -> typing.Union[int]:
    r''''''



    






    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([name]))
    return _ret



register_cast_function('RegExMatch', RegExMatch.cast)
register_class('RegExMatch', RegExMatch)
