# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
  import py4godot.classes.RDPipelineColorBlendStateAttachmentTypedArray as py4godot_rdpipelinecolorblendstateattachmenttypedarray 
import py4godot.classes.RDPipelineColorBlendStateAttachmentTypedArray as py4godot_rdpipelinecolorblendstateattachmenttypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDPipelineColorBlendStateWrapper


class RDPipelineColorBlendState(py4godot_refcounted.RefCounted):
  r'''
		This object is used by `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDPipelineColorBlendState.construct_without_init()
    class_._ptr = constructor(647,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDPipelineColorBlendState.construct_without_init()
    class_._ptr = constructor(647,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDPipelineColorBlendStateWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(647,0, ())


  def generate_wrapper(self):
    return CPPRDPipelineColorBlendStateWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDPipelineColorBlendState.__new__(RDPipelineColorBlendState)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDPipelineColorBlendState'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineColorBlendState.construct_without_init()
    cls._ptr = CPPRDPipelineColorBlendStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineColorBlendState.construct_without_init()
    cls._ptr = CPPRDPipelineColorBlendStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def enable_logic_op(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_logic_op()
    return _ret
  @enable_logic_op.setter
  def enable_logic_op(self,  value:'bool'):
    self.set_enable_logic_op(value)
  @property
  def logic_op(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_logic_op()
    return _ret
  @logic_op.setter
  def logic_op(self,  value:'int'):
    self.set_logic_op(value)
  @property
  def blend_constant(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_blend_constant()
    return _ret
  @blend_constant.setter
  def blend_constant(self,  value:'Color'):
    self.set_blend_constant(value)
  @property
  def attachments(self) -> typing.Union['py4godot_rdpipelinecolorblendstateattachmenttypedarray.RDPipelineColorBlendStateAttachmentTypedArray']:
    r''''''
    _ret = self. get_attachments()
    return _ret
  @attachments.setter
  def attachments(self, value:'Array'):
    self.set_attachments(value)
  @functools.native_method
  def set_enable_logic_op(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_logic_op = p_member






    self._ptr.call_with_return(53,tuple([p_member]))

  @functools.native_method
  def get_enable_logic_op(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_logic_op(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__logic_op = p_member






    self._ptr.call_with_return(55,tuple([p_member]))

  @functools.native_method
  def get_logic_op(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_blend_constant(self, p_member:'Color'   ) -> None:
    r''''''

    assert(not p_member is None)
    assert isinstance(p_member, Color), 'p_member must be Color'

    self.py__blend_constant = p_member






    self._ptr.call_with_return(57,tuple([p_member._ptr]))

  @functools.native_method
  def get_blend_constant(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_attachments(self, attachments:'py4godot_rdpipelinecolorblendstateattachmenttypedarray.RDPipelineColorBlendStateAttachmentTypedArray'   ) -> None:
    r''''''

    assert isinstance(attachments, get_class('RDPipelineColorBlendStateAttachmentTypedArray')), 'attachments must be RDPipelineColorBlendStateAttachmentTypedArray'

    self.py__attachments = attachments






    self._ptr.call_with_return(59,tuple([attachments._ptr]))

  @functools.native_method
  def get_attachments(self) -> typing.Union['py4godot_rdpipelinecolorblendstateattachmenttypedarray.RDPipelineColorBlendStateAttachmentTypedArray']:
    r''''''




    _ret = py4godot_rdpipelinecolorblendstateattachmenttypedarray.RDPipelineColorBlendStateAttachmentTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))

    return _ret



register_cast_function('RDPipelineColorBlendState', RDPipelineColorBlendState.cast)
register_class('RDPipelineColorBlendState', RDPipelineColorBlendState)
