# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Animation as py4godot_animation 
import py4godot.classes.AnimationRootNode as py4godot_animationrootnode 
from py4godot.wrappers.wrappers import CPPAnimationNodeAnimationWrapper

class PlayMode:
  PLAY_MODE_FORWARD = 0
  PLAY_MODE_BACKWARD = 1


class AnimationNodeAnimation(py4godot_animationrootnode.AnimationRootNode):
  r'''
		A resource to add to an `AnimationNodeBlendTree`. Only has one output port using the `animation` property. Used as an input for `AnimationNode`s that blend animations together.
	'''

  @staticmethod
  def constructor():
    class_ = AnimationNodeAnimation.construct_without_init()
    class_._ptr = constructor(78,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeAnimation.construct_without_init()
    class_._ptr = constructor(78,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeAnimationWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(78,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeAnimationWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeAnimation.__new__(AnimationNodeAnimation)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeAnimation'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeAnimation.construct_without_init()
    cls._ptr = CPPAnimationNodeAnimationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeAnimation.construct_without_init()
    cls._ptr = CPPAnimationNodeAnimationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def animation(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_animation()
    return _ret
  @animation.setter
  def animation(self,  value:'object'):
    self.set_animation(value)
  @property
  def play_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_play_mode()
    return _ret
  @play_mode.setter
  def play_mode(self,  value:'int'):
    self.set_play_mode(value)
  @property
  def advance_on_start(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_advance_on_start()
    return _ret
  @advance_on_start.setter
  def advance_on_start(self,  value:'bool'):
    self.set_advance_on_start(value)
  @property
  def use_custom_timeline(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_custom_timeline()
    return _ret
  @use_custom_timeline.setter
  def use_custom_timeline(self,  value:'bool'):
    self.set_use_custom_timeline(value)
  @property
  def timeline_length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_timeline_length()
    return _ret
  @timeline_length.setter
  def timeline_length(self,  value:'float'):
    self.set_timeline_length(value)
  @property
  def stretch_time_scale(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_stretching_time_scale()
    return _ret
  @stretch_time_scale.setter
  def stretch_time_scale(self,  value:'bool'):
    self.set_stretch_time_scale(value)
  @property
  def start_offset(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_start_offset()
    return _ret
  @start_offset.setter
  def start_offset(self,  value:'float'):
    self.set_start_offset(value)
  @property
  def loop_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_loop_mode()
    return _ret
  @loop_mode.setter
  def loop_mode(self,  value:'int'):
    self.set_loop_mode(value)
  @functools.native_method
  def set_animation(self, name:'object'   ) -> None:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'

    self.py__animation = name



    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)


    self._ptr.call_with_return(102,tuple([py_stringname_name._ptr]))

  @functools.native_method
  def get_animation(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(103,tuple([]))

    return _ret


  @functools.native_method
  def set_play_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__play_mode = mode






    self._ptr.call_with_return(104,tuple([mode]))

  @functools.native_method
  def get_play_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(105,tuple([]))

    return _ret


  @functools.native_method
  def set_advance_on_start(self, advance_on_start:'bool'   ) -> None:
    r''''''

    assert isinstance(advance_on_start, bool), 'advance_on_start must be bool'

    self.py__advance_on_start = advance_on_start






    self._ptr.call_with_return(106,tuple([advance_on_start]))

  @functools.native_method
  def is_advance_on_start(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(107,tuple([]))

    return _ret


  @functools.native_method
  def set_use_custom_timeline(self, use_custom_timeline:'bool'   ) -> None:
    r''''''

    assert isinstance(use_custom_timeline, bool), 'use_custom_timeline must be bool'

    self.py__use_custom_timeline = use_custom_timeline






    self._ptr.call_with_return(108,tuple([use_custom_timeline]))

  @functools.native_method
  def is_using_custom_timeline(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(109,tuple([]))

    return _ret


  @functools.native_method
  def set_timeline_length(self, timeline_length:'float'   ) -> None:
    r''''''

    assert isinstance(timeline_length, (int, float)), 'timeline_length must be int or float'

    self.py__timeline_length = timeline_length






    self._ptr.call_with_return(110,tuple([timeline_length]))

  @functools.native_method
  def get_timeline_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(111,tuple([]))

    return _ret


  @functools.native_method
  def set_stretch_time_scale(self, stretch_time_scale:'bool'   ) -> None:
    r''''''

    assert isinstance(stretch_time_scale, bool), 'stretch_time_scale must be bool'

    self.py__stretch_time_scale = stretch_time_scale






    self._ptr.call_with_return(112,tuple([stretch_time_scale]))

  @functools.native_method
  def is_stretching_time_scale(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(113,tuple([]))

    return _ret


  @functools.native_method
  def set_start_offset(self, start_offset:'float'   ) -> None:
    r''''''

    assert isinstance(start_offset, (int, float)), 'start_offset must be int or float'

    self.py__start_offset = start_offset






    self._ptr.call_with_return(114,tuple([start_offset]))

  @functools.native_method
  def get_start_offset(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(115,tuple([]))

    return _ret


  @functools.native_method
  def set_loop_mode(self, loop_mode:'int'  ) -> None:
    r''''''

    assert isinstance(loop_mode, (int, float)), 'loop_mode must be int or float'

    self.py__loop_mode = loop_mode






    self._ptr.call_with_return(116,tuple([loop_mode]))

  @functools.native_method
  def get_loop_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(117,tuple([]))

    return _ret



register_cast_function('AnimationNodeAnimation', AnimationNodeAnimation.cast)
register_class('AnimationNodeAnimation', AnimationNodeAnimation)
