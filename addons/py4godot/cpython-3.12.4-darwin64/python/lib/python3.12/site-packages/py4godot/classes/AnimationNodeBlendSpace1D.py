# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AnimationNodeStateMachine as py4godot_animationnodestatemachine 
  import py4godot.classes.AnimationNodeBlendSpace2D as py4godot_animationnodeblendspace2d 
  import py4godot.classes.AnimationNodeAnimation as py4godot_animationnodeanimation 
  import py4godot.classes.AnimationNodeBlendTree as py4godot_animationnodeblendtree 
import py4godot.classes.AnimationRootNode as py4godot_animationrootnode 
from py4godot.wrappers.wrappers import CPPAnimationNodeBlendSpace1DWrapper

class BlendMode:
  BLEND_MODE_INTERPOLATED = 0
  BLEND_MODE_DISCRETE = 1
  BLEND_MODE_DISCRETE_CARRY = 2


class AnimationNodeBlendSpace1D(py4godot_animationrootnode.AnimationRootNode):
  r'''
		A resource used by `AnimationNodeBlendTree`.
		`AnimationNodeBlendSpace1D` represents a virtual axis on which any type of `AnimationRootNode`s can be added using `add_blend_point`. Outputs the linear blend of the two `AnimationRootNode`s adjacent to the current value.
		You can set the extents of the axis with `min_space` and `max_space`.
	'''

  @staticmethod
  def constructor():
    class_ = AnimationNodeBlendSpace1D.construct_without_init()
    class_._ptr = constructor(81,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeBlendSpace1D.construct_without_init()
    class_._ptr = constructor(81,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeBlendSpace1DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(81,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeBlendSpace1DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeBlendSpace1D.__new__(AnimationNodeBlendSpace1D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeBlendSpace1D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeBlendSpace1D.construct_without_init()
    cls._ptr = CPPAnimationNodeBlendSpace1DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeBlendSpace1D.construct_without_init()
    cls._ptr = CPPAnimationNodeBlendSpace1DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def min_space(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_min_space()
    return _ret
  @min_space.setter
  def min_space(self,  value:'float'):
    self.set_min_space(value)
  @property
  def max_space(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_max_space()
    return _ret
  @max_space.setter
  def max_space(self,  value:'float'):
    self.set_max_space(value)
  @property
  def snap(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_snap()
    return _ret
  @snap.setter
  def snap(self,  value:'float'):
    self.set_snap(value)
  @property
  def value_label(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_value_label()
    return _ret
  @value_label.setter
  def value_label(self,  value:'str'):
    self.set_value_label(value)
  @property
  def blend_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_blend_mode()
    return _ret
  @blend_mode.setter
  def blend_mode(self,  value:'int'):
    self.set_blend_mode(value)
  @property
  def sync(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_sync()
    return _ret
  @sync.setter
  def sync(self,  value:'bool'):
    self.set_use_sync(value)
  @functools.native_method
  def add_blend_point(self, node:'py4godot_animationrootnode.AnimationRootNode'   , pos:'float'   , at_index:'int' =-1  ) -> None:
    r'''
				Adds a new point that represents a `node` on the virtual axis at a given position set by `pos`. You can insert it at a specific index using the `at_index` argument. If you use the default value for `at_index`, the point is inserted at the end of the blend points array.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('AnimationRootNode')), 'node must be AnimationRootNode'
    assert isinstance(pos, (int, float)), 'pos must be int or float'
    assert isinstance(at_index, (int, float)), 'at_index must be int or float'








    self._ptr.call_with_return(102,tuple([node._ptr, pos, at_index]))

  @functools.native_method
  def set_blend_point_position(self, point:'int'   , pos:'float'   ) -> None:
    r'''
				Updates the position of the point at index `point` on the blend axis.
			'''

    assert isinstance(point, (int, float)), 'point must be int or float'
    assert isinstance(pos, (int, float)), 'pos must be int or float'







    self._ptr.call_with_return(103,tuple([point, pos]))

  @functools.native_method
  def get_blend_point_position(self, point:'int'   ) -> typing.Union[float]:
    r'''
				Returns the position of the point at index `point`.
			'''

    assert isinstance(point, (int, float)), 'point must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([point]))
    return _ret


  @functools.native_method
  def set_blend_point_node(self, point:'int'   , node:'py4godot_animationrootnode.AnimationRootNode'   ) -> None:
    r'''
				Changes the `AnimationNode` referenced by the point at index `point`.
			'''

    assert isinstance(point, (int, float)), 'point must be int or float'
    assert(not node is None)
    assert isinstance(node, get_class('AnimationRootNode')), 'node must be AnimationRootNode'







    self._ptr.call_with_return(105,tuple([point, node._ptr]))

  @functools.native_method
  def get_blend_point_node(self, point:'int'   ) -> typing.Any:
    r'''
				Returns the `AnimationNode` referenced by the point at index `point`.
			'''

    assert isinstance(point, (int, float)), 'point must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AnimationRootNode
    _ret._ptr = self._ptr.call_with_return(106,tuple([point]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def remove_blend_point(self, point:'int'   ) -> None:
    r'''
				Removes the point at index `point` from the blend axis.
			'''

    assert isinstance(point, (int, float)), 'point must be int or float'






    self._ptr.call_with_return(107,tuple([point]))

  @functools.native_method
  def get_blend_point_count(self) -> typing.Union[int]:
    r'''
				Returns the number of points on the blend axis.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(108,tuple([]))
    return _ret


  @functools.native_method
  def set_min_space(self, min_space:'float'   ) -> None:
    r''''''

    assert isinstance(min_space, (int, float)), 'min_space must be int or float'

    self.py__min_space = min_space






    self._ptr.call_with_return(109,tuple([min_space]))

  @functools.native_method
  def get_min_space(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(110,tuple([]))

    return _ret


  @functools.native_method
  def set_max_space(self, max_space:'float'   ) -> None:
    r''''''

    assert isinstance(max_space, (int, float)), 'max_space must be int or float'

    self.py__max_space = max_space






    self._ptr.call_with_return(111,tuple([max_space]))

  @functools.native_method
  def get_max_space(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(112,tuple([]))

    return _ret


  @functools.native_method
  def set_snap(self, snap:'float'   ) -> None:
    r''''''

    assert isinstance(snap, (int, float)), 'snap must be int or float'

    self.py__snap = snap






    self._ptr.call_with_return(113,tuple([snap]))

  @functools.native_method
  def get_snap(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(114,tuple([]))

    return _ret


  @functools.native_method
  def set_value_label(self, text:'str'   ) -> None:
    r''''''

    assert(not text is None)
    assert isinstance(text, (str, String)), 'text must be str or String'

    self.py__value_label = text



    assert(isinstance(text, (str, String)))
    py_string_text = text if isinstance(text, StringName) else c_utils.py_string_to_string(text)

    py__string_text = utils.py_string_to_string(text)
    py__string_text.shouldBeDeleted = False


    self._ptr.call_with_return(115,tuple([py__string_text._ptr]))

  @functools.native_method
  def get_value_label(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(116,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_blend_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__blend_mode = mode






    self._ptr.call_with_return(117,tuple([mode]))

  @functools.native_method
  def get_blend_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(118,tuple([]))

    return _ret


  @functools.native_method
  def set_use_sync(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__sync = enable






    self._ptr.call_with_return(119,tuple([enable]))

  @functools.native_method
  def is_using_sync(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(120,tuple([]))

    return _ret



register_cast_function('AnimationNodeBlendSpace1D', AnimationNodeBlendSpace1D.cast)
register_class('AnimationNodeBlendSpace1D', AnimationNodeBlendSpace1D)
