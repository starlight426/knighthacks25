# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPCollisionPolygon3DWrapper


class CollisionPolygon3D(py4godot_node3d.Node3D):
  r'''
		A node that provides a thickened polygon shape (a prism) to a `CollisionObject3D` parent and allows it to be edited. The polygon can be concave or convex. This can give a detection shape to an `Area3D` or turn a `PhysicsBody3D` into a solid object.
		**Warning:** A non-uniformly scaled `CollisionShape3D` will likely not behave as expected. Make sure to keep its scale the same on all axes and adjust its shape resource instead.
	'''

  @staticmethod
  def constructor():
    class_ = CollisionPolygon3D.construct_without_init()
    class_._ptr = constructor(218,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CollisionPolygon3D.construct_without_init()
    class_._ptr = constructor(218,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCollisionPolygon3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(218,0, ())


  def generate_wrapper(self):
    return CPPCollisionPolygon3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CollisionPolygon3D.__new__(CollisionPolygon3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CollisionPolygon3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CollisionPolygon3D.construct_without_init()
    cls._ptr = CPPCollisionPolygon3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CollisionPolygon3D.construct_without_init()
    cls._ptr = CPPCollisionPolygon3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def depth(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth()
    return _ret
  @depth.setter
  def depth(self,  value:'float'):
    self.set_depth(value)
  @property
  def disabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_disabled()
    return _ret
  @disabled.setter
  def disabled(self,  value:'bool'):
    self.set_disabled(value)
  @property
  def polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''
    _ret = self. get_polygon()
    return _ret
  @polygon.setter
  def polygon(self,  value:'PackedVector2Array'):
    self.set_polygon(value)
  @property
  def margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_margin()
    return _ret
  @margin.setter
  def margin(self,  value:'float'):
    self.set_margin(value)
  @property
  def debug_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_debug_color()
    return _ret
  @debug_color.setter
  def debug_color(self,  value:'Color'):
    self.set_debug_color(value)
  @property
  def debug_fill(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_debug_fill()
    return _ret
  @debug_fill.setter
  def debug_fill(self,  value:'bool'):
    self.set_enable_debug_fill(value)
  @functools.native_method
  def set_depth(self, depth:'float'   ) -> None:
    r''''''

    assert isinstance(depth, (int, float)), 'depth must be int or float'

    self.py__depth = depth






    self._ptr.call_with_return(251,tuple([depth]))

  @functools.native_method
  def get_depth(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(252,tuple([]))

    return _ret


  @functools.native_method
  def set_polygon(self, polygon:'PackedVector2Array'   ) -> None:
    r''''''

    assert(not polygon is None)
    assert isinstance(polygon, PackedVector2Array), 'polygon must be PackedVector2Array'

    self.py__polygon = polygon






    self._ptr.call_with_return(253,tuple([polygon._ptr]))

  @functools.native_method
  def get_polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''




    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(254,tuple([]))

    return _ret


  @functools.native_method
  def set_disabled(self, disabled:'bool'   ) -> None:
    r''''''

    assert isinstance(disabled, bool), 'disabled must be bool'

    self.py__disabled = disabled






    self._ptr.call_with_return(255,tuple([disabled]))

  @functools.native_method
  def is_disabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(256,tuple([]))

    return _ret


  @functools.native_method
  def set_debug_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__debug_color = color






    self._ptr.call_with_return(257,tuple([color._ptr]))

  @functools.native_method
  def get_debug_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(258,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_debug_fill(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__debug_fill = enable






    self._ptr.call_with_return(259,tuple([enable]))

  @functools.native_method
  def get_enable_debug_fill(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(260,tuple([]))

    return _ret


  @functools.native_method
  def set_margin(self, margin:'float'   ) -> None:
    r''''''

    assert isinstance(margin, (int, float)), 'margin must be int or float'

    self.py__margin = margin






    self._ptr.call_with_return(261,tuple([margin]))

  @functools.native_method
  def get_margin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(262,tuple([]))

    return _ret



register_cast_function('CollisionPolygon3D', CollisionPolygon3D.cast)
register_class('CollisionPolygon3D', CollisionPolygon3D)
