# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
  import py4godot.classes.SkeletonProfileHumanoid as py4godot_skeletonprofilehumanoid 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPSkeletonProfileWrapper

class TailDirection:
  TAIL_DIRECTION_AVERAGE_CHILDREN = 0
  TAIL_DIRECTION_SPECIFIC_CHILD = 1
  TAIL_DIRECTION_END = 2


class SkeletonProfile(py4godot_resource.Resource):
  r'''
		This resource is used in `EditorScenePostImport`. Some parameters are referring to bones in `Skeleton3D`, `Skin`, `Animation`, and some other nodes are rewritten based on the parameters of `SkeletonProfile`.
		**Note:** These parameters need to be set only when creating a custom profile. In `SkeletonProfileHumanoid`, they are defined internally as read-only values.
	'''

  @staticmethod
  def constructor():
    class_ = SkeletonProfile.construct_without_init()
    class_._ptr = constructor(759,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SkeletonProfile.construct_without_init()
    class_._ptr = constructor(759,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkeletonProfileWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(759,0, ())


  def generate_wrapper(self):
    return CPPSkeletonProfileWrapper()
  def init_signals(self):
    super().init_signals()
    profile_updated_name = utils.py_string_to_string_name("profile_updated")
    self.profile_updated = signals.BuiltinSignal(self, profile_updated_name)

  @staticmethod
  def construct_without_init():
    cls = SkeletonProfile.__new__(SkeletonProfile)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SkeletonProfile'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonProfile.construct_without_init()
    cls._ptr = CPPSkeletonProfileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonProfile.construct_without_init()
    cls._ptr = CPPSkeletonProfileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def root_bone(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_root_bone()
    return _ret
  @root_bone.setter
  def root_bone(self,  value:'object'):
    self.set_root_bone(value)
  @property
  def scale_base_bone(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_scale_base_bone()
    return _ret
  @scale_base_bone.setter
  def scale_base_bone(self,  value:'object'):
    self.set_scale_base_bone(value)
  @property
  def group_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_group_size()
    return _ret
  @group_size.setter
  def group_size(self,  value:'int'):
    self.set_group_size(value)
  @property
  def bone_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_bone_size()
    return _ret
  @bone_size.setter
  def bone_size(self,  value:'int'):
    self.set_bone_size(value)
  @functools.native_method
  def set_root_bone(self, bone_name:'object'   ) -> None:
    r''''''

    assert(not bone_name is None)
    assert isinstance(bone_name, (str, StringName)), 'bone_name must be str or StringName'

    self.py__root_bone = bone_name



    assert(isinstance(bone_name, (str, StringName)))
    py_stringname_bone_name = bone_name if isinstance(bone_name, StringName) else c_utils.py_string_to_string_name(bone_name)


    self._ptr.call_with_return(77,tuple([py_stringname_bone_name._ptr]))

  @functools.native_method
  def get_root_bone(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_scale_base_bone(self, bone_name:'object'   ) -> None:
    r''''''

    assert(not bone_name is None)
    assert isinstance(bone_name, (str, StringName)), 'bone_name must be str or StringName'

    self.py__scale_base_bone = bone_name



    assert(isinstance(bone_name, (str, StringName)))
    py_stringname_bone_name = bone_name if isinstance(bone_name, StringName) else c_utils.py_string_to_string_name(bone_name)


    self._ptr.call_with_return(79,tuple([py_stringname_bone_name._ptr]))

  @functools.native_method
  def get_scale_base_bone(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_group_size(self, size:'int'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__group_size = size






    self._ptr.call_with_return(81,tuple([size]))

  @functools.native_method
  def get_group_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def get_group_name(self, group_idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the name of the group at `group_idx` that will be the drawing group in the `BoneMap` editor.
			'''

    assert isinstance(group_idx, (int, float)), 'group_idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([group_idx]))
    return _ret


  @functools.native_method
  def set_group_name(self, group_idx:'int'   , group_name:'object'   ) -> None:
    r'''
				Sets the name of the group at `group_idx` that will be the drawing group in the `BoneMap` editor.
			'''

    assert isinstance(group_idx, (int, float)), 'group_idx must be int or float'
    assert(not group_name is None)
    assert isinstance(group_name, (str, StringName)), 'group_name must be str or StringName'





    assert(isinstance(group_name, (str, StringName)))
    py_stringname_group_name = group_name if isinstance(group_name, StringName) else c_utils.py_string_to_string_name(group_name)

    self._ptr.call_with_return(84,tuple([group_idx, py_stringname_group_name._ptr]))

  @functools.native_method
  def get_texture(self, group_idx:'int'   ) -> typing.Any:
    r'''
				Returns the texture of the group at `group_idx` that will be the drawing group background image in the `BoneMap` editor.
			'''

    assert isinstance(group_idx, (int, float)), 'group_idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(85,tuple([group_idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture(self, group_idx:'int'   , texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r'''
				Sets the texture of the group at `group_idx` that will be the drawing group background image in the `BoneMap` editor.
			'''

    assert isinstance(group_idx, (int, float)), 'group_idx must be int or float'
    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'







    self._ptr.call_with_return(86,tuple([group_idx, texture._ptr]))

  @functools.native_method
  def set_bone_size(self, size:'int'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__bone_size = size






    self._ptr.call_with_return(87,tuple([size]))

  @functools.native_method
  def get_bone_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def find_bone(self, bone_name:'object'   ) -> typing.Union[int]:
    r'''
				Returns the bone index that matches `bone_name` as its name.
			'''

    assert(not bone_name is None)
    assert isinstance(bone_name, (str, StringName)), 'bone_name must be str or StringName'




    assert(isinstance(bone_name, (str, StringName)))
    py_stringname_bone_name = bone_name if isinstance(bone_name, StringName) else c_utils.py_string_to_string_name(bone_name)

    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([py_stringname_bone_name._ptr]))
    return _ret


  @functools.native_method
  def get_bone_name(self, bone_idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the name of the bone at `bone_idx` that will be the key name in the `BoneMap`.
				In the retargeting process, the returned bone name is the bone name of the target skeleton.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(90,tuple([bone_idx]))
    return _ret


  @functools.native_method
  def set_bone_name(self, bone_idx:'int'   , bone_name:'object'   ) -> None:
    r'''
				Sets the name of the bone at `bone_idx` that will be the key name in the `BoneMap`.
				In the retargeting process, the setting bone name is the bone name of the target skeleton.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'
    assert(not bone_name is None)
    assert isinstance(bone_name, (str, StringName)), 'bone_name must be str or StringName'





    assert(isinstance(bone_name, (str, StringName)))
    py_stringname_bone_name = bone_name if isinstance(bone_name, StringName) else c_utils.py_string_to_string_name(bone_name)

    self._ptr.call_with_return(91,tuple([bone_idx, py_stringname_bone_name._ptr]))

  @functools.native_method
  def get_bone_parent(self, bone_idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the name of the bone which is the parent to the bone at `bone_idx`. The result is empty if the bone has no parent.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(92,tuple([bone_idx]))
    return _ret


  @functools.native_method
  def set_bone_parent(self, bone_idx:'int'   , bone_parent:'object'   ) -> None:
    r'''
				Sets the bone with name `bone_parent` as the parent of the bone at `bone_idx`. If an empty string is passed, then the bone has no parent.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'
    assert(not bone_parent is None)
    assert isinstance(bone_parent, (str, StringName)), 'bone_parent must be str or StringName'





    assert(isinstance(bone_parent, (str, StringName)))
    py_stringname_bone_parent = bone_parent if isinstance(bone_parent, StringName) else c_utils.py_string_to_string_name(bone_parent)

    self._ptr.call_with_return(93,tuple([bone_idx, py_stringname_bone_parent._ptr]))

  @functools.native_method
  def get_tail_direction(self, bone_idx:'int'   ) -> typing.Union[int]:
    r'''
				Returns the tail direction of the bone at `bone_idx`.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(94,tuple([bone_idx]))
    return _ret


  @functools.native_method
  def set_tail_direction(self, bone_idx:'int'   , tail_direction:'int'  ) -> None:
    r'''
				Sets the tail direction of the bone at `bone_idx`.
				**Note:** This only specifies the method of calculation. The actual coordinates required should be stored in an external skeleton, so the calculation itself needs to be done externally.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'
    assert isinstance(tail_direction, (int, float)), 'tail_direction must be int or float'







    self._ptr.call_with_return(95,tuple([bone_idx, tail_direction]))

  @functools.native_method
  def get_bone_tail(self, bone_idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the name of the bone which is the tail of the bone at `bone_idx`.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(96,tuple([bone_idx]))
    return _ret


  @functools.native_method
  def set_bone_tail(self, bone_idx:'int'   , bone_tail:'object'   ) -> None:
    r'''
				Sets the bone with name `bone_tail` as the tail of the bone at `bone_idx`.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'
    assert(not bone_tail is None)
    assert isinstance(bone_tail, (str, StringName)), 'bone_tail must be str or StringName'





    assert(isinstance(bone_tail, (str, StringName)))
    py_stringname_bone_tail = bone_tail if isinstance(bone_tail, StringName) else c_utils.py_string_to_string_name(bone_tail)

    self._ptr.call_with_return(97,tuple([bone_idx, py_stringname_bone_tail._ptr]))

  @functools.native_method
  def get_reference_pose(self, bone_idx:'int'   ) -> typing.Union['Transform3D']:
    r'''
				Returns the reference pose transform for bone `bone_idx`.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'






    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(98,tuple([bone_idx]))
    return _ret


  @functools.native_method
  def set_reference_pose(self, bone_idx:'int'   , bone_name:'Transform3D'   ) -> None:
    r'''
				Sets the reference pose transform for bone `bone_idx`.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'
    assert(not bone_name is None)
    assert isinstance(bone_name, Transform3D), 'bone_name must be Transform3D'







    self._ptr.call_with_return(99,tuple([bone_idx, bone_name._ptr]))

  @functools.native_method
  def get_handle_offset(self, bone_idx:'int'   ) -> typing.Union['Vector2']:
    r'''
				Returns the offset of the bone at `bone_idx` that will be the button position in the `BoneMap` editor.
				This is the offset with origin at the top left corner of the square.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'






    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(100,tuple([bone_idx]))
    return _ret


  @functools.native_method
  def set_handle_offset(self, bone_idx:'int'   , handle_offset:'Vector2'   ) -> None:
    r'''
				Sets the offset of the bone at `bone_idx` that will be the button position in the `BoneMap` editor.
				This is the offset with origin at the top left corner of the square.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'
    assert(not handle_offset is None)
    assert isinstance(handle_offset, Vector2), 'handle_offset must be Vector2'







    self._ptr.call_with_return(101,tuple([bone_idx, handle_offset._ptr]))

  @functools.native_method
  def get_group(self, bone_idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the group of the bone at `bone_idx`.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(102,tuple([bone_idx]))
    return _ret


  @functools.native_method
  def set_group(self, bone_idx:'int'   , group:'object'   ) -> None:
    r'''
				Sets the group of the bone at `bone_idx`.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'
    assert(not group is None)
    assert isinstance(group, (str, StringName)), 'group must be str or StringName'





    assert(isinstance(group, (str, StringName)))
    py_stringname_group = group if isinstance(group, StringName) else c_utils.py_string_to_string_name(group)

    self._ptr.call_with_return(103,tuple([bone_idx, py_stringname_group._ptr]))

  @functools.native_method
  def is_required(self, bone_idx:'int'   ) -> typing.Union[bool]:
    r'''
				Returns whether the bone at `bone_idx` is required for retargeting.
				This value is used by the bone map editor. If this method returns `true`, and no bone is assigned, the handle color will be red on the bone map editor.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([bone_idx]))
    return _ret


  @functools.native_method
  def set_required(self, bone_idx:'int'   , required:'bool'   ) -> None:
    r'''
				Sets the required status for bone `bone_idx` to `required`.
			'''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'
    assert isinstance(required, bool), 'required must be bool'







    self._ptr.call_with_return(105,tuple([bone_idx, required]))


register_cast_function('SkeletonProfile', SkeletonProfile.cast)
register_class('SkeletonProfile', SkeletonProfile)
