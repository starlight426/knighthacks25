# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRAPIExtension as py4godot_openxrapiextension 
  import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
import py4godot.classes.Object as py4godot_object 
import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
from py4godot.wrappers.wrappers import CPPOpenXRExtensionWrapperWrapper


class OpenXRExtensionWrapper(py4godot_object.Object):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRExtensionWrapper.construct_without_init()
    class_._ptr = constructor(544,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRExtensionWrapper.construct_without_init()
    class_._ptr = constructor(544,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRExtensionWrapperWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(544,0, ())


  def generate_wrapper(self):
    return CPPOpenXRExtensionWrapperWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRExtensionWrapper.__new__(OpenXRExtensionWrapper)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRExtensionWrapper'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRExtensionWrapper.construct_without_init()
    cls._ptr = CPPOpenXRExtensionWrapperWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRExtensionWrapper.construct_without_init()
    cls._ptr = CPPOpenXRExtensionWrapperWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_requested_extensions(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(49,tuple([]))
    return _ret


  @functools.native_method
  def _get_composition_layer_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(50,tuple([]))
    return _ret


  @functools.native_method
  def _get_composition_layer(self, index:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(51,tuple([index]))
    return _ret


  @functools.native_method
  def _get_composition_layer_order(self, index:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(52,tuple([index]))
    return _ret


  @functools.native_method
  def _get_suggested_tracker_names(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def _on_register_metadata(self) -> None:
    r''''''




    self._ptr.call_with_return(54,tuple([]))

  @functools.native_method
  def _on_before_instance_created(self) -> None:
    r''''''




    self._ptr.call_with_return(55,tuple([]))

  @functools.native_method
  def _on_instance_created(self, instance:'int'   ) -> None:
    r''''''

    assert isinstance(instance, (int, float)), 'instance must be int or float'






    self._ptr.call_with_return(56,tuple([instance]))

  @functools.native_method
  def _on_instance_destroyed(self) -> None:
    r''''''




    self._ptr.call_with_return(57,tuple([]))

  @functools.native_method
  def _on_session_created(self, session:'int'   ) -> None:
    r''''''

    assert isinstance(session, (int, float)), 'session must be int or float'






    self._ptr.call_with_return(58,tuple([session]))

  @functools.native_method
  def _on_process(self) -> None:
    r''''''




    self._ptr.call_with_return(59,tuple([]))

  @functools.native_method
  def _on_sync_actions(self) -> None:
    r''''''




    self._ptr.call_with_return(60,tuple([]))

  @functools.native_method
  def _on_pre_render(self) -> None:
    r''''''




    self._ptr.call_with_return(61,tuple([]))

  @functools.native_method
  def _on_main_swapchains_created(self) -> None:
    r''''''




    self._ptr.call_with_return(62,tuple([]))

  @functools.native_method
  def _on_pre_draw_viewport(self, viewport:'RID'   ) -> None:
    r''''''

    assert(not viewport is None)
    assert isinstance(viewport, RID), 'viewport must be RID'






    self._ptr.call_with_return(63,tuple([viewport._ptr]))

  @functools.native_method
  def _on_post_draw_viewport(self, viewport:'RID'   ) -> None:
    r''''''

    assert(not viewport is None)
    assert isinstance(viewport, RID), 'viewport must be RID'






    self._ptr.call_with_return(64,tuple([viewport._ptr]))

  @functools.native_method
  def _on_session_destroyed(self) -> None:
    r''''''




    self._ptr.call_with_return(65,tuple([]))

  @functools.native_method
  def _on_state_idle(self) -> None:
    r''''''




    self._ptr.call_with_return(66,tuple([]))

  @functools.native_method
  def _on_state_ready(self) -> None:
    r''''''




    self._ptr.call_with_return(67,tuple([]))

  @functools.native_method
  def _on_state_synchronized(self) -> None:
    r''''''




    self._ptr.call_with_return(68,tuple([]))

  @functools.native_method
  def _on_state_visible(self) -> None:
    r''''''




    self._ptr.call_with_return(69,tuple([]))

  @functools.native_method
  def _on_state_focused(self) -> None:
    r''''''




    self._ptr.call_with_return(70,tuple([]))

  @functools.native_method
  def _on_state_stopping(self) -> None:
    r''''''




    self._ptr.call_with_return(71,tuple([]))

  @functools.native_method
  def _on_state_loss_pending(self) -> None:
    r''''''




    self._ptr.call_with_return(72,tuple([]))

  @functools.native_method
  def _on_state_exiting(self) -> None:
    r''''''




    self._ptr.call_with_return(73,tuple([]))

  @functools.native_method
  def _get_viewport_composition_layer_extension_properties(self) -> typing.Union['py4godot_dictionarytypedarray.DictionaryTypedArray']:
    r''''''




    _ret = py4godot_dictionarytypedarray.DictionaryTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(74,tuple([]))
    return _ret


  @functools.native_method
  def _get_viewport_composition_layer_extension_property_defaults(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(75,tuple([]))
    return _ret


  @functools.native_method
  def get_openxr_api(self) -> typing.Union['py4godot_openxrapiextension.OpenXRAPIExtension']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRAPIExtension
    _ret._ptr = self._ptr.call_with_return(76,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def register_extension_wrapper(self) -> None:
    r''''''




    self._ptr.call_with_return(77,tuple([]))


register_cast_function('OpenXRExtensionWrapper', OpenXRExtensionWrapper.cast)
register_class('OpenXRExtensionWrapper', OpenXRExtensionWrapper)
