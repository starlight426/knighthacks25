# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ENetPacketPeer as py4godot_enetpacketpeer 
  import py4godot.classes.ENetConnection as py4godot_enetconnection 
import py4godot.classes.MultiplayerPeer as py4godot_multiplayerpeer 
from py4godot.wrappers.wrappers import CPPENetMultiplayerPeerWrapper


class ENetMultiplayerPeer(py4godot_multiplayerpeer.MultiplayerPeer):
  r''''''

  @staticmethod
  def constructor():
    class_ = ENetMultiplayerPeer.construct_without_init()
    class_._ptr = constructor(264,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ENetMultiplayerPeer.construct_without_init()
    class_._ptr = constructor(264,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPENetMultiplayerPeerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(264,0, ())


  def generate_wrapper(self):
    return CPPENetMultiplayerPeerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ENetMultiplayerPeer.__new__(ENetMultiplayerPeer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ENetMultiplayerPeer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ENetMultiplayerPeer.construct_without_init()
    cls._ptr = CPPENetMultiplayerPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ENetMultiplayerPeer.construct_without_init()
    cls._ptr = CPPENetMultiplayerPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def host(self) -> typing.Union['py4godot_enetconnection.ENetConnection']:
    r''''''
    _ret = self. get_host()
    return _ret
  @functools.native_method
  def create_server(self, port:'int'   , max_clients:'int' =32  , max_channels:'int' =0  , in_bandwidth:'int' =0  , out_bandwidth:'int' =0  ) -> typing.Union[int]:
    r''''''

    assert isinstance(port, (int, float)), 'port must be int or float'
    assert isinstance(max_clients, (int, float)), 'max_clients must be int or float'
    assert isinstance(max_channels, (int, float)), 'max_channels must be int or float'
    assert isinstance(in_bandwidth, (int, float)), 'in_bandwidth must be int or float'
    assert isinstance(out_bandwidth, (int, float)), 'out_bandwidth must be int or float'










    _ret:int
    _ret = self._ptr.call_with_return(78,tuple([port, max_clients, max_channels, in_bandwidth, out_bandwidth]))
    return _ret


  @functools.native_method
  def create_client(self, address:'str'   , port:'int'   , channel_count:'int' =0  , in_bandwidth:'int' =0  , out_bandwidth:'int' =0  , local_port:'int' =0  ) -> typing.Union[int]:
    r''''''

    assert(not address is None)
    assert isinstance(address, (str, String)), 'address must be str or String'
    assert isinstance(port, (int, float)), 'port must be int or float'
    assert isinstance(channel_count, (int, float)), 'channel_count must be int or float'
    assert isinstance(in_bandwidth, (int, float)), 'in_bandwidth must be int or float'
    assert isinstance(out_bandwidth, (int, float)), 'out_bandwidth must be int or float'
    assert isinstance(local_port, (int, float)), 'local_port must be int or float'




    assert(isinstance(address, (str, String)))
    py_string_address = address if isinstance(address, StringName) else c_utils.py_string_to_string(address)






    _ret:int
    _ret = self._ptr.call_with_return(79,tuple([py_string_address._ptr, port, channel_count, in_bandwidth, out_bandwidth, local_port]))
    return _ret


  @functools.native_method
  def create_mesh(self, unique_id:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(unique_id, (int, float)), 'unique_id must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([unique_id]))
    return _ret


  @functools.native_method
  def add_mesh_peer(self, peer_id:'int'   , host:'py4godot_enetconnection.ENetConnection'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(peer_id, (int, float)), 'peer_id must be int or float'
    assert(not host is None)
    assert isinstance(host, get_class('ENetConnection')), 'host must be ENetConnection'







    _ret:int
    _ret = self._ptr.call_with_return(81,tuple([peer_id, host._ptr]))
    return _ret


  @functools.native_method
  def set_bind_ip(self, ip:'str'   ) -> None:
    r''''''

    assert(not ip is None)
    assert isinstance(ip, (str, String)), 'ip must be str or String'




    assert(isinstance(ip, (str, String)))
    py_string_ip = ip if isinstance(ip, StringName) else c_utils.py_string_to_string(ip)

    self._ptr.call_with_return(82,tuple([py_string_ip._ptr]))

  @functools.native_method
  def get_host(self) -> typing.Union['py4godot_enetconnection.ENetConnection']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ENetConnection
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_peer(self, id:'int'   ) -> typing.Union['py4godot_enetpacketpeer.ENetPacketPeer']:
    r''''''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ENetPacketPeer
    _ret._ptr = self._ptr.call_with_return(84,tuple([id]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('ENetMultiplayerPeer', ENetMultiplayerPeer.cast)
register_class('ENetMultiplayerPeer', ENetMultiplayerPeer)
