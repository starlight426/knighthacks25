# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ENetPacketPeer as py4godot_enetpacketpeer 
  import py4godot.classes.TLSOptions as py4godot_tlsoptions 
  import py4godot.classes.ENetPacketPeerTypedArray as py4godot_enetpacketpeertypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
import py4godot.classes.ENetPacketPeerTypedArray as py4godot_enetpacketpeertypedarray 
from py4godot.wrappers.wrappers import CPPENetConnectionWrapper

class CompressionMode:
  COMPRESS_NONE = 0
  COMPRESS_RANGE_CODER = 1
  COMPRESS_FASTLZ = 2
  COMPRESS_ZLIB = 3
  COMPRESS_ZSTD = 4
class EventType:
  EVENT_ERROR = -1
  EVENT_NONE = 0
  EVENT_CONNECT = 1
  EVENT_DISCONNECT = 2
  EVENT_RECEIVE = 3
class HostStatistic:
  HOST_TOTAL_SENT_DATA = 0
  HOST_TOTAL_SENT_PACKETS = 1
  HOST_TOTAL_RECEIVED_DATA = 2
  HOST_TOTAL_RECEIVED_PACKETS = 3


class ENetConnection(py4godot_refcounted.RefCounted):
  r''''''

  @staticmethod
  def constructor():
    class_ = ENetConnection.construct_without_init()
    class_._ptr = constructor(263,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ENetConnection.construct_without_init()
    class_._ptr = constructor(263,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPENetConnectionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(263,0, ())


  def generate_wrapper(self):
    return CPPENetConnectionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ENetConnection.__new__(ENetConnection)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ENetConnection'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ENetConnection.construct_without_init()
    cls._ptr = CPPENetConnectionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ENetConnection.construct_without_init()
    cls._ptr = CPPENetConnectionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def create_host_bound(self, bind_address:'str'   , bind_port:'int'   , max_peers:'int' =32  , max_channels:'int' =0  , in_bandwidth:'int' =0  , out_bandwidth:'int' =0  ) -> typing.Union[int]:
    r''''''

    assert(not bind_address is None)
    assert isinstance(bind_address, (str, String)), 'bind_address must be str or String'
    assert isinstance(bind_port, (int, float)), 'bind_port must be int or float'
    assert isinstance(max_peers, (int, float)), 'max_peers must be int or float'
    assert isinstance(max_channels, (int, float)), 'max_channels must be int or float'
    assert isinstance(in_bandwidth, (int, float)), 'in_bandwidth must be int or float'
    assert isinstance(out_bandwidth, (int, float)), 'out_bandwidth must be int or float'




    assert(isinstance(bind_address, (str, String)))
    py_string_bind_address = bind_address if isinstance(bind_address, StringName) else c_utils.py_string_to_string(bind_address)






    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([py_string_bind_address._ptr, bind_port, max_peers, max_channels, in_bandwidth, out_bandwidth]))
    return _ret


  @functools.native_method
  def create_host(self, max_peers:'int' =32  , max_channels:'int' =0  , in_bandwidth:'int' =0  , out_bandwidth:'int' =0  ) -> typing.Union[int]:
    r''''''

    assert isinstance(max_peers, (int, float)), 'max_peers must be int or float'
    assert isinstance(max_channels, (int, float)), 'max_channels must be int or float'
    assert isinstance(in_bandwidth, (int, float)), 'in_bandwidth must be int or float'
    assert isinstance(out_bandwidth, (int, float)), 'out_bandwidth must be int or float'









    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([max_peers, max_channels, in_bandwidth, out_bandwidth]))
    return _ret


  @functools.native_method
  def destroy(self) -> None:
    r''''''




    self._ptr.call_with_return(55,tuple([]))

  @functools.native_method
  def connect_to_host(self, address:'str'   , port:'int'   , channels:'int' =0  , data:'int' =0  ) -> typing.Union['py4godot_enetpacketpeer.ENetPacketPeer']:
    r''''''

    assert(not address is None)
    assert isinstance(address, (str, String)), 'address must be str or String'
    assert isinstance(port, (int, float)), 'port must be int or float'
    assert isinstance(channels, (int, float)), 'channels must be int or float'
    assert isinstance(data, (int, float)), 'data must be int or float'




    assert(isinstance(address, (str, String)))
    py_string_address = address if isinstance(address, StringName) else c_utils.py_string_to_string(address)




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ENetPacketPeer
    _ret._ptr = self._ptr.call_with_return(56,tuple([py_string_address._ptr, port, channels, data]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def service(self, timeout:'int' =0  ) -> typing.Union['Array']:
    r''''''

    assert isinstance(timeout, (int, float)), 'timeout must be int or float'






    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(57,tuple([timeout]))
    return _ret


  @functools.native_method
  def flush(self) -> None:
    r''''''




    self._ptr.call_with_return(58,tuple([]))

  @functools.native_method
  def bandwidth_limit(self, in_bandwidth:'int' =0  , out_bandwidth:'int' =0  ) -> None:
    r''''''

    assert isinstance(in_bandwidth, (int, float)), 'in_bandwidth must be int or float'
    assert isinstance(out_bandwidth, (int, float)), 'out_bandwidth must be int or float'







    self._ptr.call_with_return(59,tuple([in_bandwidth, out_bandwidth]))

  @functools.native_method
  def channel_limit(self, limit:'int'   ) -> None:
    r''''''

    assert isinstance(limit, (int, float)), 'limit must be int or float'






    self._ptr.call_with_return(60,tuple([limit]))

  @functools.native_method
  def broadcast(self, channel:'int'   , packet:'PackedByteArray'   , flags:'int'   ) -> None:
    r''''''

    assert isinstance(channel, (int, float)), 'channel must be int or float'
    assert(not packet is None)
    assert isinstance(packet, PackedByteArray), 'packet must be PackedByteArray'
    assert isinstance(flags, (int, float)), 'flags must be int or float'








    self._ptr.call_with_return(61,tuple([channel, packet._ptr, flags]))

  @functools.native_method
  def compress(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'






    self._ptr.call_with_return(62,tuple([mode]))

  @functools.native_method
  def dtls_server_setup(self, server_options:'py4godot_tlsoptions.TLSOptions'   ) -> typing.Union[int]:
    r''''''

    assert(not server_options is None)
    assert isinstance(server_options, get_class('TLSOptions')), 'server_options must be TLSOptions'






    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([server_options._ptr]))
    return _ret


  @functools.native_method
  def dtls_client_setup(self, hostname:'str'   , client_options:'py4godot_tlsoptions.TLSOptions' = None  ) -> typing.Union[int]:
    r''''''
    if client_options is None:
      client_options = c_utils.empty_object
    if client_options is None:
      client_options = c_utils.empty_object

    assert(not hostname is None)
    assert isinstance(hostname, (str, String)), 'hostname must be str or String'




    assert(isinstance(hostname, (str, String)))
    py_string_hostname = hostname if isinstance(hostname, StringName) else c_utils.py_string_to_string(hostname)


    _ret:int
    _ret = self._ptr.call_with_return(64,tuple([py_string_hostname._ptr, client_options._ptr]))
    return _ret


  @functools.native_method
  def refuse_new_connections(self, refuse:'bool'   ) -> None:
    r''''''

    assert isinstance(refuse, bool), 'refuse must be bool'






    self._ptr.call_with_return(65,tuple([refuse]))

  @functools.native_method
  def pop_statistic(self, statistic:'int'  ) -> typing.Union[float]:
    r''''''

    assert isinstance(statistic, (int, float)), 'statistic must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([statistic]))
    return _ret


  @functools.native_method
  def get_max_channels(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(67,tuple([]))
    return _ret


  @functools.native_method
  def get_local_port(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([]))
    return _ret


  @functools.native_method
  def get_peers(self) -> typing.Union['py4godot_enetpacketpeertypedarray.ENetPacketPeerTypedArray']:
    r''''''




    _ret = py4godot_enetpacketpeertypedarray.ENetPacketPeerTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(69,tuple([]))
    return _ret


  @functools.native_method
  def socket_send(self, destination_address:'str'   , destination_port:'int'   , packet:'PackedByteArray'   ) -> None:
    r''''''

    assert(not destination_address is None)
    assert isinstance(destination_address, (str, String)), 'destination_address must be str or String'
    assert isinstance(destination_port, (int, float)), 'destination_port must be int or float'
    assert(not packet is None)
    assert isinstance(packet, PackedByteArray), 'packet must be PackedByteArray'




    assert(isinstance(destination_address, (str, String)))
    py_string_destination_address = destination_address if isinstance(destination_address, StringName) else c_utils.py_string_to_string(destination_address)



    self._ptr.call_with_return(70,tuple([py_string_destination_address._ptr, destination_port, packet._ptr]))


register_cast_function('ENetConnection', ENetConnection.cast)
register_class('ENetConnection', ENetConnection)
