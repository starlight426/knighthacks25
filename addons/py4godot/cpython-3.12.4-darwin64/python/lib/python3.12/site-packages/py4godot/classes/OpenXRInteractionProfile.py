# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRIPBinding as py4godot_openxripbinding 
  import py4godot.classes.OpenXRDpadBindingModifier as py4godot_openxrdpadbindingmodifier 
  import py4godot.classes.OpenXRIPBindingModifier as py4godot_openxripbindingmodifier 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPOpenXRInteractionProfileWrapper


class OpenXRInteractionProfile(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRInteractionProfile.construct_without_init()
    class_._ptr = constructor(553,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRInteractionProfile.construct_without_init()
    class_._ptr = constructor(553,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRInteractionProfileWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(553,0, ())


  def generate_wrapper(self):
    return CPPOpenXRInteractionProfileWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRInteractionProfile.__new__(OpenXRInteractionProfile)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRInteractionProfile'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRInteractionProfile.construct_without_init()
    cls._ptr = CPPOpenXRInteractionProfileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRInteractionProfile.construct_without_init()
    cls._ptr = CPPOpenXRInteractionProfileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def interaction_profile_path(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_interaction_profile_path()
    return _ret
  @interaction_profile_path.setter
  def interaction_profile_path(self,  value:'str'):
    self.set_interaction_profile_path(value)
  @property
  def bindings(self) -> typing.Union['py4godot_openxripbinding.OpenXRIPBinding']:
    r''''''
    _ret = self. get_bindings()
    return _ret
  @bindings.setter
  def bindings(self,  value:'py4godot_object.Object'):
    self.set_bindings(value)
  @property
  def binding_modifiers(self) -> typing.Union['py4godot_openxripbindingmodifier.OpenXRIPBindingModifier','py4godot_openxrdpadbindingmodifier.OpenXRDpadBindingModifier']:
    r''''''
    _ret = self. get_binding_modifiers()
    return _ret
  @binding_modifiers.setter
  def binding_modifiers(self,  value:'py4godot_object.Object'):
    self.set_binding_modifiers(value)
  @functools.native_method
  def set_interaction_profile_path(self, interaction_profile_path:'str'   ) -> None:
    r''''''

    assert(not interaction_profile_path is None)
    assert isinstance(interaction_profile_path, (str, String)), 'interaction_profile_path must be str or String'

    self.py__interaction_profile_path = interaction_profile_path



    assert(isinstance(interaction_profile_path, (str, String)))
    py_string_interaction_profile_path = interaction_profile_path if isinstance(interaction_profile_path, StringName) else c_utils.py_string_to_string(interaction_profile_path)

    py__string_interaction_profile_path = utils.py_string_to_string(interaction_profile_path)
    py__string_interaction_profile_path.shouldBeDeleted = False


    self._ptr.call_with_return(77,tuple([py__string_interaction_profile_path._ptr]))

  @functools.native_method
  def get_interaction_profile_path(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_binding_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def get_binding(self, index:'int'   ) -> typing.Union['py4godot_openxripbinding.OpenXRIPBinding']:
    r''''''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRIPBinding
    _ret._ptr = self._ptr.call_with_return(80,tuple([index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_bindings(self, bindings:'Array'   ) -> None:
    r''''''

    assert(not bindings is None)
    assert isinstance(bindings, Array), 'bindings must be Array'

    self.py__bindings = bindings






    self._ptr.call_with_return(81,tuple([bindings._ptr]))

  @functools.native_method
  def get_bindings(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def get_binding_modifier_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))
    return _ret


  @functools.native_method
  def get_binding_modifier(self, index:'int'   ) -> typing.Union['py4godot_openxripbindingmodifier.OpenXRIPBindingModifier','py4godot_openxrdpadbindingmodifier.OpenXRDpadBindingModifier']:
    r''''''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRIPBindingModifier
    _ret._ptr = self._ptr.call_with_return(84,tuple([index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_binding_modifiers(self, binding_modifiers:'Array'   ) -> None:
    r''''''

    assert(not binding_modifiers is None)
    assert isinstance(binding_modifiers, Array), 'binding_modifiers must be Array'

    self.py__binding_modifiers = binding_modifiers






    self._ptr.call_with_return(85,tuple([binding_modifiers._ptr]))

  @functools.native_method
  def get_binding_modifiers(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))

    return _ret



register_cast_function('OpenXRInteractionProfile', OpenXRInteractionProfile.cast)
register_class('OpenXRInteractionProfile', OpenXRInteractionProfile)
