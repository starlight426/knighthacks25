# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Shape3D as py4godot_shape3d 
from py4godot.wrappers.wrappers import CPPConcavePolygonShape3DWrapper


class ConcavePolygonShape3D(py4godot_shape3d.Shape3D):
  r'''
		A 3D trimesh shape, intended for use in physics. Usually used to provide a shape for a `CollisionShape3D`.
		Being just a collection of interconnected triangles, `ConcavePolygonShape3D` is the most freely configurable single 3D shape. It can be used to form polyhedra of any nature, or even shapes that don't enclose a volume. However, `ConcavePolygonShape3D` is _hollow_ even if the interconnected triangles do enclose a volume, which often makes it unsuitable for physics or detection.
		**Note:** When used for collision, `ConcavePolygonShape3D` is intended to work with static `CollisionShape3D` nodes like `StaticBody3D` and will likely not behave well for `CharacterBody3D`s or `RigidBody3D`s in a mode other than Static.
		**Warning:** Physics bodies that are small have a chance to clip through this shape when moving fast. This happens because on one frame, the physics body may be on the "outside" of the shape, and on the next frame it may be "inside" it. `ConcavePolygonShape3D` is hollow, so it won't detect a collision.
		**Performance:** Due to its complexity, `ConcavePolygonShape3D` is the slowest 3D collision shape to check collisions against. Its use should generally be limited to level geometry. For convex geometry, `ConvexPolygonShape3D` should be used. For dynamic physics bodies that need concave collision, several `ConvexPolygonShape3D`s can be used to represent its collision by using convex decomposition; see `ConvexPolygonShape3D`'s documentation for instructions.
	'''

  @staticmethod
  def constructor():
    class_ = ConcavePolygonShape3D.construct_without_init()
    class_._ptr = constructor(234,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ConcavePolygonShape3D.construct_without_init()
    class_._ptr = constructor(234,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPConcavePolygonShape3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(234,0, ())


  def generate_wrapper(self):
    return CPPConcavePolygonShape3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ConcavePolygonShape3D.__new__(ConcavePolygonShape3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ConcavePolygonShape3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConcavePolygonShape3D.construct_without_init()
    cls._ptr = CPPConcavePolygonShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConcavePolygonShape3D.construct_without_init()
    cls._ptr = CPPConcavePolygonShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def data(self) -> typing.Union['PackedVector3Array']:
    r''''''
    _ret = self. get_faces()
    return _ret
  @data.setter
  def data(self,  value:'PackedVector3Array'):
    self.set_faces(value)
  @property
  def backface_collision(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_backface_collision_enabled()
    return _ret
  @backface_collision.setter
  def backface_collision(self,  value:'bool'):
    self.set_backface_collision_enabled(value)
  @functools.native_method
  def set_faces(self, faces:'PackedVector3Array'   ) -> None:
    r'''
				Sets the faces of the trimesh shape from an array of vertices. The `faces` array should be composed of triples such that each triple of vertices defines a triangle.
			'''

    assert(not faces is None)
    assert isinstance(faces, PackedVector3Array), 'faces must be PackedVector3Array'

    self.py__data = faces






    self._ptr.call_with_return(82,tuple([faces._ptr]))

  @functools.native_method
  def get_faces(self) -> typing.Union['PackedVector3Array']:
    r'''
				Returns the faces of the trimesh shape as an array of vertices. The array (of length divisible by three) is naturally divided into triples; each triple of vertices defines a triangle.
			'''




    _ret = PackedVector3Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_backface_collision_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__backface_collision = enabled






    self._ptr.call_with_return(84,tuple([enabled]))

  @functools.native_method
  def is_backface_collision_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret



register_cast_function('ConcavePolygonShape3D', ConcavePolygonShape3D.cast)
register_class('ConcavePolygonShape3D', ConcavePolygonShape3D)
