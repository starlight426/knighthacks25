# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.InputEventMouse as py4godot_inputeventmouse 
from py4godot.wrappers.wrappers import CPPInputEventMouseButtonWrapper


class InputEventMouseButton(py4godot_inputeventmouse.InputEventMouse):
  r'''
		Stores information about mouse click events. See `Node._input`.
		**Note:** On Wear OS devices, rotary input is mapped to `constant MOUSE_BUTTON_WHEEL_UP` and `constant MOUSE_BUTTON_WHEEL_DOWN`. This can be changed to `constant MOUSE_BUTTON_WHEEL_LEFT` and `constant MOUSE_BUTTON_WHEEL_RIGHT` with the `ProjectSettings.input_devices/pointing/android/rotary_input_scroll_axis` setting.
	'''

  @staticmethod
  def constructor():
    class_ = InputEventMouseButton.construct_without_init()
    class_._ptr = constructor(423,0, ())
    return class_
  @staticmethod
  def new():
    class_ = InputEventMouseButton.construct_without_init()
    class_._ptr = constructor(423,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPInputEventMouseButtonWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(423,0, ())


  def generate_wrapper(self):
    return CPPInputEventMouseButtonWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = InputEventMouseButton.__new__(InputEventMouseButton)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'InputEventMouseButton'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventMouseButton.construct_without_init()
    cls._ptr = CPPInputEventMouseButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventMouseButton.construct_without_init()
    cls._ptr = CPPInputEventMouseButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def factor(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_factor()
    return _ret
  @factor.setter
  def factor(self,  value:'float'):
    self.set_factor(value)
  @property
  def button_index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_button_index()
    return _ret
  @button_index.setter
  def button_index(self,  value:'int'):
    self.set_button_index(value)
  @property
  def canceled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_canceled()
    return _ret
  @canceled.setter
  def canceled(self,  value:'bool'):
    self.set_canceled(value)
  @property
  def pressed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_pressed()
    return _ret
  @pressed.setter
  def pressed(self,  value:'bool'):
    self.set_pressed(value)
  @property
  def double_click(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_double_click()
    return _ret
  @double_click.setter
  def double_click(self,  value:'bool'):
    self.set_double_click(value)
  @functools.native_method
  def set_factor(self, factor:'float'   ) -> None:
    r''''''

    assert isinstance(factor, (int, float)), 'factor must be int or float'

    self.py__factor = factor






    self._ptr.call_with_return(112,tuple([factor]))

  @functools.native_method
  def get_factor(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(113,tuple([]))

    return _ret


  @functools.native_method
  def set_button_index(self, button_index:'int'  ) -> None:
    r''''''

    assert isinstance(button_index, (int, float)), 'button_index must be int or float'

    self.py__button_index = button_index






    self._ptr.call_with_return(114,tuple([button_index]))

  @functools.native_method
  def get_button_index(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(115,tuple([]))

    return _ret


  @functools.native_method
  def set_pressed(self, pressed:'bool'   ) -> None:
    r''''''

    assert isinstance(pressed, bool), 'pressed must be bool'

    self.py__pressed = pressed






    self._ptr.call_with_return(116,tuple([pressed]))

  @functools.native_method
  def set_canceled(self, canceled:'bool'   ) -> None:
    r''''''

    assert isinstance(canceled, bool), 'canceled must be bool'

    self.py__canceled = canceled






    self._ptr.call_with_return(117,tuple([canceled]))

  @functools.native_method
  def set_double_click(self, double_click:'bool'   ) -> None:
    r''''''

    assert isinstance(double_click, bool), 'double_click must be bool'

    self.py__double_click = double_click






    self._ptr.call_with_return(118,tuple([double_click]))

  @functools.native_method
  def is_double_click(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(119,tuple([]))

    return _ret



register_cast_function('InputEventMouseButton', InputEventMouseButton.cast)
register_class('InputEventMouseButton', InputEventMouseButton)
