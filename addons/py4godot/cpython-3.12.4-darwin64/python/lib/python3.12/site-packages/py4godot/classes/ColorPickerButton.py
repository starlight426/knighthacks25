# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.PopupPanel as py4godot_popuppanel 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
import py4godot.classes.Button as py4godot_button 
from py4godot.wrappers.wrappers import CPPColorPickerButtonWrapper


class ColorPickerButton(py4godot_button.Button):
  r'''
		Encapsulates a `ColorPicker`, making it accessible by pressing a button. Pressing the button will toggle the `ColorPicker`'s visibility.
		See also `BaseButton` which contains common properties and methods associated with this node.
		**Note:** By default, the button may not be wide enough for the color preview swatch to be visible. Make sure to set `Control.custom_minimum_size` to a big enough value to give the button enough space.
	'''

  @staticmethod
  def constructor():
    class_ = ColorPickerButton.construct_without_init()
    class_._ptr = constructor(223,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ColorPickerButton.construct_without_init()
    class_._ptr = constructor(223,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPColorPickerButtonWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(223,0, ())


  def generate_wrapper(self):
    return CPPColorPickerButtonWrapper()
  def init_signals(self):
    super().init_signals()
    color_changed_name = utils.py_string_to_string_name("color_changed")
    self.color_changed = signals.BuiltinSignal(self, color_changed_name)
    popup_closed_name = utils.py_string_to_string_name("popup_closed")
    self.popup_closed = signals.BuiltinSignal(self, popup_closed_name)
    picker_created_name = utils.py_string_to_string_name("picker_created")
    self.picker_created = signals.BuiltinSignal(self, picker_created_name)

  @staticmethod
  def construct_without_init():
    cls = ColorPickerButton.__new__(ColorPickerButton)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ColorPickerButton'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ColorPickerButton.construct_without_init()
    cls._ptr = CPPColorPickerButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ColorPickerButton.construct_without_init()
    cls._ptr = CPPColorPickerButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_pick_color()
    return _ret
  @color.setter
  def color(self,  value:'Color'):
    self.set_pick_color(value)
  @property
  def edit_alpha(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_editing_alpha()
    return _ret
  @edit_alpha.setter
  def edit_alpha(self,  value:'bool'):
    self.set_edit_alpha(value)
  @property
  def edit_intensity(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_editing_intensity()
    return _ret
  @edit_intensity.setter
  def edit_intensity(self,  value:'bool'):
    self.set_edit_intensity(value)
  @functools.native_method
  def set_pick_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__color = color






    self._ptr.call_with_return(484,tuple([color._ptr]))

  @functools.native_method
  def get_pick_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(485,tuple([]))

    return _ret


  @functools.native_method
  def get_picker(self) -> typing.Union['py4godot_colorpicker.ColorPicker']:
    r'''
				Returns the `ColorPicker` that this node toggles.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ColorPicker
    _ret._ptr = self._ptr.call_with_return(486,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_popup(self) -> typing.Union['py4godot_popuppanel.PopupPanel']:
    r'''
				Returns the control's `PopupPanel` which allows you to connect to popup signals. This allows you to handle events when the ColorPicker is shown or hidden.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `Window.visible` property.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PopupPanel
    _ret._ptr = self._ptr.call_with_return(487,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_edit_alpha(self, show:'bool'   ) -> None:
    r''''''

    assert isinstance(show, bool), 'show must be bool'

    self.py__edit_alpha = show






    self._ptr.call_with_return(488,tuple([show]))

  @functools.native_method
  def is_editing_alpha(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(489,tuple([]))

    return _ret


  @functools.native_method
  def set_edit_intensity(self, show:'bool'   ) -> None:
    r''''''

    assert isinstance(show, bool), 'show must be bool'

    self.py__edit_intensity = show






    self._ptr.call_with_return(490,tuple([show]))

  @functools.native_method
  def is_editing_intensity(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(491,tuple([]))

    return _ret



register_cast_function('ColorPickerButton', ColorPickerButton.cast)
register_class('ColorPickerButton', ColorPickerButton)
