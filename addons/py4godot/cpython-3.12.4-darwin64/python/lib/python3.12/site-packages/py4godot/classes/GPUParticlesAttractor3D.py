# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
from py4godot.wrappers.wrappers import CPPGPUParticlesAttractor3DWrapper


class GPUParticlesAttractor3D(py4godot_visualinstance3d.VisualInstance3D):
  r'''
		Particle attractors can be used to attract particles towards the attractor's origin, or to push them away from the attractor's origin.
		Particle attractors work in real-time and can be moved, rotated and scaled during gameplay. Unlike collision shapes, non-uniform scaling of attractors is also supported.
		Attractors can be temporarily disabled by hiding them, or by setting their `strength` to `0.0`.
		**Note:** Particle attractors only affect `GPUParticles3D`, not `CPUParticles3D`.
	'''

  @staticmethod
  def constructor():
    class_ = GPUParticlesAttractor3D.construct_without_init()
    class_._ptr = constructor(366,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GPUParticlesAttractor3D.construct_without_init()
    class_._ptr = constructor(366,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGPUParticlesAttractor3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(366,0, ())


  def generate_wrapper(self):
    return CPPGPUParticlesAttractor3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GPUParticlesAttractor3D.__new__(GPUParticlesAttractor3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GPUParticlesAttractor3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GPUParticlesAttractor3D.construct_without_init()
    cls._ptr = CPPGPUParticlesAttractor3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GPUParticlesAttractor3D.construct_without_init()
    cls._ptr = CPPGPUParticlesAttractor3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def strength(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_strength()
    return _ret
  @strength.setter
  def strength(self,  value:'float'):
    self.set_strength(value)
  @property
  def attenuation(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_attenuation()
    return _ret
  @attenuation.setter
  def attenuation(self,  value:'float'):
    self.set_attenuation(value)
  @property
  def directionality(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_directionality()
    return _ret
  @directionality.setter
  def directionality(self,  value:'float'):
    self.set_directionality(value)
  @property
  def cull_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_cull_mask()
    return _ret
  @cull_mask.setter
  def cull_mask(self,  value:'int'):
    self.set_cull_mask(value)
  @functools.native_method
  def set_cull_mask(self, mask:'int'   ) -> None:
    r''''''

    assert isinstance(mask, (int, float)), 'mask must be int or float'

    self.py__cull_mask = mask






    self._ptr.call_with_return(264,tuple([mask]))

  @functools.native_method
  def get_cull_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(265,tuple([]))

    return _ret


  @functools.native_method
  def set_strength(self, strength:'float'   ) -> None:
    r''''''

    assert isinstance(strength, (int, float)), 'strength must be int or float'

    self.py__strength = strength






    self._ptr.call_with_return(266,tuple([strength]))

  @functools.native_method
  def get_strength(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(267,tuple([]))

    return _ret


  @functools.native_method
  def set_attenuation(self, attenuation:'float'   ) -> None:
    r''''''

    assert isinstance(attenuation, (int, float)), 'attenuation must be int or float'

    self.py__attenuation = attenuation






    self._ptr.call_with_return(268,tuple([attenuation]))

  @functools.native_method
  def get_attenuation(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(269,tuple([]))

    return _ret


  @functools.native_method
  def set_directionality(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__directionality = amount






    self._ptr.call_with_return(270,tuple([amount]))

  @functools.native_method
  def get_directionality(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(271,tuple([]))

    return _ret



register_cast_function('GPUParticlesAttractor3D', GPUParticlesAttractor3D.cast)
register_class('GPUParticlesAttractor3D', GPUParticlesAttractor3D)
