# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPPathFollow3DWrapper

class RotationMode:
  ROTATION_NONE = 0
  ROTATION_Y = 1
  ROTATION_XY = 2
  ROTATION_XYZ = 3
  ROTATION_ORIENTED = 4


class PathFollow3D(py4godot_node3d.Node3D):
  r'''
		This node takes its parent `Path3D`, and returns the coordinates of a point within it, given a distance from the first vertex.
		It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting the `progress` in this node.
	'''

  @staticmethod
  def constructor():
    class_ = PathFollow3D.construct_without_init()
    class_._ptr = constructor(583,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PathFollow3D.construct_without_init()
    class_._ptr = constructor(583,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPathFollow3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(583,0, ())


  def generate_wrapper(self):
    return CPPPathFollow3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PathFollow3D.__new__(PathFollow3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PathFollow3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PathFollow3D.construct_without_init()
    cls._ptr = CPPPathFollow3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PathFollow3D.construct_without_init()
    cls._ptr = CPPPathFollow3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def progress(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_progress()
    return _ret
  @progress.setter
  def progress(self,  value:'float'):
    self.set_progress(value)
  @property
  def progress_ratio(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_progress_ratio()
    return _ret
  @progress_ratio.setter
  def progress_ratio(self,  value:'float'):
    self.set_progress_ratio(value)
  @property
  def h_offset(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_h_offset()
    return _ret
  @h_offset.setter
  def h_offset(self,  value:'float'):
    self.set_h_offset(value)
  @property
  def v_offset(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_v_offset()
    return _ret
  @v_offset.setter
  def v_offset(self,  value:'float'):
    self.set_v_offset(value)
  @property
  def rotation_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_rotation_mode()
    return _ret
  @rotation_mode.setter
  def rotation_mode(self,  value:'int'):
    self.set_rotation_mode(value)
  @property
  def use_model_front(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_model_front()
    return _ret
  @use_model_front.setter
  def use_model_front(self,  value:'bool'):
    self.set_use_model_front(value)
  @property
  def cubic_interp(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_cubic_interpolation()
    return _ret
  @cubic_interp.setter
  def cubic_interp(self,  value:'bool'):
    self.set_cubic_interpolation(value)
  @property
  def loop(self) -> typing.Union[bool]:
    r''''''
    _ret = self. has_loop()
    return _ret
  @loop.setter
  def loop(self,  value:'bool'):
    self.set_loop(value)
  @property
  def tilt_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_tilt_enabled()
    return _ret
  @tilt_enabled.setter
  def tilt_enabled(self,  value:'bool'):
    self.set_tilt_enabled(value)
  @functools.native_method
  def set_progress(self, progress:'float'   ) -> None:
    r''''''

    assert isinstance(progress, (int, float)), 'progress must be int or float'

    self.py__progress = progress






    self._ptr.call_with_return(251,tuple([progress]))

  @functools.native_method
  def get_progress(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(252,tuple([]))

    return _ret


  @functools.native_method
  def set_h_offset(self, h_offset:'float'   ) -> None:
    r''''''

    assert isinstance(h_offset, (int, float)), 'h_offset must be int or float'

    self.py__h_offset = h_offset






    self._ptr.call_with_return(253,tuple([h_offset]))

  @functools.native_method
  def get_h_offset(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(254,tuple([]))

    return _ret


  @functools.native_method
  def set_v_offset(self, v_offset:'float'   ) -> None:
    r''''''

    assert isinstance(v_offset, (int, float)), 'v_offset must be int or float'

    self.py__v_offset = v_offset






    self._ptr.call_with_return(255,tuple([v_offset]))

  @functools.native_method
  def get_v_offset(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(256,tuple([]))

    return _ret


  @functools.native_method
  def set_progress_ratio(self, ratio:'float'   ) -> None:
    r''''''

    assert isinstance(ratio, (int, float)), 'ratio must be int or float'

    self.py__progress_ratio = ratio






    self._ptr.call_with_return(257,tuple([ratio]))

  @functools.native_method
  def get_progress_ratio(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(258,tuple([]))

    return _ret


  @functools.native_method
  def set_rotation_mode(self, rotation_mode:'int'  ) -> None:
    r''''''

    assert isinstance(rotation_mode, (int, float)), 'rotation_mode must be int or float'

    self.py__rotation_mode = rotation_mode






    self._ptr.call_with_return(259,tuple([rotation_mode]))

  @functools.native_method
  def get_rotation_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(260,tuple([]))

    return _ret


  @functools.native_method
  def set_cubic_interpolation(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__cubic_interp = enabled






    self._ptr.call_with_return(261,tuple([enabled]))

  @functools.native_method
  def get_cubic_interpolation(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(262,tuple([]))

    return _ret


  @functools.native_method
  def set_use_model_front(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__use_model_front = enabled






    self._ptr.call_with_return(263,tuple([enabled]))

  @functools.native_method
  def is_using_model_front(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(264,tuple([]))

    return _ret


  @functools.native_method
  def set_loop(self, loop:'bool'   ) -> None:
    r''''''

    assert isinstance(loop, bool), 'loop must be bool'

    self.py__loop = loop






    self._ptr.call_with_return(265,tuple([loop]))

  @functools.native_method
  def has_loop(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(266,tuple([]))

    return _ret


  @functools.native_method
  def set_tilt_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__tilt_enabled = enabled






    self._ptr.call_with_return(267,tuple([enabled]))

  @functools.native_method
  def is_tilt_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(268,tuple([]))

    return _ret


  @staticmethod
  def correct_posture(transform:'Transform3D'   , rotation_mode:'int'  ) -> typing.Union['Transform3D']:
    r'''
				Correct the `transform`. `rotation_mode` implicitly specifies how posture (forward, up and sideway direction) is calculated.
			'''

    assert(not transform is None)
    assert isinstance(transform, Transform3D), 'transform must be Transform3D'
    assert isinstance(rotation_mode, (int, float)), 'rotation_mode must be int or float'







    _ret = Transform3D.construct_without_init()
    _ret._ptr = static_method(583,2,tuple([transform._ptr, rotation_mode]))
    return _ret



register_cast_function('PathFollow3D', PathFollow3D.cast)
register_class('PathFollow3D', PathFollow3D)
