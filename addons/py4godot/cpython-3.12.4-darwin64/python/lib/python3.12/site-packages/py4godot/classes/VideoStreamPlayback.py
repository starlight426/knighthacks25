# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPVideoStreamPlaybackWrapper


class VideoStreamPlayback(py4godot_resource.Resource):
  r'''
		This class is intended to be overridden by video decoder extensions with custom implementations of `VideoStream`.
	'''

  @staticmethod
  def constructor():
    class_ = VideoStreamPlayback.construct_without_init()
    class_._ptr = constructor(869,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VideoStreamPlayback.construct_without_init()
    class_._ptr = constructor(869,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVideoStreamPlaybackWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(869,0, ())


  def generate_wrapper(self):
    return CPPVideoStreamPlaybackWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VideoStreamPlayback.__new__(VideoStreamPlayback)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VideoStreamPlayback'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VideoStreamPlayback.construct_without_init()
    cls._ptr = CPPVideoStreamPlaybackWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VideoStreamPlayback.construct_without_init()
    cls._ptr = CPPVideoStreamPlaybackWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _stop(self) -> None:
    r'''
				Stops playback. May be called multiple times before `_play`, or in response to `VideoStreamPlayer.stop`. `_is_playing` should return `false` once stopped.
			'''




    self._ptr.call_with_return(77,tuple([]))

  @functools.native_method
  def _play(self) -> None:
    r'''
				Called in response to `VideoStreamPlayer.autoplay` or `VideoStreamPlayer.play`. Note that manual playback may also invoke `_stop` multiple times before this method is called. `_is_playing` should return `true` once playing.
			'''




    self._ptr.call_with_return(78,tuple([]))

  @functools.native_method
  def _is_playing(self) -> typing.Union[bool]:
    r'''
				Returns the playback state, as determined by calls to `_play` and `_stop`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def _set_paused(self, paused:'bool'   ) -> None:
    r'''
				Set the paused status of video playback. `_is_paused` must return `paused`. Called in response to the `VideoStreamPlayer.paused` setter.
			'''

    assert isinstance(paused, bool), 'paused must be bool'






    self._ptr.call_with_return(80,tuple([paused]))

  @functools.native_method
  def _is_paused(self) -> typing.Union[bool]:
    r'''
				Returns the paused status, as set by `_set_paused`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))
    return _ret


  @functools.native_method
  def _get_length(self) -> typing.Union[float]:
    r'''
				Returns the video duration in seconds, if known, or 0 if unknown.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))
    return _ret


  @functools.native_method
  def _get_playback_position(self) -> typing.Union[float]:
    r'''
				Return the current playback timestamp. Called in response to the `VideoStreamPlayer.stream_position` getter.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))
    return _ret


  @functools.native_method
  def _seek(self, time:'float'   ) -> None:
    r'''
				Seeks to `time` seconds. Called in response to the `VideoStreamPlayer.stream_position` setter.
			'''

    assert isinstance(time, (int, float)), 'time must be int or float'






    self._ptr.call_with_return(84,tuple([time]))

  @functools.native_method
  def _set_audio_track(self, idx:'int'   ) -> None:
    r'''
				Select the audio track `idx`. Called when playback starts, and in response to the `VideoStreamPlayer.audio_track` setter.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    self._ptr.call_with_return(85,tuple([idx]))

  @functools.native_method
  def _get_texture(self) -> typing.Any:
    r'''
				Allocates a `Texture2D` in which decoded video frames will be drawn.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _update(self, delta:'float'   ) -> None:
    r'''
				Ticks video playback for `delta` seconds. Called every frame as long as both `_is_paused` and `_is_playing` return `true`.
			'''

    assert isinstance(delta, (int, float)), 'delta must be int or float'






    self._ptr.call_with_return(87,tuple([delta]))

  @functools.native_method
  def _get_channels(self) -> typing.Union[int]:
    r'''
				Returns the number of audio channels.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))
    return _ret


  @functools.native_method
  def _get_mix_rate(self) -> typing.Union[int]:
    r'''
				Returns the audio sample rate used for mixing.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))
    return _ret


  @functools.native_method
  def mix_audio(self, num_frames:'int'   , buffer:'PackedFloat32Array' = None  , offset:'int' =0  ) -> typing.Union[int]:
    r'''
				Render `num_frames` audio frames (of `_get_channels` floats each) from `buffer`, starting from index `offset` in the array. Returns the number of audio frames rendered, or -1 on error.
			'''
    if buffer is None:
      buffer = PackedFloat32Array.new0()
    if buffer is None:
      buffer = PackedFloat32Array.new0()

    assert isinstance(num_frames, (int, float)), 'num_frames must be int or float'
    assert isinstance(offset, (int, float)), 'offset must be int or float'








    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([num_frames, buffer._ptr, offset]))
    return _ret



register_cast_function('VideoStreamPlayback', VideoStreamPlayback.cast)
register_class('VideoStreamPlayback', VideoStreamPlayback)
