# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
from py4godot.wrappers.wrappers import CPPModifierBoneTarget3DWrapper


class ModifierBoneTarget3D(py4godot_skeletonmodifier3d.SkeletonModifier3D):
  r'''
		This node selects a bone in a `Skeleton3D` and attaches to it. This means that the `ModifierBoneTarget3D` node will dynamically copy the 3D transform of the selected bone.
		The functionality is similar to `BoneAttachment3D`, but this node adopts the `SkeletonModifier3D` cycle and is intended to be used as another `SkeletonModifier3D`'s target.
	'''

  @staticmethod
  def constructor():
    class_ = ModifierBoneTarget3D.construct_without_init()
    class_._ptr = constructor(481,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ModifierBoneTarget3D.construct_without_init()
    class_._ptr = constructor(481,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPModifierBoneTarget3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(481,0, ())


  def generate_wrapper(self):
    return CPPModifierBoneTarget3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ModifierBoneTarget3D.__new__(ModifierBoneTarget3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ModifierBoneTarget3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ModifierBoneTarget3D.construct_without_init()
    cls._ptr = CPPModifierBoneTarget3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ModifierBoneTarget3D.construct_without_init()
    cls._ptr = CPPModifierBoneTarget3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def bone_name(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_bone_name()
    return _ret
  @bone_name.setter
  def bone_name(self,  value:'str'):
    self.set_bone_name(value)
  @property
  def bone(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_bone()
    return _ret
  @bone.setter
  def bone(self,  value:'int'):
    self.set_bone(value)
  @functools.native_method
  def set_bone_name(self, bone_name:'str'   ) -> None:
    r''''''

    assert(not bone_name is None)
    assert isinstance(bone_name, (str, String)), 'bone_name must be str or String'

    self.py__bone_name = bone_name



    assert(isinstance(bone_name, (str, String)))
    py_string_bone_name = bone_name if isinstance(bone_name, StringName) else c_utils.py_string_to_string(bone_name)

    py__string_bone_name = utils.py_string_to_string(bone_name)
    py__string_bone_name.shouldBeDeleted = False


    self._ptr.call_with_return(260,tuple([py__string_bone_name._ptr]))

  @functools.native_method
  def get_bone_name(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(261,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_bone(self, bone:'int'   ) -> None:
    r''''''

    assert isinstance(bone, (int, float)), 'bone must be int or float'

    self.py__bone = bone






    self._ptr.call_with_return(262,tuple([bone]))

  @functools.native_method
  def get_bone(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(263,tuple([]))

    return _ret



register_cast_function('ModifierBoneTarget3D', ModifierBoneTarget3D.cast)
register_class('ModifierBoneTarget3D', ModifierBoneTarget3D)
