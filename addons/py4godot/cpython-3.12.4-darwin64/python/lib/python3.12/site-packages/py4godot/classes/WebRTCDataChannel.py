# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.WebRTCDataChannelExtension as py4godot_webrtcdatachannelextension 
import py4godot.classes.PacketPeer as py4godot_packetpeer 
from py4godot.wrappers.wrappers import CPPWebRTCDataChannelWrapper

class WriteMode:
  WRITE_MODE_TEXT = 0
  WRITE_MODE_BINARY = 1
class ChannelState:
  STATE_CONNECTING = 0
  STATE_OPEN = 1
  STATE_CLOSING = 2
  STATE_CLOSED = 3


class WebRTCDataChannel(py4godot_packetpeer.PacketPeer):
  r''''''

  @staticmethod
  def constructor():
    class_ = WebRTCDataChannel.construct_without_init()
    class_._ptr = constructor(994,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WebRTCDataChannel.construct_without_init()
    class_._ptr = constructor(994,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWebRTCDataChannelWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(994,0, ())


  def generate_wrapper(self):
    return CPPWebRTCDataChannelWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WebRTCDataChannel.__new__(WebRTCDataChannel)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WebRTCDataChannel'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCDataChannel.construct_without_init()
    cls._ptr = CPPWebRTCDataChannelWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCDataChannel.construct_without_init()
    cls._ptr = CPPWebRTCDataChannelWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def write_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_write_mode()
    return _ret
  @write_mode.setter
  def write_mode(self,  value:'int'):
    self.set_write_mode(value)
  @functools.native_method
  def poll(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([]))
    return _ret


  @functools.native_method
  def close(self) -> None:
    r''''''




    self._ptr.call_with_return(62,tuple([]))

  @functools.native_method
  def was_string_packet(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(63,tuple([]))
    return _ret


  @functools.native_method
  def set_write_mode(self, write_mode:'int'  ) -> None:
    r''''''

    assert isinstance(write_mode, (int, float)), 'write_mode must be int or float'

    self.py__write_mode = write_mode






    self._ptr.call_with_return(64,tuple([write_mode]))

  @functools.native_method
  def get_write_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(65,tuple([]))

    return _ret


  @functools.native_method
  def get_ready_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(66,tuple([]))
    return _ret


  @functools.native_method
  def get_label(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(67,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def is_ordered(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([]))
    return _ret


  @functools.native_method
  def get_id(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(69,tuple([]))
    return _ret


  @functools.native_method
  def get_max_packet_life_time(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(70,tuple([]))
    return _ret


  @functools.native_method
  def get_max_retransmits(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(71,tuple([]))
    return _ret


  @functools.native_method
  def get_protocol(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(72,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def is_negotiated(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([]))
    return _ret


  @functools.native_method
  def get_buffered_amount(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(74,tuple([]))
    return _ret



register_cast_function('WebRTCDataChannel', WebRTCDataChannel.cast)
register_class('WebRTCDataChannel', WebRTCDataChannel)
