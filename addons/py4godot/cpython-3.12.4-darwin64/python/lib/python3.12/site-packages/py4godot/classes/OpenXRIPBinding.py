# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRAction as py4godot_openxraction 
  import py4godot.classes.OpenXRActionBindingModifier as py4godot_openxractionbindingmodifier 
  import py4godot.classes.OpenXRAnalogThresholdModifier as py4godot_openxranalogthresholdmodifier 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPOpenXRIPBindingWrapper


class OpenXRIPBinding(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRIPBinding.construct_without_init()
    class_._ptr = constructor(551,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRIPBinding.construct_without_init()
    class_._ptr = constructor(551,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRIPBindingWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(551,0, ())


  def generate_wrapper(self):
    return CPPOpenXRIPBindingWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRIPBinding.__new__(OpenXRIPBinding)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRIPBinding'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRIPBinding.construct_without_init()
    cls._ptr = CPPOpenXRIPBindingWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRIPBinding.construct_without_init()
    cls._ptr = CPPOpenXRIPBindingWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def action(self) -> typing.Union['py4godot_openxraction.OpenXRAction']:
    r''''''
    _ret = self. get_action()
    return _ret
  @action.setter
  def action(self,  value:'py4godot_object.Object'):
    self.set_action(value)
  @property
  def binding_path(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_binding_path()
    return _ret
  @binding_path.setter
  def binding_path(self,  value:'str'):
    self.set_binding_path(value)
  @property
  def binding_modifiers(self) -> typing.Union['py4godot_openxractionbindingmodifier.OpenXRActionBindingModifier','py4godot_openxranalogthresholdmodifier.OpenXRAnalogThresholdModifier']:
    r''''''
    _ret = self. get_binding_modifiers()
    return _ret
  @binding_modifiers.setter
  def binding_modifiers(self,  value:'py4godot_object.Object'):
    self.set_binding_modifiers(value)
  @property
  def paths(self) -> typing.Union['PackedStringArray']:
    r''''''
    _ret = self. get_paths()
    return _ret
  @paths.setter
  def paths(self,  value:'PackedStringArray'):
    self.set_paths(value)
  @functools.native_method
  def set_action(self, action:'py4godot_openxraction.OpenXRAction'   ) -> None:
    r''''''

    assert(not action is None)
    assert isinstance(action, get_class('OpenXRAction')), 'action must be OpenXRAction'

    self.py__action = action






    self._ptr.call_with_return(77,tuple([action._ptr]))

  @functools.native_method
  def get_action(self) -> typing.Union['py4godot_openxraction.OpenXRAction']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRAction
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_binding_path(self, binding_path:'str'   ) -> None:
    r''''''

    assert(not binding_path is None)
    assert isinstance(binding_path, (str, String)), 'binding_path must be str or String'

    self.py__binding_path = binding_path



    assert(isinstance(binding_path, (str, String)))
    py_string_binding_path = binding_path if isinstance(binding_path, StringName) else c_utils.py_string_to_string(binding_path)

    py__string_binding_path = utils.py_string_to_string(binding_path)
    py__string_binding_path.shouldBeDeleted = False


    self._ptr.call_with_return(79,tuple([py__string_binding_path._ptr]))

  @functools.native_method
  def get_binding_path(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_binding_modifier_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))
    return _ret


  @functools.native_method
  def get_binding_modifier(self, index:'int'   ) -> typing.Union['py4godot_openxractionbindingmodifier.OpenXRActionBindingModifier','py4godot_openxranalogthresholdmodifier.OpenXRAnalogThresholdModifier']:
    r''''''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRActionBindingModifier
    _ret._ptr = self._ptr.call_with_return(82,tuple([index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_binding_modifiers(self, binding_modifiers:'Array'   ) -> None:
    r''''''

    assert(not binding_modifiers is None)
    assert isinstance(binding_modifiers, Array), 'binding_modifiers must be Array'

    self.py__binding_modifiers = binding_modifiers






    self._ptr.call_with_return(83,tuple([binding_modifiers._ptr]))

  @functools.native_method
  def get_binding_modifiers(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_paths(self, paths:'PackedStringArray'   ) -> None:
    r''''''

    assert(not paths is None)
    assert isinstance(paths, PackedStringArray), 'paths must be PackedStringArray'

    self.py__paths = paths






    self._ptr.call_with_return(85,tuple([paths._ptr]))

  @functools.native_method
  def get_paths(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def get_path_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))
    return _ret


  @functools.native_method
  def has_path(self, path:'str'   ) -> typing.Union[bool]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def add_path(self, path:'str'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(89,tuple([py_string_path._ptr]))

  @functools.native_method
  def remove_path(self, path:'str'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(90,tuple([py_string_path._ptr]))


register_cast_function('OpenXRIPBinding', OpenXRIPBinding.cast)
register_class('OpenXRIPBinding', OpenXRIPBinding)
