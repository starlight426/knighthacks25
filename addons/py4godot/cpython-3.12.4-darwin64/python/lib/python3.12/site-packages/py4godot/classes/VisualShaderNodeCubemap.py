# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CompressedTexture2DArray as py4godot_compressedtexture2darray 
  import py4godot.classes.ImageTextureLayered as py4godot_imagetexturelayered 
  import py4godot.classes.Cubemap as py4godot_cubemap 
  import py4godot.classes.CubemapArray as py4godot_cubemaparray 
  import py4godot.classes.TextureLayered as py4godot_texturelayered 
  import py4godot.classes.PlaceholderTextureLayered as py4godot_placeholdertexturelayered 
  import py4godot.classes.TextureLayeredRD as py4godot_texturelayeredrd 
  import py4godot.classes.Texture2DArrayRD as py4godot_texture2darrayrd 
  import py4godot.classes.CompressedCubemapArray as py4godot_compressedcubemaparray 
  import py4godot.classes.PlaceholderTexture2DArray as py4godot_placeholdertexture2darray 
  import py4godot.classes.PlaceholderCubemap as py4godot_placeholdercubemap 
  import py4godot.classes.Texture2DArray as py4godot_texture2darray 
  import py4godot.classes.CompressedCubemap as py4godot_compressedcubemap 
  import py4godot.classes.TextureCubemapArrayRD as py4godot_texturecubemaparrayrd 
  import py4godot.classes.PlaceholderCubemapArray as py4godot_placeholdercubemaparray 
  import py4godot.classes.CompressedTextureLayered as py4godot_compressedtexturelayered 
  import py4godot.classes.TextureCubemapRD as py4godot_texturecubemaprd 
import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeCubemapWrapper

class Source:
  SOURCE_TEXTURE = 0
  SOURCE_PORT = 1
  SOURCE_MAX = 2
class TextureType:
  TYPE_DATA = 0
  TYPE_COLOR = 1
  TYPE_NORMAL_MAP = 2
  TYPE_MAX = 3


class VisualShaderNodeCubemap(py4godot_visualshadernode.VisualShaderNode):
  r'''
		Translated to `texture(cubemap, vec3)` in the shader language. Returns a color vector and alpha channel as scalar.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeCubemap.construct_without_init()
    class_._ptr = constructor(892,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeCubemap.construct_without_init()
    class_._ptr = constructor(892,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeCubemapWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(892,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeCubemapWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeCubemap.__new__(VisualShaderNodeCubemap)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeCubemap'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeCubemap.construct_without_init()
    cls._ptr = CPPVisualShaderNodeCubemapWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeCubemap.construct_without_init()
    cls._ptr = CPPVisualShaderNodeCubemapWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def source(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_source()
    return _ret
  @source.setter
  def source(self,  value:'int'):
    self.set_source(value)
  @property
  def cube_map(self) -> typing.Union['py4godot_cubemap.Cubemap']:
    r''''''
    _ret = self. get_cube_map()
    return _ret
  @cube_map.setter
  def cube_map(self,  value:'py4godot_object.Object'):
    self.set_cube_map(value)
  @property
  def texture_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_type()
    return _ret
  @texture_type.setter
  def texture_type(self,  value:'int'):
    self.set_texture_type(value)
  @functools.native_method
  def set_source(self, value:'int'  ) -> None:
    r''''''

    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__source = value






    self._ptr.call_with_return(88,tuple([value]))

  @functools.native_method
  def get_source(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_cube_map(self, value:'py4godot_texturelayered.TextureLayered'   ) -> None:
    r''''''

    assert(not value is None)
    assert isinstance(value, get_class('TextureLayered')), 'value must be TextureLayered'

    self.py__cube_map = value






    self._ptr.call_with_return(90,tuple([value._ptr]))

  @functools.native_method
  def get_cube_map(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: TextureLayered
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture_type(self, value:'int'  ) -> None:
    r''''''

    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__texture_type = value






    self._ptr.call_with_return(92,tuple([value]))

  @functools.native_method
  def get_texture_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeCubemap', VisualShaderNodeCubemap.cast)
register_class('VisualShaderNodeCubemap', VisualShaderNodeCubemap)
