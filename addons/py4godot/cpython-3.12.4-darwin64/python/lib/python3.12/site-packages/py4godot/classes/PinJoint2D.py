# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Joint2D as py4godot_joint2d 
from py4godot.wrappers.wrappers import CPPPinJoint2DWrapper


class PinJoint2D(py4godot_joint2d.Joint2D):
  r'''
		A physics joint that attaches two 2D physics bodies at a single point, allowing them to freely rotate. For example, a `RigidBody2D` can be attached to a `StaticBody2D` to create a pendulum or a seesaw.
	'''

  @staticmethod
  def constructor():
    class_ = PinJoint2D.construct_without_init()
    class_._ptr = constructor(617,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PinJoint2D.construct_without_init()
    class_._ptr = constructor(617,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPinJoint2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(617,0, ())


  def generate_wrapper(self):
    return CPPPinJoint2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PinJoint2D.__new__(PinJoint2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PinJoint2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PinJoint2D.construct_without_init()
    cls._ptr = CPPPinJoint2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PinJoint2D.construct_without_init()
    cls._ptr = CPPPinJoint2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def softness(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_softness()
    return _ret
  @softness.setter
  def softness(self,  value:'float'):
    self.set_softness(value)
  @property
  def angular_limit_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_angular_limit_enabled()
    return _ret
  @angular_limit_enabled.setter
  def angular_limit_enabled(self,  value:'bool'):
    self.set_angular_limit_enabled(value)
  @property
  def angular_limit_lower(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_angular_limit_lower()
    return _ret
  @angular_limit_lower.setter
  def angular_limit_lower(self,  value:'float'):
    self.set_angular_limit_lower(value)
  @property
  def angular_limit_upper(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_angular_limit_upper()
    return _ret
  @angular_limit_upper.setter
  def angular_limit_upper(self,  value:'float'):
    self.set_angular_limit_upper(value)
  @property
  def motor_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_motor_enabled()
    return _ret
  @motor_enabled.setter
  def motor_enabled(self,  value:'bool'):
    self.set_motor_enabled(value)
  @property
  def motor_target_velocity(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_motor_target_velocity()
    return _ret
  @motor_target_velocity.setter
  def motor_target_velocity(self,  value:'float'):
    self.set_motor_target_velocity(value)
  @functools.native_method
  def set_softness(self, softness:'float'   ) -> None:
    r''''''

    assert isinstance(softness, (int, float)), 'softness must be int or float'

    self.py__softness = softness






    self._ptr.call_with_return(312,tuple([softness]))

  @functools.native_method
  def get_softness(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(313,tuple([]))

    return _ret


  @functools.native_method
  def set_angular_limit_lower(self, angular_limit_lower:'float'   ) -> None:
    r''''''

    assert isinstance(angular_limit_lower, (int, float)), 'angular_limit_lower must be int or float'

    self.py__angular_limit_lower = angular_limit_lower






    self._ptr.call_with_return(314,tuple([angular_limit_lower]))

  @functools.native_method
  def get_angular_limit_lower(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(315,tuple([]))

    return _ret


  @functools.native_method
  def set_angular_limit_upper(self, angular_limit_upper:'float'   ) -> None:
    r''''''

    assert isinstance(angular_limit_upper, (int, float)), 'angular_limit_upper must be int or float'

    self.py__angular_limit_upper = angular_limit_upper






    self._ptr.call_with_return(316,tuple([angular_limit_upper]))

  @functools.native_method
  def get_angular_limit_upper(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(317,tuple([]))

    return _ret


  @functools.native_method
  def set_motor_target_velocity(self, motor_target_velocity:'float'   ) -> None:
    r''''''

    assert isinstance(motor_target_velocity, (int, float)), 'motor_target_velocity must be int or float'

    self.py__motor_target_velocity = motor_target_velocity






    self._ptr.call_with_return(318,tuple([motor_target_velocity]))

  @functools.native_method
  def get_motor_target_velocity(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(319,tuple([]))

    return _ret


  @functools.native_method
  def set_motor_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__motor_enabled = enabled






    self._ptr.call_with_return(320,tuple([enabled]))

  @functools.native_method
  def is_motor_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(321,tuple([]))

    return _ret


  @functools.native_method
  def set_angular_limit_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__angular_limit_enabled = enabled






    self._ptr.call_with_return(322,tuple([enabled]))

  @functools.native_method
  def is_angular_limit_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(323,tuple([]))

    return _ret



register_cast_function('PinJoint2D', PinJoint2D.cast)
register_class('PinJoint2D', PinJoint2D)
