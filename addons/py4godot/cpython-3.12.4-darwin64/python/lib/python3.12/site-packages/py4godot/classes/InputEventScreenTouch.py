# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.InputEventFromWindow as py4godot_inputeventfromwindow 
from py4godot.wrappers.wrappers import CPPInputEventScreenTouchWrapper


class InputEventScreenTouch(py4godot_inputeventfromwindow.InputEventFromWindow):
  r'''
		Stores information about multi-touch press/release input events. Supports touch press, touch release and `index` for multi-touch count and order.
	'''

  @staticmethod
  def constructor():
    class_ = InputEventScreenTouch.construct_without_init()
    class_._ptr = constructor(427,0, ())
    return class_
  @staticmethod
  def new():
    class_ = InputEventScreenTouch.construct_without_init()
    class_._ptr = constructor(427,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPInputEventScreenTouchWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(427,0, ())


  def generate_wrapper(self):
    return CPPInputEventScreenTouchWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = InputEventScreenTouch.__new__(InputEventScreenTouch)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'InputEventScreenTouch'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventScreenTouch.construct_without_init()
    cls._ptr = CPPInputEventScreenTouchWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventScreenTouch.construct_without_init()
    cls._ptr = CPPInputEventScreenTouchWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_index()
    return _ret
  @index.setter
  def index(self,  value:'int'):
    self.set_index(value)
  @property
  def position(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_position()
    return _ret
  @position.setter
  def position(self,  value:'Vector2'):
    self.set_position(value)
  @property
  def canceled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_canceled()
    return _ret
  @canceled.setter
  def canceled(self,  value:'bool'):
    self.set_canceled(value)
  @property
  def pressed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_pressed()
    return _ret
  @pressed.setter
  def pressed(self,  value:'bool'):
    self.set_pressed(value)
  @property
  def double_tap(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_double_tap()
    return _ret
  @double_tap.setter
  def double_tap(self,  value:'bool'):
    self.set_double_tap(value)
  @functools.native_method
  def set_index(self, index:'int'   ) -> None:
    r''''''

    assert isinstance(index, (int, float)), 'index must be int or float'

    self.py__index = index






    self._ptr.call_with_return(94,tuple([index]))

  @functools.native_method
  def get_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_position(self, position:'Vector2'   ) -> None:
    r''''''

    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'

    self.py__position = position






    self._ptr.call_with_return(96,tuple([position._ptr]))

  @functools.native_method
  def get_position(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_pressed(self, pressed:'bool'   ) -> None:
    r''''''

    assert isinstance(pressed, bool), 'pressed must be bool'

    self.py__pressed = pressed






    self._ptr.call_with_return(98,tuple([pressed]))

  @functools.native_method
  def set_canceled(self, canceled:'bool'   ) -> None:
    r''''''

    assert isinstance(canceled, bool), 'canceled must be bool'

    self.py__canceled = canceled






    self._ptr.call_with_return(99,tuple([canceled]))

  @functools.native_method
  def set_double_tap(self, double_tap:'bool'   ) -> None:
    r''''''

    assert isinstance(double_tap, bool), 'double_tap must be bool'

    self.py__double_tap = double_tap






    self._ptr.call_with_return(100,tuple([double_tap]))

  @functools.native_method
  def is_double_tap(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(101,tuple([]))

    return _ret



register_cast_function('InputEventScreenTouch', InputEventScreenTouch.cast)
register_class('InputEventScreenTouch', InputEventScreenTouch)
