# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPEngineProfilerWrapper


class EngineProfiler(py4godot_refcounted.RefCounted):
  r'''
		This class can be used to implement custom profilers that are able to interact with the engine and editor debugger.
		See `EngineDebugger` and `EditorDebuggerPlugin` for more information.
	'''

  @staticmethod
  def constructor():
    class_ = EngineProfiler.construct_without_init()
    class_._ptr = constructor(322,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EngineProfiler.construct_without_init()
    class_._ptr = constructor(322,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEngineProfilerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(322,0, ())


  def generate_wrapper(self):
    return CPPEngineProfilerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EngineProfiler.__new__(EngineProfiler)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EngineProfiler'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EngineProfiler.construct_without_init()
    cls._ptr = CPPEngineProfilerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EngineProfiler.construct_without_init()
    cls._ptr = CPPEngineProfilerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _toggle(self, enable:'bool'   , options:'Array'   ) -> None:
    r'''
				Called when the profiler is enabled/disabled, along with a set of `options`.
			'''

    assert isinstance(enable, bool), 'enable must be bool'
    assert(not options is None)
    assert isinstance(options, Array), 'options must be Array'







    self._ptr.call_with_return(53,tuple([enable, options._ptr]))

  @functools.native_method
  def _add_frame(self, data:'Array'   ) -> None:
    r'''
				Called when data is added to profiler using `EngineDebugger.profiler_add_frame_data`.
			'''

    assert(not data is None)
    assert isinstance(data, Array), 'data must be Array'






    self._ptr.call_with_return(54,tuple([data._ptr]))

  @functools.native_method
  def _tick(self, frame_time:'float'   , process_time:'float'   , physics_time:'float'   , physics_frame_time:'float'   ) -> None:
    r'''
				Called once every engine iteration when the profiler is active with information about the current frame. All time values are in seconds. Lower values represent faster processing times and are therefore considered better.
			'''

    assert isinstance(frame_time, (int, float)), 'frame_time must be int or float'
    assert isinstance(process_time, (int, float)), 'process_time must be int or float'
    assert isinstance(physics_time, (int, float)), 'physics_time must be int or float'
    assert isinstance(physics_frame_time, (int, float)), 'physics_frame_time must be int or float'









    self._ptr.call_with_return(55,tuple([frame_time, process_time, physics_time, physics_frame_time]))


register_cast_function('EngineProfiler', EngineProfiler.cast)
register_class('EngineProfiler', EngineProfiler)
