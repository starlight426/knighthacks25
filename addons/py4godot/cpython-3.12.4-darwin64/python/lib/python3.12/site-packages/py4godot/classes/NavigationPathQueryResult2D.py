# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPNavigationPathQueryResult2DWrapper

class PathSegmentType:
  PATH_SEGMENT_TYPE_REGION = 0
  PATH_SEGMENT_TYPE_LINK = 1


class NavigationPathQueryResult2D(py4godot_refcounted.RefCounted):
  r'''
		This class stores the result of a 2D navigation path query from the `NavigationServer2D`.
	'''

  @staticmethod
  def constructor():
    class_ = NavigationPathQueryResult2D.construct_without_init()
    class_._ptr = constructor(506,0, ())
    return class_
  @staticmethod
  def new():
    class_ = NavigationPathQueryResult2D.construct_without_init()
    class_._ptr = constructor(506,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPNavigationPathQueryResult2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(506,0, ())


  def generate_wrapper(self):
    return CPPNavigationPathQueryResult2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = NavigationPathQueryResult2D.__new__(NavigationPathQueryResult2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'NavigationPathQueryResult2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = NavigationPathQueryResult2D.construct_without_init()
    cls._ptr = CPPNavigationPathQueryResult2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = NavigationPathQueryResult2D.construct_without_init()
    cls._ptr = CPPNavigationPathQueryResult2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def path(self) -> typing.Union['PackedVector2Array']:
    r''''''
    _ret = self. get_path()
    return _ret
  @path.setter
  def path(self,  value:'PackedVector2Array'):
    self.set_path(value)
  @property
  def path_types(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_path_types()
    return _ret
  @path_types.setter
  def path_types(self,  value:'PackedInt32Array'):
    self.set_path_types(value)
  @property
  def path_rids(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''
    _ret = self. get_path_rids()
    return _ret
  @path_rids.setter
  def path_rids(self, value:'Array'):
    self.set_path_rids(value)
  @property
  def path_owner_ids(self) -> typing.Union['PackedInt64Array']:
    r''''''
    _ret = self. get_path_owner_ids()
    return _ret
  @path_owner_ids.setter
  def path_owner_ids(self,  value:'PackedInt64Array'):
    self.set_path_owner_ids(value)
  @property
  def path_length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_path_length()
    return _ret
  @path_length.setter
  def path_length(self,  value:'float'):
    self.set_path_length(value)
  @functools.native_method
  def set_path(self, path:'PackedVector2Array'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, PackedVector2Array), 'path must be PackedVector2Array'

    self.py__path = path






    self._ptr.call_with_return(53,tuple([path._ptr]))

  @functools.native_method
  def get_path(self) -> typing.Union['PackedVector2Array']:
    r''''''




    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_path_types(self, path_types:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not path_types is None)
    assert isinstance(path_types, PackedInt32Array), 'path_types must be PackedInt32Array'

    self.py__path_types = path_types






    self._ptr.call_with_return(55,tuple([path_types._ptr]))

  @functools.native_method
  def get_path_types(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_path_rids(self, path_rids:'py4godot_ridtypedarray.RIDTypedArray'   ) -> None:
    r''''''

    assert isinstance(path_rids, get_class('RIDTypedArray')), 'path_rids must be RIDTypedArray'

    self.py__path_rids = path_rids






    self._ptr.call_with_return(57,tuple([path_rids._ptr]))

  @functools.native_method
  def get_path_rids(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''




    _ret = py4godot_ridtypedarray.RIDTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_path_owner_ids(self, path_owner_ids:'PackedInt64Array'   ) -> None:
    r''''''

    assert(not path_owner_ids is None)
    assert isinstance(path_owner_ids, PackedInt64Array), 'path_owner_ids must be PackedInt64Array'

    self.py__path_owner_ids = path_owner_ids






    self._ptr.call_with_return(59,tuple([path_owner_ids._ptr]))

  @functools.native_method
  def get_path_owner_ids(self) -> typing.Union['PackedInt64Array']:
    r''''''




    _ret = PackedInt64Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_path_length(self, length:'float'   ) -> None:
    r''''''

    assert isinstance(length, (int, float)), 'length must be int or float'

    self.py__path_length = length






    self._ptr.call_with_return(61,tuple([length]))

  @functools.native_method
  def get_path_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def reset(self) -> None:
    r'''
				Reset the result object to its initial state. This is useful to reuse the object across multiple queries.
			'''




    self._ptr.call_with_return(63,tuple([]))


register_cast_function('NavigationPathQueryResult2D', NavigationPathQueryResult2D.cast)
register_class('NavigationPathQueryResult2D', NavigationPathQueryResult2D)
