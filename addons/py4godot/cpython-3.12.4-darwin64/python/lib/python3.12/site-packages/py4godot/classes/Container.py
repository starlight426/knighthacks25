# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Control as py4godot_control 
from py4godot.wrappers.wrappers import CPPContainerWrapper


class Container(py4godot_control.Control):
  r'''
		Base class for all GUI containers. A `Container` automatically arranges its child controls in a certain way. This class can be inherited to make custom container types.
	'''
  NOTIFICATION_PRE_SORT_CHILDREN:typing.ClassVar[int]

  NOTIFICATION_SORT_CHILDREN:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = Container.construct_without_init()
    class_._ptr = constructor(238,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Container.construct_without_init()
    class_._ptr = constructor(238,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPContainerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(238,0, ())


  def generate_wrapper(self):
    return CPPContainerWrapper()
  def init_signals(self):
    super().init_signals()
    pre_sort_children_name = utils.py_string_to_string_name("pre_sort_children")
    self.pre_sort_children = signals.BuiltinSignal(self, pre_sort_children_name)
    sort_children_name = utils.py_string_to_string_name("sort_children")
    self.sort_children = signals.BuiltinSignal(self, sort_children_name)

  @staticmethod
  def construct_without_init():
    cls = Container.__new__(Container)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Container'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Container.construct_without_init()
    cls._ptr = CPPContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Container.construct_without_init()
    cls._ptr = CPPContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_allowed_size_flags_horizontal(self) -> typing.Union['PackedInt32Array']:
    r'''
				Implement to return a list of allowed horizontal `enum Control.SizeFlags` for child nodes. This doesn't technically prevent the usages of any other size flags, if your implementation requires that. This only limits the options available to the user in the Inspector dock.
				**Note:** Having no size flags is equal to having `constant Control.SIZE_SHRINK_BEGIN`. As such, this value is always implicitly allowed.
			'''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(433,tuple([]))
    return _ret


  @functools.native_method
  def _get_allowed_size_flags_vertical(self) -> typing.Union['PackedInt32Array']:
    r'''
				Implement to return a list of allowed vertical `enum Control.SizeFlags` for child nodes. This doesn't technically prevent the usages of any other size flags, if your implementation requires that. This only limits the options available to the user in the Inspector dock.
				**Note:** Having no size flags is equal to having `constant Control.SIZE_SHRINK_BEGIN`. As such, this value is always implicitly allowed.
			'''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(434,tuple([]))
    return _ret


  @functools.native_method
  def queue_sort(self) -> None:
    r'''
				Queue resort of the contained children. This is called automatically anyway, but can be called upon request.
			'''




    self._ptr.call_with_return(435,tuple([]))

  @functools.native_method
  def fit_child_in_rect(self, child:'py4godot_control.Control'   , rect:'Rect2'   ) -> None:
    r'''
				Fit a child control in a given rect. This is mainly a helper for creating custom container classes.
			'''

    assert(not child is None)
    assert isinstance(child, get_class('Control')), 'child must be Control'
    assert(not rect is None)
    assert isinstance(rect, Rect2), 'rect must be Rect2'







    self._ptr.call_with_return(436,tuple([child._ptr, rect._ptr]))


register_cast_function('Container', Container.cast)
register_class('Container', Container)
