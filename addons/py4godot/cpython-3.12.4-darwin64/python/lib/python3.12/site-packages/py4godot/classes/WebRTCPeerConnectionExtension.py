# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.WebRTCDataChannel as py4godot_webrtcdatachannel 
  import py4godot.classes.WebRTCDataChannelExtension as py4godot_webrtcdatachannelextension 
import py4godot.classes.WebRTCPeerConnection as py4godot_webrtcpeerconnection 
from py4godot.wrappers.wrappers import CPPWebRTCPeerConnectionExtensionWrapper


class WebRTCPeerConnectionExtension(py4godot_webrtcpeerconnection.WebRTCPeerConnection):
  r''''''

  @staticmethod
  def constructor():
    class_ = WebRTCPeerConnectionExtension.construct_without_init()
    class_._ptr = constructor(998,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WebRTCPeerConnectionExtension.construct_without_init()
    class_._ptr = constructor(998,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWebRTCPeerConnectionExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(998,0, ())


  def generate_wrapper(self):
    return CPPWebRTCPeerConnectionExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WebRTCPeerConnectionExtension.__new__(WebRTCPeerConnectionExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WebRTCPeerConnectionExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCPeerConnectionExtension.construct_without_init()
    cls._ptr = CPPWebRTCPeerConnectionExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCPeerConnectionExtension.construct_without_init()
    cls._ptr = CPPWebRTCPeerConnectionExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_connection_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(64,tuple([]))
    return _ret


  @functools.native_method
  def _get_gathering_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(65,tuple([]))
    return _ret


  @functools.native_method
  def _get_signaling_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(66,tuple([]))
    return _ret


  @functools.native_method
  def _initialize(self, p_config:'Dictionary'   ) -> typing.Union[int]:
    r''''''

    assert(not p_config is None)
    assert isinstance(p_config, Dictionary), 'p_config must be Dictionary'






    _ret:int
    _ret = self._ptr.call_with_return(67,tuple([p_config._ptr]))
    return _ret


  @functools.native_method
  def _create_data_channel(self, p_label:'str'   , p_config:'Dictionary'   ) -> typing.Union['py4godot_webrtcdatachannel.WebRTCDataChannel','py4godot_webrtcdatachannelextension.WebRTCDataChannelExtension']:
    r''''''

    assert(not p_label is None)
    assert isinstance(p_label, (str, String)), 'p_label must be str or String'
    assert(not p_config is None)
    assert isinstance(p_config, Dictionary), 'p_config must be Dictionary'




    assert(isinstance(p_label, (str, String)))
    py_string_p_label = p_label if isinstance(p_label, StringName) else c_utils.py_string_to_string(p_label)


    _ret = classes.Object.Object.construct_without_init() #Smart casted to: WebRTCDataChannel
    _ret._ptr = self._ptr.call_with_return(68,tuple([py_string_p_label._ptr, p_config._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _create_offer(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(69,tuple([]))
    return _ret


  @functools.native_method
  def _set_remote_description(self, p_type:'str'   , p_sdp:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not p_type is None)
    assert isinstance(p_type, (str, String)), 'p_type must be str or String'
    assert(not p_sdp is None)
    assert isinstance(p_sdp, (str, String)), 'p_sdp must be str or String'




    assert(isinstance(p_type, (str, String)))
    py_string_p_type = p_type if isinstance(p_type, StringName) else c_utils.py_string_to_string(p_type)
    assert(isinstance(p_sdp, (str, String)))
    py_string_p_sdp = p_sdp if isinstance(p_sdp, StringName) else c_utils.py_string_to_string(p_sdp)

    _ret:int
    _ret = self._ptr.call_with_return(70,tuple([py_string_p_type._ptr, py_string_p_sdp._ptr]))
    return _ret


  @functools.native_method
  def _set_local_description(self, p_type:'str'   , p_sdp:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not p_type is None)
    assert isinstance(p_type, (str, String)), 'p_type must be str or String'
    assert(not p_sdp is None)
    assert isinstance(p_sdp, (str, String)), 'p_sdp must be str or String'




    assert(isinstance(p_type, (str, String)))
    py_string_p_type = p_type if isinstance(p_type, StringName) else c_utils.py_string_to_string(p_type)
    assert(isinstance(p_sdp, (str, String)))
    py_string_p_sdp = p_sdp if isinstance(p_sdp, StringName) else c_utils.py_string_to_string(p_sdp)

    _ret:int
    _ret = self._ptr.call_with_return(71,tuple([py_string_p_type._ptr, py_string_p_sdp._ptr]))
    return _ret


  @functools.native_method
  def _add_ice_candidate(self, p_sdp_mid_name:'str'   , p_sdp_mline_index:'int'   , p_sdp_name:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not p_sdp_mid_name is None)
    assert isinstance(p_sdp_mid_name, (str, String)), 'p_sdp_mid_name must be str or String'
    assert isinstance(p_sdp_mline_index, (int, float)), 'p_sdp_mline_index must be int or float'
    assert(not p_sdp_name is None)
    assert isinstance(p_sdp_name, (str, String)), 'p_sdp_name must be str or String'




    assert(isinstance(p_sdp_mid_name, (str, String)))
    py_string_p_sdp_mid_name = p_sdp_mid_name if isinstance(p_sdp_mid_name, StringName) else c_utils.py_string_to_string(p_sdp_mid_name)

    assert(isinstance(p_sdp_name, (str, String)))
    py_string_p_sdp_name = p_sdp_name if isinstance(p_sdp_name, StringName) else c_utils.py_string_to_string(p_sdp_name)

    _ret:int
    _ret = self._ptr.call_with_return(72,tuple([py_string_p_sdp_mid_name._ptr, p_sdp_mline_index, py_string_p_sdp_name._ptr]))
    return _ret


  @functools.native_method
  def _poll(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(73,tuple([]))
    return _ret


  @functools.native_method
  def _close(self) -> None:
    r''''''




    self._ptr.call_with_return(74,tuple([]))


register_cast_function('WebRTCPeerConnectionExtension', WebRTCPeerConnectionExtension.cast)
register_class('WebRTCPeerConnectionExtension', WebRTCPeerConnectionExtension)
