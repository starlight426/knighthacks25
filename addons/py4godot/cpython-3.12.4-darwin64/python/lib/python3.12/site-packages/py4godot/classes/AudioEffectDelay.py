# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectDelayWrapper


class AudioEffectDelay(py4godot_audioeffect.AudioEffect):
  r'''
		Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectDelay.construct_without_init()
    class_._ptr = constructor(112,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectDelay.construct_without_init()
    class_._ptr = constructor(112,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectDelayWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(112,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectDelayWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectDelay.__new__(AudioEffectDelay)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectDelay'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectDelay.construct_without_init()
    cls._ptr = CPPAudioEffectDelayWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectDelay.construct_without_init()
    cls._ptr = CPPAudioEffectDelayWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def dry(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_dry()
    return _ret
  @dry.setter
  def dry(self,  value:'float'):
    self.set_dry(value)
  @property
  def tap1_active(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_tap1_active()
    return _ret
  @tap1_active.setter
  def tap1_active(self,  value:'bool'):
    self.set_tap1_active(value)
  @property
  def tap1_delay_ms(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_tap1_delay_ms()
    return _ret
  @tap1_delay_ms.setter
  def tap1_delay_ms(self,  value:'float'):
    self.set_tap1_delay_ms(value)
  @property
  def tap1_level_db(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_tap1_level_db()
    return _ret
  @tap1_level_db.setter
  def tap1_level_db(self,  value:'float'):
    self.set_tap1_level_db(value)
  @property
  def tap1_pan(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_tap1_pan()
    return _ret
  @tap1_pan.setter
  def tap1_pan(self,  value:'float'):
    self.set_tap1_pan(value)
  @property
  def tap2_active(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_tap2_active()
    return _ret
  @tap2_active.setter
  def tap2_active(self,  value:'bool'):
    self.set_tap2_active(value)
  @property
  def tap2_delay_ms(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_tap2_delay_ms()
    return _ret
  @tap2_delay_ms.setter
  def tap2_delay_ms(self,  value:'float'):
    self.set_tap2_delay_ms(value)
  @property
  def tap2_level_db(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_tap2_level_db()
    return _ret
  @tap2_level_db.setter
  def tap2_level_db(self,  value:'float'):
    self.set_tap2_level_db(value)
  @property
  def tap2_pan(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_tap2_pan()
    return _ret
  @tap2_pan.setter
  def tap2_pan(self,  value:'float'):
    self.set_tap2_pan(value)
  @property
  def feedback_active(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_feedback_active()
    return _ret
  @feedback_active.setter
  def feedback_active(self,  value:'bool'):
    self.set_feedback_active(value)
  @property
  def feedback_delay_ms(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_feedback_delay_ms()
    return _ret
  @feedback_delay_ms.setter
  def feedback_delay_ms(self,  value:'float'):
    self.set_feedback_delay_ms(value)
  @property
  def feedback_level_db(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_feedback_level_db()
    return _ret
  @feedback_level_db.setter
  def feedback_level_db(self,  value:'float'):
    self.set_feedback_level_db(value)
  @property
  def feedback_lowpass(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_feedback_lowpass()
    return _ret
  @feedback_lowpass.setter
  def feedback_lowpass(self,  value:'float'):
    self.set_feedback_lowpass(value)
  @functools.native_method
  def set_dry(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__dry = amount






    self._ptr.call_with_return(78,tuple([amount]))

  @functools.native_method
  def get_dry(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_tap1_active(self, amount:'bool'   ) -> None:
    r''''''

    assert isinstance(amount, bool), 'amount must be bool'

    self.py__tap1_active = amount






    self._ptr.call_with_return(80,tuple([amount]))

  @functools.native_method
  def is_tap1_active(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_tap1_delay_ms(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__tap1_delay_ms = amount






    self._ptr.call_with_return(82,tuple([amount]))

  @functools.native_method
  def get_tap1_delay_ms(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_tap1_level_db(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__tap1_level_db = amount






    self._ptr.call_with_return(84,tuple([amount]))

  @functools.native_method
  def get_tap1_level_db(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_tap1_pan(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__tap1_pan = amount






    self._ptr.call_with_return(86,tuple([amount]))

  @functools.native_method
  def get_tap1_pan(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_tap2_active(self, amount:'bool'   ) -> None:
    r''''''

    assert isinstance(amount, bool), 'amount must be bool'

    self.py__tap2_active = amount






    self._ptr.call_with_return(88,tuple([amount]))

  @functools.native_method
  def is_tap2_active(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_tap2_delay_ms(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__tap2_delay_ms = amount






    self._ptr.call_with_return(90,tuple([amount]))

  @functools.native_method
  def get_tap2_delay_ms(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([]))

    return _ret


  @functools.native_method
  def set_tap2_level_db(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__tap2_level_db = amount






    self._ptr.call_with_return(92,tuple([amount]))

  @functools.native_method
  def get_tap2_level_db(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_tap2_pan(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__tap2_pan = amount






    self._ptr.call_with_return(94,tuple([amount]))

  @functools.native_method
  def get_tap2_pan(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_feedback_active(self, amount:'bool'   ) -> None:
    r''''''

    assert isinstance(amount, bool), 'amount must be bool'

    self.py__feedback_active = amount






    self._ptr.call_with_return(96,tuple([amount]))

  @functools.native_method
  def is_feedback_active(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_feedback_delay_ms(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__feedback_delay_ms = amount






    self._ptr.call_with_return(98,tuple([amount]))

  @functools.native_method
  def get_feedback_delay_ms(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_feedback_level_db(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__feedback_level_db = amount






    self._ptr.call_with_return(100,tuple([amount]))

  @functools.native_method
  def get_feedback_level_db(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(101,tuple([]))

    return _ret


  @functools.native_method
  def set_feedback_lowpass(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__feedback_lowpass = amount






    self._ptr.call_with_return(102,tuple([amount]))

  @functools.native_method
  def get_feedback_lowpass(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(103,tuple([]))

    return _ret



register_cast_function('AudioEffectDelay', AudioEffectDelay.cast)
register_class('AudioEffectDelay', AudioEffectDelay)
