# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPCameraAttributesWrapper


class CameraAttributes(py4godot_resource.Resource):
  r'''
		Controls camera-specific attributes such as depth of field and exposure override.
		When used in a `WorldEnvironment` it provides default settings for exposure, auto-exposure, and depth of field that will be used by all cameras without their own `CameraAttributes`, including the editor camera. When used in a `Camera3D` it will override any `CameraAttributes` set in the `WorldEnvironment`. When used in `VoxelGI` or `LightmapGI`, only the exposure settings will be used.
		See also `Environment` for general 3D environment settings.
		This is a pure virtual class that is inherited by `CameraAttributesPhysical` and `CameraAttributesPractical`.
	'''

  @staticmethod
  def constructor():
    class_ = CameraAttributes.construct_without_init()
    class_._ptr = constructor(190,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CameraAttributes.construct_without_init()
    class_._ptr = constructor(190,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCameraAttributesWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(190,0, ())


  def generate_wrapper(self):
    return CPPCameraAttributesWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CameraAttributes.__new__(CameraAttributes)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CameraAttributes'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CameraAttributes.construct_without_init()
    cls._ptr = CPPCameraAttributesWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CameraAttributes.construct_without_init()
    cls._ptr = CPPCameraAttributesWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def exposure_sensitivity(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_exposure_sensitivity()
    return _ret
  @exposure_sensitivity.setter
  def exposure_sensitivity(self,  value:'float'):
    self.set_exposure_sensitivity(value)
  @property
  def exposure_multiplier(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_exposure_multiplier()
    return _ret
  @exposure_multiplier.setter
  def exposure_multiplier(self,  value:'float'):
    self.set_exposure_multiplier(value)
  @property
  def auto_exposure_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_auto_exposure_enabled()
    return _ret
  @auto_exposure_enabled.setter
  def auto_exposure_enabled(self,  value:'bool'):
    self.set_auto_exposure_enabled(value)
  @property
  def auto_exposure_scale(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_auto_exposure_scale()
    return _ret
  @auto_exposure_scale.setter
  def auto_exposure_scale(self,  value:'float'):
    self.set_auto_exposure_scale(value)
  @property
  def auto_exposure_speed(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_auto_exposure_speed()
    return _ret
  @auto_exposure_speed.setter
  def auto_exposure_speed(self,  value:'float'):
    self.set_auto_exposure_speed(value)
  @functools.native_method
  def set_exposure_multiplier(self, multiplier:'float'   ) -> None:
    r''''''

    assert isinstance(multiplier, (int, float)), 'multiplier must be int or float'

    self.py__exposure_multiplier = multiplier






    self._ptr.call_with_return(77,tuple([multiplier]))

  @functools.native_method
  def get_exposure_multiplier(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_exposure_sensitivity(self, sensitivity:'float'   ) -> None:
    r''''''

    assert isinstance(sensitivity, (int, float)), 'sensitivity must be int or float'

    self.py__exposure_sensitivity = sensitivity






    self._ptr.call_with_return(79,tuple([sensitivity]))

  @functools.native_method
  def get_exposure_sensitivity(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_exposure_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__auto_exposure_enabled = enabled






    self._ptr.call_with_return(81,tuple([enabled]))

  @functools.native_method
  def is_auto_exposure_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_exposure_speed(self, exposure_speed:'float'   ) -> None:
    r''''''

    assert isinstance(exposure_speed, (int, float)), 'exposure_speed must be int or float'

    self.py__auto_exposure_speed = exposure_speed






    self._ptr.call_with_return(83,tuple([exposure_speed]))

  @functools.native_method
  def get_auto_exposure_speed(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_exposure_scale(self, exposure_grey:'float'   ) -> None:
    r''''''

    assert isinstance(exposure_grey, (int, float)), 'exposure_grey must be int or float'

    self.py__auto_exposure_scale = exposure_grey






    self._ptr.call_with_return(85,tuple([exposure_grey]))

  @functools.native_method
  def get_auto_exposure_scale(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))

    return _ret



register_cast_function('CameraAttributes', CameraAttributes.cast)
register_class('CameraAttributes', CameraAttributes)
