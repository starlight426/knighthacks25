# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.StaticBody3D as py4godot_staticbody3d 
  import py4godot.classes.PhysicsBody3D as py4godot_physicsbody3d 
  import py4godot.classes.RigidBody3D as py4godot_rigidbody3d 
  import py4godot.classes.CharacterBody3D as py4godot_characterbody3d 
  import py4godot.classes.CollisionObject3D as py4godot_collisionobject3d 
  import py4godot.classes.AnimatableBody3D as py4godot_animatablebody3d 
  import py4godot.classes.PhysicalBone3D as py4godot_physicalbone3d 
  import py4godot.classes.VehicleBody3D as py4godot_vehiclebody3d 
  import py4godot.classes.Area3D as py4godot_area3d 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFPhysicsBodyWrapper


class GLTFPhysicsBody(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFPhysicsBody.construct_without_init()
    class_._ptr = constructor(356,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFPhysicsBody.construct_without_init()
    class_._ptr = constructor(356,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFPhysicsBodyWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(356,0, ())


  def generate_wrapper(self):
    return CPPGLTFPhysicsBodyWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFPhysicsBody.__new__(GLTFPhysicsBody)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFPhysicsBody'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFPhysicsBody.construct_without_init()
    cls._ptr = CPPGLTFPhysicsBodyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFPhysicsBody.construct_without_init()
    cls._ptr = CPPGLTFPhysicsBodyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def body_type(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_body_type()
    return _ret
  @body_type.setter
  def body_type(self,  value:'str'):
    self.set_body_type(value)
  @property
  def mass(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_mass()
    return _ret
  @mass.setter
  def mass(self,  value:'float'):
    self.set_mass(value)
  @property
  def linear_velocity(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_linear_velocity()
    return _ret
  @linear_velocity.setter
  def linear_velocity(self,  value:'Vector3'):
    self.set_linear_velocity(value)
  @property
  def angular_velocity(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_angular_velocity()
    return _ret
  @angular_velocity.setter
  def angular_velocity(self,  value:'Vector3'):
    self.set_angular_velocity(value)
  @property
  def center_of_mass(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_center_of_mass()
    return _ret
  @center_of_mass.setter
  def center_of_mass(self,  value:'Vector3'):
    self.set_center_of_mass(value)
  @property
  def inertia_diagonal(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_inertia_diagonal()
    return _ret
  @inertia_diagonal.setter
  def inertia_diagonal(self,  value:'Vector3'):
    self.set_inertia_diagonal(value)
  @property
  def inertia_orientation(self) -> typing.Union['Quaternion']:
    r''''''
    _ret = self. get_inertia_orientation()
    return _ret
  @inertia_orientation.setter
  def inertia_orientation(self,  value:'Quaternion'):
    self.set_inertia_orientation(value)
  @property
  def inertia_tensor(self) -> typing.Union['Basis']:
    r''''''
    _ret = self. get_inertia_tensor()
    return _ret
  @inertia_tensor.setter
  def inertia_tensor(self,  value:'Basis'):
    self.set_inertia_tensor(value)
  @staticmethod
  def from_node(body_node:'py4godot_collisionobject3d.CollisionObject3D'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not body_node is None)
    assert isinstance(body_node, get_class('CollisionObject3D')), 'body_node must be CollisionObject3D'






    _ret = GLTFPhysicsBody.construct_without_init()
    _ret._ptr = static_method(356,1,tuple([body_node._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def to_node(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: CollisionObject3D
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def from_dictionary(dictionary:'Dictionary'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not dictionary is None)
    assert isinstance(dictionary, Dictionary), 'dictionary must be Dictionary'






    _ret = GLTFPhysicsBody.construct_without_init()
    _ret._ptr = static_method(356,2,tuple([dictionary._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def to_dictionary(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))
    return _ret


  @functools.native_method
  def get_body_type(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_body_type(self, body_type:'str'   ) -> None:
    r''''''

    assert(not body_type is None)
    assert isinstance(body_type, (str, String)), 'body_type must be str or String'

    self.py__body_type = body_type



    assert(isinstance(body_type, (str, String)))
    py_string_body_type = body_type if isinstance(body_type, StringName) else c_utils.py_string_to_string(body_type)

    py__string_body_type = utils.py_string_to_string(body_type)
    py__string_body_type.shouldBeDeleted = False


    self._ptr.call_with_return(80,tuple([py__string_body_type._ptr]))

  @functools.native_method
  def get_mass(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_mass(self, mass:'float'   ) -> None:
    r''''''

    assert isinstance(mass, (int, float)), 'mass must be int or float'

    self.py__mass = mass






    self._ptr.call_with_return(82,tuple([mass]))

  @functools.native_method
  def get_linear_velocity(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_linear_velocity(self, linear_velocity:'Vector3'   ) -> None:
    r''''''

    assert(not linear_velocity is None)
    assert isinstance(linear_velocity, Vector3), 'linear_velocity must be Vector3'

    self.py__linear_velocity = linear_velocity






    self._ptr.call_with_return(84,tuple([linear_velocity._ptr]))

  @functools.native_method
  def get_angular_velocity(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_angular_velocity(self, angular_velocity:'Vector3'   ) -> None:
    r''''''

    assert(not angular_velocity is None)
    assert isinstance(angular_velocity, Vector3), 'angular_velocity must be Vector3'

    self.py__angular_velocity = angular_velocity






    self._ptr.call_with_return(86,tuple([angular_velocity._ptr]))

  @functools.native_method
  def get_center_of_mass(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_center_of_mass(self, center_of_mass:'Vector3'   ) -> None:
    r''''''

    assert(not center_of_mass is None)
    assert isinstance(center_of_mass, Vector3), 'center_of_mass must be Vector3'

    self.py__center_of_mass = center_of_mass






    self._ptr.call_with_return(88,tuple([center_of_mass._ptr]))

  @functools.native_method
  def get_inertia_diagonal(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_inertia_diagonal(self, inertia_diagonal:'Vector3'   ) -> None:
    r''''''

    assert(not inertia_diagonal is None)
    assert isinstance(inertia_diagonal, Vector3), 'inertia_diagonal must be Vector3'

    self.py__inertia_diagonal = inertia_diagonal






    self._ptr.call_with_return(90,tuple([inertia_diagonal._ptr]))

  @functools.native_method
  def get_inertia_orientation(self) -> typing.Union['Quaternion']:
    r''''''




    _ret = Quaternion.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return _ret


  @functools.native_method
  def set_inertia_orientation(self, inertia_orientation:'Quaternion'   ) -> None:
    r''''''

    assert(not inertia_orientation is None)
    assert isinstance(inertia_orientation, Quaternion), 'inertia_orientation must be Quaternion'

    self.py__inertia_orientation = inertia_orientation






    self._ptr.call_with_return(92,tuple([inertia_orientation._ptr]))

  @functools.native_method
  def get_inertia_tensor(self) -> typing.Union['Basis']:
    r''''''




    _ret = Basis.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_inertia_tensor(self, inertia_tensor:'Basis'   ) -> None:
    r''''''

    assert(not inertia_tensor is None)
    assert isinstance(inertia_tensor, Basis), 'inertia_tensor must be Basis'

    self.py__inertia_tensor = inertia_tensor






    self._ptr.call_with_return(94,tuple([inertia_tensor._ptr]))


register_cast_function('GLTFPhysicsBody', GLTFPhysicsBody.cast)
register_class('GLTFPhysicsBody', GLTFPhysicsBody)
