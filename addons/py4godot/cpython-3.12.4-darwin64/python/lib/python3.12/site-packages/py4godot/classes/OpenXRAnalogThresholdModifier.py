# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRHapticVibration as py4godot_openxrhapticvibration 
  import py4godot.classes.OpenXRHapticBase as py4godot_openxrhapticbase 
import py4godot.classes.OpenXRActionBindingModifier as py4godot_openxractionbindingmodifier 
from py4godot.wrappers.wrappers import CPPOpenXRAnalogThresholdModifierWrapper


class OpenXRAnalogThresholdModifier(py4godot_openxractionbindingmodifier.OpenXRActionBindingModifier):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRAnalogThresholdModifier.construct_without_init()
    class_._ptr = constructor(536,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRAnalogThresholdModifier.construct_without_init()
    class_._ptr = constructor(536,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRAnalogThresholdModifierWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(536,0, ())


  def generate_wrapper(self):
    return CPPOpenXRAnalogThresholdModifierWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRAnalogThresholdModifier.__new__(OpenXRAnalogThresholdModifier)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRAnalogThresholdModifier'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRAnalogThresholdModifier.construct_without_init()
    cls._ptr = CPPOpenXRAnalogThresholdModifierWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRAnalogThresholdModifier.construct_without_init()
    cls._ptr = CPPOpenXRAnalogThresholdModifierWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def on_threshold(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_on_threshold()
    return _ret
  @on_threshold.setter
  def on_threshold(self,  value:'float'):
    self.set_on_threshold(value)
  @property
  def off_threshold(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_off_threshold()
    return _ret
  @off_threshold.setter
  def off_threshold(self,  value:'float'):
    self.set_off_threshold(value)
  @property
  def on_haptic(self) -> typing.Union['py4godot_openxrhapticbase.OpenXRHapticBase','py4godot_openxrhapticvibration.OpenXRHapticVibration']:
    r''''''
    _ret = self. get_on_haptic()
    return _ret
  @on_haptic.setter
  def on_haptic(self,  value:'py4godot_object.Object'):
    self.set_on_haptic(value)
  @property
  def off_haptic(self) -> typing.Union['py4godot_openxrhapticbase.OpenXRHapticBase','py4godot_openxrhapticvibration.OpenXRHapticVibration']:
    r''''''
    _ret = self. get_off_haptic()
    return _ret
  @off_haptic.setter
  def off_haptic(self,  value:'py4godot_object.Object'):
    self.set_off_haptic(value)
  @functools.native_method
  def set_on_threshold(self, on_threshold:'float'   ) -> None:
    r''''''

    assert isinstance(on_threshold, (int, float)), 'on_threshold must be int or float'

    self.py__on_threshold = on_threshold






    self._ptr.call_with_return(79,tuple([on_threshold]))

  @functools.native_method
  def get_on_threshold(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_off_threshold(self, off_threshold:'float'   ) -> None:
    r''''''

    assert isinstance(off_threshold, (int, float)), 'off_threshold must be int or float'

    self.py__off_threshold = off_threshold






    self._ptr.call_with_return(81,tuple([off_threshold]))

  @functools.native_method
  def get_off_threshold(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_on_haptic(self, haptic:'py4godot_openxrhapticbase.OpenXRHapticBase'   ) -> None:
    r''''''

    assert(not haptic is None)
    assert isinstance(haptic, get_class('OpenXRHapticBase')), 'haptic must be OpenXRHapticBase'

    self.py__on_haptic = haptic






    self._ptr.call_with_return(83,tuple([haptic._ptr]))

  @functools.native_method
  def get_on_haptic(self) -> typing.Union['py4godot_openxrhapticbase.OpenXRHapticBase','py4godot_openxrhapticvibration.OpenXRHapticVibration']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRHapticBase
    _ret._ptr = self._ptr.call_with_return(84,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_off_haptic(self, haptic:'py4godot_openxrhapticbase.OpenXRHapticBase'   ) -> None:
    r''''''

    assert(not haptic is None)
    assert isinstance(haptic, get_class('OpenXRHapticBase')), 'haptic must be OpenXRHapticBase'

    self.py__off_haptic = haptic






    self._ptr.call_with_return(85,tuple([haptic._ptr]))

  @functools.native_method
  def get_off_haptic(self) -> typing.Union['py4godot_openxrhapticbase.OpenXRHapticBase','py4godot_openxrhapticvibration.OpenXRHapticVibration']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRHapticBase
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('OpenXRAnalogThresholdModifier', OpenXRAnalogThresholdModifier.cast)
register_class('OpenXRAnalogThresholdModifier', OpenXRAnalogThresholdModifier)
