# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPSceneTreeTimerWrapper


class SceneTreeTimer(py4godot_refcounted.RefCounted):
  r'''
		A one-shot timer managed by the scene tree, which emits `signal timeout` on completion. See also `SceneTree.create_timer`.
		As opposed to `Timer`, it does not require the instantiation of a node. Commonly used to create a one-shot delay timer as in the following example:
		
		```gdscript
		func some_function():
			print("Timer started.")
			await get_tree().create_timer(1.0).timeout
			print("Timer ended.")
		```
		
		
		The timer will be dereferenced after its time elapses. To preserve the timer, you can keep a reference to it. See `RefCounted`.
		**Note:** The timer is processed after all of the nodes in the current frame, i.e. node's `Node._process` method would be called before the timer (or `Node._physics_process` if `process_in_physics` in `SceneTree.create_timer` has been set to `true`).
	'''

  @staticmethod
  def constructor():
    class_ = SceneTreeTimer.construct_without_init()
    class_._ptr = constructor(720,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SceneTreeTimer.construct_without_init()
    class_._ptr = constructor(720,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSceneTreeTimerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(720,0, ())


  def generate_wrapper(self):
    return CPPSceneTreeTimerWrapper()
  def init_signals(self):
    super().init_signals()
    timeout_name = utils.py_string_to_string_name("timeout")
    self.timeout = signals.BuiltinSignal(self, timeout_name)

  @staticmethod
  def construct_without_init():
    cls = SceneTreeTimer.__new__(SceneTreeTimer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SceneTreeTimer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SceneTreeTimer.construct_without_init()
    cls._ptr = CPPSceneTreeTimerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SceneTreeTimer.construct_without_init()
    cls._ptr = CPPSceneTreeTimerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def time_left(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_time_left()
    return _ret
  @time_left.setter
  def time_left(self,  value:'float'):
    self.set_time_left(value)
  @functools.native_method
  def set_time_left(self, time:'float'   ) -> None:
    r''''''

    assert isinstance(time, (int, float)), 'time must be int or float'

    self.py__time_left = time






    self._ptr.call_with_return(53,tuple([time]))

  @functools.native_method
  def get_time_left(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret



register_cast_function('SceneTreeTimer', SceneTreeTimer.cast)
register_class('SceneTreeTimer', SceneTreeTimer)
