# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Logger as py4godot_logger 
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPOSWrapper

_OS_singleton_instance = None
class RenderingDriver:
  RENDERING_DRIVER_VULKAN = 0
  RENDERING_DRIVER_OPENGL3 = 1
  RENDERING_DRIVER_D3D12 = 2
  RENDERING_DRIVER_METAL = 3
class SystemDir:
  SYSTEM_DIR_DESKTOP = 0
  SYSTEM_DIR_DCIM = 1
  SYSTEM_DIR_DOCUMENTS = 2
  SYSTEM_DIR_DOWNLOADS = 3
  SYSTEM_DIR_MOVIES = 4
  SYSTEM_DIR_MUSIC = 5
  SYSTEM_DIR_PICTURES = 6
  SYSTEM_DIR_RINGTONES = 7
class StdHandleType:
  STD_HANDLE_INVALID = 0
  STD_HANDLE_CONSOLE = 1
  STD_HANDLE_FILE = 2
  STD_HANDLE_PIPE = 3
  STD_HANDLE_UNKNOWN = 4


class OS(py4godot_object.Object):
  r'''
		The `OS` class wraps the most common functionalities for communicating with the host operating system, such as the video driver, delays, environment variables, execution of binaries, command line, etc.
		**Note:** In Godot 4, `OS` functions related to window management, clipboard, and TTS were moved to the `DisplayServer` singleton (and the `Window` class). Functions related to time were removed and are only available in the `Time` class.
	'''


  def generate_wrapper(self):
    return CPPOSWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OS.__new__(OS)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OS'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OS.construct_without_init()
    cls._ptr = CPPOSWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OS.construct_without_init()
    cls._ptr = CPPOSWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _OS_singleton_instance
    if _OS_singleton_instance is None:
      singleton = OS()
      singleton._ptr = constructor(522,0, ())
      _OS_singleton_instance = singleton
    return _OS_singleton_instance

  @property
  def low_processor_usage_mode(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_in_low_processor_usage_mode()
    return _ret
  @low_processor_usage_mode.setter
  def low_processor_usage_mode(self,  value:'bool'):
    self.set_low_processor_usage_mode(value)
  @property
  def low_processor_usage_mode_sleep_usec(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_low_processor_usage_mode_sleep_usec()
    return _ret
  @low_processor_usage_mode_sleep_usec.setter
  def low_processor_usage_mode_sleep_usec(self,  value:'int'):
    self.set_low_processor_usage_mode_sleep_usec(value)
  @property
  def delta_smoothing(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_delta_smoothing_enabled()
    return _ret
  @delta_smoothing.setter
  def delta_smoothing(self,  value:'bool'):
    self.set_delta_smoothing(value)
  @functools.native_method
  def get_entropy(self, size:'int'   ) -> typing.Union['PackedByteArray']:
    r'''
				Generates a `PackedByteArray` of cryptographically secure random bytes with given `size`.
				**Note:** Generating large quantities of bytes using this method can result in locking and entropy of lower quality on most platforms. Using `Crypto.generate_random_bytes` is preferred in most cases.
			'''

    assert isinstance(size, (int, float)), 'size must be int or float'






    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(49,tuple([size]))
    return _ret


  @functools.native_method
  def get_system_ca_certificates(self) -> typing.Union[str]:
    r'''
				Returns the list of certification authorities trusted by the operating system as a string of concatenated certificates in PEM format.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(50,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_connected_midi_inputs(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns an array of connected MIDI device names, if they exist. Returns an empty array if the system MIDI driver has not previously been initialized with `open_midi_inputs`. See also `close_midi_inputs`.
				**Note:** This method is implemented on Linux, macOS, Windows, and Web.
				**Note:** On the Web platform, Web MIDI needs to be supported by the browser. `url=https://caniuse.com/midi`For the time being`/url`, it is currently supported by all major browsers, except Safari.
				**Note:** On the Web platform, using MIDI input requires a browser permission to be granted first. This permission request is performed when calling `open_midi_inputs`. The browser will refrain from processing MIDI input until the user accepts the permission request.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(51,tuple([]))
    return _ret


  @functools.native_method
  def open_midi_inputs(self) -> None:
    r'''
				Initializes the singleton for the system MIDI driver, allowing Godot to receive `InputEventMIDI`. See also `get_connected_midi_inputs` and `close_midi_inputs`.
				**Note:** This method is implemented on Linux, macOS, Windows, and Web.
				**Note:** On the Web platform, Web MIDI needs to be supported by the browser. `url=https://caniuse.com/midi`For the time being`/url`, it is currently supported by all major browsers, except Safari.
				**Note:** On the Web platform, using MIDI input requires a browser permission to be granted first. This permission request is performed when calling `open_midi_inputs`. The browser will refrain from processing MIDI input until the user accepts the permission request.
			'''




    self._ptr.call_with_return(52,tuple([]))

  @functools.native_method
  def close_midi_inputs(self) -> None:
    r'''
				Shuts down the system MIDI driver. Godot will no longer receive `InputEventMIDI`. See also `open_midi_inputs` and `get_connected_midi_inputs`.
				**Note:** This method is implemented on Linux, macOS, Windows, and Web.
			'''




    self._ptr.call_with_return(53,tuple([]))

  @functools.native_method
  def alert(self, text:'str'   , title:'str' ="Alert!"  ) -> None:
    r'''
				Displays a modal dialog box using the host platform's implementation. The engine execution is blocked until the dialog is closed.
			'''
    if title is None:
      title = String.new0()
    if title is None:
      title = String.new0()

    assert(not text is None)
    assert isinstance(text, (str, String)), 'text must be str or String'




    assert(isinstance(text, (str, String)))
    py_string_text = text if isinstance(text, StringName) else c_utils.py_string_to_string(text)
    assert(isinstance(title, (str, String)))
    py_string_title = title if isinstance(title, StringName) else c_utils.py_string_to_string(title)

    self._ptr.call_with_return(54,tuple([py_string_text._ptr, py_string_title._ptr]))

  @functools.native_method
  def crash(self, message:'str'   ) -> None:
    r'''
				Crashes the engine (or the editor if called within a `@tool` script). See also `kill`.
				**Note:** This method should _only_ be used for testing the system's crash handler, not for any other purpose. For general error reporting, use (in order of preference) `@GDScript.assert`, `@GlobalScope.push_error`, or `alert`.
			'''

    assert(not message is None)
    assert isinstance(message, (str, String)), 'message must be str or String'




    assert(isinstance(message, (str, String)))
    py_string_message = message if isinstance(message, StringName) else c_utils.py_string_to_string(message)

    self._ptr.call_with_return(55,tuple([py_string_message._ptr]))

  @functools.native_method
  def set_low_processor_usage_mode(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__low_processor_usage_mode = enable






    self._ptr.call_with_return(56,tuple([enable]))

  @functools.native_method
  def is_in_low_processor_usage_mode(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))

    return _ret


  @functools.native_method
  def set_low_processor_usage_mode_sleep_usec(self, usec:'int'   ) -> None:
    r''''''

    assert isinstance(usec, (int, float)), 'usec must be int or float'

    self.py__low_processor_usage_mode_sleep_usec = usec






    self._ptr.call_with_return(58,tuple([usec]))

  @functools.native_method
  def get_low_processor_usage_mode_sleep_usec(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([]))

    return _ret


  @functools.native_method
  def set_delta_smoothing(self, delta_smoothing_enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(delta_smoothing_enabled, bool), 'delta_smoothing_enabled must be bool'

    self.py__delta_smoothing = delta_smoothing_enabled






    self._ptr.call_with_return(60,tuple([delta_smoothing_enabled]))

  @functools.native_method
  def is_delta_smoothing_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(61,tuple([]))

    return _ret


  @functools.native_method
  def get_processor_count(self) -> typing.Union[int]:
    r'''
				Returns the number of _logical_ CPU cores available on the host machine. On CPUs with HyperThreading enabled, this number will be greater than the number of _physical_ CPU cores.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([]))
    return _ret


  @functools.native_method
  def get_processor_name(self) -> typing.Union[str]:
    r'''
				Returns the full name of the CPU model on the host machine (e.g. `"Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz"`).
				**Note:** This method is only implemented on Windows, macOS, Linux and iOS. On Android and Web, `get_processor_name` returns an empty string.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(63,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_system_fonts(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns the list of font family names available.
				**Note:** This method is implemented on Android, iOS, Linux, macOS and Windows.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(64,tuple([]))
    return _ret


  @functools.native_method
  def get_system_font_path(self, font_name:'str'   , weight:'int' =400  , stretch:'int' =100  , italic:'bool' =False  ) -> typing.Union[str]:
    r'''
				Returns the path to the system font file with `font_name` and style. Returns an empty string if no matching fonts found.
				The following aliases can be used to request default fonts: "sans-serif", "serif", "monospace", "cursive", and "fantasy".
				**Note:** Returned font might have different style if the requested style is not available.
				**Note:** This method is implemented on Android, iOS, Linux, macOS and Windows.
			'''

    assert(not font_name is None)
    assert isinstance(font_name, (str, String)), 'font_name must be str or String'
    assert isinstance(weight, (int, float)), 'weight must be int or float'
    assert isinstance(stretch, (int, float)), 'stretch must be int or float'
    assert isinstance(italic, bool), 'italic must be bool'




    assert(isinstance(font_name, (str, String)))
    py_string_font_name = font_name if isinstance(font_name, StringName) else c_utils.py_string_to_string(font_name)




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(65,tuple([py_string_font_name._ptr, weight, stretch, italic]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_system_font_path_for_text(self, font_name:'str'   , text:'str'   , locale:'str' =""  , script:'str' =""  , weight:'int' =400  , stretch:'int' =100  , italic:'bool' =False  ) -> typing.Union['PackedStringArray']:
    r'''
				Returns an array of the system substitute font file paths, which are similar to the font with `font_name` and style for the specified text, locale, and script. Returns an empty array if no matching fonts found.
				The following aliases can be used to request default fonts: "sans-serif", "serif", "monospace", "cursive", and "fantasy".
				**Note:** Depending on OS, it's not guaranteed that any of the returned fonts will be suitable for rendering specified text. Fonts should be loaded and checked in the order they are returned, and the first suitable one used.
				**Note:** Returned fonts might have different style if the requested style is not available or belong to a different font family.
				**Note:** This method is implemented on Android, iOS, Linux, macOS and Windows.
			'''
    if locale is None:
      locale = String.new0()
    if script is None:
      script = String.new0()
    if locale is None:
      locale = String.new0()
    if script is None:
      script = String.new0()

    assert(not font_name is None)
    assert isinstance(font_name, (str, String)), 'font_name must be str or String'
    assert(not text is None)
    assert isinstance(text, (str, String)), 'text must be str or String'
    assert isinstance(weight, (int, float)), 'weight must be int or float'
    assert isinstance(stretch, (int, float)), 'stretch must be int or float'
    assert isinstance(italic, bool), 'italic must be bool'




    assert(isinstance(font_name, (str, String)))
    py_string_font_name = font_name if isinstance(font_name, StringName) else c_utils.py_string_to_string(font_name)
    assert(isinstance(text, (str, String)))
    py_string_text = text if isinstance(text, StringName) else c_utils.py_string_to_string(text)
    assert(isinstance(locale, (str, String)))
    py_string_locale = locale if isinstance(locale, StringName) else c_utils.py_string_to_string(locale)
    assert(isinstance(script, (str, String)))
    py_string_script = script if isinstance(script, StringName) else c_utils.py_string_to_string(script)




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(66,tuple([py_string_font_name._ptr, py_string_text._ptr, py_string_locale._ptr, py_string_script._ptr, weight, stretch, italic]))
    return _ret


  @functools.native_method
  def get_executable_path(self) -> typing.Union[str]:
    r'''
				Returns the file path to the current engine executable.
				**Note:** On macOS, if you want to launch another instance of Godot, always use `create_instance` instead of relying on the executable path.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(67,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def read_string_from_stdin(self, buffer_size:'int' =1024  ) -> typing.Union[str]:
    r'''
				Reads a user input as a UTF-8 encoded string from the standard input. This operation can be _blocking_, which causes the window to freeze if `read_string_from_stdin` is called on the main thread.
				- If standard input is console, this method will block until the program receives a line break in standard input (usually by the user pressing `kbd`Enter`/kbd`).
				- If standard input is pipe, this method will block until a specific amount of data is read or pipe is closed.
				- If standard input is a file, this method will read a specific amount of data (or less if end-of-file is reached) and return immediately.
				**Note:** This method automatically replaces `\r\n` line breaks with `\n` and removes them from the end of the string. Use `read_buffer_from_stdin` to read the unprocessed data.
				**Note:** This method is implemented on Linux, macOS, and Windows.
				**Note:** On exported Windows builds, run the console wrapper executable to access the terminal. If standard input is console, calling this method without console wrapped will freeze permanently. If standard input is pipe or file, it can be used without console wrapper. If you need a single executable with full console support, use a custom build compiled with the `windows_subsystem=console` flag.
			'''

    assert isinstance(buffer_size, (int, float)), 'buffer_size must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(68,tuple([buffer_size]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def read_buffer_from_stdin(self, buffer_size:'int' =1024  ) -> typing.Union['PackedByteArray']:
    r'''
				Reads a user input as raw data from the standard input. This operation can be _blocking_, which causes the window to freeze if `read_buffer_from_stdin` is called on the main thread.
				- If standard input is console, this method will block until the program receives a line break in standard input (usually by the user pressing `kbd`Enter`/kbd`).
				- If standard input is pipe, this method will block until a specific amount of data is read or pipe is closed.
				- If standard input is a file, this method will read a specific amount of data (or less if end-of-file is reached) and return immediately.
				**Note:** This method is implemented on Linux, macOS, and Windows.
				**Note:** On exported Windows builds, run the console wrapper executable to access the terminal. If standard input is console, calling this method without console wrapped will freeze permanently. If standard input is pipe or file, it can be used without console wrapper. If you need a single executable with full console support, use a custom build compiled with the `windows_subsystem=console` flag.
			'''

    assert isinstance(buffer_size, (int, float)), 'buffer_size must be int or float'






    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(69,tuple([buffer_size]))
    return _ret


  @functools.native_method
  def get_stdin_type(self) -> typing.Union[int]:
    r'''
				Returns the type of the standard input device.
				**Note:** This method is implemented on Linux, macOS, and Windows.
				**Note:** On exported Windows builds, run the console wrapper executable to access the standard input. If you need a single executable with full console support, use a custom build compiled with the `windows_subsystem=console` flag.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(70,tuple([]))
    return _ret


  @functools.native_method
  def get_stdout_type(self) -> typing.Union[int]:
    r'''
				Returns the type of the standard output device.
				**Note:** This method is implemented on Linux, macOS, and Windows.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(71,tuple([]))
    return _ret


  @functools.native_method
  def get_stderr_type(self) -> typing.Union[int]:
    r'''
				Returns the type of the standard error device.
				**Note:** This method is implemented on Linux, macOS, and Windows.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(72,tuple([]))
    return _ret


  @functools.native_method
  def execute(self, path:'str'   , arguments:'PackedStringArray'   , output:'Array' = None  , read_stderr:'bool' =False  , open_console:'bool' =False  ) -> typing.Union[int]:
    r'''
				Executes the given process in a _blocking_ way. The file specified in `path` must exist and be executable. The system path resolution will be used. The `arguments` are used in the given order, separated by spaces, and wrapped in quotes.
				If an `output` array is provided, the complete shell output of the process is appended to `output` as a single `String` element. If `read_stderr` is `true`, the output to the standard error stream is also appended to the array.
				On Windows, if `open_console` is `true` and the process is a console app, a new terminal window is opened.
				This method returns the exit code of the command, or `-1` if the process fails to execute.
				**Note:** The main thread will be blocked until the executed command terminates. Use `Thread` to create a separate thread that will not block the main thread, or use `create_process` to create a completely independent process.
				For example, to retrieve a list of the working directory's contents:
				
				```gdscript
				var output = ``
				var exit_code = OS.execute("ls", `"-l", "/tmp"`, output)
				```
				
				
				If you wish to access a shell built-in or execute a composite command, a platform-specific shell can be invoked. For example:
				
				```gdscript
				var output = ``
				OS.execute("CMD.exe", `"/C", "cd %TEMP% && dir"`, output)
				```
				
				
				**Note:** This method is implemented on Android, Linux, macOS, and Windows.
				**Note:** To execute a Windows command interpreter built-in command, specify `cmd.exe` in `path`, `/c` as the first argument, and the desired command as the second argument.
				**Note:** To execute a PowerShell built-in command, specify `powershell.exe` in `path`, `-Command` as the first argument, and the desired command as the second argument.
				**Note:** To execute a Unix shell built-in command, specify shell executable name in `path`, `-c` as the first argument, and the desired command as the second argument.
				**Note:** On macOS, sandboxed applications are limited to run only embedded helper executables, specified during export.
				**Note:** On Android, system commands such as `dumpsys` can only be run on a rooted device.
			'''
    if output is None:
      output = Array.new0()
    if output is None:
      output = Array.new0()

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not arguments is None)
    assert isinstance(arguments, PackedStringArray), 'arguments must be PackedStringArray'
    assert isinstance(read_stderr, bool), 'read_stderr must be bool'
    assert isinstance(open_console, bool), 'open_console must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)





    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([py_string_path._ptr, arguments._ptr, output._ptr, read_stderr, open_console]))
    return _ret


  @functools.native_method
  def execute_with_pipe(self, path:'str'   , arguments:'PackedStringArray'   , blocking:'bool' =True  ) -> typing.Union['Dictionary']:
    r'''
				Creates a new process that runs independently of Godot with redirected IO. It will not terminate when Godot terminates. The path specified in `path` must exist and be an executable file or macOS `.app` bundle. The path is resolved based on the current platform. The `arguments` are used in the given order and separated by a space.
				If `blocking` is `false`, created pipes work in non-blocking mode, i.e. read and write operations will return immediately. Use `FileAccess.get_error` to check if the last read/write operation was successful.
				If the process cannot be created, this method returns an empty `Dictionary`. Otherwise, this method returns a `Dictionary` with the following keys:
				- `"stdio"` - `FileAccess` to access the process stdin and stdout pipes (read/write).
				- `"stderr"` - `FileAccess` to access the process stderr pipe (read only).
				- `"pid"` - Process ID as an `int`, which you can use to monitor the process (and potentially terminate it with `kill`).
				**Note:** This method is implemented on Android, Linux, macOS, and Windows.
				**Note:** To execute a Windows command interpreter built-in command, specify `cmd.exe` in `path`, `/c` as the first argument, and the desired command as the second argument.
				**Note:** To execute a PowerShell built-in command, specify `powershell.exe` in `path`, `-Command` as the first argument, and the desired command as the second argument.
				**Note:** To execute a Unix shell built-in command, specify shell executable name in `path`, `-c` as the first argument, and the desired command as the second argument.
				**Note:** On macOS, sandboxed applications are limited to run only embedded helper executables, specified during export or system .app bundle, system .app bundles will ignore arguments.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not arguments is None)
    assert isinstance(arguments, PackedStringArray), 'arguments must be PackedStringArray'
    assert isinstance(blocking, bool), 'blocking must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)



    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(74,tuple([py_string_path._ptr, arguments._ptr, blocking]))
    return _ret


  @functools.native_method
  def create_process(self, path:'str'   , arguments:'PackedStringArray'   , open_console:'bool' =False  ) -> typing.Union[int]:
    r'''
				Creates a new process that runs independently of Godot. It will not terminate when Godot terminates. The path specified in `path` must exist and be an executable file or macOS `.app` bundle. The path is resolved based on the current platform. The `arguments` are used in the given order and separated by a space.
				On Windows, if `open_console` is `true` and the process is a console app, a new terminal window will be opened.
				If the process is successfully created, this method returns its process ID, which you can use to monitor the process (and potentially terminate it with `kill`). Otherwise, this method returns `-1`.
				**Example:** Run another instance of the project:
				
				```gdscript
				var pid = OS.create_process(OS.get_executable_path(), ``)
				```
				
				
				See `execute` if you wish to run an external command and retrieve the results.
				**Note:** This method is implemented on Android, Linux, macOS, and Windows.
				**Note:** On macOS, sandboxed applications are limited to run only embedded helper executables, specified during export or system .app bundle, system .app bundles will ignore arguments.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not arguments is None)
    assert isinstance(arguments, PackedStringArray), 'arguments must be PackedStringArray'
    assert isinstance(open_console, bool), 'open_console must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)



    _ret = 0
    _ret = self._ptr.call_with_return(75,tuple([py_string_path._ptr, arguments._ptr, open_console]))
    return _ret


  @functools.native_method
  def create_instance(self, arguments:'PackedStringArray'   ) -> typing.Union[int]:
    r'''
				Creates a new instance of Godot that runs independently. The `arguments` are used in the given order and separated by a space.
				If the process is successfully created, this method returns the new process' ID, which you can use to monitor the process (and potentially terminate it with `kill`). If the process cannot be created, this method returns `-1`.
				See `create_process` if you wish to run a different process.
				**Note:** This method is implemented on Android, Linux, macOS and Windows.
			'''

    assert(not arguments is None)
    assert isinstance(arguments, PackedStringArray), 'arguments must be PackedStringArray'






    _ret = 0
    _ret = self._ptr.call_with_return(76,tuple([arguments._ptr]))
    return _ret


  @functools.native_method
  def open_with_program(self, program_path:'str'   , paths:'PackedStringArray'   ) -> typing.Union[int]:
    r'''
				Opens one or more files/directories with the specified application. The `program_path` specifies the path to the application to use for opening the files, and `paths` contains an array of file/directory paths to open.
				**Note:** This method is mostly only relevant for macOS, where opening files using `create_process` might fail. On other platforms, this falls back to using `create_process`.
				**Note:** On macOS, `program_path` should ideally be the path to a `.app` bundle.
			'''

    assert(not program_path is None)
    assert isinstance(program_path, (str, String)), 'program_path must be str or String'
    assert(not paths is None)
    assert isinstance(paths, PackedStringArray), 'paths must be PackedStringArray'




    assert(isinstance(program_path, (str, String)))
    py_string_program_path = program_path if isinstance(program_path, StringName) else c_utils.py_string_to_string(program_path)


    _ret:int
    _ret = self._ptr.call_with_return(77,tuple([py_string_program_path._ptr, paths._ptr]))
    return _ret


  @functools.native_method
  def kill(self, pid:'int'   ) -> typing.Union[int]:
    r'''
				Kill (terminate) the process identified by the given process ID (`pid`), such as the ID returned by `execute` in non-blocking mode. See also `crash`.
				**Note:** This method can also be used to kill processes that were not spawned by the engine.
				**Note:** This method is implemented on Android, iOS, Linux, macOS and Windows.
			'''

    assert isinstance(pid, (int, float)), 'pid must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(78,tuple([pid]))
    return _ret


  @functools.native_method
  def shell_open(self, uri:'str'   ) -> typing.Union[int]:
    r'''
				Requests the OS to open a resource identified by `uri` with the most appropriate program. For example:
				- `OS.shell_open("C:\\Users\\name\\Downloads")` on Windows opens the file explorer at the user's Downloads folder.
				- `OS.shell_open("C:/Users/name/Downloads")` also works on Windows and opens the file explorer at the user's Downloads folder.
				- `OS.shell_open("https://godotengine.org")` opens the default web browser on the official Godot website.
				- `OS.shell_open("mailto:example@example.com")` opens the default email client with the "To" field set to `example@example.com`. See `url=https://datatracker.ietf.org/doc/html/rfc2368`RFC 2368 - The `mailto` URL scheme`/url` for a list of fields that can be added.
				Use `ProjectSettings.globalize_path` to convert a `res://` or `user://` project path into a system path for use with this method.
				**Note:** Use `String.uri_encode` to encode characters within URLs in a URL-safe, portable way. This is especially required for line breaks. Otherwise, `shell_open` may not work correctly in a project exported to the Web platform.
				**Note:** This method is implemented on Android, iOS, Web, Linux, macOS and Windows.
			'''

    assert(not uri is None)
    assert isinstance(uri, (str, String)), 'uri must be str or String'




    assert(isinstance(uri, (str, String)))
    py_string_uri = uri if isinstance(uri, StringName) else c_utils.py_string_to_string(uri)

    _ret:int
    _ret = self._ptr.call_with_return(79,tuple([py_string_uri._ptr]))
    return _ret


  @functools.native_method
  def shell_show_in_file_manager(self, file_or_dir_path:'str'   , open_folder:'bool' =True  ) -> typing.Union[int]:
    r'''
				Requests the OS to open the file manager, navigate to the given `file_or_dir_path` and select the target file or folder.
				If `open_folder` is `true` and `file_or_dir_path` is a valid directory path, the OS will open the file manager and navigate to the target folder without selecting anything.
				Use `ProjectSettings.globalize_path` to convert a `res://` or `user://` project path into a system path to use with this method.
				**Note:** This method is currently only implemented on Windows and macOS. On other platforms, it will fallback to `shell_open` with a directory path of `file_or_dir_path` prefixed with `file://`.
			'''

    assert(not file_or_dir_path is None)
    assert isinstance(file_or_dir_path, (str, String)), 'file_or_dir_path must be str or String'
    assert isinstance(open_folder, bool), 'open_folder must be bool'




    assert(isinstance(file_or_dir_path, (str, String)))
    py_string_file_or_dir_path = file_or_dir_path if isinstance(file_or_dir_path, StringName) else c_utils.py_string_to_string(file_or_dir_path)


    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([py_string_file_or_dir_path._ptr, open_folder]))
    return _ret


  @functools.native_method
  def is_process_running(self, pid:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the child process ID (`pid`) is still running or `false` if it has terminated. `pid` must be a valid ID generated from `create_process`.
				**Note:** This method is implemented on Android, iOS, Linux, macOS, and Windows.
			'''

    assert isinstance(pid, (int, float)), 'pid must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([pid]))
    return _ret


  @functools.native_method
  def get_process_exit_code(self, pid:'int'   ) -> typing.Union[int]:
    r'''
				Returns the exit code of a spawned process once it has finished running (see `is_process_running`).
				Returns `-1` if the `pid` is not a PID of a spawned child process, the process is still running, or the method is not implemented for the current platform.
				**Note:** Returns `-1` if the `pid` is a macOS bundled app process.
				**Note:** This method is implemented on Android, Linux, macOS and Windows.
			'''

    assert isinstance(pid, (int, float)), 'pid must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([pid]))
    return _ret


  @functools.native_method
  def get_process_id(self) -> typing.Union[int]:
    r'''
				Returns the number used by the host machine to uniquely identify this application.
				**Note:** On Web, this method always returns `0`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))
    return _ret


  @functools.native_method
  def has_environment(self, variable:'str'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the environment variable with the name `variable` exists.
				**Note:** Double-check the casing of `variable`. Environment variable names are case-sensitive on all platforms except Windows.
			'''

    assert(not variable is None)
    assert isinstance(variable, (str, String)), 'variable must be str or String'




    assert(isinstance(variable, (str, String)))
    py_string_variable = variable if isinstance(variable, StringName) else c_utils.py_string_to_string(variable)

    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([py_string_variable._ptr]))
    return _ret


  @functools.native_method
  def get_environment(self, variable:'str'   ) -> typing.Union[str]:
    r'''
				Returns the value of the given environment variable, or an empty string if `variable` doesn't exist.
				**Note:** Double-check the casing of `variable`. Environment variable names are case-sensitive on all platforms except Windows.
				**Note:** On macOS, applications do not have access to shell environment variables.
			'''

    assert(not variable is None)
    assert isinstance(variable, (str, String)), 'variable must be str or String'




    assert(isinstance(variable, (str, String)))
    py_string_variable = variable if isinstance(variable, StringName) else c_utils.py_string_to_string(variable)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([py_string_variable._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_environment(self, variable:'str'   , value:'str'   ) -> None:
    r'''
				Sets the value of the environment variable `variable` to `value`. The environment variable will be set for the Godot process and any process executed with `execute` after running `set_environment`. The environment variable will _not_ persist to processes run after the Godot process was terminated.
				**Note:** Environment variable names are case-sensitive on all platforms except Windows. The `variable` name cannot be empty or include the `=` character. On Windows, there is a 32767 characters limit for the combined length of `variable`, `value`, and the `=` and null terminator characters that will be registered in the environment block.
			'''

    assert(not variable is None)
    assert isinstance(variable, (str, String)), 'variable must be str or String'
    assert(not value is None)
    assert isinstance(value, (str, String)), 'value must be str or String'




    assert(isinstance(variable, (str, String)))
    py_string_variable = variable if isinstance(variable, StringName) else c_utils.py_string_to_string(variable)
    assert(isinstance(value, (str, String)))
    py_string_value = value if isinstance(value, StringName) else c_utils.py_string_to_string(value)

    self._ptr.call_with_return(86,tuple([py_string_variable._ptr, py_string_value._ptr]))

  @functools.native_method
  def unset_environment(self, variable:'str'   ) -> None:
    r'''
				Removes the given environment variable from the current environment, if it exists. The `variable` name cannot be empty or include the `=` character. The environment variable will be removed for the Godot process and any process executed with `execute` after running `unset_environment`. The removal of the environment variable will _not_ persist to processes run after the Godot process was terminated.
				**Note:** Environment variable names are case-sensitive on all platforms except Windows.
			'''

    assert(not variable is None)
    assert isinstance(variable, (str, String)), 'variable must be str or String'




    assert(isinstance(variable, (str, String)))
    py_string_variable = variable if isinstance(variable, StringName) else c_utils.py_string_to_string(variable)

    self._ptr.call_with_return(87,tuple([py_string_variable._ptr]))

  @functools.native_method
  def get_name(self) -> typing.Union[str]:
    r'''
				Returns the name of the host platform.
				- On Windows, this is `"Windows"`.
				- On macOS, this is `"macOS"`.
				- On Linux-based operating systems, this is `"Linux"`.
				- On BSD-based operating systems, this is `"FreeBSD"`, `"NetBSD"`, `"OpenBSD"`, or `"BSD"` as a fallback.
				- On Android, this is `"Android"`.
				- On iOS, this is `"iOS"`.
				- On Web, this is `"Web"`.
				**Note:** Custom builds of the engine may support additional platforms, such as consoles, possibly returning other names.
				
				```gdscript
				match OS.get_name():
					"Windows":
						print("Welcome to Windows!")
					"macOS":
						print("Welcome to macOS!")
					"Linux", "FreeBSD", "NetBSD", "OpenBSD", "BSD":
						print("Welcome to Linux/BSD!")
					"Android":
						print("Welcome to Android!")
					"iOS":
						print("Welcome to iOS!")
					"Web":
						print("Welcome to the Web!")
				```
				
				
				**Note:** On Web platforms, it is still possible to determine the host platform's OS with feature tags. See `has_feature`.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(88,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_distribution_name(self) -> typing.Union[str]:
    r'''
				Returns the name of the distribution for Linux and BSD platforms (e.g. "Ubuntu", "Manjaro", "OpenBSD", etc.).
				Returns the same value as `get_name` for stock Android ROMs, but attempts to return the custom ROM name for popular Android derivatives such as "LineageOS".
				Returns the same value as `get_name` for other platforms.
				**Note:** This method is not supported on the Web platform. It returns an empty string.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(89,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_version(self) -> typing.Union[str]:
    r'''
				Returns the exact production and build version of the operating system. This is different from the branded version used in marketing. This helps to distinguish between different releases of operating systems, including minor versions, and insider and custom builds.
				- For Windows, the major and minor version are returned, as well as the build number. For example, the returned string may look like `10.0.9926` for a build of Windows 10.
				- For rolling distributions, such as Arch Linux, an empty string is returned.
				- For macOS and iOS, the major and minor version are returned, as well as the patch number.
				- For Android, the SDK version and the incremental build number are returned. If it's a custom ROM, it attempts to return its version instead.
				**Note:** This method is not supported on the Web platform. It returns an empty string.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(90,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_version_alias(self) -> typing.Union[str]:
    r'''
				Returns the branded version used in marketing, followed by the build number (on Windows), the version number (on macOS), or the SDK version and incremental build number (on Android). Examples include `11 (build 22000)`, `Sequoia (15.0.0)`, and `15 (SDK 35 build abc528-11988f)`.
				This value can then be appended to `get_name` to get a full, human-readable operating system name and version combination for the operating system. Windows feature updates such as 24H2 are not contained in the resulting string, but Windows Server is recognized as such (e.g. `2025 (build 26100)` for Windows Server 2025).
				**Note:** This method is only supported on Windows, macOS, and Android. On other operating systems, it returns the same value as `get_version`.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_cmdline_args(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns the command-line arguments passed to the engine.
				Command-line arguments can be written in any form, including both `--key value` and `--key=value` forms so they can be properly parsed, as long as custom command-line arguments do not conflict with engine arguments.
				You can also incorporate environment variables using the `get_environment` method.
				You can set `ProjectSettings.editor/run/main_run_args` to define command-line arguments to be passed by the editor when running the project.
				**Example:** Parse command-line arguments into a `Dictionary` using the `--key=value` form for arguments:
				
				```gdscript
				var arguments = {}
				for argument in OS.get_cmdline_args():
					if argument.contains("="):
						var key_value = argument.split("=")
						arguments`key_value`0`.trim_prefix("--")` = key_value`1`
					else:
						# Options without an argument will be present in the dictionary,
						# with the value set to an empty string.
						arguments`argument.trim_prefix("--")` = ""
				```
				
				
				**Note:** Passing custom user arguments directly is not recommended, as the engine may discard or modify them. Instead, pass the standard UNIX double dash (`--`) and then the custom arguments, which the engine will ignore by design. These can be read via `get_cmdline_user_args`.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(92,tuple([]))
    return _ret


  @functools.native_method
  def get_cmdline_user_args(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns the command-line user arguments passed to the engine. User arguments are ignored by the engine and reserved for the user. They are passed after the double dash `--` argument. `++` may be used when `--` is intercepted by another program (such as `startx`).
				```gdscript
				# Godot has been executed with the following command:
				# godot --fullscreen -- --level=2 --hardcore

				OS.get_cmdline_args()      # Returns `"--fullscreen", "--level=2", "--hardcore"`
				OS.get_cmdline_user_args() # Returns `"--level=2", "--hardcore"`
				```
				To get all passed arguments, use `get_cmdline_args`.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(93,tuple([]))
    return _ret


  @functools.native_method
  def get_video_adapter_driver_info(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns the video adapter driver name and version for the user's currently active graphics card, as a `PackedStringArray`. See also `RenderingServer.get_video_adapter_api_version`.
				The first element holds the driver name, such as `nvidia`, `amdgpu`, etc.
				The second element holds the driver version. For example, on the `nvidia` driver on a Linux/BSD platform, the version is in the format `510.85.02`. For Windows, the driver's format is `31.0.15.1659`.
				**Note:** This method is only supported on Linux/BSD and Windows when not running in headless mode. On other platforms, it returns an empty array.
				**Note:** This method will run slowly the first time it is called in a session; it can take several seconds depending on the operating system and hardware. It is blocking if called on the main thread, so it's recommended to call it on a separate thread using `Thread`. This allows the engine to keep running while the information is being retrieved. However, `get_video_adapter_driver_info` is _not_ thread-safe, so it should not be called from multiple threads at the same time.
				
				```gdscript
				var thread = Thread.new()

				func _ready():
					thread.start(
						func():
							var driver_info = OS.get_video_adapter_driver_info()
							if not driver_info.is_empty():
								print("Driver: %s %s" % `driver_info`0`, driver_info`1``)
							else:
								print("Driver: (unknown)")
					)

				func _exit_tree():
					thread.wait_to_finish()
				```
				
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))
    return _ret


  @functools.native_method
  def set_restart_on_exit(self, restart:'bool'   , arguments:'PackedStringArray' = None  ) -> None:
    r'''
				If `restart` is `true`, restarts the project automatically when it is exited with `SceneTree.quit` or `constant Node.NOTIFICATION_WM_CLOSE_REQUEST`. Command-line `arguments` can be supplied. To restart the project with the same command line arguments as originally used to run the project, pass `get_cmdline_args` as the value for `arguments`.
				This method can be used to apply setting changes that require a restart. See also `is_restart_on_exit_set` and `get_restart_on_exit_arguments`.
				**Note:** This method is only effective on desktop platforms, and only when the project isn't started from the editor. It will have no effect on mobile and Web platforms, or when the project is started from the editor.
				**Note:** If the project process crashes or is _killed_ by the user (by sending `SIGKILL` instead of the usual `SIGTERM`), the project won't restart automatically.
			'''
    if arguments is None:
      arguments = PackedStringArray.new0()
    if arguments is None:
      arguments = PackedStringArray.new0()

    assert isinstance(restart, bool), 'restart must be bool'







    self._ptr.call_with_return(95,tuple([restart, arguments._ptr]))

  @functools.native_method
  def is_restart_on_exit_set(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the project will automatically restart when it exits for any reason, `false` otherwise. See also `set_restart_on_exit` and `get_restart_on_exit_arguments`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))
    return _ret


  @functools.native_method
  def get_restart_on_exit_arguments(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns the list of command line arguments that will be used when the project automatically restarts using `set_restart_on_exit`. See also `is_restart_on_exit_set`.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(97,tuple([]))
    return _ret


  @functools.native_method
  def delay_usec(self, usec:'int'   ) -> None:
    r'''
				Delays execution of the current thread by `usec` microseconds. `usec` must be greater than or equal to `0`. Otherwise, `delay_usec` does nothing and prints an error message.
				**Note:** `delay_usec` is a _blocking_ way to delay code execution. To delay code execution in a non-blocking way, you may use `SceneTree.create_timer`. Awaiting with a `SceneTreeTimer` delays the execution of code placed below the `await` without affecting the rest of the project (or editor, for `EditorPlugin`s and `EditorScript`s).
				**Note:** When `delay_usec` is called on the main thread, it will freeze the project and will prevent it from redrawing and registering input until the delay has passed. When using `delay_usec` as part of an `EditorPlugin` or `EditorScript`, it will freeze the editor but won't freeze the project if it is currently running (since the project is an independent child process).
			'''

    assert isinstance(usec, (int, float)), 'usec must be int or float'






    self._ptr.call_with_return(98,tuple([usec]))

  @functools.native_method
  def delay_msec(self, msec:'int'   ) -> None:
    r'''
				Delays execution of the current thread by `msec` milliseconds. `msec` must be greater than or equal to `0`. Otherwise, `delay_msec` does nothing and prints an error message.
				**Note:** `delay_msec` is a _blocking_ way to delay code execution. To delay code execution in a non-blocking way, you may use `SceneTree.create_timer`. Awaiting with `SceneTreeTimer` delays the execution of code placed below the `await` without affecting the rest of the project (or editor, for `EditorPlugin`s and `EditorScript`s).
				**Note:** When `delay_msec` is called on the main thread, it will freeze the project and will prevent it from redrawing and registering input until the delay has passed. When using `delay_msec` as part of an `EditorPlugin` or `EditorScript`, it will freeze the editor but won't freeze the project if it is currently running (since the project is an independent child process).
			'''

    assert isinstance(msec, (int, float)), 'msec must be int or float'






    self._ptr.call_with_return(99,tuple([msec]))

  @functools.native_method
  def get_locale(self) -> typing.Union[str]:
    r'''
				Returns the host OS locale as a `String` of the form `language_Script_COUNTRY_VARIANT@extra`. Every substring after `language` is optional and may not exist.
				- `language` - 2 or 3-letter `url=https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes`language code`/url`, in lower case.
				- `code skip-lint`Script` - 4-letter `url=https://en.wikipedia.org/wiki/ISO_15924`script code`/url`, in title case.
				- `COUNTRY` - 2 or 3-letter `url=https://en.wikipedia.org/wiki/ISO_3166-1`country code`/url`, in upper case.
				- `VARIANT` - language variant, region and sort order. The variant can have any number of underscored keywords.
				- `extra` - semicolon separated list of additional key words. This may include currency, calendar, sort order and numbering system information.
				If you want only the language code and not the fully specified locale from the OS, you can use `get_locale_language`.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(100,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_locale_language(self) -> typing.Union[str]:
    r'''
				Returns the host OS locale's 2 or 3-letter `url=https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes`language code`/url` as a string which should be consistent on all platforms. This is equivalent to extracting the `language` part of the `get_locale` string.
				This can be used to narrow down fully specified locale strings to only the "common" language code, when you don't need the additional information about country code or variants. For example, for a French Canadian user with `fr_CA` locale, this would return `fr`.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(101,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_model_name(self) -> typing.Union[str]:
    r'''
				Returns the model name of the current device.
				**Note:** This method is implemented on Android, iOS, macOS, and Windows. Returns `"GenericDevice"` on unsupported platforms.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(102,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def is_userfs_persistent(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the `user://` file system is persistent, that is, its state is the same after a player quits and starts the game again. Relevant to the Web platform, where this persistence may be unavailable.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(103,tuple([]))
    return _ret


  @functools.native_method
  def is_stdout_verbose(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the engine was executed with the `--verbose` or `-v` command line argument, or if `ProjectSettings.debug/settings/stdout/verbose_stdout` is `true`. See also `@GlobalScope.print_verbose`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([]))
    return _ret


  @functools.native_method
  def is_debug_build(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the Godot binary used to run the project is a _debug_ export template, or when running in the editor.
				Returns `false` if the Godot binary used to run the project is a _release_ export template.
				**Note:** To check whether the Godot binary used to run the project is an export template (debug or release), use `OS.has_feature("template")` instead.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(105,tuple([]))
    return _ret


  @functools.native_method
  def get_static_memory_usage(self) -> typing.Union[int]:
    r'''
				Returns the amount of static memory being used by the program in bytes. Only works in debug builds.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(106,tuple([]))
    return _ret


  @functools.native_method
  def get_static_memory_peak_usage(self) -> typing.Union[int]:
    r'''
				Returns the maximum amount of static memory used. Only works in debug builds.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(107,tuple([]))
    return _ret


  @functools.native_method
  def get_memory_info(self) -> typing.Union['Dictionary']:
    r'''
				Returns a `Dictionary` containing information about the current memory with the following entries:
				- `"physical"` - total amount of usable physical memory in bytes. This value can be slightly less than the actual physical memory amount, since it does not include memory reserved by the kernel and devices.
				- `"free"` - amount of physical memory, that can be immediately allocated without disk access or other costly operations, in bytes. The process might be able to allocate more physical memory, but this action will require moving inactive pages to disk, which can be expensive.
				- `"available"` - amount of memory that can be allocated without extending the swap file(s), in bytes. This value includes both physical memory and swap.
				- `"stack"` - size of the current thread stack in bytes.
				**Note:** Each entry's value may be `-1` if it is unknown.
			'''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(108,tuple([]))
    return _ret


  @functools.native_method
  def move_to_trash(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Moves the file or directory at the given `path` to the system's recycle bin. See also `DirAccess.remove`.
				The method takes only global paths, so you may need to use `ProjectSettings.globalize_path`. Do not use it for files in `res://` as it will not work in exported projects.
				Returns `constant FAILED` if the file or directory cannot be found, or the system does not support this method.
				
				```gdscript
				var file_to_remove = "user://slot1.save"
				OS.move_to_trash(ProjectSettings.globalize_path(file_to_remove))
				```
				
				
				**Note:** This method is implemented on Android, Linux, macOS and Windows.
				**Note:** If the user has disabled the recycle bin on their system, the file will be permanently deleted instead.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(109,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def get_user_data_dir(self) -> typing.Union[str]:
    r'''
				Returns the absolute directory path where user data is written (the `user://` directory in Godot). The path depends on the project name and `ProjectSettings.application/config/use_custom_user_dir`.
				- On Windows, this is `%AppData%\Godot\app_userdata\`project_name``, or `%AppData%\`custom_name`` if `use_custom_user_dir` is set. `%AppData%` expands to `%UserProfile%\AppData\Roaming`.
				- On macOS, this is `~/Library/Application Support/Godot/app_userdata/`project_name``, or `~/Library/Application Support/`custom_name`` if `use_custom_user_dir` is set.
				- On Linux and BSD, this is `~/.local/share/godot/app_userdata/`project_name``, or `~/.local/share/`custom_name`` if `use_custom_user_dir` is set.
				- On Android and iOS, this is a sandboxed directory in either internal or external storage, depending on the user's configuration.
				- On Web, this is a virtual directory managed by the browser.
				If the project name is empty, ``project_name`` falls back to ``unnamed project``.
				Not to be confused with `get_data_dir`, which returns the _global_ (non-project-specific) user home directory.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(110,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_system_dir(self, dir:'int'  , shared_storage:'bool' =True  ) -> typing.Union[str]:
    r'''
				Returns the path to commonly used folders across different platforms, as defined by `dir`. See the `enum SystemDir` constants for available locations.
				**Note:** This method is implemented on Android, Linux, macOS and Windows.
				**Note:** Shared storage is implemented on Android and allows to differentiate between app specific and shared directories, if `shared_storage` is `true`. Shared directories have additional restrictions on Android.
			'''

    assert isinstance(dir, (int, float)), 'dir must be int or float'
    assert isinstance(shared_storage, bool), 'shared_storage must be bool'







    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(111,tuple([dir, shared_storage]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_config_dir(self) -> typing.Union[str]:
    r'''
				Returns the _global_ user configuration directory according to the operating system's standards.
				On the Linux/BSD platform, this path can be overridden by setting the `XDG_CONFIG_HOME` environment variable before starting the project. See `url=$DOCS_URL/tutorials/io/data_paths.html`File paths in Godot projects`/url` in the documentation for more information. See also `get_cache_dir` and `get_data_dir`.
				Not to be confused with `get_user_data_dir`, which returns the _project-specific_ user data path.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(112,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_data_dir(self) -> typing.Union[str]:
    r'''
				Returns the _global_ user data directory according to the operating system's standards.
				On the Linux/BSD platform, this path can be overridden by setting the `XDG_DATA_HOME` environment variable before starting the project. See `url=$DOCS_URL/tutorials/io/data_paths.html`File paths in Godot projects`/url` in the documentation for more information. See also `get_cache_dir` and `get_config_dir`.
				Not to be confused with `get_user_data_dir`, which returns the _project-specific_ user data path.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(113,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_cache_dir(self) -> typing.Union[str]:
    r'''
				Returns the _global_ cache data directory according to the operating system's standards.
				On the Linux/BSD platform, this path can be overridden by setting the `XDG_CACHE_HOME` environment variable before starting the project. See `url=$DOCS_URL/tutorials/io/data_paths.html`File paths in Godot projects`/url` in the documentation for more information. See also `get_config_dir` and `get_data_dir`.
				Not to be confused with `get_user_data_dir`, which returns the _project-specific_ user data path.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(114,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_temp_dir(self) -> typing.Union[str]:
    r'''
				Returns the _global_ temporary data directory according to the operating system's standards.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(115,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_unique_id(self) -> typing.Union[str]:
    r'''
				Returns a string that is unique to the device.
				**Note:** This string may change without notice if the user reinstalls their operating system, upgrades it, or modifies their hardware. This means it should generally not be used to encrypt persistent data, as the data saved before an unexpected ID change would become inaccessible. The returned string may also be falsified using external programs, so do not rely on the string returned by this method for security purposes.
				**Note:** On Web, returns an empty string and generates an error, as this method cannot be implemented for security reasons.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(116,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_keycode_string(self, code:'int'  ) -> typing.Union[str]:
    r'''
				Returns the given keycode as a `String`.
				
				```gdscript
				print(OS.get_keycode_string(KEY_C))                    # Prints "C"
				print(OS.get_keycode_string(KEY_ESCAPE))               # Prints "Escape"
				print(OS.get_keycode_string(KEY_MASK_SHIFT | KEY_TAB)) # Prints "Shift+Tab"
				```
				
				
				See also `find_keycode_from_string`, `InputEventKey.keycode`, and `InputEventKey.get_keycode_with_modifiers`.
			'''

    assert isinstance(code, (int, float)), 'code must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(117,tuple([code]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def is_keycode_unicode(self, code:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the input keycode corresponds to a Unicode character. For a list of codes, see the `enum Key` constants.
				
				```gdscript
				print(OS.is_keycode_unicode(KEY_G))      # Prints true
				print(OS.is_keycode_unicode(KEY_KP_4))   # Prints true
				print(OS.is_keycode_unicode(KEY_TAB))    # Prints false
				print(OS.is_keycode_unicode(KEY_ESCAPE)) # Prints false
				```
				
				
			'''

    assert isinstance(code, (int, float)), 'code must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(118,tuple([code]))
    return _ret


  @functools.native_method
  def find_keycode_from_string(self, string:'str'   ) -> typing.Union[int]:
    r'''
				Finds the keycode for the given string. The returned values are equivalent to the `enum Key` constants.
				
				```gdscript
				print(OS.find_keycode_from_string("C"))         # Prints 67 (KEY_C)
				print(OS.find_keycode_from_string("Escape"))    # Prints 4194305 (KEY_ESCAPE)
				print(OS.find_keycode_from_string("Shift+Tab")) # Prints 37748738 (KEY_MASK_SHIFT | KEY_TAB)
				print(OS.find_keycode_from_string("Unknown"))   # Prints 0 (KEY_NONE)
				```
				
				
				See also `get_keycode_string`.
			'''

    assert(not string is None)
    assert isinstance(string, (str, String)), 'string must be str or String'




    assert(isinstance(string, (str, String)))
    py_string_string = string if isinstance(string, StringName) else c_utils.py_string_to_string(string)

    _ret:int
    _ret = self._ptr.call_with_return(119,tuple([py_string_string._ptr]))
    return _ret


  @functools.native_method
  def set_use_file_access_save_and_swap(self, enabled:'bool'   ) -> None:
    r'''
				If `enabled` is `true`, when opening a file for writing, a temporary file is used in its place. When closed, it is automatically applied to the target file.
				This can useful when files may be opened by other applications, such as antiviruses, text editors, or even the Godot editor itself.
			'''

    assert isinstance(enabled, bool), 'enabled must be bool'






    self._ptr.call_with_return(120,tuple([enabled]))

  @functools.native_method
  def set_thread_name(self, name:'str'   ) -> typing.Union[int]:
    r'''
				Assigns the given name to the current thread. Returns `constant ERR_UNAVAILABLE` if unavailable on the current platform.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret:int
    _ret = self._ptr.call_with_return(121,tuple([py_string_name._ptr]))
    return _ret


  @functools.native_method
  def get_thread_caller_id(self) -> typing.Union[int]:
    r'''
				Returns the ID of the current thread. This can be used in logs to ease debugging of multi-threaded applications.
				**Note:** Thread IDs are not deterministic and may be reused across application restarts.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(122,tuple([]))
    return _ret


  @functools.native_method
  def get_main_thread_id(self) -> typing.Union[int]:
    r'''
				Returns the ID of the main thread. See `get_thread_caller_id`.
				**Note:** Thread IDs are not deterministic and may be reused across application restarts.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(123,tuple([]))
    return _ret


  @functools.native_method
  def has_feature(self, tag_name:'str'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the feature for the given feature tag is supported in the currently running instance, depending on the platform, build, etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. Refer to the `url=$DOCS_URL/tutorials/export/feature_tags.html`Feature Tags`/url` documentation for more details.
				**Note:** Tag names are case-sensitive.
				**Note:** On the Web platform, one of the following additional tags is defined to indicate the host platform: `web_android`, `web_ios`, `web_linuxbsd`, `web_macos`, or `web_windows`.
			'''

    assert(not tag_name is None)
    assert isinstance(tag_name, (str, String)), 'tag_name must be str or String'




    assert(isinstance(tag_name, (str, String)))
    py_string_tag_name = tag_name if isinstance(tag_name, StringName) else c_utils.py_string_to_string(tag_name)

    _ret = 0
    _ret = self._ptr.call_with_return(124,tuple([py_string_tag_name._ptr]))
    return _ret


  @functools.native_method
  def is_sandboxed(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the application is running in the sandbox.
				**Note:** This method is only implemented on macOS and Linux.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(125,tuple([]))
    return _ret


  @functools.native_method
  def request_permission(self, name:'str'   ) -> typing.Union[bool]:
    r'''
				Requests permission from the OS for the given `name`. Returns `true` if the permission has already been granted. See also `signal MainLoop.on_request_permissions_result`.
				The `name` must be the full permission name. For example:
				- `OS.request_permission("android.permission.READ_EXTERNAL_STORAGE")`
				- `OS.request_permission("android.permission.POST_NOTIFICATIONS")`
				- `OS.request_permission("macos.permission.RECORD_SCREEN")`
				- `OS.request_permission("appleembedded.permission.AUDIO_RECORD")`
				**Note:** On Android, permission must be checked during export.
				**Note:** This method is implemented on Android, macOS, and visionOS platforms.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = 0
    _ret = self._ptr.call_with_return(126,tuple([py_string_name._ptr]))
    return _ret


  @functools.native_method
  def request_permissions(self) -> typing.Union[bool]:
    r'''
				Requests _dangerous_ permissions from the OS. Returns `true` if permissions have already been granted. See also `signal MainLoop.on_request_permissions_result`.
				**Note:** Permissions must be checked during export.
				**Note:** This method is only implemented on Android. Normal permissions are automatically granted at install time in Android applications.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(127,tuple([]))
    return _ret


  @functools.native_method
  def get_granted_permissions(self) -> typing.Union['PackedStringArray']:
    r'''
				On Android devices: Returns the list of dangerous permissions that have been granted.
				On macOS: Returns the list of granted permissions and user selected folders accessible to the application (sandboxed applications only). Use the native file dialog to request folder access permission.
				On iOS, visionOS: Returns the list of granted permissions.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(128,tuple([]))
    return _ret


  @functools.native_method
  def revoke_granted_permissions(self) -> None:
    r'''
				On macOS (sandboxed applications only), this function clears list of user selected folders accessible to the application.
			'''




    self._ptr.call_with_return(129,tuple([]))

  @functools.native_method
  def add_logger(self, logger:'py4godot_logger.Logger'   ) -> None:
    r'''
				Add a custom logger to intercept the internal message stream.
			'''

    assert(not logger is None)
    assert isinstance(logger, get_class('Logger')), 'logger must be Logger'






    self._ptr.call_with_return(130,tuple([logger._ptr]))

  @functools.native_method
  def remove_logger(self, logger:'py4godot_logger.Logger'   ) -> None:
    r'''
				Remove a custom logger added by `add_logger`.
			'''

    assert(not logger is None)
    assert isinstance(logger, get_class('Logger')), 'logger must be Logger'






    self._ptr.call_with_return(131,tuple([logger._ptr]))


register_cast_function('OS', OS.cast)
register_class('OS', OS)
