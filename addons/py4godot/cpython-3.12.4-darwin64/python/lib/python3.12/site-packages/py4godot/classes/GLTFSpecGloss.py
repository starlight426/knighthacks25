# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Object as py4godot_object 
  import py4godot.classes.Image as py4godot_image 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFSpecGlossWrapper


class GLTFSpecGloss(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFSpecGloss.construct_without_init()
    class_._ptr = constructor(360,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFSpecGloss.construct_without_init()
    class_._ptr = constructor(360,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFSpecGlossWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(360,0, ())


  def generate_wrapper(self):
    return CPPGLTFSpecGlossWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFSpecGloss.__new__(GLTFSpecGloss)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFSpecGloss'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFSpecGloss.construct_without_init()
    cls._ptr = CPPGLTFSpecGlossWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFSpecGloss.construct_without_init()
    cls._ptr = CPPGLTFSpecGlossWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def diffuse_img(self) -> typing.Any:
    r''''''
    _ret = self. get_diffuse_img()
    return _ret
  @diffuse_img.setter
  def diffuse_img(self,  value:'py4godot_object.Object'):
    self.set_diffuse_img(value)
  @property
  def diffuse_factor(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_diffuse_factor()
    return _ret
  @diffuse_factor.setter
  def diffuse_factor(self,  value:'Color'):
    self.set_diffuse_factor(value)
  @property
  def gloss_factor(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_gloss_factor()
    return _ret
  @gloss_factor.setter
  def gloss_factor(self,  value:'float'):
    self.set_gloss_factor(value)
  @property
  def specular_factor(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_specular_factor()
    return _ret
  @specular_factor.setter
  def specular_factor(self,  value:'Color'):
    self.set_specular_factor(value)
  @property
  def spec_gloss_img(self) -> typing.Any:
    r''''''
    _ret = self. get_spec_gloss_img()
    return _ret
  @spec_gloss_img.setter
  def spec_gloss_img(self,  value:'py4godot_object.Object'):
    self.set_spec_gloss_img(value)
  @functools.native_method
  def get_diffuse_img(self) -> typing.Union['py4godot_image.Image']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Image
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_diffuse_img(self, diffuse_img:'py4godot_image.Image'   ) -> None:
    r''''''

    assert(not diffuse_img is None)
    assert isinstance(diffuse_img, get_class('Image')), 'diffuse_img must be Image'

    self.py__diffuse_img = diffuse_img






    self._ptr.call_with_return(78,tuple([diffuse_img._ptr]))

  @functools.native_method
  def get_diffuse_factor(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_diffuse_factor(self, diffuse_factor:'Color'   ) -> None:
    r''''''

    assert(not diffuse_factor is None)
    assert isinstance(diffuse_factor, Color), 'diffuse_factor must be Color'

    self.py__diffuse_factor = diffuse_factor






    self._ptr.call_with_return(80,tuple([diffuse_factor._ptr]))

  @functools.native_method
  def get_gloss_factor(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_gloss_factor(self, gloss_factor:'float'   ) -> None:
    r''''''

    assert isinstance(gloss_factor, (int, float)), 'gloss_factor must be int or float'

    self.py__gloss_factor = gloss_factor






    self._ptr.call_with_return(82,tuple([gloss_factor]))

  @functools.native_method
  def get_specular_factor(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_specular_factor(self, specular_factor:'Color'   ) -> None:
    r''''''

    assert(not specular_factor is None)
    assert isinstance(specular_factor, Color), 'specular_factor must be Color'

    self.py__specular_factor = specular_factor






    self._ptr.call_with_return(84,tuple([specular_factor._ptr]))

  @functools.native_method
  def get_spec_gloss_img(self) -> typing.Union['py4godot_image.Image']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Image
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_spec_gloss_img(self, spec_gloss_img:'py4godot_image.Image'   ) -> None:
    r''''''

    assert(not spec_gloss_img is None)
    assert isinstance(spec_gloss_img, get_class('Image')), 'spec_gloss_img must be Image'

    self.py__spec_gloss_img = spec_gloss_img






    self._ptr.call_with_return(86,tuple([spec_gloss_img._ptr]))


register_cast_function('GLTFSpecGloss', GLTFSpecGloss.cast)
register_class('GLTFSpecGloss', GLTFSpecGloss)
