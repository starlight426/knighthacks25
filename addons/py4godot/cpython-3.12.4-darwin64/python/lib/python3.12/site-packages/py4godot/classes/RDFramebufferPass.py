# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDFramebufferPassWrapper


class RDFramebufferPass(py4godot_refcounted.RefCounted):
  r'''
		This class contains the list of attachment descriptions for a framebuffer pass. Each points with an index to a previously supplied list of texture attachments.
		Multipass framebuffers can optimize some configurations in mobile. On desktop, they provide little to no advantage.
		This object is used by `RenderingDevice`.
	'''
  ATTACHMENT_UNUSED:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = RDFramebufferPass.construct_without_init()
    class_._ptr = constructor(646,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDFramebufferPass.construct_without_init()
    class_._ptr = constructor(646,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDFramebufferPassWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(646,0, ())


  def generate_wrapper(self):
    return CPPRDFramebufferPassWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDFramebufferPass.__new__(RDFramebufferPass)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDFramebufferPass'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDFramebufferPass.construct_without_init()
    cls._ptr = CPPRDFramebufferPassWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDFramebufferPass.construct_without_init()
    cls._ptr = CPPRDFramebufferPassWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def color_attachments(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_color_attachments()
    return _ret
  @color_attachments.setter
  def color_attachments(self,  value:'PackedInt32Array'):
    self.set_color_attachments(value)
  @property
  def input_attachments(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_input_attachments()
    return _ret
  @input_attachments.setter
  def input_attachments(self,  value:'PackedInt32Array'):
    self.set_input_attachments(value)
  @property
  def resolve_attachments(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_resolve_attachments()
    return _ret
  @resolve_attachments.setter
  def resolve_attachments(self,  value:'PackedInt32Array'):
    self.set_resolve_attachments(value)
  @property
  def preserve_attachments(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_preserve_attachments()
    return _ret
  @preserve_attachments.setter
  def preserve_attachments(self,  value:'PackedInt32Array'):
    self.set_preserve_attachments(value)
  @property
  def depth_attachment(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_depth_attachment()
    return _ret
  @depth_attachment.setter
  def depth_attachment(self,  value:'int'):
    self.set_depth_attachment(value)
  @functools.native_method
  def set_color_attachments(self, p_member:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not p_member is None)
    assert isinstance(p_member, PackedInt32Array), 'p_member must be PackedInt32Array'

    self.py__color_attachments = p_member






    self._ptr.call_with_return(53,tuple([p_member._ptr]))

  @functools.native_method
  def get_color_attachments(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_input_attachments(self, p_member:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not p_member is None)
    assert isinstance(p_member, PackedInt32Array), 'p_member must be PackedInt32Array'

    self.py__input_attachments = p_member






    self._ptr.call_with_return(55,tuple([p_member._ptr]))

  @functools.native_method
  def get_input_attachments(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_resolve_attachments(self, p_member:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not p_member is None)
    assert isinstance(p_member, PackedInt32Array), 'p_member must be PackedInt32Array'

    self.py__resolve_attachments = p_member






    self._ptr.call_with_return(57,tuple([p_member._ptr]))

  @functools.native_method
  def get_resolve_attachments(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_preserve_attachments(self, p_member:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not p_member is None)
    assert isinstance(p_member, PackedInt32Array), 'p_member must be PackedInt32Array'

    self.py__preserve_attachments = p_member






    self._ptr.call_with_return(59,tuple([p_member._ptr]))

  @functools.native_method
  def get_preserve_attachments(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_attachment(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__depth_attachment = p_member






    self._ptr.call_with_return(61,tuple([p_member]))

  @functools.native_method
  def get_depth_attachment(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret



register_cast_function('RDFramebufferPass', RDFramebufferPass.cast)
register_class('RDFramebufferPass', RDFramebufferPass)
