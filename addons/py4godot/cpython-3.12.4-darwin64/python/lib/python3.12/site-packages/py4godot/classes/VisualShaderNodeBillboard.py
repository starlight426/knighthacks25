# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeBillboardWrapper

class BillboardType:
  BILLBOARD_TYPE_DISABLED = 0
  BILLBOARD_TYPE_ENABLED = 1
  BILLBOARD_TYPE_FIXED_Y = 2
  BILLBOARD_TYPE_PARTICLES = 3
  BILLBOARD_TYPE_MAX = 4


class VisualShaderNodeBillboard(py4godot_visualshadernode.VisualShaderNode):
  r'''
		The output port of this node needs to be connected to `Model View Matrix` port of `VisualShaderNodeOutput`.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeBillboard.construct_without_init()
    class_._ptr = constructor(881,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeBillboard.construct_without_init()
    class_._ptr = constructor(881,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeBillboardWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(881,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeBillboardWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeBillboard.__new__(VisualShaderNodeBillboard)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeBillboard'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeBillboard.construct_without_init()
    cls._ptr = CPPVisualShaderNodeBillboardWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeBillboard.construct_without_init()
    cls._ptr = CPPVisualShaderNodeBillboardWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def billboard_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_billboard_type()
    return _ret
  @billboard_type.setter
  def billboard_type(self,  value:'int'):
    self.set_billboard_type(value)
  @property
  def keep_scale(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_keep_scale_enabled()
    return _ret
  @keep_scale.setter
  def keep_scale(self,  value:'bool'):
    self.set_keep_scale_enabled(value)
  @functools.native_method
  def set_billboard_type(self, billboard_type:'int'  ) -> None:
    r''''''

    assert isinstance(billboard_type, (int, float)), 'billboard_type must be int or float'

    self.py__billboard_type = billboard_type






    self._ptr.call_with_return(88,tuple([billboard_type]))

  @functools.native_method
  def get_billboard_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_keep_scale_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__keep_scale = enabled






    self._ptr.call_with_return(90,tuple([enabled]))

  @functools.native_method
  def is_keep_scale_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeBillboard', VisualShaderNodeBillboard.cast)
register_class('VisualShaderNodeBillboard', VisualShaderNodeBillboard)
