# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDSamplerStateWrapper


class RDSamplerState(py4godot_refcounted.RefCounted):
  r'''
		This object is used by `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDSamplerState.construct_without_init()
    class_._ptr = constructor(653,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDSamplerState.construct_without_init()
    class_._ptr = constructor(653,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDSamplerStateWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(653,0, ())


  def generate_wrapper(self):
    return CPPRDSamplerStateWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDSamplerState.__new__(RDSamplerState)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDSamplerState'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDSamplerState.construct_without_init()
    cls._ptr = CPPRDSamplerStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDSamplerState.construct_without_init()
    cls._ptr = CPPRDSamplerStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def mag_filter(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mag_filter()
    return _ret
  @mag_filter.setter
  def mag_filter(self,  value:'int'):
    self.set_mag_filter(value)
  @property
  def min_filter(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_min_filter()
    return _ret
  @min_filter.setter
  def min_filter(self,  value:'int'):
    self.set_min_filter(value)
  @property
  def mip_filter(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mip_filter()
    return _ret
  @mip_filter.setter
  def mip_filter(self,  value:'int'):
    self.set_mip_filter(value)
  @property
  def repeat_u(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_repeat_u()
    return _ret
  @repeat_u.setter
  def repeat_u(self,  value:'int'):
    self.set_repeat_u(value)
  @property
  def repeat_v(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_repeat_v()
    return _ret
  @repeat_v.setter
  def repeat_v(self,  value:'int'):
    self.set_repeat_v(value)
  @property
  def repeat_w(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_repeat_w()
    return _ret
  @repeat_w.setter
  def repeat_w(self,  value:'int'):
    self.set_repeat_w(value)
  @property
  def lod_bias(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_lod_bias()
    return _ret
  @lod_bias.setter
  def lod_bias(self,  value:'float'):
    self.set_lod_bias(value)
  @property
  def use_anisotropy(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_use_anisotropy()
    return _ret
  @use_anisotropy.setter
  def use_anisotropy(self,  value:'bool'):
    self.set_use_anisotropy(value)
  @property
  def anisotropy_max(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_anisotropy_max()
    return _ret
  @anisotropy_max.setter
  def anisotropy_max(self,  value:'float'):
    self.set_anisotropy_max(value)
  @property
  def enable_compare(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_compare()
    return _ret
  @enable_compare.setter
  def enable_compare(self,  value:'bool'):
    self.set_enable_compare(value)
  @property
  def compare_op(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_compare_op()
    return _ret
  @compare_op.setter
  def compare_op(self,  value:'int'):
    self.set_compare_op(value)
  @property
  def min_lod(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_min_lod()
    return _ret
  @min_lod.setter
  def min_lod(self,  value:'float'):
    self.set_min_lod(value)
  @property
  def max_lod(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_max_lod()
    return _ret
  @max_lod.setter
  def max_lod(self,  value:'float'):
    self.set_max_lod(value)
  @property
  def border_color(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_border_color()
    return _ret
  @border_color.setter
  def border_color(self,  value:'int'):
    self.set_border_color(value)
  @property
  def unnormalized_uvw(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_unnormalized_uvw()
    return _ret
  @unnormalized_uvw.setter
  def unnormalized_uvw(self,  value:'bool'):
    self.set_unnormalized_uvw(value)
  @functools.native_method
  def set_mag_filter(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__mag_filter = p_member






    self._ptr.call_with_return(53,tuple([p_member]))

  @functools.native_method
  def get_mag_filter(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_min_filter(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__min_filter = p_member






    self._ptr.call_with_return(55,tuple([p_member]))

  @functools.native_method
  def get_min_filter(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_mip_filter(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__mip_filter = p_member






    self._ptr.call_with_return(57,tuple([p_member]))

  @functools.native_method
  def get_mip_filter(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_repeat_u(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__repeat_u = p_member






    self._ptr.call_with_return(59,tuple([p_member]))

  @functools.native_method
  def get_repeat_u(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_repeat_v(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__repeat_v = p_member






    self._ptr.call_with_return(61,tuple([p_member]))

  @functools.native_method
  def get_repeat_v(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def set_repeat_w(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__repeat_w = p_member






    self._ptr.call_with_return(63,tuple([p_member]))

  @functools.native_method
  def get_repeat_w(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(64,tuple([]))

    return _ret


  @functools.native_method
  def set_lod_bias(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__lod_bias = p_member






    self._ptr.call_with_return(65,tuple([p_member]))

  @functools.native_method
  def get_lod_bias(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([]))

    return _ret


  @functools.native_method
  def set_use_anisotropy(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__use_anisotropy = p_member






    self._ptr.call_with_return(67,tuple([p_member]))

  @functools.native_method
  def get_use_anisotropy(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([]))

    return _ret


  @functools.native_method
  def set_anisotropy_max(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__anisotropy_max = p_member






    self._ptr.call_with_return(69,tuple([p_member]))

  @functools.native_method
  def get_anisotropy_max(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(70,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_compare(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_compare = p_member






    self._ptr.call_with_return(71,tuple([p_member]))

  @functools.native_method
  def get_enable_compare(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(72,tuple([]))

    return _ret


  @functools.native_method
  def set_compare_op(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__compare_op = p_member






    self._ptr.call_with_return(73,tuple([p_member]))

  @functools.native_method
  def get_compare_op(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(74,tuple([]))

    return _ret


  @functools.native_method
  def set_min_lod(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__min_lod = p_member






    self._ptr.call_with_return(75,tuple([p_member]))

  @functools.native_method
  def get_min_lod(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(76,tuple([]))

    return _ret


  @functools.native_method
  def set_max_lod(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__max_lod = p_member






    self._ptr.call_with_return(77,tuple([p_member]))

  @functools.native_method
  def get_max_lod(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_border_color(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__border_color = p_member






    self._ptr.call_with_return(79,tuple([p_member]))

  @functools.native_method
  def get_border_color(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_unnormalized_uvw(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__unnormalized_uvw = p_member






    self._ptr.call_with_return(81,tuple([p_member]))

  @functools.native_method
  def get_unnormalized_uvw(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret



register_cast_function('RDSamplerState', RDSamplerState.cast)
register_class('RDSamplerState', RDSamplerState)
