# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPXROrigin3DWrapper


class XROrigin3D(py4godot_node3d.Node3D):
  r'''
		This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world.
		Multiple origin points can be added to the scene tree, but only one can used at a time. All the `XRCamera3D`, `XRController3D`, and `XRAnchor3D` nodes should be direct children of this node for spatial tracking to work correctly.
		It is the position of this node that you update when your character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point.
		For example, if your character is driving a car, the `XROrigin3D` node should be a child node of this car. Or, if you're implementing a teleport system to move your character, you should change the position of this node.
	'''

  @staticmethod
  def constructor():
    class_ = XROrigin3D.construct_without_init()
    class_._ptr = constructor(1024,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XROrigin3D.construct_without_init()
    class_._ptr = constructor(1024,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXROrigin3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1024,0, ())


  def generate_wrapper(self):
    return CPPXROrigin3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XROrigin3D.__new__(XROrigin3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XROrigin3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XROrigin3D.construct_without_init()
    cls._ptr = CPPXROrigin3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XROrigin3D.construct_without_init()
    cls._ptr = CPPXROrigin3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def world_scale(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_world_scale()
    return _ret
  @world_scale.setter
  def world_scale(self,  value:'float'):
    self.set_world_scale(value)
  @property
  def current(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_current()
    return _ret
  @current.setter
  def current(self,  value:'bool'):
    self.set_current(value)
  @functools.native_method
  def set_world_scale(self, world_scale:'float'   ) -> None:
    r''''''

    assert isinstance(world_scale, (int, float)), 'world_scale must be int or float'

    self.py__world_scale = world_scale






    self._ptr.call_with_return(251,tuple([world_scale]))

  @functools.native_method
  def get_world_scale(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(252,tuple([]))

    return _ret


  @functools.native_method
  def set_current(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__current = enabled






    self._ptr.call_with_return(253,tuple([enabled]))

  @functools.native_method
  def is_current(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(254,tuple([]))

    return _ret



register_cast_function('XROrigin3D', XROrigin3D.cast)
register_class('XROrigin3D', XROrigin3D)
