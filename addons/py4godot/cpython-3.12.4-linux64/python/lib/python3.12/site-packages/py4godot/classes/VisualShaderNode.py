# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeWrapper

class PortType:
  PORT_TYPE_SCALAR = 0
  PORT_TYPE_SCALAR_INT = 1
  PORT_TYPE_SCALAR_UINT = 2
  PORT_TYPE_VECTOR_2D = 3
  PORT_TYPE_VECTOR_3D = 4
  PORT_TYPE_VECTOR_4D = 5
  PORT_TYPE_BOOLEAN = 6
  PORT_TYPE_TRANSFORM = 7
  PORT_TYPE_SAMPLER = 8
  PORT_TYPE_MAX = 9


class VisualShaderNode(py4godot_resource.Resource):
  r'''
		Visual shader graphs consist of various nodes. Each node in the graph is a separate object and they are represented as a rectangular boxes with title and a set of properties. Each node also has connection ports that allow to connect it to another nodes and control the flow of the shader.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNode.construct_without_init()
    class_._ptr = constructor(880,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNode.construct_without_init()
    class_._ptr = constructor(880,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(880,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNode.__new__(VisualShaderNode)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNode'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNode.construct_without_init()
    cls._ptr = CPPVisualShaderNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNode.construct_without_init()
    cls._ptr = CPPVisualShaderNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def output_port_for_preview(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_output_port_for_preview()
    return _ret
  @output_port_for_preview.setter
  def output_port_for_preview(self,  value:'int'):
    self.set_output_port_for_preview(value)
  @property
  def default_input_values(self) -> typing.Union['Array']:
    r''''''
    _ret = self. get_default_input_values()
    return _ret
  @default_input_values.setter
  def default_input_values(self,  value:'Array'):
    self.set_default_input_values(value)
  @property
  def expanded_output_ports(self) -> typing.Union['Array']:
    r''''''
    _ret = self. _get_output_ports_expanded()
    return _ret
  @expanded_output_ports.setter
  def expanded_output_ports(self,  value:'Array'):
    self._set_output_ports_expanded(value)
  @property
  def linked_parent_graph_frame(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_frame()
    return _ret
  @linked_parent_graph_frame.setter
  def linked_parent_graph_frame(self,  value:'int'):
    self.set_frame(value)
  @functools.native_method
  def get_default_input_port(self, type:'int'  ) -> typing.Union[int]:
    r'''
				Returns the input port which should be connected by default when this node is created as a result of dragging a connection from an existing node to the empty space on the graph.
			'''

    assert isinstance(type, (int, float)), 'type must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([type]))
    return _ret


  @functools.native_method
  def set_output_port_for_preview(self, port:'int'   ) -> None:
    r''''''

    assert isinstance(port, (int, float)), 'port must be int or float'

    self.py__output_port_for_preview = port






    self._ptr.call_with_return(78,tuple([port]))

  @functools.native_method
  def get_output_port_for_preview(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_input_port_default_value(self, port:'int'   , value:'object'   , prev_value:'object' =None  ) -> None:
    r'''
				Sets the default `value` for the selected input `port`.
			'''



    assert isinstance(port, (int, float)), 'port must be int or float'
    
    








    self._ptr.call_with_return(80,tuple([port, value, prev_value]))

  @functools.native_method
  def get_input_port_default_value(self, port:'int'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the default value of the input `port`.
			'''

    assert isinstance(port, (int, float)), 'port must be int or float'






    _ret = None
    _ret = self._ptr.call_with_return(81,tuple([port]))
    return _ret


  @functools.native_method
  def remove_input_port_default_value(self, port:'int'   ) -> None:
    r'''
				Removes the default value of the input `port`.
			'''

    assert isinstance(port, (int, float)), 'port must be int or float'






    self._ptr.call_with_return(82,tuple([port]))

  @functools.native_method
  def clear_default_input_values(self) -> None:
    r'''
				Clears the default input ports value.
			'''




    self._ptr.call_with_return(83,tuple([]))

  @functools.native_method
  def set_default_input_values(self, values:'Array'   ) -> None:
    r'''
				Sets the default input ports values using an `Array` of the form ``index0, value0, index1, value1, ...``. For example: ``0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0)``.
			'''

    assert(not values is None)
    assert isinstance(values, Array), 'values must be Array'

    self.py__default_input_values = values






    self._ptr.call_with_return(84,tuple([values._ptr]))

  @functools.native_method
  def get_default_input_values(self) -> typing.Union['Array']:
    r'''
				Returns an `Array` containing default values for all of the input ports of the node in the form ``index0, value0, index1, value1, ...``.
			'''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_frame(self, frame:'int'   ) -> None:
    r''''''

    assert isinstance(frame, (int, float)), 'frame must be int or float'

    self.py__linked_parent_graph_frame = frame






    self._ptr.call_with_return(86,tuple([frame]))

  @functools.native_method
  def get_frame(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret



register_cast_function('VisualShaderNode', VisualShaderNode.cast)
register_class('VisualShaderNode', VisualShaderNode)
