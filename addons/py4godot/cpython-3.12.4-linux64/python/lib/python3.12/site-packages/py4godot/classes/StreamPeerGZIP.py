# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.StreamPeer as py4godot_streampeer 
from py4godot.wrappers.wrappers import CPPStreamPeerGZIPWrapper


class StreamPeerGZIP(py4godot_streampeer.StreamPeer):
  r'''
		This class allows to compress or decompress data using GZIP/deflate in a streaming fashion. This is particularly useful when compressing or decompressing files that have to be sent through the network without needing to allocate them all in memory.
		After starting the stream via `start_compression` (or `start_decompression`), calling `StreamPeer.put_partial_data` on this stream will compress (or decompress) the data, writing it to the internal buffer. Calling `StreamPeer.get_available_bytes` will return the pending bytes in the internal buffer, and `StreamPeer.get_partial_data` will retrieve the compressed (or decompressed) bytes from it. When the stream is over, you must call `finish` to ensure the internal buffer is properly flushed (make sure to call `StreamPeer.get_available_bytes` on last time to check if more data needs to be read after that).
	'''

  @staticmethod
  def constructor():
    class_ = StreamPeerGZIP.construct_without_init()
    class_._ptr = constructor(790,0, ())
    return class_
  @staticmethod
  def new():
    class_ = StreamPeerGZIP.construct_without_init()
    class_._ptr = constructor(790,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPStreamPeerGZIPWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(790,0, ())


  def generate_wrapper(self):
    return CPPStreamPeerGZIPWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = StreamPeerGZIP.__new__(StreamPeerGZIP)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'StreamPeerGZIP'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = StreamPeerGZIP.construct_without_init()
    cls._ptr = CPPStreamPeerGZIPWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = StreamPeerGZIP.construct_without_init()
    cls._ptr = CPPStreamPeerGZIPWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def start_compression(self, use_deflate:'bool' =False  , buffer_size:'int' =65535  ) -> typing.Union[int]:
    r'''
				Start the stream in compression mode with the given `buffer_size`, if `use_deflate` is `true` uses deflate instead of GZIP.
			'''

    assert isinstance(use_deflate, bool), 'use_deflate must be bool'
    assert isinstance(buffer_size, (int, float)), 'buffer_size must be int or float'







    _ret:int
    _ret = self._ptr.call_with_return(88,tuple([use_deflate, buffer_size]))
    return _ret


  @functools.native_method
  def start_decompression(self, use_deflate:'bool' =False  , buffer_size:'int' =65535  ) -> typing.Union[int]:
    r'''
				Start the stream in decompression mode with the given `buffer_size`, if `use_deflate` is `true` uses deflate instead of GZIP.
			'''

    assert isinstance(use_deflate, bool), 'use_deflate must be bool'
    assert isinstance(buffer_size, (int, float)), 'buffer_size must be int or float'







    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([use_deflate, buffer_size]))
    return _ret


  @functools.native_method
  def finish(self) -> typing.Union[int]:
    r'''
				Finalizes the stream, compressing any buffered chunk left.
				You must call it only when you are compressing.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(90,tuple([]))
    return _ret


  @functools.native_method
  def clear(self) -> None:
    r'''
				Clears this stream, resetting the internal state.
			'''




    self._ptr.call_with_return(91,tuple([]))


register_cast_function('StreamPeerGZIP', StreamPeerGZIP.cast)
register_class('StreamPeerGZIP', StreamPeerGZIP)
