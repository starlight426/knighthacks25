# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.XRNode3D as py4godot_xrnode3d 
from py4godot.wrappers.wrappers import CPPXRAnchor3DWrapper


class XRAnchor3D(py4godot_xrnode3d.XRNode3D):
  r'''
		The `XRAnchor3D` point is an `XRNode3D` that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc.) and create anchors for them.
		This node is mapped to one of the anchors through its unique ID. When you receive a signal that a new anchor is available, you should add this node to your scene for that anchor. You can predefine nodes and set the ID; the nodes will simply remain on `(0, 0, 0)` until a plane is recognized.
		Keep in mind that, as long as plane detection is enabled, the size, placing and orientation of an anchor will be updated as the detection logic learns more about the real world out there especially if only part of the surface is in view.
	'''

  @staticmethod
  def constructor():
    class_ = XRAnchor3D.construct_without_init()
    class_._ptr = constructor(1011,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRAnchor3D.construct_without_init()
    class_._ptr = constructor(1011,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRAnchor3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1011,0, ())


  def generate_wrapper(self):
    return CPPXRAnchor3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XRAnchor3D.__new__(XRAnchor3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRAnchor3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRAnchor3D.construct_without_init()
    cls._ptr = CPPXRAnchor3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRAnchor3D.construct_without_init()
    cls._ptr = CPPXRAnchor3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_size(self) -> typing.Union['Vector3']:
    r'''
				Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table.
			'''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(261,tuple([]))
    return _ret


  @functools.native_method
  def get_plane(self) -> typing.Union['Plane']:
    r'''
				Returns a plane aligned with our anchor; handy for intersection testing.
			'''




    _ret = Plane.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(262,tuple([]))
    return _ret



register_cast_function('XRAnchor3D', XRAnchor3D.cast)
register_class('XRAnchor3D', XRAnchor3D)
