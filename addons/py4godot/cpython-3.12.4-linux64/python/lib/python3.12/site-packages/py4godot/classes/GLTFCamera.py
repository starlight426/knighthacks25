# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.XRCamera3D as py4godot_xrcamera3d 
  import py4godot.classes.Camera3D as py4godot_camera3d 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFCameraWrapper


class GLTFCamera(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFCamera.construct_without_init()
    class_._ptr = constructor(348,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFCamera.construct_without_init()
    class_._ptr = constructor(348,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFCameraWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(348,0, ())


  def generate_wrapper(self):
    return CPPGLTFCameraWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFCamera.__new__(GLTFCamera)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFCamera'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFCamera.construct_without_init()
    cls._ptr = CPPGLTFCameraWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFCamera.construct_without_init()
    cls._ptr = CPPGLTFCameraWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def perspective(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_perspective()
    return _ret
  @perspective.setter
  def perspective(self,  value:'bool'):
    self.set_perspective(value)
  @property
  def fov(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_fov()
    return _ret
  @fov.setter
  def fov(self,  value:'float'):
    self.set_fov(value)
  @property
  def size_mag(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_size_mag()
    return _ret
  @size_mag.setter
  def size_mag(self,  value:'float'):
    self.set_size_mag(value)
  @property
  def depth_far(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth_far()
    return _ret
  @depth_far.setter
  def depth_far(self,  value:'float'):
    self.set_depth_far(value)
  @property
  def depth_near(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth_near()
    return _ret
  @depth_near.setter
  def depth_near(self,  value:'float'):
    self.set_depth_near(value)
  @staticmethod
  def from_node(camera_node:'py4godot_camera3d.Camera3D'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not camera_node is None)
    assert isinstance(camera_node, get_class('Camera3D')), 'camera_node must be Camera3D'






    _ret = GLTFCamera.construct_without_init()
    _ret._ptr = static_method(348,1,tuple([camera_node._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def to_node(self) -> typing.Union['py4godot_xrcamera3d.XRCamera3D','py4godot_camera3d.Camera3D']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Camera3D
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def from_dictionary(dictionary:'Dictionary'   ) -> typing.Union['typing.Self']:
    r''''''

    assert(not dictionary is None)
    assert isinstance(dictionary, Dictionary), 'dictionary must be Dictionary'






    _ret = GLTFCamera.construct_without_init()
    _ret._ptr = static_method(348,2,tuple([dictionary._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def to_dictionary(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))
    return _ret


  @functools.native_method
  def get_perspective(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_perspective(self, perspective:'bool'   ) -> None:
    r''''''

    assert isinstance(perspective, bool), 'perspective must be bool'

    self.py__perspective = perspective






    self._ptr.call_with_return(80,tuple([perspective]))

  @functools.native_method
  def get_fov(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_fov(self, fov:'float'   ) -> None:
    r''''''

    assert isinstance(fov, (int, float)), 'fov must be int or float'

    self.py__fov = fov






    self._ptr.call_with_return(82,tuple([fov]))

  @functools.native_method
  def get_size_mag(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_size_mag(self, size_mag:'float'   ) -> None:
    r''''''

    assert isinstance(size_mag, (int, float)), 'size_mag must be int or float'

    self.py__size_mag = size_mag






    self._ptr.call_with_return(84,tuple([size_mag]))

  @functools.native_method
  def get_depth_far(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_far(self, zdepth_far:'float'   ) -> None:
    r''''''

    assert isinstance(zdepth_far, (int, float)), 'zdepth_far must be int or float'

    self.py__depth_far = zdepth_far






    self._ptr.call_with_return(86,tuple([zdepth_far]))

  @functools.native_method
  def get_depth_near(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_near(self, zdepth_near:'float'   ) -> None:
    r''''''

    assert isinstance(zdepth_near, (int, float)), 'zdepth_near must be int or float'

    self.py__depth_near = zdepth_near






    self._ptr.call_with_return(88,tuple([zdepth_near]))


register_cast_function('GLTFCamera', GLTFCamera.cast)
register_class('GLTFCamera', GLTFCamera)
