# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
  import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDUniformWrapper


class RDUniform(py4godot_refcounted.RefCounted):
  r'''
		This object is used by `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDUniform.construct_without_init()
    class_._ptr = constructor(659,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDUniform.construct_without_init()
    class_._ptr = constructor(659,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDUniformWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(659,0, ())


  def generate_wrapper(self):
    return CPPRDUniformWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDUniform.__new__(RDUniform)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDUniform'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDUniform.construct_without_init()
    cls._ptr = CPPRDUniformWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDUniform.construct_without_init()
    cls._ptr = CPPRDUniformWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def uniform_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_uniform_type()
    return _ret
  @uniform_type.setter
  def uniform_type(self,  value:'int'):
    self.set_uniform_type(value)
  @property
  def binding(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_binding()
    return _ret
  @binding.setter
  def binding(self,  value:'int'):
    self.set_binding(value)
  @functools.native_method
  def set_uniform_type(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__uniform_type = p_member






    self._ptr.call_with_return(53,tuple([p_member]))

  @functools.native_method
  def get_uniform_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_binding(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__binding = p_member






    self._ptr.call_with_return(55,tuple([p_member]))

  @functools.native_method
  def get_binding(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def add_id(self, id:'RID'   ) -> None:
    r'''
				Binds the given id to the uniform. The data associated with the id is then used when the uniform is passed to a shader.
			'''

    assert(not id is None)
    assert isinstance(id, RID), 'id must be RID'






    self._ptr.call_with_return(57,tuple([id._ptr]))

  @functools.native_method
  def clear_ids(self) -> None:
    r'''
				Unbinds all ids currently bound to the uniform.
			'''




    self._ptr.call_with_return(58,tuple([]))

  @functools.native_method
  def get_ids(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r'''
				Returns an array of all ids currently bound to the uniform.
			'''




    _ret = py4godot_ridtypedarray.RIDTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(59,tuple([]))
    return _ret



register_cast_function('RDUniform', RDUniform.cast)
register_class('RDUniform', RDUniform)
