# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPJoint3DWrapper


class Joint3D(py4godot_node3d.Node3D):
  r'''
		Abstract base class for all joints in 3D physics. 3D joints bind together two physics bodies (`node_a` and `node_b`) and apply a constraint. If only one body is defined, it is attached to a fixed `StaticBody3D` without collision shapes.
	'''

  @staticmethod
  def constructor():
    class_ = Joint3D.construct_without_init()
    class_._ptr = constructor(443,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Joint3D.construct_without_init()
    class_._ptr = constructor(443,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPJoint3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(443,0, ())


  def generate_wrapper(self):
    return CPPJoint3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Joint3D.__new__(Joint3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Joint3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Joint3D.construct_without_init()
    cls._ptr = CPPJoint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Joint3D.construct_without_init()
    cls._ptr = CPPJoint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def node_a(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_node_a()
    return _ret
  @node_a.setter
  def node_a(self,  value:'object'):
    self.set_node_a(value)
  @property
  def node_b(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_node_b()
    return _ret
  @node_b.setter
  def node_b(self,  value:'object'):
    self.set_node_b(value)
  @property
  def solver_priority(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_solver_priority()
    return _ret
  @solver_priority.setter
  def solver_priority(self,  value:'int'):
    self.set_solver_priority(value)
  @property
  def exclude_nodes_from_collision(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_exclude_nodes_from_collision()
    return _ret
  @exclude_nodes_from_collision.setter
  def exclude_nodes_from_collision(self,  value:'bool'):
    self.set_exclude_nodes_from_collision(value)
  @functools.native_method
  def set_node_a(self, node:'object'   ) -> None:
    r''''''

    assert(not node is None)
    assert isinstance(node, (str, NodePath)), 'node must be str or NodePath'

    self.py__node_a = node



    assert(isinstance(node, (str, NodePath)))
    py_nodepath_node = node if isinstance(node,NodePath) else NodePath.new2(node)


    self._ptr.call_with_return(251,tuple([py_nodepath_node._ptr]))

  @functools.native_method
  def get_node_a(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(252,tuple([]))

    return _ret


  @functools.native_method
  def set_node_b(self, node:'object'   ) -> None:
    r''''''

    assert(not node is None)
    assert isinstance(node, (str, NodePath)), 'node must be str or NodePath'

    self.py__node_b = node



    assert(isinstance(node, (str, NodePath)))
    py_nodepath_node = node if isinstance(node,NodePath) else NodePath.new2(node)


    self._ptr.call_with_return(253,tuple([py_nodepath_node._ptr]))

  @functools.native_method
  def get_node_b(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(254,tuple([]))

    return _ret


  @functools.native_method
  def set_solver_priority(self, priority:'int'   ) -> None:
    r''''''

    assert isinstance(priority, (int, float)), 'priority must be int or float'

    self.py__solver_priority = priority






    self._ptr.call_with_return(255,tuple([priority]))

  @functools.native_method
  def get_solver_priority(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(256,tuple([]))

    return _ret


  @functools.native_method
  def set_exclude_nodes_from_collision(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__exclude_nodes_from_collision = enable






    self._ptr.call_with_return(257,tuple([enable]))

  @functools.native_method
  def get_exclude_nodes_from_collision(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(258,tuple([]))

    return _ret


  @functools.native_method
  def get_rid(self) -> typing.Union['RID']:
    r'''
				Returns the joint's internal `RID` from the `PhysicsServer3D`.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(259,tuple([]))
    return _ret



register_cast_function('Joint3D', Joint3D.cast)
register_class('Joint3D', Joint3D)
