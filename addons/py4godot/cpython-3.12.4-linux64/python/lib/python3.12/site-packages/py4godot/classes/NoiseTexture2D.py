# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.FastNoiseLite as py4godot_fastnoiselite 
  import py4godot.classes.Gradient as py4godot_gradient 
  import py4godot.classes.Noise as py4godot_noise 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPNoiseTexture2DWrapper


class NoiseTexture2D(py4godot_texture2d.Texture2D):
  r''''''

  @staticmethod
  def constructor():
    class_ = NoiseTexture2D.construct_without_init()
    class_._ptr = constructor(519,0, ())
    return class_
  @staticmethod
  def new():
    class_ = NoiseTexture2D.construct_without_init()
    class_._ptr = constructor(519,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPNoiseTexture2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(519,0, ())


  def generate_wrapper(self):
    return CPPNoiseTexture2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = NoiseTexture2D.__new__(NoiseTexture2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'NoiseTexture2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = NoiseTexture2D.construct_without_init()
    cls._ptr = CPPNoiseTexture2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = NoiseTexture2D.construct_without_init()
    cls._ptr = CPPNoiseTexture2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def width(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_width()
    return _ret
  @width.setter
  def width(self,  value:'int'):
    self.set_width(value)
  @property
  def height(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'int'):
    self.set_height(value)
  @property
  def generate_mipmaps(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_generating_mipmaps()
    return _ret
  @generate_mipmaps.setter
  def generate_mipmaps(self,  value:'bool'):
    self.set_generate_mipmaps(value)
  @property
  def noise(self) -> typing.Union['py4godot_fastnoiselite.FastNoiseLite','py4godot_noise.Noise']:
    r''''''
    _ret = self. get_noise()
    return _ret
  @noise.setter
  def noise(self,  value:'py4godot_object.Object'):
    self.set_noise(value)
  @property
  def color_ramp(self) -> typing.Union['py4godot_gradient.Gradient']:
    r''''''
    _ret = self. get_color_ramp()
    return _ret
  @color_ramp.setter
  def color_ramp(self,  value:'py4godot_object.Object'):
    self.set_color_ramp(value)
  @property
  def seamless(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_seamless()
    return _ret
  @seamless.setter
  def seamless(self,  value:'bool'):
    self.set_seamless(value)
  @property
  def invert(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_invert()
    return _ret
  @invert.setter
  def invert(self,  value:'bool'):
    self.set_invert(value)
  @property
  def in_3d_space(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_in_3d_space()
    return _ret
  @in_3d_space.setter
  def in_3d_space(self,  value:'bool'):
    self.set_in_3d_space(value)
  @property
  def as_normal_map(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_normal_map()
    return _ret
  @as_normal_map.setter
  def as_normal_map(self,  value:'bool'):
    self.set_as_normal_map(value)
  @property
  def normalize(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_normalized()
    return _ret
  @normalize.setter
  def normalize(self,  value:'bool'):
    self.set_normalize(value)
  @property
  def seamless_blend_skirt(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_seamless_blend_skirt()
    return _ret
  @seamless_blend_skirt.setter
  def seamless_blend_skirt(self,  value:'float'):
    self.set_seamless_blend_skirt(value)
  @property
  def bump_strength(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_bump_strength()
    return _ret
  @bump_strength.setter
  def bump_strength(self,  value:'float'):
    self.set_bump_strength(value)
  @functools.native_method
  def set_width(self, width:'int'   ) -> None:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'

    self.py__width = width






    self._ptr.call_with_return(93,tuple([width]))

  @functools.native_method
  def set_height(self, height:'int'   ) -> None:
    r''''''

    assert isinstance(height, (int, float)), 'height must be int or float'

    self.py__height = height






    self._ptr.call_with_return(94,tuple([height]))

  @functools.native_method
  def set_generate_mipmaps(self, invert:'bool'   ) -> None:
    r''''''

    assert isinstance(invert, bool), 'invert must be bool'

    self.py__generate_mipmaps = invert






    self._ptr.call_with_return(95,tuple([invert]))

  @functools.native_method
  def is_generating_mipmaps(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_noise(self, noise:'py4godot_noise.Noise'   ) -> None:
    r''''''

    assert(not noise is None)
    assert isinstance(noise, get_class('Noise')), 'noise must be Noise'

    self.py__noise = noise






    self._ptr.call_with_return(97,tuple([noise._ptr]))

  @functools.native_method
  def get_noise(self) -> typing.Union['py4godot_fastnoiselite.FastNoiseLite','py4godot_noise.Noise']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Noise
    _ret._ptr = self._ptr.call_with_return(98,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_color_ramp(self, gradient:'py4godot_gradient.Gradient'   ) -> None:
    r''''''

    assert(not gradient is None)
    assert isinstance(gradient, get_class('Gradient')), 'gradient must be Gradient'

    self.py__color_ramp = gradient






    self._ptr.call_with_return(99,tuple([gradient._ptr]))

  @functools.native_method
  def get_color_ramp(self) -> typing.Union['py4godot_gradient.Gradient']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Gradient
    _ret._ptr = self._ptr.call_with_return(100,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_seamless(self, seamless:'bool'   ) -> None:
    r''''''

    assert isinstance(seamless, bool), 'seamless must be bool'

    self.py__seamless = seamless






    self._ptr.call_with_return(101,tuple([seamless]))

  @functools.native_method
  def get_seamless(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(102,tuple([]))

    return _ret


  @functools.native_method
  def set_invert(self, invert:'bool'   ) -> None:
    r''''''

    assert isinstance(invert, bool), 'invert must be bool'

    self.py__invert = invert






    self._ptr.call_with_return(103,tuple([invert]))

  @functools.native_method
  def get_invert(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([]))

    return _ret


  @functools.native_method
  def set_in_3d_space(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__in_3d_space = enable






    self._ptr.call_with_return(105,tuple([enable]))

  @functools.native_method
  def is_in_3d_space(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(106,tuple([]))

    return _ret


  @functools.native_method
  def set_as_normal_map(self, as_normal_map:'bool'   ) -> None:
    r''''''

    assert isinstance(as_normal_map, bool), 'as_normal_map must be bool'

    self.py__as_normal_map = as_normal_map






    self._ptr.call_with_return(107,tuple([as_normal_map]))

  @functools.native_method
  def is_normal_map(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(108,tuple([]))

    return _ret


  @functools.native_method
  def set_normalize(self, normalize:'bool'   ) -> None:
    r''''''

    assert isinstance(normalize, bool), 'normalize must be bool'

    self.py__normalize = normalize






    self._ptr.call_with_return(109,tuple([normalize]))

  @functools.native_method
  def is_normalized(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(110,tuple([]))

    return _ret


  @functools.native_method
  def set_seamless_blend_skirt(self, seamless_blend_skirt:'float'   ) -> None:
    r''''''

    assert isinstance(seamless_blend_skirt, (int, float)), 'seamless_blend_skirt must be int or float'

    self.py__seamless_blend_skirt = seamless_blend_skirt






    self._ptr.call_with_return(111,tuple([seamless_blend_skirt]))

  @functools.native_method
  def get_seamless_blend_skirt(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(112,tuple([]))

    return _ret


  @functools.native_method
  def set_bump_strength(self, bump_strength:'float'   ) -> None:
    r''''''

    assert isinstance(bump_strength, (int, float)), 'bump_strength must be int or float'

    self.py__bump_strength = bump_strength






    self._ptr.call_with_return(113,tuple([bump_strength]))

  @functools.native_method
  def get_bump_strength(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(114,tuple([]))

    return _ret



register_cast_function('NoiseTexture2D', NoiseTexture2D.cast)
register_class('NoiseTexture2D', NoiseTexture2D)
