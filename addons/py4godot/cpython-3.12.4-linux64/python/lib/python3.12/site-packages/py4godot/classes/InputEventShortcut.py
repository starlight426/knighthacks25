# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Shortcut as py4godot_shortcut 
import py4godot.classes.InputEvent as py4godot_inputevent 
from py4godot.wrappers.wrappers import CPPInputEventShortcutWrapper


class InputEventShortcut(py4godot_inputevent.InputEvent):
  r'''
		InputEventShortcut is a special event that can be received in `Node._input`, `Node._shortcut_input`, and `Node._unhandled_input`. It is typically sent by the editor's Command Palette to trigger actions, but can also be sent manually using `Viewport.push_input`.
	'''

  @staticmethod
  def constructor():
    class_ = InputEventShortcut.construct_without_init()
    class_._ptr = constructor(428,0, ())
    return class_
  @staticmethod
  def new():
    class_ = InputEventShortcut.construct_without_init()
    class_._ptr = constructor(428,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPInputEventShortcutWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(428,0, ())


  def generate_wrapper(self):
    return CPPInputEventShortcutWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = InputEventShortcut.__new__(InputEventShortcut)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'InputEventShortcut'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventShortcut.construct_without_init()
    cls._ptr = CPPInputEventShortcutWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventShortcut.construct_without_init()
    cls._ptr = CPPInputEventShortcutWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def shortcut(self) -> typing.Union['py4godot_shortcut.Shortcut']:
    r''''''
    _ret = self. get_shortcut()
    return _ret
  @shortcut.setter
  def shortcut(self,  value:'py4godot_object.Object'):
    self.set_shortcut(value)
  @functools.native_method
  def set_shortcut(self, shortcut:'py4godot_shortcut.Shortcut'   ) -> None:
    r''''''

    assert(not shortcut is None)
    assert isinstance(shortcut, get_class('Shortcut')), 'shortcut must be Shortcut'

    self.py__shortcut = shortcut






    self._ptr.call_with_return(92,tuple([shortcut._ptr]))

  @functools.native_method
  def get_shortcut(self) -> typing.Union['py4godot_shortcut.Shortcut']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Shortcut
    _ret._ptr = self._ptr.call_with_return(93,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('InputEventShortcut', InputEventShortcut.cast)
register_class('InputEventShortcut', InputEventShortcut)
