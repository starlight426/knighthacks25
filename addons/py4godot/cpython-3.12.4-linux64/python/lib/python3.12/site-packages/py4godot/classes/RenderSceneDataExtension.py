# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RenderSceneData as py4godot_renderscenedata 
from py4godot.wrappers.wrappers import CPPRenderSceneDataExtensionWrapper


class RenderSceneDataExtension(py4godot_renderscenedata.RenderSceneData):
  r'''
		This class allows for a RenderSceneData implementation to be made in GDExtension.
	'''

  @staticmethod
  def constructor():
    class_ = RenderSceneDataExtension.construct_without_init()
    class_._ptr = constructor(681,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RenderSceneDataExtension.construct_without_init()
    class_._ptr = constructor(681,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRenderSceneDataExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(681,0, ())


  def generate_wrapper(self):
    return CPPRenderSceneDataExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RenderSceneDataExtension.__new__(RenderSceneDataExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RenderSceneDataExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderSceneDataExtension.construct_without_init()
    cls._ptr = CPPRenderSceneDataExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderSceneDataExtension.construct_without_init()
    cls._ptr = CPPRenderSceneDataExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_cam_transform(self) -> typing.Union['Transform3D']:
    r'''
				Implement this in GDExtension to return the camera `Transform3D`.
			'''




    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def _get_cam_projection(self) -> typing.Union['Projection']:
    r'''
				Implement this in GDExtension to return the camera `Projection`.
			'''




    _ret = Projection.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))
    return _ret


  @functools.native_method
  def _get_view_count(self) -> typing.Union[int]:
    r'''
				Implement this in GDExtension to return the view count.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))
    return _ret


  @functools.native_method
  def _get_view_eye_offset(self, view:'int'   ) -> typing.Union['Vector3']:
    r'''
				Implement this in GDExtension to return the eye offset for the given `view`.
			'''

    assert isinstance(view, (int, float)), 'view must be int or float'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([view]))
    return _ret


  @functools.native_method
  def _get_view_projection(self, view:'int'   ) -> typing.Union['Projection']:
    r'''
				Implement this in GDExtension to return the view `Projection` for the given `view`.
			'''

    assert isinstance(view, (int, float)), 'view must be int or float'






    _ret = Projection.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(59,tuple([view]))
    return _ret


  @functools.native_method
  def _get_uniform_buffer(self) -> typing.Union['RID']:
    r'''
				Implement this in GDExtension to return the `RID` of the uniform buffer containing the scene data as a UBO.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))
    return _ret



register_cast_function('RenderSceneDataExtension', RenderSceneDataExtension.cast)
register_class('RenderSceneDataExtension', RenderSceneDataExtension)
