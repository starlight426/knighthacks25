# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Shader as py4godot_shader 
  import py4godot.classes.VisualShader as py4godot_visualshader 
import py4godot.classes.Material as py4godot_material 
from py4godot.wrappers.wrappers import CPPShaderMaterialWrapper


class ShaderMaterial(py4godot_material.Material):
  r'''
		A material that uses a custom `Shader` program to render visual items (canvas items, meshes, skies, fog), or to process particles. Compared to other materials, `ShaderMaterial` gives deeper control over the generated shader code. For more information, see the shaders documentation index below.
		Multiple `ShaderMaterial`s can use the same shader and configure different values for the shader uniforms.
		**Note:** For performance reasons, the `signal Resource.changed` signal is only emitted when the `Resource.resource_name` changes. Only in editor, it is also emitted for `shader` changes.
	'''

  @staticmethod
  def constructor():
    class_ = ShaderMaterial.construct_without_init()
    class_._ptr = constructor(740,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ShaderMaterial.construct_without_init()
    class_._ptr = constructor(740,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPShaderMaterialWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(740,0, ())


  def generate_wrapper(self):
    return CPPShaderMaterialWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ShaderMaterial.__new__(ShaderMaterial)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ShaderMaterial'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ShaderMaterial.construct_without_init()
    cls._ptr = CPPShaderMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ShaderMaterial.construct_without_init()
    cls._ptr = CPPShaderMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def shader(self) -> typing.Union['py4godot_shader.Shader','py4godot_visualshader.VisualShader']:
    r''''''
    _ret = self. get_shader()
    return _ret
  @shader.setter
  def shader(self,  value:'py4godot_object.Object'):
    self.set_shader(value)
  @functools.native_method
  def set_shader(self, shader:'py4godot_shader.Shader'   ) -> None:
    r''''''

    assert(not shader is None)
    assert isinstance(shader, get_class('Shader')), 'shader must be Shader'

    self.py__shader = shader






    self._ptr.call_with_return(87,tuple([shader._ptr]))

  @functools.native_method
  def get_shader(self) -> typing.Union['py4godot_shader.Shader','py4godot_visualshader.VisualShader']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Shader
    _ret._ptr = self._ptr.call_with_return(88,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_shader_parameter(self, param:'object'   , value:'object'   ) -> None:
    r'''
				Changes the value set for this material of a uniform in the shader.
				**Note:** `param` is case-sensitive and must match the name of the uniform in the code exactly (not the capitalized name in the inspector).
				**Note:** Changes to the shader uniform will be effective on all instances using this `ShaderMaterial`. To prevent this, use per-instance uniforms with `GeometryInstance3D.set_instance_shader_parameter` or duplicate the `ShaderMaterial` resource using `Resource.duplicate`. Per-instance uniforms allow for better shader reuse and are therefore faster, so they should be preferred over duplicating the `ShaderMaterial` when possible.
			'''

    assert(not param is None)
    assert isinstance(param, (str, StringName)), 'param must be str or StringName'
    




    assert(isinstance(param, (str, StringName)))
    py_stringname_param = param if isinstance(param, StringName) else c_utils.py_string_to_string_name(param)


    self._ptr.call_with_return(89,tuple([py_stringname_param._ptr, value]))

  @functools.native_method
  def get_shader_parameter(self, param:'object'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the current value set for this material of a uniform in the shader.
			'''

    assert(not param is None)
    assert isinstance(param, (str, StringName)), 'param must be str or StringName'




    assert(isinstance(param, (str, StringName)))
    py_stringname_param = param if isinstance(param, StringName) else c_utils.py_string_to_string_name(param)

    _ret = None
    _ret = self._ptr.call_with_return(90,tuple([py_stringname_param._ptr]))
    return _ret



register_cast_function('ShaderMaterial', ShaderMaterial.cast)
register_class('ShaderMaterial', ShaderMaterial)
