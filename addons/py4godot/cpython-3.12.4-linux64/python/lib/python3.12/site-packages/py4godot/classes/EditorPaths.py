# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPEditorPathsWrapper


class EditorPaths(py4godot_object.Object):
  r'''
		This editor-only singleton returns OS-specific paths to various data folders and files. It can be used in editor plugins to ensure files are saved in the correct location on each operating system.
		**Note:** This singleton is not accessible in exported projects. Attempting to access it in an exported project will result in a script error as the singleton won't be declared. To prevent script errors in exported projects, use `Engine.has_singleton` to check whether the singleton is available before using it.
		**Note:** On the Linux/BSD platform, Godot complies with the `url=https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html`XDG Base Directory Specification`/url`. You can override environment variables following the specification to change the editor and project data paths.
	'''

  @staticmethod
  def constructor():
    class_ = EditorPaths.construct_without_init()
    class_._ptr = constructor(294,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorPaths.construct_without_init()
    class_._ptr = constructor(294,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorPathsWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(294,0, ())


  def generate_wrapper(self):
    return CPPEditorPathsWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EditorPaths.__new__(EditorPaths)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorPaths'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorPaths.construct_without_init()
    cls._ptr = CPPEditorPathsWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorPaths.construct_without_init()
    cls._ptr = CPPEditorPathsWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_data_dir(self) -> typing.Union[str]:
    r'''
				Returns the absolute path to the user's data folder. This folder should be used for _persistent_ user data files such as installed export templates.
				**Default paths per platform:**
				`codeblock lang=text`
				- Windows: %APPDATA%\Godot\                    (same as `get_config_dir()`)
				- macOS: ~/Library/Application Support/Godot/  (same as `get_config_dir()`)
				- Linux: ~/.local/share/godot/
				```
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(49,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_config_dir(self) -> typing.Union[str]:
    r'''
				Returns the absolute path to the user's configuration folder. This folder should be used for _persistent_ user configuration files.
				**Default paths per platform:**
				`codeblock lang=text`
				- Windows: %APPDATA%\Godot\                    (same as `get_data_dir()`)
				- macOS: ~/Library/Application Support/Godot/  (same as `get_data_dir()`)
				- Linux: ~/.config/godot/
				```
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(50,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_cache_dir(self) -> typing.Union[str]:
    r'''
				Returns the absolute path to the user's cache folder. This folder should be used for temporary data that can be removed safely whenever the editor is closed (such as generated resource thumbnails).
				**Default paths per platform:**
				`codeblock lang=text`
				- Windows: %LOCALAPPDATA%\Godot\
				- macOS: ~/Library/Caches/Godot/
				- Linux: ~/.cache/godot/
				```
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(51,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def is_self_contained(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the editor is marked as self-contained, `false` otherwise. When self-contained mode is enabled, user configuration, data and cache files are saved in an `editor_data/` folder next to the editor binary. This makes portable usage easier and ensures the Godot editor minimizes file writes outside its own folder. Self-contained mode is not available for exported projects.
				Self-contained mode can be enabled by creating a file named `._sc_` or `_sc_` in the same folder as the editor binary or macOS .app bundle while the editor is not running. See also `get_self_contained_file`.
				**Note:** On macOS, quarantine flag should be manually removed before using self-contained mode, see `url=https://docs.godotengine.org/en/stable/tutorials/export/running_on_macos.html`Running on macOS`/url`.
				**Note:** On macOS, placing `_sc_` or any other file inside .app bundle will break digital signature and make it non-portable, consider placing it in the same folder as the .app bundle instead.
				**Note:** The Steam release of Godot uses self-contained mode by default.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(52,tuple([]))
    return _ret


  @functools.native_method
  def get_self_contained_file(self) -> typing.Union[str]:
    r'''
				Returns the absolute path to the self-contained file that makes the current Godot editor instance be considered as self-contained. Returns an empty string if the current Godot editor instance isn't self-contained. See also `is_self_contained`.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_project_settings_dir(self) -> typing.Union[str]:
    r'''
				Returns the project-specific editor settings path. Projects all have a unique subdirectory inside the settings path where project-specific editor settings are saved.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))
    return utils.gd_string_to_py_string(_ret)



register_cast_function('EditorPaths', EditorPaths.cast)
register_class('EditorPaths', EditorPaths)
