# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.GDExtension as py4godot_gdextension 
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPGDExtensionManagerWrapper

_GDExtensionManager_singleton_instance = None
class LoadStatus:
  LOAD_STATUS_OK = 0
  LOAD_STATUS_FAILED = 1
  LOAD_STATUS_ALREADY_LOADED = 2
  LOAD_STATUS_NOT_LOADED = 3
  LOAD_STATUS_NEEDS_RESTART = 4


class GDExtensionManager(py4godot_object.Object):
  r'''
		The GDExtensionManager loads, initializes, and keeps track of all available `GDExtension` libraries in the project.
		**Note:** Do not worry about GDExtension unless you know what you are doing.
	'''


  def generate_wrapper(self):
    return CPPGDExtensionManagerWrapper()
  def init_signals(self):
    super().init_signals()
    extensions_reloaded_name = utils.py_string_to_string_name("extensions_reloaded")
    self.extensions_reloaded = signals.BuiltinSignal(self, extensions_reloaded_name)
    extension_loaded_name = utils.py_string_to_string_name("extension_loaded")
    self.extension_loaded = signals.BuiltinSignal(self, extension_loaded_name)
    extension_unloading_name = utils.py_string_to_string_name("extension_unloading")
    self.extension_unloading = signals.BuiltinSignal(self, extension_unloading_name)

  @staticmethod
  def construct_without_init():
    cls = GDExtensionManager.__new__(GDExtensionManager)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GDExtensionManager'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GDExtensionManager.construct_without_init()
    cls._ptr = CPPGDExtensionManagerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GDExtensionManager.construct_without_init()
    cls._ptr = CPPGDExtensionManagerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _GDExtensionManager_singleton_instance
    if _GDExtensionManager_singleton_instance is None:
      singleton = GDExtensionManager()
      singleton._ptr = constructor(342,0, ())
      _GDExtensionManager_singleton_instance = singleton
    return _GDExtensionManager_singleton_instance

  @functools.native_method
  def load_extension(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Loads an extension by absolute file path. The `path` needs to point to a valid `GDExtension`. Returns `constant LOAD_STATUS_OK` if successful.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(49,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def reload_extension(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Reloads the extension at the given file path. The `path` needs to point to a valid `GDExtension`, otherwise this method may return either `constant LOAD_STATUS_NOT_LOADED` or `constant LOAD_STATUS_FAILED`.
				**Note:** You can only reload extensions in the editor. In release builds, this method always fails and returns `constant LOAD_STATUS_FAILED`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(50,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def unload_extension(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Unloads an extension by file path. The `path` needs to point to an already loaded `GDExtension`, otherwise this method returns `constant LOAD_STATUS_NOT_LOADED`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(51,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def is_extension_loaded(self, path:'str'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the extension at the given file `path` has already been loaded successfully. See also `get_loaded_extensions`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = 0
    _ret = self._ptr.call_with_return(52,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def get_loaded_extensions(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns the file paths of all currently loaded extensions.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def get_extension(self, path:'str'   ) -> typing.Union['py4godot_gdextension.GDExtension']:
    r'''
				Returns the `GDExtension` at the given file `path`, or `null` if it has not been loaded or does not exist.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: GDExtension
    _ret._ptr = self._ptr.call_with_return(54,tuple([py_string_path._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('GDExtensionManager', GDExtensionManager.cast)
register_class('GDExtensionManager', GDExtensionManager)
