# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
from py4godot.wrappers.wrappers import CPPVisibleOnScreenNotifier3DWrapper


class VisibleOnScreenNotifier3D(py4godot_visualinstance3d.VisualInstance3D):
  r'''
		`VisibleOnScreenNotifier3D` represents a box-shaped region of 3D space. When any part of this region becomes visible on screen or in a `Camera3D`'s view, it will emit a `signal screen_entered` signal, and likewise it will emit a `signal screen_exited` signal when no part of it remains visible.
		If you want a node to be enabled automatically when this region is visible on screen, use `VisibleOnScreenEnabler3D`.
		**Note:** `VisibleOnScreenNotifier3D` uses an approximate heuristic that doesn't take walls and other occlusion into account, unless occlusion culling is used. It also won't function unless `Node3D.visible` is set to `true`.
	'''

  @staticmethod
  def constructor():
    class_ = VisibleOnScreenNotifier3D.construct_without_init()
    class_._ptr = constructor(877,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisibleOnScreenNotifier3D.construct_without_init()
    class_._ptr = constructor(877,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisibleOnScreenNotifier3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(877,0, ())


  def generate_wrapper(self):
    return CPPVisibleOnScreenNotifier3DWrapper()
  def init_signals(self):
    super().init_signals()
    screen_entered_name = utils.py_string_to_string_name("screen_entered")
    self.screen_entered = signals.BuiltinSignal(self, screen_entered_name)
    screen_exited_name = utils.py_string_to_string_name("screen_exited")
    self.screen_exited = signals.BuiltinSignal(self, screen_exited_name)

  @staticmethod
  def construct_without_init():
    cls = VisibleOnScreenNotifier3D.__new__(VisibleOnScreenNotifier3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisibleOnScreenNotifier3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisibleOnScreenNotifier3D.construct_without_init()
    cls._ptr = CPPVisibleOnScreenNotifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisibleOnScreenNotifier3D.construct_without_init()
    cls._ptr = CPPVisibleOnScreenNotifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def aabb(self) -> typing.Union['AABB']:
    r''''''
    _ret = self. get_aabb()
    return _ret
  @aabb.setter
  def aabb(self,  value:'AABB'):
    self.set_aabb(value)
  @functools.native_method
  def set_aabb(self, rect:'AABB'   ) -> None:
    r''''''

    assert(not rect is None)
    assert isinstance(rect, AABB), 'rect must be AABB'

    self.py__aabb = rect






    self._ptr.call_with_return(264,tuple([rect._ptr]))

  @functools.native_method
  def is_on_screen(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the bounding box is on the screen.
				**Note:** It takes one frame for the `VisibleOnScreenNotifier3D`'s visibility to be assessed once added to the scene tree, so this method will always return `false` right after it is instantiated.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(265,tuple([]))
    return _ret



register_cast_function('VisibleOnScreenNotifier3D', VisibleOnScreenNotifier3D.cast)
register_class('VisibleOnScreenNotifier3D', VisibleOnScreenNotifier3D)
