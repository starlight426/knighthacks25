# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Shape2D as py4godot_shape2d 
from py4godot.wrappers.wrappers import CPPSegmentShape2DWrapper


class SegmentShape2D(py4godot_shape2d.Shape2D):
  r'''
		A 2D line segment shape, intended for use in physics. Usually used to provide a shape for a `CollisionShape2D`.
	'''

  @staticmethod
  def constructor():
    class_ = SegmentShape2D.construct_without_init()
    class_._ptr = constructor(731,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SegmentShape2D.construct_without_init()
    class_._ptr = constructor(731,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSegmentShape2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(731,0, ())


  def generate_wrapper(self):
    return CPPSegmentShape2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SegmentShape2D.__new__(SegmentShape2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SegmentShape2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SegmentShape2D.construct_without_init()
    cls._ptr = CPPSegmentShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SegmentShape2D.construct_without_init()
    cls._ptr = CPPSegmentShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def a(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_a()
    return _ret
  @a.setter
  def a(self,  value:'Vector2'):
    self.set_a(value)
  @property
  def b(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_b()
    return _ret
  @b.setter
  def b(self,  value:'Vector2'):
    self.set_b(value)
  @functools.native_method
  def set_a(self, a:'Vector2'   ) -> None:
    r''''''

    assert(not a is None)
    assert isinstance(a, Vector2), 'a must be Vector2'

    self.py__a = a






    self._ptr.call_with_return(85,tuple([a._ptr]))

  @functools.native_method
  def get_a(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_b(self, b:'Vector2'   ) -> None:
    r''''''

    assert(not b is None)
    assert isinstance(b, Vector2), 'b must be Vector2'

    self.py__b = b






    self._ptr.call_with_return(87,tuple([b._ptr]))

  @functools.native_method
  def get_b(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(88,tuple([]))

    return _ret



register_cast_function('SegmentShape2D', SegmentShape2D.cast)
register_class('SegmentShape2D', SegmentShape2D)
