# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPResourceImporterWrapper

class ImportOrder:
  IMPORT_ORDER_DEFAULT = 0
  IMPORT_ORDER_SCENE = 100


class ResourceImporter(py4godot_refcounted.RefCounted):
  r'''
		This is the base class for Godot's resource importers. To implement your own resource importers using editor plugins, see `EditorImportPlugin`.
	'''

  @staticmethod
  def constructor():
    class_ = ResourceImporter.construct_without_init()
    class_._ptr = constructor(688,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ResourceImporter.construct_without_init()
    class_._ptr = constructor(688,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPResourceImporterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(688,0, ())


  def generate_wrapper(self):
    return CPPResourceImporterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ResourceImporter.__new__(ResourceImporter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ResourceImporter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceImporter.construct_without_init()
    cls._ptr = CPPResourceImporterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceImporter.construct_without_init()
    cls._ptr = CPPResourceImporterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_build_dependencies(self, path:'str'   ) -> typing.Union['PackedStringArray']:
    r'''
				Called when the engine compilation profile editor wants to check what build options an imported resource needs. For example, `ResourceImporterDynamicFont` has a property called `ResourceImporterDynamicFont.multichannel_signed_distance_field`, that depends on the engine to be build with the "msdfgen" module. If that resource happened to be a custom one, it would be handled like this:
				```gdscript
				func _get_build_dependencies(path):
					var resource = load(path)
					var dependencies = PackedStringArray()

					if resource.multichannel_signed_distance_field:
						dependencies.push_back("module_msdfgen_enabled")

					return dependencies
				```
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([py_string_path._ptr]))
    return _ret



register_cast_function('ResourceImporter', ResourceImporter.cast)
register_class('ResourceImporter', ResourceImporter)
