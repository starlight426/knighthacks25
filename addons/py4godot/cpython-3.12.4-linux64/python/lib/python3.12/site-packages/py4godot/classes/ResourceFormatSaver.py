# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Resource as py4godot_resource 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPResourceFormatSaverWrapper


class ResourceFormatSaver(py4godot_refcounted.RefCounted):
  r'''
		The engine can save resources when you do it from the editor, or when you use the `ResourceSaver` singleton. This is accomplished thanks to multiple `ResourceFormatSaver`s, each handling its own format and called automatically by the engine.
		By default, Godot saves resources as `.tres` (text-based), `.res` (binary) or another built-in format, but you can choose to create your own format by extending this class. Be sure to respect the documented return types and values. You should give it a global class name with `class_name` for it to be registered. Like built-in ResourceFormatSavers, it will be called automatically when saving resources of its recognized type(s). You may also implement a `ResourceFormatLoader`.
	'''

  @staticmethod
  def constructor():
    class_ = ResourceFormatSaver.construct_without_init()
    class_._ptr = constructor(687,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ResourceFormatSaver.construct_without_init()
    class_._ptr = constructor(687,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPResourceFormatSaverWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(687,0, ())


  def generate_wrapper(self):
    return CPPResourceFormatSaverWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ResourceFormatSaver.__new__(ResourceFormatSaver)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ResourceFormatSaver'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceFormatSaver.construct_without_init()
    cls._ptr = CPPResourceFormatSaverWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceFormatSaver.construct_without_init()
    cls._ptr = CPPResourceFormatSaverWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _save(self, resource:'py4godot_resource.Resource'   , path:'str'   , flags:'int'   ) -> typing.Union[int]:
    r'''
				Saves the given resource object to a file at the target `path`. `flags` is a bitmask composed with `enum ResourceSaver.SaverFlags` constants.
				Returns `constant OK` on success, or an `enum Error` constant in case of failure.
			'''

    assert(not resource is None)
    assert isinstance(resource, get_class('Resource')), 'resource must be Resource'
    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(flags, (int, float)), 'flags must be int or float'





    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([resource._ptr, py_string_path._ptr, flags]))
    return _ret


  @functools.native_method
  def _set_uid(self, path:'str'   , uid:'int'   ) -> typing.Union[int]:
    r'''
				Sets a new UID for the resource at the given `path`. Returns `constant OK` on success, or an `enum Error` constant in case of failure.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(uid, (int, float)), 'uid must be int or float'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([py_string_path._ptr, uid]))
    return _ret


  @functools.native_method
  def _recognize(self, resource:'py4godot_resource.Resource'   ) -> typing.Union[bool]:
    r'''
				Returns whether the given resource object can be saved by this saver.
			'''

    assert(not resource is None)
    assert isinstance(resource, get_class('Resource')), 'resource must be Resource'






    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([resource._ptr]))
    return _ret


  @functools.native_method
  def _get_recognized_extensions(self, resource:'py4godot_resource.Resource'   ) -> typing.Union['PackedStringArray']:
    r'''
				Returns the list of extensions available for saving the resource object, provided it is recognized (see `_recognize`).
			'''

    assert(not resource is None)
    assert isinstance(resource, get_class('Resource')), 'resource must be Resource'






    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([resource._ptr]))
    return _ret


  @functools.native_method
  def _recognize_path(self, resource:'py4godot_resource.Resource'   , path:'str'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if this saver handles a given save path and `false` otherwise.
				If this method is not implemented, the default behavior returns whether the path's extension is within the ones provided by `_get_recognized_extensions`.
			'''

    assert(not resource is None)
    assert isinstance(resource, get_class('Resource')), 'resource must be Resource'
    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'





    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([resource._ptr, py_string_path._ptr]))
    return _ret



register_cast_function('ResourceFormatSaver', ResourceFormatSaver.cast)
register_class('ResourceFormatSaver', ResourceFormatSaver)
