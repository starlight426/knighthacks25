# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.SceneReplicationConfig as py4godot_scenereplicationconfig 
import py4godot.classes.Node as py4godot_node 
from py4godot.wrappers.wrappers import CPPMultiplayerSynchronizerWrapper

class VisibilityUpdateMode:
  VISIBILITY_PROCESS_IDLE = 0
  VISIBILITY_PROCESS_PHYSICS = 1
  VISIBILITY_PROCESS_NONE = 2


class MultiplayerSynchronizer(py4godot_node.Node):
  r''''''

  @staticmethod
  def constructor():
    class_ = MultiplayerSynchronizer.construct_without_init()
    class_._ptr = constructor(491,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MultiplayerSynchronizer.construct_without_init()
    class_._ptr = constructor(491,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMultiplayerSynchronizerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(491,0, ())


  def generate_wrapper(self):
    return CPPMultiplayerSynchronizerWrapper()
  def init_signals(self):
    super().init_signals()
    synchronized_name = utils.py_string_to_string_name("synchronized")
    self.synchronized = signals.BuiltinSignal(self, synchronized_name)
    delta_synchronized_name = utils.py_string_to_string_name("delta_synchronized")
    self.delta_synchronized = signals.BuiltinSignal(self, delta_synchronized_name)
    visibility_changed_name = utils.py_string_to_string_name("visibility_changed")
    self.visibility_changed = signals.BuiltinSignal(self, visibility_changed_name)

  @staticmethod
  def construct_without_init():
    cls = MultiplayerSynchronizer.__new__(MultiplayerSynchronizer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MultiplayerSynchronizer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiplayerSynchronizer.construct_without_init()
    cls._ptr = CPPMultiplayerSynchronizerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiplayerSynchronizer.construct_without_init()
    cls._ptr = CPPMultiplayerSynchronizerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def root_path(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_root_path()
    return _ret
  @root_path.setter
  def root_path(self,  value:'object'):
    self.set_root_path(value)
  @property
  def replication_interval(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_replication_interval()
    return _ret
  @replication_interval.setter
  def replication_interval(self,  value:'float'):
    self.set_replication_interval(value)
  @property
  def delta_interval(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_delta_interval()
    return _ret
  @delta_interval.setter
  def delta_interval(self,  value:'float'):
    self.set_delta_interval(value)
  @property
  def replication_config(self) -> typing.Union['py4godot_scenereplicationconfig.SceneReplicationConfig']:
    r''''''
    _ret = self. get_replication_config()
    return _ret
  @replication_config.setter
  def replication_config(self,  value:'py4godot_object.Object'):
    self.set_replication_config(value)
  @property
  def visibility_update_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_visibility_update_mode()
    return _ret
  @visibility_update_mode.setter
  def visibility_update_mode(self,  value:'int'):
    self.set_visibility_update_mode(value)
  @property
  def public_visibility(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_visibility_public()
    return _ret
  @public_visibility.setter
  def public_visibility(self,  value:'bool'):
    self.set_visibility_public(value)
  @functools.native_method
  def set_root_path(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__root_path = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(180,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_root_path(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(181,tuple([]))

    return _ret


  @functools.native_method
  def set_replication_interval(self, milliseconds:'float'   ) -> None:
    r''''''

    assert isinstance(milliseconds, (int, float)), 'milliseconds must be int or float'

    self.py__replication_interval = milliseconds






    self._ptr.call_with_return(182,tuple([milliseconds]))

  @functools.native_method
  def get_replication_interval(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(183,tuple([]))

    return _ret


  @functools.native_method
  def set_delta_interval(self, milliseconds:'float'   ) -> None:
    r''''''

    assert isinstance(milliseconds, (int, float)), 'milliseconds must be int or float'

    self.py__delta_interval = milliseconds






    self._ptr.call_with_return(184,tuple([milliseconds]))

  @functools.native_method
  def get_delta_interval(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(185,tuple([]))

    return _ret


  @functools.native_method
  def set_replication_config(self, config:'py4godot_scenereplicationconfig.SceneReplicationConfig'   ) -> None:
    r''''''

    assert(not config is None)
    assert isinstance(config, get_class('SceneReplicationConfig')), 'config must be SceneReplicationConfig'

    self.py__replication_config = config






    self._ptr.call_with_return(186,tuple([config._ptr]))

  @functools.native_method
  def get_replication_config(self) -> typing.Union['py4godot_scenereplicationconfig.SceneReplicationConfig']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: SceneReplicationConfig
    _ret._ptr = self._ptr.call_with_return(187,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_visibility_update_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__visibility_update_mode = mode






    self._ptr.call_with_return(188,tuple([mode]))

  @functools.native_method
  def get_visibility_update_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(189,tuple([]))

    return _ret


  @functools.native_method
  def update_visibility(self, for_peer:'int' =0  ) -> None:
    r''''''

    assert isinstance(for_peer, (int, float)), 'for_peer must be int or float'






    self._ptr.call_with_return(190,tuple([for_peer]))

  @functools.native_method
  def set_visibility_public(self, visible:'bool'   ) -> None:
    r''''''

    assert isinstance(visible, bool), 'visible must be bool'

    self.py__public_visibility = visible






    self._ptr.call_with_return(191,tuple([visible]))

  @functools.native_method
  def is_visibility_public(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(192,tuple([]))

    return _ret


  @functools.native_method
  def add_visibility_filter(self, filter:'Callable'   ) -> None:
    r''''''

    assert(not filter is None)
    assert isinstance(filter, Callable), 'filter must be Callable'






    self._ptr.call_with_return(193,tuple([filter._ptr]))

  @functools.native_method
  def remove_visibility_filter(self, filter:'Callable'   ) -> None:
    r''''''

    assert(not filter is None)
    assert isinstance(filter, Callable), 'filter must be Callable'






    self._ptr.call_with_return(194,tuple([filter._ptr]))

  @functools.native_method
  def set_visibility_for(self, peer:'int'   , visible:'bool'   ) -> None:
    r''''''

    assert isinstance(peer, (int, float)), 'peer must be int or float'
    assert isinstance(visible, bool), 'visible must be bool'







    self._ptr.call_with_return(195,tuple([peer, visible]))

  @functools.native_method
  def get_visibility_for(self, peer:'int'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(peer, (int, float)), 'peer must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(196,tuple([peer]))
    return _ret



register_cast_function('MultiplayerSynchronizer', MultiplayerSynchronizer.cast)
register_class('MultiplayerSynchronizer', MultiplayerSynchronizer)
