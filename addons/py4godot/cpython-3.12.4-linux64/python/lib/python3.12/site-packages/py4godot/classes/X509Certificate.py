# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPX509CertificateWrapper


class X509Certificate(py4godot_resource.Resource):
  r'''
		The X509Certificate class represents an X509 certificate. Certificates can be loaded and saved like any other `Resource`.
		They can be used as the server certificate in `StreamPeerTLS.accept_stream` (along with the proper `CryptoKey`), and to specify the only certificate that should be accepted when connecting to a TLS server via `StreamPeerTLS.connect_to_stream`.
	'''

  @staticmethod
  def constructor():
    class_ = X509Certificate.construct_without_init()
    class_._ptr = constructor(1009,0, ())
    return class_
  @staticmethod
  def new():
    class_ = X509Certificate.construct_without_init()
    class_._ptr = constructor(1009,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPX509CertificateWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1009,0, ())


  def generate_wrapper(self):
    return CPPX509CertificateWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = X509Certificate.__new__(X509Certificate)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'X509Certificate'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = X509Certificate.construct_without_init()
    cls._ptr = CPPX509CertificateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = X509Certificate.construct_without_init()
    cls._ptr = CPPX509CertificateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def save(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Saves a certificate to the given `path` (should be a "*.crt" file).
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(77,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def load(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Loads a certificate from `path` ("*.crt" file).
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(78,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def save_to_string(self) -> typing.Union[str]:
    r'''
				Returns a string representation of the certificate, or an empty string if the certificate is invalid.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def load_from_string(self, string:'str'   ) -> typing.Union[int]:
    r'''
				Loads a certificate from the given `string`.
			'''

    assert(not string is None)
    assert isinstance(string, (str, String)), 'string must be str or String'




    assert(isinstance(string, (str, String)))
    py_string_string = string if isinstance(string, StringName) else c_utils.py_string_to_string(string)

    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([py_string_string._ptr]))
    return _ret



register_cast_function('X509Certificate', X509Certificate.cast)
register_class('X509Certificate', X509Certificate)
