# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Node3D as py4godot_node3d 
  import py4godot.classes.EditorNode3DGizmo as py4godot_editornode3dgizmo 
  import py4godot.classes.Transform3DTypedArray as py4godot_transform3dtypedarray 
  import py4godot.classes.StandardMaterial3D as py4godot_standardmaterial3d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.Camera3D as py4godot_camera3d 
  import py4godot.classes.PlaneTypedArray as py4godot_planetypedarray 
import py4godot.classes.Transform3DTypedArray as py4godot_transform3dtypedarray 
import py4godot.classes.Resource as py4godot_resource 
import py4godot.classes.PlaneTypedArray as py4godot_planetypedarray 
from py4godot.wrappers.wrappers import CPPEditorNode3DGizmoPluginWrapper


class EditorNode3DGizmoPlugin(py4godot_resource.Resource):
  r'''
		`EditorNode3DGizmoPlugin` allows you to define a new type of Gizmo. There are two main ways to do so: extending `EditorNode3DGizmoPlugin` for the simpler gizmos, or creating a new `EditorNode3DGizmo` type. See the tutorial in the documentation for more info.
		To use `EditorNode3DGizmoPlugin`, register it using the `EditorPlugin.add_node_3d_gizmo_plugin` method first.
	'''

  @staticmethod
  def constructor():
    class_ = EditorNode3DGizmoPlugin.construct_without_init()
    class_._ptr = constructor(293,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorNode3DGizmoPlugin.construct_without_init()
    class_._ptr = constructor(293,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorNode3DGizmoPluginWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(293,0, ())


  def generate_wrapper(self):
    return CPPEditorNode3DGizmoPluginWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EditorNode3DGizmoPlugin.__new__(EditorNode3DGizmoPlugin)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorNode3DGizmoPlugin'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorNode3DGizmoPlugin.construct_without_init()
    cls._ptr = CPPEditorNode3DGizmoPluginWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorNode3DGizmoPlugin.construct_without_init()
    cls._ptr = CPPEditorNode3DGizmoPluginWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _has_gizmo(self, for_node_3d:'py4godot_node3d.Node3D'   ) -> typing.Union[bool]:
    r'''
				Override this method to define which Node3D nodes have a gizmo from this plugin. Whenever a `Node3D` node is added to a scene this method is called, if it returns `true` the node gets a generic `EditorNode3DGizmo` assigned and is added to this plugin's list of active gizmos.
			'''

    assert(not for_node_3d is None)
    assert isinstance(for_node_3d, get_class('Node3D')), 'for_node_3d must be Node3D'






    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([for_node_3d._ptr]))
    return _ret


  @functools.native_method
  def _create_gizmo(self, for_node_3d:'py4godot_node3d.Node3D'   ) -> typing.Union['py4godot_editornode3dgizmo.EditorNode3DGizmo']:
    r'''
				Override this method to return a custom `EditorNode3DGizmo` for the 3D nodes of your choice, return `null` for the rest of nodes. See also `_has_gizmo`.
			'''

    assert(not for_node_3d is None)
    assert isinstance(for_node_3d, get_class('Node3D')), 'for_node_3d must be Node3D'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: EditorNode3DGizmo
    _ret._ptr = self._ptr.call_with_return(78,tuple([for_node_3d._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _get_gizmo_name(self) -> typing.Union[str]:
    r'''
				Override this method to provide the name that will appear in the gizmo visibility menu.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _get_priority(self) -> typing.Union[int]:
    r'''
				Override this method to set the gizmo's priority. Gizmos with higher priority will have precedence when processing inputs like handles or subgizmos selection.
				All built-in editor gizmos return a priority of `-1`. If not overridden, this method will return `0`, which means custom gizmos will automatically get higher priority than built-in gizmos.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))
    return _ret


  @functools.native_method
  def _can_be_hidden(self) -> typing.Union[bool]:
    r'''
				Override this method to define whether the gizmos handled by this plugin can be hidden or not. Returns `true` if not overridden.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))
    return _ret


  @functools.native_method
  def _is_selectable_when_hidden(self) -> typing.Union[bool]:
    r'''
				Override this method to define whether Node3D with this gizmo should be selectable even when the gizmo is hidden.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))
    return _ret


  @functools.native_method
  def _redraw(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   ) -> None:
    r'''
				Override this method to add all the gizmo elements whenever a gizmo update is requested. It's common to call `EditorNode3DGizmo.clear` at the beginning of this method and then add visual elements depending on the node's properties.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'






    self._ptr.call_with_return(83,tuple([gizmo._ptr]))

  @functools.native_method
  def _get_handle_name(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , handle_id:'int'   , secondary:'bool'   ) -> typing.Union[str]:
    r'''
				Override this method to provide gizmo's handle names. The `secondary` argument is `true` when the requested handle is secondary (see `EditorNode3DGizmo.add_handles` for more information). Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert isinstance(handle_id, (int, float)), 'handle_id must be int or float'
    assert isinstance(secondary, bool), 'secondary must be bool'








    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([gizmo._ptr, handle_id, secondary]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _is_handle_highlighted(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , handle_id:'int'   , secondary:'bool'   ) -> typing.Union[bool]:
    r'''
				Override this method to return `true` whenever to given handle should be highlighted in the editor. The `secondary` argument is `true` when the requested handle is secondary (see `EditorNode3DGizmo.add_handles` for more information). Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert isinstance(handle_id, (int, float)), 'handle_id must be int or float'
    assert isinstance(secondary, bool), 'secondary must be bool'








    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([gizmo._ptr, handle_id, secondary]))
    return _ret


  @functools.native_method
  def _get_handle_value(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , handle_id:'int'   , secondary:'bool'   ) -> typing.Union[typing.Any]:
    r'''
				Override this method to return the current value of a handle. This value will be requested at the start of an edit and used as the `restore` argument in `_commit_handle`.
				The `secondary` argument is `true` when the requested handle is secondary (see `EditorNode3DGizmo.add_handles` for more information).
				Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert isinstance(handle_id, (int, float)), 'handle_id must be int or float'
    assert isinstance(secondary, bool), 'secondary must be bool'








    _ret = None
    _ret = self._ptr.call_with_return(86,tuple([gizmo._ptr, handle_id, secondary]))
    return _ret


  @functools.native_method
  def _begin_handle_action(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , handle_id:'int'   , secondary:'bool'   ) -> None:
    r'''
'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert isinstance(handle_id, (int, float)), 'handle_id must be int or float'
    assert isinstance(secondary, bool), 'secondary must be bool'








    self._ptr.call_with_return(87,tuple([gizmo._ptr, handle_id, secondary]))

  @functools.native_method
  def _set_handle(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , handle_id:'int'   , secondary:'bool'   , camera:'py4godot_camera3d.Camera3D'   , screen_pos:'Vector2'   ) -> None:
    r'''
				Override this method to update the node's properties when the user drags a gizmo handle (previously added with `EditorNode3DGizmo.add_handles`). The provided `screen_pos` is the mouse position in screen coordinates and the `camera` can be used to convert it to raycasts.
				The `secondary` argument is `true` when the edited handle is secondary (see `EditorNode3DGizmo.add_handles` for more information).
				Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert isinstance(handle_id, (int, float)), 'handle_id must be int or float'
    assert isinstance(secondary, bool), 'secondary must be bool'
    assert(not camera is None)
    assert isinstance(camera, get_class('Camera3D')), 'camera must be Camera3D'
    assert(not screen_pos is None)
    assert isinstance(screen_pos, Vector2), 'screen_pos must be Vector2'










    self._ptr.call_with_return(88,tuple([gizmo._ptr, handle_id, secondary, camera._ptr, screen_pos._ptr]))

  @functools.native_method
  def _commit_handle(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , handle_id:'int'   , secondary:'bool'   , restore:'object'   , cancel:'bool'   ) -> None:
    r'''
				Override this method to commit a handle being edited (handles must have been previously added by `EditorNode3DGizmo.add_handles` during `_redraw`). This usually means creating an `UndoRedo` action for the change, using the current handle value as "do" and the `restore` argument as "undo".
				If the `cancel` argument is `true`, the `restore` value should be directly set, without any `UndoRedo` action.
				The `secondary` argument is `true` when the committed handle is secondary (see `EditorNode3DGizmo.add_handles` for more information).
				Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert isinstance(handle_id, (int, float)), 'handle_id must be int or float'
    assert isinstance(secondary, bool), 'secondary must be bool'
    
    assert isinstance(cancel, bool), 'cancel must be bool'










    self._ptr.call_with_return(89,tuple([gizmo._ptr, handle_id, secondary, restore, cancel]))

  @functools.native_method
  def _subgizmos_intersect_ray(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , camera:'py4godot_camera3d.Camera3D'   , screen_pos:'Vector2'   ) -> typing.Union[int]:
    r'''
				Override this method to allow selecting subgizmos using mouse clicks. Given a `camera` and a `screen_pos` in screen coordinates, this method should return which subgizmo should be selected. The returned value should be a unique subgizmo identifier, which can have any non-negative value and will be used in other virtual methods like `_get_subgizmo_transform` or `_commit_subgizmos`. Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert(not camera is None)
    assert isinstance(camera, get_class('Camera3D')), 'camera must be Camera3D'
    assert(not screen_pos is None)
    assert isinstance(screen_pos, Vector2), 'screen_pos must be Vector2'








    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([gizmo._ptr, camera._ptr, screen_pos._ptr]))
    return _ret


  @functools.native_method
  def _subgizmos_intersect_frustum(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , camera:'py4godot_camera3d.Camera3D'   , frustum_planes:'py4godot_planetypedarray.PlaneTypedArray'   ) -> typing.Union['PackedInt32Array']:
    r'''
				Override this method to allow selecting subgizmos using mouse drag box selection. Given a `camera` and `frustum_planes`, this method should return which subgizmos are contained within the frustums. The `frustum_planes` argument consists of an array with all the `Plane`s that make up the selection frustum. The returned value should contain a list of unique subgizmo identifiers, these identifiers can have any non-negative value and will be used in other virtual methods like `_get_subgizmo_transform` or `_commit_subgizmos`. Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert(not camera is None)
    assert isinstance(camera, get_class('Camera3D')), 'camera must be Camera3D'
    assert isinstance(frustum_planes, get_class('PlaneTypedArray')), 'frustum_planes must be PlaneTypedArray'








    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([gizmo._ptr, camera._ptr, frustum_planes._ptr]))
    return _ret


  @functools.native_method
  def _get_subgizmo_transform(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , subgizmo_id:'int'   ) -> typing.Union['Transform3D']:
    r'''
				Override this method to return the current transform of a subgizmo. As with all subgizmo methods, the transform should be in local space respect to the gizmo's Node3D. This transform will be requested at the start of an edit and used in the `restore` argument in `_commit_subgizmos`. Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert isinstance(subgizmo_id, (int, float)), 'subgizmo_id must be int or float'







    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(92,tuple([gizmo._ptr, subgizmo_id]))
    return _ret


  @functools.native_method
  def _set_subgizmo_transform(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , subgizmo_id:'int'   , transform:'Transform3D'   ) -> None:
    r'''
				Override this method to update the node properties during subgizmo editing (see `_subgizmos_intersect_ray` and `_subgizmos_intersect_frustum`). The `transform` is given in the Node3D's local coordinate system. Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert isinstance(subgizmo_id, (int, float)), 'subgizmo_id must be int or float'
    assert(not transform is None)
    assert isinstance(transform, Transform3D), 'transform must be Transform3D'








    self._ptr.call_with_return(93,tuple([gizmo._ptr, subgizmo_id, transform._ptr]))

  @functools.native_method
  def _commit_subgizmos(self, gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo'   , ids:'PackedInt32Array'   , restores:'py4godot_transform3dtypedarray.Transform3DTypedArray'   , cancel:'bool'   ) -> None:
    r'''
				Override this method to commit a group of subgizmos being edited (see `_subgizmos_intersect_ray` and `_subgizmos_intersect_frustum`). This usually means creating an `UndoRedo` action for the change, using the current transforms as "do" and the `restores` transforms as "undo".
				If the `cancel` argument is `true`, the `restores` transforms should be directly set, without any `UndoRedo` action. As with all subgizmo methods, transforms are given in local space respect to the gizmo's Node3D. Called for this plugin's active gizmos.
			'''

    assert(not gizmo is None)
    assert isinstance(gizmo, get_class('EditorNode3DGizmo')), 'gizmo must be EditorNode3DGizmo'
    assert(not ids is None)
    assert isinstance(ids, PackedInt32Array), 'ids must be PackedInt32Array'
    assert isinstance(restores, get_class('Transform3DTypedArray')), 'restores must be Transform3DTypedArray'
    assert isinstance(cancel, bool), 'cancel must be bool'









    self._ptr.call_with_return(94,tuple([gizmo._ptr, ids._ptr, restores._ptr, cancel]))

  @functools.native_method
  def create_material(self, name:'str'   , color:'Color'   , billboard:'bool' =False  , on_top:'bool' =False  , use_vertex_color:'bool' =False  ) -> None:
    r'''
				Creates an unshaded material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with `get_material` and used in `EditorNode3DGizmo.add_mesh` and `EditorNode3DGizmo.add_lines`. Should not be overridden.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'
    assert isinstance(billboard, bool), 'billboard must be bool'
    assert isinstance(on_top, bool), 'on_top must be bool'
    assert isinstance(use_vertex_color, bool), 'use_vertex_color must be bool'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)





    self._ptr.call_with_return(95,tuple([py_string_name._ptr, color._ptr, billboard, on_top, use_vertex_color]))

  @functools.native_method
  def create_icon_material(self, name:'str'   , texture:'py4godot_texture2d.Texture2D'   , on_top:'bool' =False  , color:'Color' = None  ) -> None:
    r'''
				Creates an icon material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with `get_material` and used in `EditorNode3DGizmo.add_unscaled_billboard`. Should not be overridden.
			'''
    if color is None:
      color = Color.new0()
    if color is None:
      color = Color.new0()

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'
    assert isinstance(on_top, bool), 'on_top must be bool'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)




    self._ptr.call_with_return(96,tuple([py_string_name._ptr, texture._ptr, on_top, color._ptr]))

  @functools.native_method
  def create_handle_material(self, name:'str'   , billboard:'bool' =False  , texture:'py4godot_texture2d.Texture2D' = None  ) -> None:
    r'''
				Creates a handle material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with `get_material` and used in `EditorNode3DGizmo.add_handles`. Should not be overridden.
				You can optionally provide a texture to use instead of the default icon.
			'''
    if texture is None:
      texture = c_utils.empty_object
    if texture is None:
      texture = c_utils.empty_object

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert isinstance(billboard, bool), 'billboard must be bool'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)



    self._ptr.call_with_return(97,tuple([py_string_name._ptr, billboard, texture._ptr]))

  @functools.native_method
  def add_material(self, name:'str'   , material:'py4godot_standardmaterial3d.StandardMaterial3D'   ) -> None:
    r'''
				Adds a new material to the internal material list for the plugin. It can then be accessed with `get_material`. Should not be overridden.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert(not material is None)
    assert isinstance(material, get_class('StandardMaterial3D')), 'material must be StandardMaterial3D'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)


    self._ptr.call_with_return(98,tuple([py_string_name._ptr, material._ptr]))

  @functools.native_method
  def get_material(self, name:'str'   , gizmo:'py4godot_editornode3dgizmo.EditorNode3DGizmo' = None  ) -> typing.Union['py4godot_standardmaterial3d.StandardMaterial3D']:
    r'''
				Gets material from the internal list of materials. If an `EditorNode3DGizmo` is provided, it will try to get the corresponding variant (selected and/or editable).
			'''
    if gizmo is None:
      gizmo = c_utils.empty_object
    if gizmo is None:
      gizmo = c_utils.empty_object

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)


    _ret = classes.Object.Object.construct_without_init() #Smart casted to: StandardMaterial3D
    _ret._ptr = self._ptr.call_with_return(99,tuple([py_string_name._ptr, gizmo._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('EditorNode3DGizmoPlugin', EditorNode3DGizmoPlugin.cast)
register_class('EditorNode3DGizmoPlugin', EditorNode3DGizmoPlugin)
