# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AnimationNode as py4godot_animationnode 
from py4godot.wrappers.wrappers import CPPAnimationNodeSyncWrapper


class AnimationNodeSync(py4godot_animationnode.AnimationNode):
  r'''
		An animation node used to combine, mix, or blend two or more animations together while keeping them synchronized within an `AnimationTree`.
	'''

  @staticmethod
  def constructor():
    class_ = AnimationNodeSync.construct_without_init()
    class_._ptr = constructor(91,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeSync.construct_without_init()
    class_._ptr = constructor(91,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeSyncWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(91,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeSyncWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeSync.__new__(AnimationNodeSync)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeSync'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeSync.construct_without_init()
    cls._ptr = CPPAnimationNodeSyncWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeSync.construct_without_init()
    cls._ptr = CPPAnimationNodeSyncWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def sync(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_sync()
    return _ret
  @sync.setter
  def sync(self,  value:'bool'):
    self.set_use_sync(value)
  @functools.native_method
  def set_use_sync(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__sync = enable






    self._ptr.call_with_return(102,tuple([enable]))

  @functools.native_method
  def is_using_sync(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(103,tuple([]))

    return _ret



register_cast_function('AnimationNodeSync', AnimationNodeSync.cast)
register_class('AnimationNodeSync', AnimationNodeSync)
