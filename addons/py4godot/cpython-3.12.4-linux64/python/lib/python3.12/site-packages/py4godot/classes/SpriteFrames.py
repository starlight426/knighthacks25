# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPSpriteFramesWrapper


class SpriteFrames(py4godot_resource.Resource):
  r'''
		Sprite frame library for an `AnimatedSprite2D` or `AnimatedSprite3D` node. Contains frames and animation data for playback.
	'''

  @staticmethod
  def constructor():
    class_ = SpriteFrames.construct_without_init()
    class_._ptr = constructor(782,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SpriteFrames.construct_without_init()
    class_._ptr = constructor(782,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSpriteFramesWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(782,0, ())


  def generate_wrapper(self):
    return CPPSpriteFramesWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SpriteFrames.__new__(SpriteFrames)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SpriteFrames'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SpriteFrames.construct_without_init()
    cls._ptr = CPPSpriteFramesWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SpriteFrames.construct_without_init()
    cls._ptr = CPPSpriteFramesWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def animations(self) -> typing.Union['Array']:
    r''''''
    _ret = self. _get_animations()
    return _ret
  @animations.setter
  def animations(self,  value:'Array'):
    self._set_animations(value)
  @functools.native_method
  def add_animation(self, anim:'object'   ) -> None:
    r'''
				Adds a new `anim` animation to the library.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)

    self._ptr.call_with_return(77,tuple([py_stringname_anim._ptr]))

  @functools.native_method
  def has_animation(self, anim:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the `anim` animation exists.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)

    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([py_stringname_anim._ptr]))
    return _ret


  @functools.native_method
  def duplicate_animation(self, anim_from:'object'   , anim_to:'object'   ) -> None:
    r'''
				Duplicates the animation `anim_from` to a new animation named `anim_to`. Fails if `anim_to` already exists, or if `anim_from` does not exist.
			'''

    assert(not anim_from is None)
    assert isinstance(anim_from, (str, StringName)), 'anim_from must be str or StringName'
    assert(not anim_to is None)
    assert isinstance(anim_to, (str, StringName)), 'anim_to must be str or StringName'




    assert(isinstance(anim_from, (str, StringName)))
    py_stringname_anim_from = anim_from if isinstance(anim_from, StringName) else c_utils.py_string_to_string_name(anim_from)
    assert(isinstance(anim_to, (str, StringName)))
    py_stringname_anim_to = anim_to if isinstance(anim_to, StringName) else c_utils.py_string_to_string_name(anim_to)

    self._ptr.call_with_return(79,tuple([py_stringname_anim_from._ptr, py_stringname_anim_to._ptr]))

  @functools.native_method
  def remove_animation(self, anim:'object'   ) -> None:
    r'''
				Removes the `anim` animation.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)

    self._ptr.call_with_return(80,tuple([py_stringname_anim._ptr]))

  @functools.native_method
  def rename_animation(self, anim:'object'   , newname:'object'   ) -> None:
    r'''
				Changes the `anim` animation's name to `newname`.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'
    assert(not newname is None)
    assert isinstance(newname, (str, StringName)), 'newname must be str or StringName'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)
    assert(isinstance(newname, (str, StringName)))
    py_stringname_newname = newname if isinstance(newname, StringName) else c_utils.py_string_to_string_name(newname)

    self._ptr.call_with_return(81,tuple([py_stringname_anim._ptr, py_stringname_newname._ptr]))

  @functools.native_method
  def get_animation_names(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns an array containing the names associated to each animation. Values are placed in alphabetical order.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))
    return _ret


  @functools.native_method
  def set_animation_speed(self, anim:'object'   , fps:'float'   ) -> None:
    r'''
				Sets the speed for the `anim` animation in frames per second.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'
    assert isinstance(fps, (int, float)), 'fps must be int or float'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)


    self._ptr.call_with_return(83,tuple([py_stringname_anim._ptr, fps]))

  @functools.native_method
  def get_animation_speed(self, anim:'object'   ) -> typing.Union[float]:
    r'''
				Returns the speed in frames per second for the `anim` animation.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)

    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([py_stringname_anim._ptr]))
    return _ret


  @functools.native_method
  def set_animation_loop(self, anim:'object'   , loop:'bool'   ) -> None:
    r'''
				If `loop` is `true`, the `anim` animation will loop when it reaches the end, or the start if it is played in reverse.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'
    assert isinstance(loop, bool), 'loop must be bool'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)


    self._ptr.call_with_return(85,tuple([py_stringname_anim._ptr, loop]))

  @functools.native_method
  def get_animation_loop(self, anim:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the given animation is configured to loop when it finishes playing. Otherwise, returns `false`.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)

    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([py_stringname_anim._ptr]))
    return _ret


  @functools.native_method
  def add_frame(self, anim:'object'   , texture:'py4godot_texture2d.Texture2D'   , duration:'float' =1.0  , at_position:'int' =-1  ) -> None:
    r'''
				Adds a frame to the `anim` animation. If `at_position` is `-1`, the frame will be added to the end of the animation. `duration` specifies the relative duration, see `get_frame_duration` for details.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'
    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'
    assert isinstance(duration, (int, float)), 'duration must be int or float'
    assert isinstance(at_position, (int, float)), 'at_position must be int or float'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)




    self._ptr.call_with_return(87,tuple([py_stringname_anim._ptr, texture._ptr, duration, at_position]))

  @functools.native_method
  def set_frame(self, anim:'object'   , idx:'int'   , texture:'py4godot_texture2d.Texture2D'   , duration:'float' =1.0  ) -> None:
    r'''
				Sets the `texture` and the `duration` of the frame `idx` in the `anim` animation. `duration` specifies the relative duration, see `get_frame_duration` for details.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'
    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'
    assert isinstance(duration, (int, float)), 'duration must be int or float'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)




    self._ptr.call_with_return(88,tuple([py_stringname_anim._ptr, idx, texture._ptr, duration]))

  @functools.native_method
  def remove_frame(self, anim:'object'   , idx:'int'   ) -> None:
    r'''
				Removes the `anim` animation's frame `idx`.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'
    assert isinstance(idx, (int, float)), 'idx must be int or float'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)


    self._ptr.call_with_return(89,tuple([py_stringname_anim._ptr, idx]))

  @functools.native_method
  def get_frame_count(self, anim:'object'   ) -> typing.Union[int]:
    r'''
				Returns the number of frames for the `anim` animation.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)

    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([py_stringname_anim._ptr]))
    return _ret


  @functools.native_method
  def get_frame_texture(self, anim:'object'   , idx:'int'   ) -> typing.Any:
    r'''
				Returns the texture of the frame `idx` in the `anim` animation.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'
    assert isinstance(idx, (int, float)), 'idx must be int or float'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)


    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(91,tuple([py_stringname_anim._ptr, idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_frame_duration(self, anim:'object'   , idx:'int'   ) -> typing.Union[float]:
    r'''
				Returns a relative duration of the frame `idx` in the `anim` animation (defaults to `1.0`). For example, a frame with a duration of `2.0` is displayed twice as long as a frame with a duration of `1.0`. You can calculate the absolute duration (in seconds) of a frame using the following formula:
				```gdscript
				absolute_duration = relative_duration / (animation_fps * abs(playing_speed))
				```
				In this example, `playing_speed` refers to either `AnimatedSprite2D.get_playing_speed` or `AnimatedSprite3D.get_playing_speed`.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'
    assert isinstance(idx, (int, float)), 'idx must be int or float'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)


    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([py_stringname_anim._ptr, idx]))
    return _ret


  @functools.native_method
  def clear(self, anim:'object'   ) -> None:
    r'''
				Removes all frames from the `anim` animation.
			'''

    assert(not anim is None)
    assert isinstance(anim, (str, StringName)), 'anim must be str or StringName'




    assert(isinstance(anim, (str, StringName)))
    py_stringname_anim = anim if isinstance(anim, StringName) else c_utils.py_string_to_string_name(anim)

    self._ptr.call_with_return(93,tuple([py_stringname_anim._ptr]))

  @functools.native_method
  def clear_all(self) -> None:
    r'''
				Removes all animations. An empty `default` animation will be created.
			'''




    self._ptr.call_with_return(94,tuple([]))


register_cast_function('SpriteFrames', SpriteFrames.cast)
register_class('SpriteFrames', SpriteFrames)
