# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImmediateMesh as py4godot_immediatemesh 
  import py4godot.classes.Mesh as py4godot_mesh 
  import py4godot.classes.CapsuleMesh as py4godot_capsulemesh 
  import py4godot.classes.ArrayMesh as py4godot_arraymesh 
  import py4godot.classes.ORMMaterial3D as py4godot_ormmaterial3d 
  import py4godot.classes.PhysicalSkyMaterial as py4godot_physicalskymaterial 
  import py4godot.classes.PointMesh as py4godot_pointmesh 
  import py4godot.classes.RibbonTrailMesh as py4godot_ribbontrailmesh 
  import py4godot.classes.PlaceholderMaterial as py4godot_placeholdermaterial 
  import py4godot.classes.PlaceholderMesh as py4godot_placeholdermesh 
  import py4godot.classes.BoxMesh as py4godot_boxmesh 
  import py4godot.classes.CylinderMesh as py4godot_cylindermesh 
  import py4godot.classes.CanvasItemMaterial as py4godot_canvasitemmaterial 
  import py4godot.classes.PlaneMesh as py4godot_planemesh 
  import py4godot.classes.ParticleProcessMaterial as py4godot_particleprocessmaterial 
  import py4godot.classes.TubeTrailMesh as py4godot_tubetrailmesh 
  import py4godot.classes.TextMesh as py4godot_textmesh 
  import py4godot.classes.ProceduralSkyMaterial as py4godot_proceduralskymaterial 
  import py4godot.classes.BaseMaterial3D as py4godot_basematerial3d 
  import py4godot.classes.ShaderMaterial as py4godot_shadermaterial 
  import py4godot.classes.Material as py4godot_material 
  import py4godot.classes.PanoramaSkyMaterial as py4godot_panoramaskymaterial 
  import py4godot.classes.FogMaterial as py4godot_fogmaterial 
  import py4godot.classes.TorusMesh as py4godot_torusmesh 
  import py4godot.classes.SphereMesh as py4godot_spheremesh 
  import py4godot.classes.PrimitiveMesh as py4godot_primitivemesh 
  import py4godot.classes.QuadMesh as py4godot_quadmesh 
  import py4godot.classes.PrismMesh as py4godot_prismmesh 
  import py4godot.classes.StandardMaterial3D as py4godot_standardmaterial3d 
import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
from py4godot.wrappers.wrappers import CPPCSGMesh3DWrapper


class CSGMesh3D(py4godot_csgprimitive3d.CSGPrimitive3D):
  r''''''

  @staticmethod
  def constructor():
    class_ = CSGMesh3D.construct_without_init()
    class_._ptr = constructor(181,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CSGMesh3D.construct_without_init()
    class_._ptr = constructor(181,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCSGMesh3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(181,0, ())


  def generate_wrapper(self):
    return CPPCSGMesh3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CSGMesh3D.__new__(CSGMesh3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CSGMesh3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CSGMesh3D.construct_without_init()
    cls._ptr = CPPCSGMesh3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CSGMesh3D.construct_without_init()
    cls._ptr = CPPCSGMesh3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def mesh(self) -> typing.Any:
    r''''''
    _ret = self. get_mesh()
    return _ret
  @mesh.setter
  def mesh(self,  value:'py4godot_object.Object'):
    self.set_mesh(value)
  @property
  def material(self) -> typing.Union['py4godot_basematerial3d.BaseMaterial3D','py4godot_ormmaterial3d.ORMMaterial3D','py4godot_standardmaterial3d.StandardMaterial3D']:
    r''''''
    _ret = self. get_material()
    return _ret
  @material.setter
  def material(self,  value:'py4godot_object.Object'):
    self.set_material(value)
  @functools.native_method
  def set_mesh(self, mesh:'py4godot_mesh.Mesh'   ) -> None:
    r''''''

    assert(not mesh is None)
    assert isinstance(mesh, get_class('Mesh')), 'mesh must be Mesh'

    self.py__mesh = mesh






    self._ptr.call_with_return(322,tuple([mesh._ptr]))

  @functools.native_method
  def get_mesh(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Mesh
    _ret._ptr = self._ptr.call_with_return(323,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_material(self, material:'py4godot_material.Material'   ) -> None:
    r''''''

    assert(not material is None)
    assert isinstance(material, get_class('Material')), 'material must be Material'

    self.py__material = material






    self._ptr.call_with_return(324,tuple([material._ptr]))

  @functools.native_method
  def get_material(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Material
    _ret._ptr = self._ptr.call_with_return(325,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('CSGMesh3D', CSGMesh3D.cast)
register_class('CSGMesh3D', CSGMesh3D)
