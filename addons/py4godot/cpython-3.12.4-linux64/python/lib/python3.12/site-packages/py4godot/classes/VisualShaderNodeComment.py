# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNodeFrame as py4godot_visualshadernodeframe 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeCommentWrapper


class VisualShaderNodeComment(py4godot_visualshadernodeframe.VisualShaderNodeFrame):
  r'''
		This node was replaced by `VisualShaderNodeFrame` and only exists to preserve compatibility. In the `VisualShader` editor it behaves exactly like `VisualShaderNodeFrame`.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeComment.construct_without_init()
    class_._ptr = constructor(889,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeComment.construct_without_init()
    class_._ptr = constructor(889,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeCommentWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(889,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeCommentWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeComment.__new__(VisualShaderNodeComment)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeComment'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeComment.construct_without_init()
    cls._ptr = CPPVisualShaderNodeCommentWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeComment.construct_without_init()
    cls._ptr = CPPVisualShaderNodeCommentWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def description(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_description()
    return _ret
  @description.setter
  def description(self,  value:'str'):
    self.set_description(value)
  @functools.native_method
  def set_description(self, description:'str'   ) -> None:
    r''''''

    assert(not description is None)
    assert isinstance(description, (str, String)), 'description must be str or String'

    self.py__description = description



    assert(isinstance(description, (str, String)))
    py_string_description = description if isinstance(description, StringName) else c_utils.py_string_to_string(description)

    py__string_description = utils.py_string_to_string(description)
    py__string_description.shouldBeDeleted = False


    self._ptr.call_with_return(102,tuple([py__string_description._ptr]))

  @functools.native_method
  def get_description(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(103,tuple([]))

    return utils.gd_string_to_py_string(_ret)



register_cast_function('VisualShaderNodeComment', VisualShaderNodeComment.cast)
register_class('VisualShaderNodeComment', VisualShaderNodeComment)
