# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AudioEffectCompressor as py4godot_audioeffectcompressor 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.AnimationNodeExtension as py4godot_animationnodeextension 
  import py4godot.classes.GLTFMesh as py4godot_gltfmesh 
  import py4godot.classes.StyleBox as py4godot_stylebox 
  import py4godot.classes.AudioEffectPanner as py4godot_audioeffectpanner 
  import py4godot.classes.AnimationNodeBlendTree as py4godot_animationnodeblendtree 
  import py4godot.classes.AudioEffectCapture as py4godot_audioeffectcapture 
  import py4godot.classes.Area3D as py4godot_area3d 
  import py4godot.classes.CollisionShape3D as py4godot_collisionshape3d 
  import py4godot.classes.InputEventWithModifiers as py4godot_inputeventwithmodifiers 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.VideoStreamTheora as py4godot_videostreamtheora 
  import py4godot.classes.MissingResource as py4godot_missingresource 
  import py4godot.classes.CanvasGroup as py4godot_canvasgroup 
  import py4godot.classes.TextureCubemapArrayRD as py4godot_texturecubemaparrayrd 
  import py4godot.classes.SpringBoneCollision3D as py4godot_springbonecollision3d 
  import py4godot.classes.ImporterMeshInstance3D as py4godot_importermeshinstance3d 
  import py4godot.classes.Resource as py4godot_resource 
  import py4godot.classes.ScriptExtension as py4godot_scriptextension 
  import py4godot.classes.VisualShaderNodeColorOp as py4godot_visualshadernodecolorop 
  import py4godot.classes.GDExtension as py4godot_gdextension 
  import py4godot.classes.SeparationRayShape3D as py4godot_separationrayshape3d 
  import py4godot.classes.AudioEffectDelay as py4godot_audioeffectdelay 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.EditorResourcePreview as py4godot_editorresourcepreview 
  import py4godot.classes.World3D as py4godot_world3d 
  import py4godot.classes.VisualShader as py4godot_visualshader 
  import py4godot.classes.SpringBoneCollisionPlane3D as py4godot_springbonecollisionplane3d 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CollisionPolygon2D as py4godot_collisionpolygon2d 
  import py4godot.classes.AudioEffectLimiter as py4godot_audioeffectlimiter 
  import py4godot.classes.TileSetSource as py4godot_tilesetsource 
  import py4godot.classes.AudioEffectAmplify as py4godot_audioeffectamplify 
  import py4godot.classes.AudioEffectLowShelfFilter as py4godot_audioeffectlowshelffilter 
  import py4godot.classes.Environment as py4godot_environment 
  import py4godot.classes.VisualShaderNodeParticleRandomness as py4godot_visualshadernodeparticlerandomness 
  import py4godot.classes.VisualShaderNodeComment as py4godot_visualshadernodecomment 
  import py4godot.classes.CanvasItem as py4godot_canvasitem 
  import py4godot.classes.AudioStreamMicrophone as py4godot_audiostreammicrophone 
  import py4godot.classes.GPUParticlesCollisionHeightField3D as py4godot_gpuparticlescollisionheightfield3d 
  import py4godot.classes.VisualShaderNodeVec3Constant as py4godot_visualshadernodevec3constant 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.AudioStreamSynchronized as py4godot_audiostreamsynchronized 
  import py4godot.classes.PolygonOccluder3D as py4godot_polygonoccluder3d 
  import py4godot.classes.SphereShape3D as py4godot_sphereshape3d 
  import py4godot.classes.Marker2D as py4godot_marker2d 
  import py4godot.classes.InputEventMIDI as py4godot_inputeventmidi 
  import py4godot.classes.CanvasItemMaterial as py4godot_canvasitemmaterial 
  import py4godot.classes.SpotLight3D as py4godot_spotlight3d 
  import py4godot.classes.Cubemap as py4godot_cubemap 
  import py4godot.classes.BaseMaterial3D as py4godot_basematerial3d 
  import py4godot.classes.SkeletonModificationStack2D as py4godot_skeletonmodificationstack2d 
  import py4godot.classes.VisualShaderNodeFloatParameter as py4godot_visualshadernodefloatparameter 
  import py4godot.classes.MeshInstance3D as py4godot_meshinstance3d 
  import py4godot.classes.RayCast3D as py4godot_raycast3d 
  import py4godot.classes.PackedDataContainer as py4godot_packeddatacontainer 
  import py4godot.classes.CollisionPolygon3D as py4godot_collisionpolygon3d 
  import py4godot.classes.InputEventMagnifyGesture as py4godot_inputeventmagnifygesture 
  import py4godot.classes.TileMapPattern as py4godot_tilemappattern 
  import py4godot.classes.VisualShaderNodeFrame as py4godot_visualshadernodeframe 
  import py4godot.classes.Line2D as py4godot_line2d 
  import py4godot.classes.OpenXRInteractionProfile as py4godot_openxrinteractionprofile 
  import py4godot.classes.EditorSyntaxHighlighter as py4godot_editorsyntaxhighlighter 
  import py4godot.classes.MeshLibrary as py4godot_meshlibrary 
  import py4godot.classes.ResourcePreloader as py4godot_resourcepreloader 
  import py4godot.classes.VisualShaderNodeIntOp as py4godot_visualshadernodeintop 
  import py4godot.classes.FontVariation as py4godot_fontvariation 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.SpringBoneCollisionSphere3D as py4godot_springbonecollisionsphere3d 
  import py4godot.classes.OpenXRCompositionLayerEquirect as py4godot_openxrcompositionlayerequirect 
  import py4godot.classes.VisualShaderNodeUIntFunc as py4godot_visualshadernodeuintfunc 
  import py4godot.classes.TileSetAtlasSource as py4godot_tilesetatlassource 
  import py4godot.classes.EditorExportPlatformAppleEmbedded as py4godot_editorexportplatformappleembedded 
  import py4godot.classes.VideoStream as py4godot_videostream 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.EditorFileDialog as py4godot_editorfiledialog 
  import py4godot.classes.Popup as py4godot_popup 
  import py4godot.classes.AnimationRootNode as py4godot_animationrootnode 
  import py4godot.classes.PlaceholderTexture2DArray as py4godot_placeholdertexture2darray 
  import py4godot.classes.NavigationMesh as py4godot_navigationmesh 
  import py4godot.classes.VisualShaderNodeInput as py4godot_visualshadernodeinput 
  import py4godot.classes.LabelSettings as py4godot_labelsettings 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.VisualShaderNodeParticleRingEmitter as py4godot_visualshadernodeparticleringemitter 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.AnimationNodeAdd2 as py4godot_animationnodeadd2 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
  import py4godot.classes.ShaderGlobalsOverride as py4godot_shaderglobalsoverride 
  import py4godot.classes.MultiplayerSpawner as py4godot_multiplayerspawner 
  import py4godot.classes.SkeletonModification2DStackHolder as py4godot_skeletonmodification2dstackholder 
  import py4godot.classes.AudioStreamPlaylist as py4godot_audiostreamplaylist 
  import py4godot.classes.EditorExportPlatformVisionOS as py4godot_editorexportplatformvisionos 
  import py4godot.classes.Camera3D as py4godot_camera3d 
  import py4godot.classes.AudioEffectChorus as py4godot_audioeffectchorus 
  import py4godot.classes.MultiplayerSynchronizer as py4godot_multiplayersynchronizer 
  import py4godot.classes.ConvexPolygonShape3D as py4godot_convexpolygonshape3d 
  import py4godot.classes.Translation as py4godot_translation 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.XRController3D as py4godot_xrcontroller3d 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.GLTFDocumentExtensionConvertImporterMesh as py4godot_gltfdocumentextensionconvertimportermesh 
  import py4godot.classes.ORMMaterial3D as py4godot_ormmaterial3d 
  import py4godot.classes.AudioListener3D as py4godot_audiolistener3d 
  import py4godot.classes.AudioEffectFilter as py4godot_audioeffectfilter 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.VisibleOnScreenEnabler2D as py4godot_visibleonscreenenabler2d 
  import py4godot.classes.VisualShaderNodeCustom as py4godot_visualshadernodecustom 
  import py4godot.classes.VisualShaderNodeSmoothStep as py4godot_visualshadernodesmoothstep 
  import py4godot.classes.HeightMapShape3D as py4godot_heightmapshape3d 
  import py4godot.classes.EditorExportPlatformAndroid as py4godot_editorexportplatformandroid 
  import py4godot.classes.XRCamera3D as py4godot_xrcamera3d 
  import py4godot.classes.LightmapGI as py4godot_lightmapgi 
  import py4godot.classes.VoxelGI as py4godot_voxelgi 
  import py4godot.classes.VisualShaderNodeTextureSDFNormal as py4godot_visualshadernodetexturesdfnormal 
  import py4godot.classes.ConfirmationDialog as py4godot_confirmationdialog 
  import py4godot.classes.EditorExportPlatformWindows as py4godot_editorexportplatformwindows 
  import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
  import py4godot.classes.VisualShaderNodeVaryingGetter as py4godot_visualshadernodevaryinggetter 
  import py4godot.classes.CollisionObject2D as py4godot_collisionobject2d 
  import py4godot.classes.VisualShaderNodeVec4Parameter as py4godot_visualshadernodevec4parameter 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.VisualShaderNodeFloatConstant as py4godot_visualshadernodefloatconstant 
  import py4godot.classes.InputEventJoypadMotion as py4godot_inputeventjoypadmotion 
  import py4godot.classes.OpenXRActionMap as py4godot_openxractionmap 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.VisibleOnScreenNotifier3D as py4godot_visibleonscreennotifier3d 
  import py4godot.classes.GLTFSkeleton as py4godot_gltfskeleton 
  import py4godot.classes.VisualShaderNodeParticleAccelerator as py4godot_visualshadernodeparticleaccelerator 
  import py4godot.classes.AudioStreamPolyphonic as py4godot_audiostreampolyphonic 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.AnimatedSprite3D as py4godot_animatedsprite3d 
  import py4godot.classes.ConcavePolygonShape3D as py4godot_concavepolygonshape3d 
  import py4godot.classes.LightOccluder2D as py4godot_lightoccluder2d 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.FogMaterial as py4godot_fogmaterial 
  import py4godot.classes.OpenXRBindingModifier as py4godot_openxrbindingmodifier 
  import py4godot.classes.Joint3D as py4godot_joint3d 
  import py4godot.classes.VisualShaderNodeRemap as py4godot_visualshadernoderemap 
  import py4godot.classes.RichTextEffect as py4godot_richtexteffect 
  import py4godot.classes.XRBodyModifier3D as py4godot_xrbodymodifier3d 
  import py4godot.classes.AudioStream as py4godot_audiostream 
  import py4godot.classes.ParallaxLayer as py4godot_parallaxlayer 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.LookAtModifier3D as py4godot_lookatmodifier3d 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.ImmediateMesh as py4godot_immediatemesh 
  import py4godot.classes.VisualShaderNodeColorConstant as py4godot_visualshadernodecolorconstant 
  import py4godot.classes.NavigationObstacle3D as py4godot_navigationobstacle3d 
  import py4godot.classes.AnimationNodeSub2 as py4godot_animationnodesub2 
  import py4godot.classes.PointMesh as py4godot_pointmesh 
  import py4godot.classes.GridMapEditorPlugin as py4godot_gridmapeditorplugin 
  import py4godot.classes.CameraAttributesPhysical as py4godot_cameraattributesphysical 
  import py4godot.classes.ConvertTransformModifier3D as py4godot_converttransformmodifier3d 
  import py4godot.classes.CylinderMesh as py4godot_cylindermesh 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.TextureLayered as py4godot_texturelayered 
  import py4godot.classes.BitMap as py4godot_bitmap 
  import py4godot.classes.Path3D as py4godot_path3d 
  import py4godot.classes.AudioStreamPlayer as py4godot_audiostreamplayer 
  import py4godot.classes.GDScript as py4godot_gdscript 
  import py4godot.classes.VisualShaderNodeIs as py4godot_visualshadernodeis 
  import py4godot.classes.XROrigin3D as py4godot_xrorigin3d 
  import py4godot.classes.GLTFPhysicsShape as py4godot_gltfphysicsshape 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.RemoteTransform3D as py4godot_remotetransform3d 
  import py4godot.classes.PolygonPathFinder as py4godot_polygonpathfinder 
  import py4godot.classes.GPUParticles2D as py4godot_gpuparticles2d 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
  import py4godot.classes.DirectionalLight2D as py4godot_directionallight2d 
  import py4godot.classes.QuadOccluder3D as py4godot_quadoccluder3d 
  import py4godot.classes.BackBufferCopy as py4godot_backbuffercopy 
  import py4godot.classes.AudioEffectHardLimiter as py4godot_audioeffecthardlimiter 
  import py4godot.classes.VisualShaderNodeWorldPositionFromDepth as py4godot_visualshadernodeworldpositionfromdepth 
  import py4godot.classes.VisualShaderNodeBooleanConstant as py4godot_visualshadernodebooleanconstant 
  import py4godot.classes.AnimationLibrary as py4godot_animationlibrary 
  import py4godot.classes.AnimationNodeBlendSpace2D as py4godot_animationnodeblendspace2d 
  import py4godot.classes.AnimationNodeOutput as py4godot_animationnodeoutput 
  import py4godot.classes.CanvasLayer as py4godot_canvaslayer 
  import py4godot.classes.PhysicalBone2D as py4godot_physicalbone2d 
  import py4godot.classes.SkeletonIK3D as py4godot_skeletonik3d 
  import py4godot.classes.CompressedTextureLayered as py4godot_compressedtexturelayered 
  import py4godot.classes.PrismMesh as py4godot_prismmesh 
  import py4godot.classes.GPUParticlesCollisionSDF3D as py4godot_gpuparticlescollisionsdf3d 
  import py4godot.classes.VisualShaderNodeMultiplyAdd as py4godot_visualshadernodemultiplyadd 
  import py4godot.classes.CompressedTexture2DArray as py4godot_compressedtexture2darray 
  import py4godot.classes.GPUParticlesCollision3D as py4godot_gpuparticlescollision3d 
  import py4godot.classes.VisualShaderNodeVectorDecompose as py4godot_visualshadernodevectordecompose 
  import py4godot.classes.Path2D as py4godot_path2d 
  import py4godot.classes.GPUParticles3D as py4godot_gpuparticles3d 
  import py4godot.classes.OpenXRAnalogThresholdModifier as py4godot_openxranalogthresholdmodifier 
  import py4godot.classes.ColorPalette as py4godot_colorpalette 
  import py4godot.classes.VisualShaderNodeSwitch as py4godot_visualshadernodeswitch 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.AudioEffectNotchFilter as py4godot_audioeffectnotchfilter 
  import py4godot.classes.SpringBoneSimulator3D as py4godot_springbonesimulator3d 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GLTFBufferView as py4godot_gltfbufferview 
  import py4godot.classes.Texture2DArrayRD as py4godot_texture2darrayrd 
  import py4godot.classes.CSGBox3D as py4godot_csgbox3d 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.SeparationRayShape2D as py4godot_separationrayshape2d 
  import py4godot.classes.AnimationNode as py4godot_animationnode 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.Texture3D as py4godot_texture3d 
  import py4godot.classes.VisualShaderNodeOuterProduct as py4godot_visualshadernodeouterproduct 
  import py4godot.classes.PathFollow2D as py4godot_pathfollow2d 
  import py4godot.classes.VisualShaderNodeScreenNormalWorldSpace as py4godot_visualshadernodescreennormalworldspace 
  import py4godot.classes.VisualShaderNodeFloatFunc as py4godot_visualshadernodefloatfunc 
  import py4godot.classes.VisualShaderNodeTransformOp as py4godot_visualshadernodetransformop 
  import py4godot.classes.PhysicalSkyMaterial as py4godot_physicalskymaterial 
  import py4godot.classes.VisualShaderNodeCubemapParameter as py4godot_visualshadernodecubemapparameter 
  import py4godot.classes.VisualShaderNodeGroupBase as py4godot_visualshadernodegroupbase 
  import py4godot.classes.AnimationNodeAdd3 as py4godot_animationnodeadd3 
  import py4godot.classes.VisualShaderNodeUIntConstant as py4godot_visualshadernodeuintconstant 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.AudioStreamRandomizer as py4godot_audiostreamrandomizer 
  import py4godot.classes.VisualShaderNodeCubemap as py4godot_visualshadernodecubemap 
  import py4godot.classes.EditorExportPreset as py4godot_editorexportpreset 
  import py4godot.classes.Label3D as py4godot_label3d 
  import py4godot.classes.OpenXRIPBinding as py4godot_openxripbinding 
  import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
  import py4godot.classes.OpenXRActionBindingModifier as py4godot_openxractionbindingmodifier 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderCubemapArray as py4godot_placeholdercubemaparray 
  import py4godot.classes.ModifierBoneTarget3D as py4godot_modifierbonetarget3d 
  import py4godot.classes.VisualShaderNodeTransformConstant as py4godot_visualshadernodetransformconstant 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.CharacterBody2D as py4godot_characterbody2d 
  import py4godot.classes.FoldableGroup as py4godot_foldablegroup 
  import py4godot.classes.GLTFNode as py4godot_gltfnode 
  import py4godot.classes.VisualShaderNodeIntFunc as py4godot_visualshadernodeintfunc 
  import py4godot.classes.StaticBody3D as py4godot_staticbody3d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.SliderJoint3D as py4godot_sliderjoint3d 
  import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
  import py4godot.classes.OpenXRDpadBindingModifier as py4godot_openxrdpadbindingmodifier 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.VisualShaderNodeGlobalExpression as py4godot_visualshadernodeglobalexpression 
  import py4godot.classes.NavigationLink2D as py4godot_navigationlink2d 
  import py4godot.classes.AnimationNodeOneShot as py4godot_animationnodeoneshot 
  import py4godot.classes.Shape2D as py4godot_shape2d 
  import py4godot.classes.RootMotionView as py4godot_rootmotionview 
  import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
  import py4godot.classes.VisualShaderNodeTransformCompose as py4godot_visualshadernodetransformcompose 
  import py4godot.classes.Skeleton2D as py4godot_skeleton2d 
  import py4godot.classes.SphereMesh as py4godot_spheremesh 
  import py4godot.classes.VoxelGIData as py4godot_voxelgidata 
  import py4godot.classes.VisualShaderNodeIf as py4godot_visualshadernodeif 
  import py4godot.classes.VisualShaderNodeProximityFade as py4godot_visualshadernodeproximityfade 
  import py4godot.classes.GLTFState as py4godot_gltfstate 
  import py4godot.classes.NavigationMeshSourceGeometryData3D as py4godot_navigationmeshsourcegeometrydata3d 
  import py4godot.classes.CapsuleShape2D as py4godot_capsuleshape2d 
  import py4godot.classes.VisualShaderNodeDerivativeFunc as py4godot_visualshadernodederivativefunc 
  import py4godot.classes.VisualShaderNodeTextureSDF as py4godot_visualshadernodetexturesdf 
  import py4godot.classes.StyleBoxEmpty as py4godot_styleboxempty 
  import py4godot.classes.CSGCombiner3D as py4godot_csgcombiner3d 
  import py4godot.classes.SpriteFrames as py4godot_spriteframes 
  import py4godot.classes.CapsuleShape3D as py4godot_capsuleshape3d 
  import py4godot.classes.InputEventMouse as py4godot_inputeventmouse 
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.VisualShaderNodeIntParameter as py4godot_visualshadernodeintparameter 
  import py4godot.classes.VisualShaderNodeTransformParameter as py4godot_visualshadernodetransformparameter 
  import py4godot.classes.VisualShaderNodeTransformDecompose as py4godot_visualshadernodetransformdecompose 
  import py4godot.classes.VisualShaderNodeDotProduct as py4godot_visualshadernodedotproduct 
  import py4godot.classes.BoneMap as py4godot_bonemap 
  import py4godot.classes.VisualShaderNodeParticleEmitter as py4godot_visualshadernodeparticleemitter 
  import py4godot.classes.OggPacketSequence as py4godot_oggpacketsequence 
  import py4godot.classes.StaticBody2D as py4godot_staticbody2d 
  import py4godot.classes.ShapeCast2D as py4godot_shapecast2d 
  import py4godot.classes.Sprite2D as py4godot_sprite2d 
  import py4godot.classes.GLTFSkin as py4godot_gltfskin 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.VisualShaderNodeTexture as py4godot_visualshadernodetexture 
  import py4godot.classes.VisualShaderNodeVec2Constant as py4godot_visualshadernodevec2constant 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.VisualShaderNodeMix as py4godot_visualshadernodemix 
  import py4godot.classes.SceneReplicationConfig as py4godot_scenereplicationconfig 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.VisualShaderNodeCurveXYZTexture as py4godot_visualshadernodecurvexyztexture 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.AnimationMixer as py4godot_animationmixer 
  import py4godot.classes.GPUParticlesAttractorVectorField3D as py4godot_gpuparticlesattractorvectorfield3d 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.OpenXRCompositionLayerCylinder as py4godot_openxrcompositionlayercylinder 
  import py4godot.classes.CharacterBody3D as py4godot_characterbody3d 
  import py4godot.classes.AudioStreamPlayer2D as py4godot_audiostreamplayer2d 
  import py4godot.classes.TileMapLayer as py4godot_tilemaplayer 
  import py4godot.classes.SkeletonProfileHumanoid as py4godot_skeletonprofilehumanoid 
  import py4godot.classes.VisualShaderNodeTransformFunc as py4godot_visualshadernodetransformfunc 
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.Animation as py4godot_animation 
  import py4godot.classes.ImageTextureLayered as py4godot_imagetexturelayered 
  import py4godot.classes.CompositorEffect as py4godot_compositoreffect 
  import py4godot.classes.EditorExportPlatformPC as py4godot_editorexportplatformpc 
  import py4godot.classes.EditorSettings as py4godot_editorsettings 
  import py4godot.classes.SkeletonModification2DCCDIK as py4godot_skeletonmodification2dccdik 
  import py4godot.classes.VisualShaderNodeParticleOutput as py4godot_visualshadernodeparticleoutput 
  import py4godot.classes.ShaderMaterial as py4godot_shadermaterial 
  import py4godot.classes.VisualShaderNodeIntConstant as py4godot_visualshadernodeintconstant 
  import py4godot.classes.OpenXRHand as py4godot_openxrhand 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.TorusMesh as py4godot_torusmesh 
  import py4godot.classes.OptimizedTranslation as py4godot_optimizedtranslation 
  import py4godot.classes.AnimationNodeStateMachine as py4godot_animationnodestatemachine 
  import py4godot.classes.AnimationNodeAnimation as py4godot_animationnodeanimation 
  import py4godot.classes.Generic6DOFJoint3D as py4godot_generic6dofjoint3d 
  import py4godot.classes.RigidBody3D as py4godot_rigidbody3d 
  import py4godot.classes.SkeletonProfile as py4godot_skeletonprofile 
  import py4godot.classes.ConcavePolygonShape2D as py4godot_concavepolygonshape2d 
  import py4godot.classes.EditorFileSystem as py4godot_editorfilesystem 
  import py4godot.classes.AnimationPlayer as py4godot_animationplayer 
  import py4godot.classes.AudioEffect as py4godot_audioeffect 
  import py4godot.classes.SkeletonModification2DJiggle as py4godot_skeletonmodification2djiggle 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.VisualShaderNodeOutput as py4godot_visualshadernodeoutput 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.PhysicsMaterial as py4godot_physicsmaterial 
  import py4godot.classes.InputEventAction as py4godot_inputeventaction 
  import py4godot.classes.Shader as py4godot_shader 
  import py4godot.classes.CubemapArray as py4godot_cubemaparray 
  import py4godot.classes.VisualShaderNodeVec2Parameter as py4godot_visualshadernodevec2parameter 
  import py4godot.classes.VisualShaderNodeRotationByAxis as py4godot_visualshadernoderotationbyaxis 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.AnimationNodeTimeScale as py4godot_animationnodetimescale 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.AnimatedSprite2D as py4godot_animatedsprite2d 
  import py4godot.classes.OmniLight3D as py4godot_omnilight3d 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.QuadMesh as py4godot_quadmesh 
  import py4godot.classes.RectangleShape2D as py4godot_rectangleshape2d 
  import py4godot.classes.Joint2D as py4godot_joint2d 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.Shortcut as py4godot_shortcut 
  import py4godot.classes.VisualShaderNodeRandomRange as py4godot_visualshadernoderandomrange 
  import py4godot.classes.SyntaxHighlighter as py4godot_syntaxhighlighter 
  import py4godot.classes.VisualShaderNodeTexture3D as py4godot_visualshadernodetexture3d 
  import py4godot.classes.Shape3D as py4godot_shape3d 
  import py4godot.classes.MissingNode as py4godot_missingnode 
  import py4godot.classes.RibbonTrailMesh as py4godot_ribbontrailmesh 
  import py4godot.classes.Texture3DRD as py4godot_texture3drd 
  import py4godot.classes.VisualShaderNodeVectorOp as py4godot_visualshadernodevectorop 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.DampedSpringJoint2D as py4godot_dampedspringjoint2d 
  import py4godot.classes.XRAnchor3D as py4godot_xranchor3d 
  import py4godot.classes.Light2D as py4godot_light2d 
  import py4godot.classes.VisualShaderNodeParticleMultiplyByAxisAngle as py4godot_visualshadernodeparticlemultiplybyaxisangle 
  import py4godot.classes.AudioEffectBandLimitFilter as py4godot_audioeffectbandlimitfilter 
  import py4godot.classes.CSGPolygon3D as py4godot_csgpolygon3d 
  import py4godot.classes.PathFollow3D as py4godot_pathfollow3d 
  import py4godot.classes.ImageTexture3D as py4godot_imagetexture3d 
  import py4godot.classes.AnimationTree as py4godot_animationtree 
  import py4godot.classes.ConvexPolygonShape2D as py4godot_convexpolygonshape2d 
  import py4godot.classes.RDShaderFile as py4godot_rdshaderfile 
  import py4godot.classes.RemoteTransform2D as py4godot_remotetransform2d 
  import py4godot.classes.AudioEffectHighPassFilter as py4godot_audioeffecthighpassfilter 
  import py4godot.classes.TextMesh as py4godot_textmesh 
  import py4godot.classes.FBXDocument as py4godot_fbxdocument 
  import py4godot.classes.VisualShaderNodeBooleanParameter as py4godot_visualshadernodebooleanparameter 
  import py4godot.classes.VisualShaderNodeScreenUVToSDF as py4godot_visualshadernodescreenuvtosdf 
  import py4godot.classes.MultiMeshInstance2D as py4godot_multimeshinstance2d 
  import py4godot.classes.SoftBody3D as py4godot_softbody3d 
  import py4godot.classes.SphereOccluder3D as py4godot_sphereoccluder3d 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.VisualShaderNodeUIntOp as py4godot_visualshadernodeuintop 
  import py4godot.classes.CircleShape2D as py4godot_circleshape2d 
  import py4godot.classes.AudioEffectPitchShift as py4godot_audioeffectpitchshift 
  import py4godot.classes.SpringBoneCollisionCapsule3D as py4godot_springbonecollisioncapsule3d 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.VisualShaderNodeColorFunc as py4godot_visualshadernodecolorfunc 
  import py4godot.classes.TextureCubemapRD as py4godot_texturecubemaprd 
  import py4godot.classes.VisualShaderNodeCompare as py4godot_visualshadernodecompare 
  import py4godot.classes.CapsuleMesh as py4godot_capsulemesh 
  import py4godot.classes.ArrayMesh as py4godot_arraymesh 
  import py4godot.classes.StyleBoxTexture as py4godot_styleboxtexture 
  import py4godot.classes.Node2D as py4godot_node2d 
  import py4godot.classes.SystemFont as py4godot_systemfont 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.GLTFDocumentExtension as py4godot_gltfdocumentextension 
  import py4godot.classes.AudioStreamInteractive as py4godot_audiostreaminteractive 
  import py4godot.classes.CSGTorus3D as py4godot_csgtorus3d 
  import py4godot.classes.VisualShaderNodeTexture2DArray as py4godot_visualshadernodetexture2darray 
  import py4godot.classes.GeometryInstance3D as py4godot_geometryinstance3d 
  import py4godot.classes.EditorCommandPalette as py4godot_editorcommandpalette 
  import py4godot.classes.InputEventMouseMotion as py4godot_inputeventmousemotion 
  import py4godot.classes.VisualShaderNodeVaryingSetter as py4godot_visualshadernodevaryingsetter 
  import py4godot.classes.OpenXRHapticBase as py4godot_openxrhapticbase 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.VisualShaderNodeLinearSceneDepth as py4godot_visualshadernodelinearscenedepth 
  import py4godot.classes.GDScriptSyntaxHighlighter as py4godot_gdscriptsyntaxhighlighter 
  import py4godot.classes.VisualShaderNodeVec4Constant as py4godot_visualshadernodevec4constant 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.GPUParticlesCollisionSphere3D as py4godot_gpuparticlescollisionsphere3d 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.HingeJoint3D as py4godot_hingejoint3d 
  import py4godot.classes.InputEventGesture as py4godot_inputeventgesture 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.OpenXRCompositionLayerQuad as py4godot_openxrcompositionlayerquad 
  import py4godot.classes.AudioBusLayout as py4godot_audiobuslayout 
  import py4godot.classes.VisualShaderNodeParticleConeVelocity as py4godot_visualshadernodeparticleconevelocity 
  import py4godot.classes.AudioEffectLowPassFilter as py4godot_audioeffectlowpassfilter 
  import py4godot.classes.FontFile as py4godot_fontfile 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DirectionalLight3D as py4godot_directionallight3d 
  import py4godot.classes.Curve2D as py4godot_curve2d 
  import py4godot.classes.Parallax2D as py4godot_parallax2d 
  import py4godot.classes.VisualShaderNodeTexture2DParameter as py4godot_visualshadernodetexture2dparameter 
  import py4godot.classes.NavigationPolygon as py4godot_navigationpolygon 
  import py4godot.classes.VisualShaderNodeStep as py4godot_visualshadernodestep 
  import py4godot.classes.PhysicsBody2D as py4godot_physicsbody2d 
  import py4godot.classes.AnimationNodeStateMachinePlayback as py4godot_animationnodestatemachineplayback 
  import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
  import py4godot.classes.CodeHighlighter as py4godot_codehighlighter 
  import py4godot.classes.VisualShaderNodeBillboard as py4godot_visualshadernodebillboard 
  import py4godot.classes.EditorExportPlatformIOS as py4godot_editorexportplatformios 
  import py4godot.classes.Compositor as py4godot_compositor 
  import py4godot.classes.EditorExportPlatform as py4godot_editorexportplatform 
  import py4godot.classes.FileDialog as py4godot_filedialog 
  import py4godot.classes.EditorExportPlatformMacOS as py4godot_editorexportplatformmacos 
  import py4godot.classes.VisualShaderNodeVectorDistance as py4godot_visualshadernodevectordistance 
  import py4godot.classes.SkeletonModification2DPhysicalBones as py4godot_skeletonmodification2dphysicalbones 
  import py4godot.classes.InputEventFromWindow as py4godot_inputeventfromwindow 
  import py4godot.classes.AudioEffectHighShelfFilter as py4godot_audioeffecthighshelffilter 
  import py4godot.classes.CPUParticles3D as py4godot_cpuparticles3d 
  import py4godot.classes.LightmapProbe as py4godot_lightmapprobe 
  import py4godot.classes.Gradient as py4godot_gradient 
  import py4godot.classes.CPUParticles2D as py4godot_cpuparticles2d 
  import py4godot.classes.VisualShaderNodeParticleMeshEmitter as py4godot_visualshadernodeparticlemeshemitter 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.InputEvent as py4godot_inputevent 
  import py4godot.classes.SpriteBase3D as py4godot_spritebase3d 
  import py4godot.classes.XRNode3D as py4godot_xrnode3d 
  import py4godot.classes.CompressedCubemapArray as py4godot_compressedcubemaparray 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.AudioStreamOggVorbis as py4godot_audiostreamoggvorbis 
  import py4godot.classes.NavigationMeshSourceGeometryData2D as py4godot_navigationmeshsourcegeometrydata2d 
  import py4godot.classes.CylinderShape3D as py4godot_cylindershape3d 
  import py4godot.classes.CryptoKey as py4godot_cryptokey 
  import py4godot.classes.PhysicalBoneSimulator3D as py4godot_physicalbonesimulator3d 
  import py4godot.classes.GLTFTextureSampler as py4godot_gltftexturesampler 
  import py4godot.classes.AimModifier3D as py4godot_aimmodifier3d 
  import py4godot.classes.PlaceholderTexture3D as py4godot_placeholdertexture3d 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.ScriptCreateDialog as py4godot_scriptcreatedialog 
  import py4godot.classes.WorldBoundaryShape2D as py4godot_worldboundaryshape2d 
  import py4godot.classes.OpenXRVisibilityMask as py4godot_openxrvisibilitymask 
  import py4godot.classes.ButtonGroup as py4godot_buttongroup 
  import py4godot.classes.OpenXRIPBindingModifier as py4godot_openxripbindingmodifier 
  import py4godot.classes.PlaceholderMesh as py4godot_placeholdermesh 
  import py4godot.classes.ParticleProcessMaterial as py4godot_particleprocessmaterial 
  import py4godot.classes.VehicleBody3D as py4godot_vehiclebody3d 
  import py4godot.classes.VisualShaderNodeVarying as py4godot_visualshadernodevarying 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ShapeCast3D as py4godot_shapecast3d 
  import py4godot.classes.CSGShape3D as py4godot_csgshape3d 
  import py4godot.classes.XRFaceModifier3D as py4godot_xrfacemodifier3d 
  import py4godot.classes.ArrayOccluder3D as py4godot_arrayoccluder3d 
  import py4godot.classes.VisualShaderNodeVectorLen as py4godot_visualshadernodevectorlen 
  import py4godot.classes.PhysicalBone3D as py4godot_physicalbone3d 
  import py4godot.classes.ConeTwistJoint3D as py4godot_conetwistjoint3d 
  import py4godot.classes.AnimationNodeSync as py4godot_animationnodesync 
  import py4godot.classes.ImporterMesh as py4godot_importermesh 
  import py4godot.classes.VisualShaderNodeVectorRefract as py4godot_visualshadernodevectorrefract 
  import py4godot.classes.GLTFAnimation as py4godot_gltfanimation 
  import py4godot.classes.Timer as py4godot_timer 
  import py4godot.classes.Polygon2D as py4godot_polygon2d 
  import py4godot.classes.VisualShaderNodeFaceForward as py4godot_visualshadernodefaceforward 
  import py4godot.classes.RigidBody2D as py4godot_rigidbody2d 
  import py4godot.classes.AudioStreamMP3 as py4godot_audiostreammp3 
  import py4godot.classes.VisualShaderNodeVectorCompose as py4godot_visualshadernodevectorcompose 
  import py4godot.classes.Marker3D as py4godot_marker3d 
  import py4godot.classes.NoiseTexture3D as py4godot_noisetexture3d 
  import py4godot.classes.TouchScreenButton as py4godot_touchscreenbutton 
  import py4godot.classes.TileMap as py4godot_tilemap 
  import py4godot.classes.Viewport as py4godot_viewport 
  import py4godot.classes.Texture2DArray as py4godot_texture2darray 
  import py4godot.classes.InputEventJoypadButton as py4godot_inputeventjoypadbutton 
  import py4godot.classes.VisualShaderNodeSample3D as py4godot_visualshadernodesample3d 
  import py4godot.classes.VisualShaderNodeParameter as py4godot_visualshadernodeparameter 
  import py4godot.classes.AnimationNodeTransition as py4godot_animationnodetransition 
  import py4godot.classes.NavigationRegion2D as py4godot_navigationregion2d 
  import py4godot.classes.AnimatableBody2D as py4godot_animatablebody2d 
  import py4godot.classes.CSGCylinder3D as py4godot_csgcylinder3d 
  import py4godot.classes.FBXState as py4godot_fbxstate 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.NavigationRegion3D as py4godot_navigationregion3d 
  import py4godot.classes.InputEventScreenDrag as py4godot_inputeventscreendrag 
  import py4godot.classes.Mesh as py4godot_mesh 
  import py4godot.classes.Noise as py4godot_noise 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.AudioEffectEQ6 as py4godot_audioeffecteq6 
  import py4godot.classes.TubeTrailMesh as py4godot_tubetrailmesh 
  import py4godot.classes.AnimationNodeBlend2 as py4godot_animationnodeblend2 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.Area2D as py4godot_area2d 
  import py4godot.classes.Decal as py4godot_decal 
  import py4godot.classes.VisualShaderNodeDistanceFade as py4godot_visualshadernodedistancefade 
  import py4godot.classes.RDShaderSPIRV as py4godot_rdshaderspirv 
  import py4godot.classes.Material as py4godot_material 
  import py4godot.classes.PanoramaSkyMaterial as py4godot_panoramaskymaterial 
  import py4godot.classes.VisualShaderNodeUVFunc as py4godot_visualshadernodeuvfunc 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.VisualShaderNodeParticleBoxEmitter as py4godot_visualshadernodeparticleboxemitter 
  import py4godot.classes.StyleBoxFlat as py4godot_styleboxflat 
  import py4godot.classes.OpenXRHapticVibration as py4godot_openxrhapticvibration 
  import py4godot.classes.GLTFSpecGloss as py4godot_gltfspecgloss 
  import py4godot.classes.AudioEffectRecord as py4godot_audioeffectrecord 
  import py4godot.classes.EditorPlugin as py4godot_editorplugin 
  import py4godot.classes.Texture as py4godot_texture 
  import py4godot.classes.VisibleOnScreenEnabler3D as py4godot_visibleonscreenenabler3d 
  import py4godot.classes.VisualShaderNodeColorParameter as py4godot_visualshadernodecolorparameter 
  import py4godot.classes.PlaneMesh as py4godot_planemesh 
  import py4godot.classes.ShaderInclude as py4godot_shaderinclude 
  import py4godot.classes.VisualShaderNodeFloatOp as py4godot_visualshadernodefloatop 
  import py4godot.classes.NavigationAgent3D as py4godot_navigationagent3d 
  import py4godot.classes.PhysicsBody3D as py4godot_physicsbody3d 
  import py4godot.classes.PlaceholderCubemap as py4godot_placeholdercubemap 
  import py4godot.classes.MultiMeshInstance3D as py4godot_multimeshinstance3d 
  import py4godot.classes.EditorExportPlatformLinuxBSD as py4godot_editorexportplatformlinuxbsd 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.InputEventKey as py4godot_inputeventkey 
  import py4godot.classes.Sky as py4godot_sky 
  import py4godot.classes.CopyTransformModifier3D as py4godot_copytransformmodifier3d 
  import py4godot.classes.GLTFPhysicsBody as py4godot_gltfphysicsbody 
  import py4godot.classes.GLTFCamera as py4godot_gltfcamera 
  import py4godot.classes.X509Certificate as py4godot_x509certificate 
  import py4godot.classes.RetargetModifier3D as py4godot_retargetmodifier3d 
  import py4godot.classes.InputEventMouseButton as py4godot_inputeventmousebutton 
  import py4godot.classes.SpringArm3D as py4godot_springarm3d 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.VisualShaderNodeDeterminant as py4godot_visualshadernodedeterminant 
  import py4godot.classes.PopupMenu as py4godot_popupmenu 
  import py4godot.classes.TextureLayeredRD as py4godot_texturelayeredrd 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.CompressedCubemap as py4godot_compressedcubemap 
  import py4godot.classes.VisualShaderNodeConstant as py4godot_visualshadernodeconstant 
  import py4godot.classes.PrimitiveMesh as py4godot_primitivemesh 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.InputEventPanGesture as py4godot_inputeventpangesture 
  import py4godot.classes.ParallaxBackground as py4godot_parallaxbackground 
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.EditorExportPlatformWeb as py4godot_editorexportplatformweb 
  import py4godot.classes.SkeletonModification2DLookAt as py4godot_skeletonmodification2dlookat 
  import py4godot.classes.AudioStreamGenerator as py4godot_audiostreamgenerator 
  import py4godot.classes.VisualShaderNodeVec3Parameter as py4godot_visualshadernodevec3parameter 
  import py4godot.classes.VisualShaderNodeUIntParameter as py4godot_visualshadernodeuintparameter 
  import py4godot.classes.VisualShaderNodeExpression as py4godot_visualshadernodeexpression 
  import py4godot.classes.PlaceholderMaterial as py4godot_placeholdermaterial 
  import py4godot.classes.CollisionObject3D as py4godot_collisionobject3d 
  import py4godot.classes.VisualShaderNodeTexture3DParameter as py4godot_visualshadernodetexture3dparameter 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.StatusIndicator as py4godot_statusindicator 
  import py4godot.classes.SkeletonModification2DFABRIK as py4godot_skeletonmodification2dfabrik 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.TileSet as py4godot_tileset 
  import py4godot.classes.AnimationNodeTimeSeek as py4godot_animationnodetimeseek 
  import py4godot.classes.PinJoint3D as py4godot_pinjoint3d 
  import py4godot.classes.VisualShaderNodeSDFRaymarch as py4godot_visualshadernodesdfraymarch 
  import py4godot.classes.CSGSphere3D as py4godot_csgsphere3d 
  import py4godot.classes.GridMap as py4godot_gridmap 
  import py4godot.classes.EditorNode3DGizmoPlugin as py4godot_editornode3dgizmoplugin 
  import py4godot.classes.CompressedTexture3D as py4godot_compressedtexture3d 
  import py4godot.classes.StyleBoxLine as py4godot_styleboxline 
  import py4godot.classes.AudioEffectBandPassFilter as py4godot_audioeffectbandpassfilter 
  import py4godot.classes.WorldEnvironment as py4godot_worldenvironment 
  import py4godot.classes.VisibleOnScreenNotifier2D as py4godot_visibleonscreennotifier2d 
  import py4godot.classes.VisualShaderNodeResizableBase as py4godot_visualshadernoderesizablebase 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.AudioEffectDistortion as py4godot_audioeffectdistortion 
  import py4godot.classes.VisualShaderNodeUVPolarCoord as py4godot_visualshadernodeuvpolarcoord 
  import py4godot.classes.AudioStreamWAV as py4godot_audiostreamwav 
  import py4godot.classes.NavigationAgent2D as py4godot_navigationagent2d 
  import py4godot.classes.AnimatableBody3D as py4godot_animatablebody3d 
  import py4godot.classes.Theme as py4godot_theme 
  import py4godot.classes.ReflectionProbe as py4godot_reflectionprobe 
  import py4godot.classes.NavigationLink3D as py4godot_navigationlink3d 
  import py4godot.classes.GPUParticlesAttractorBox3D as py4godot_gpuparticlesattractorbox3d 
  import py4godot.classes.Curve as py4godot_curve 
  import py4godot.classes.BoxShape3D as py4godot_boxshape3d 
  import py4godot.classes.TileSetScenesCollectionSource as py4godot_tilesetscenescollectionsource 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.GLTFLight as py4godot_gltflight 
  import py4godot.classes.OccluderInstance3D as py4godot_occluderinstance3d 
  import py4godot.classes.VisualShaderNodeTexture2DArrayParameter as py4godot_visualshadernodetexture2darrayparameter 
  import py4godot.classes.FogVolume as py4godot_fogvolume 
  import py4godot.classes.Bone2D as py4godot_bone2d 
  import py4godot.classes.AudioStreamPlayer3D as py4godot_audiostreamplayer3d 
  import py4godot.classes.Sprite3D as py4godot_sprite3d 
  import py4godot.classes.VisualShaderNodeParticleSphereEmitter as py4godot_visualshadernodeparticlesphereemitter 
  import py4godot.classes.OpenXRAction as py4godot_openxraction 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.MeshInstance2D as py4godot_meshinstance2d 
  import py4godot.classes.VisualShaderNodeVectorFunc as py4godot_visualshadernodevectorfunc 
  import py4godot.classes.VideoStreamPlayback as py4godot_videostreamplayback 
  import py4godot.classes.ProceduralSkyMaterial as py4godot_proceduralskymaterial 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.GPUParticlesCollisionBox3D as py4godot_gpuparticlescollisionbox3d 
  import py4godot.classes.Font as py4godot_font 
  import py4godot.classes.LightmapGIData as py4godot_lightmapgidata 
  import py4godot.classes.GPUParticlesAttractor3D as py4godot_gpuparticlesattractor3d 
  import py4godot.classes.Curve3D as py4godot_curve3d 
  import py4godot.classes.WorldBoundaryShape3D as py4godot_worldboundaryshape3d 
  import py4godot.classes.VisualShaderNodeCurveTexture as py4godot_visualshadernodecurvetexture 
  import py4godot.classes.XRHandModifier3D as py4godot_xrhandmodifier3d 
  import py4godot.classes.Camera2D as py4godot_camera2d 
  import py4godot.classes.SubViewport as py4godot_subviewport 
  import py4godot.classes.VisualShaderNodeParticleEmit as py4godot_visualshadernodeparticleemit 
  import py4godot.classes.World2D as py4godot_world2d 
  import py4godot.classes.VisualShaderNodeTransformVecMult as py4godot_visualshadernodetransformvecmult 
  import py4godot.classes.Window as py4godot_window 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.Skin as py4godot_skin 
  import py4godot.classes.Occluder3D as py4godot_occluder3d 
  import py4godot.classes.VisualShaderNodeFresnel as py4godot_visualshadernodefresnel 
  import py4godot.classes.AudioEffectReverb as py4godot_audioeffectreverb 
  import py4godot.classes.AnimationNodeStateMachineTransition as py4godot_animationnodestatemachinetransition 
  import py4godot.classes.Node3D as py4godot_node3d 
  import py4godot.classes.BoxMesh as py4godot_boxmesh 
  import py4godot.classes.HTTPRequest as py4godot_httprequest 
  import py4godot.classes.VehicleWheel3D as py4godot_vehiclewheel3d 
  import py4godot.classes.VisualShaderNodeReroute as py4godot_visualshadernodereroute 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.Node as py4godot_node 
  import py4godot.classes.PlaceholderTextureLayered as py4godot_placeholdertexturelayered 
  import py4godot.classes.EditorExportPlatformExtension as py4godot_editorexportplatformextension 
  import py4godot.classes.MultiMesh as py4godot_multimesh 
  import py4godot.classes.AudioEffectEQ as py4godot_audioeffecteq 
  import py4godot.classes.SkeletonModification2DTwoBoneIK as py4godot_skeletonmodification2dtwoboneik 
  import py4godot.classes.VisualShaderNodeParameterRef as py4godot_visualshadernodeparameterref 
  import py4godot.classes.AnimationNodeBlendSpace1D as py4godot_animationnodeblendspace1d 
  import py4godot.classes.VisualShaderNodeSDFToScreenUV as py4godot_visualshadernodesdftoscreenuv 
  import py4godot.classes.AudioEffectStereoEnhance as py4godot_audioeffectstereoenhance 
  import py4godot.classes.JSON as py4godot_json 
  import py4godot.classes.AudioEffectEQ10 as py4godot_audioeffecteq10 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.AudioListener2D as py4godot_audiolistener2d 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.RayCast2D as py4godot_raycast2d 
  import py4godot.classes.CanvasModulate as py4godot_canvasmodulate 
  import py4godot.classes.GLTFTexture as py4godot_gltftexture 
  import py4godot.classes.Script as py4godot_script 
  import py4godot.classes.CollisionShape2D as py4godot_collisionshape2d 
  import py4godot.classes.AudioEffectEQ21 as py4godot_audioeffecteq21 
  import py4godot.classes.Image as py4godot_image 
  import py4godot.classes.BoxOccluder3D as py4godot_boxoccluder3d 
  import py4godot.classes.OpenXRActionSet as py4godot_openxractionset 
  import py4godot.classes.VisualShaderNodeTextureParameter as py4godot_visualshadernodetextureparameter 
  import py4godot.classes.NavigationObstacle2D as py4godot_navigationobstacle2d 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.SegmentShape2D as py4godot_segmentshape2d 
  import py4godot.classes.InstancePlaceholder as py4godot_instanceplaceholder 
  import py4godot.classes.FastNoiseLite as py4godot_fastnoiselite 
  import py4godot.classes.Light3D as py4godot_light3d 
  import py4godot.classes.SkeletonModification2D as py4godot_skeletonmodification2d 
  import py4godot.classes.AcceptDialog as py4godot_acceptdialog 
  import py4godot.classes.VisualShaderNodeClamp as py4godot_visualshadernodeclamp 
  import py4godot.classes.GLTFDocument as py4godot_gltfdocument 
  import py4godot.classes.AudioEffectSpectrumAnalyzer as py4godot_audioeffectspectrumanalyzer 
  import py4godot.classes.OpenXRRenderModel as py4godot_openxrrendermodel 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.PinJoint2D as py4godot_pinjoint2d 
  import py4godot.classes.InputEventShortcut as py4godot_inputeventshortcut 
  import py4godot.classes.OccluderPolygon2D as py4godot_occluderpolygon2d 
  import py4godot.classes.OpenXRCompositionLayer as py4godot_openxrcompositionlayer 
  import py4godot.classes.StandardMaterial3D as py4godot_standardmaterial3d 
  import py4godot.classes.InputEventScreenTouch as py4godot_inputeventscreentouch 
  import py4godot.classes.OpenXRRenderModelManager as py4godot_openxrrendermodelmanager 
  import py4godot.classes.PointLight2D as py4godot_pointlight2d 
  import py4godot.classes.CameraAttributes as py4godot_cameraattributes 
  import py4godot.classes.VisualShaderNodeVectorBase as py4godot_visualshadernodevectorbase 
  import py4godot.classes.CameraAttributesPractical as py4godot_cameraattributespractical 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.CSGMesh3D as py4godot_csgmesh3d 
  import py4godot.classes.AnimationNodeBlend3 as py4godot_animationnodeblend3 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.VisualShaderNodeTextureParameterTriplanar as py4godot_visualshadernodetextureparametertriplanar 
  import py4godot.classes.BoneAttachment3D as py4godot_boneattachment3d 
  import py4godot.classes.PackedScene as py4godot_packedscene 
  import py4godot.classes.PopupPanel as py4godot_popuppanel 
  import py4godot.classes.GLTFAccessor as py4godot_gltfaccessor 
  import py4godot.classes.AudioEffectPhaser as py4godot_audioeffectphaser 
  import py4godot.classes.GrooveJoint2D as py4godot_groovejoint2d 
  import py4godot.classes.GPUParticlesAttractorSphere3D as py4godot_gpuparticlesattractorsphere3d 
import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPEditorExportPluginWrapper


class EditorExportPlugin(py4godot_refcounted.RefCounted):
  r'''
		`EditorExportPlugin`s are automatically invoked whenever the user exports the project. Their most common use is to determine what files are being included in the exported project. For each plugin, `_export_begin` is called at the beginning of the export process and then `_export_file` is called for each exported file.
		To use `EditorExportPlugin`, register it using the `EditorPlugin.add_export_plugin` method first.
	'''

  @staticmethod
  def constructor():
    class_ = EditorExportPlugin.construct_without_init()
    class_._ptr = constructor(281,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorExportPlugin.construct_without_init()
    class_._ptr = constructor(281,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorExportPluginWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(281,0, ())


  def generate_wrapper(self):
    return CPPEditorExportPluginWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EditorExportPlugin.__new__(EditorExportPlugin)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorExportPlugin'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorExportPlugin.construct_without_init()
    cls._ptr = CPPEditorExportPluginWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorExportPlugin.construct_without_init()
    cls._ptr = CPPEditorExportPluginWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _export_file(self, path:'str'   , type:'str'   , features:'PackedStringArray'   ) -> None:
    r'''
				Virtual method to be overridden by the user. Called for each exported file before `_customize_resource` and `_customize_scene`. The arguments can be used to identify the file. `path` is the path of the file, `type` is the `Resource` represented by the file (e.g. `PackedScene`), and `features` is the list of features for the export.
				Calling `skip` inside this callback will make the file not included in the export.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not type is None)
    assert isinstance(type, (str, String)), 'type must be str or String'
    assert(not features is None)
    assert isinstance(features, PackedStringArray), 'features must be PackedStringArray'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)
    assert(isinstance(type, (str, String)))
    py_string_type = type if isinstance(type, StringName) else c_utils.py_string_to_string(type)


    self._ptr.call_with_return(53,tuple([py_string_path._ptr, py_string_type._ptr, features._ptr]))

  @functools.native_method
  def _export_begin(self, features:'PackedStringArray'   , is_debug:'bool'   , path:'str'   , flags:'int'   ) -> None:
    r'''
				Virtual method to be overridden by the user. It is called when the export starts and provides all information about the export. `features` is the list of features for the export, `is_debug` is `true` for debug builds, `path` is the target path for the exported project. `flags` is only used when running a runnable profile, e.g. when using native run on Android.
			'''

    assert(not features is None)
    assert isinstance(features, PackedStringArray), 'features must be PackedStringArray'
    assert isinstance(is_debug, bool), 'is_debug must be bool'
    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(flags, (int, float)), 'flags must be int or float'






    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    self._ptr.call_with_return(54,tuple([features._ptr, is_debug, py_string_path._ptr, flags]))

  @functools.native_method
  def _export_end(self) -> None:
    r'''
				Virtual method to be overridden by the user. Called when the export is finished.
			'''




    self._ptr.call_with_return(55,tuple([]))

  @functools.native_method
  def _begin_customize_resources(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , features:'PackedStringArray'   ) -> typing.Union[bool]:
    r'''
				Return `true` if this plugin will customize resources based on the platform and features used.
				When enabled, `_get_customization_configuration_hash` and `_customize_resource` will be called and must be implemented.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert(not features is None)
    assert isinstance(features, PackedStringArray), 'features must be PackedStringArray'







    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([platform._ptr, features._ptr]))
    return _ret


  @functools.native_method
  def _customize_resource(self, resource:'py4godot_resource.Resource'   , path:'str'   ) -> typing.Any:
    r'''
				Customize a resource. If changes are made to it, return the same or a new resource. Otherwise, return `null`. When a new resource is returned, `resource` will be replaced by a copy of the new resource.
				The `path` argument is only used when customizing an actual file, otherwise this means that this resource is part of another one and it will be empty.
				Implementing this method is required if `_begin_customize_resources` returns `true`.
				**Note:** When customizing any of the following types and returning another resource, the other resource should not be skipped using `skip` in `_export_file`:
				- `AtlasTexture`
				- `CompressedCubemap`
				- `CompressedCubemapArray`
				- `CompressedTexture2D`
				- `CompressedTexture2DArray`
				- `CompressedTexture3D`
			'''

    assert(not resource is None)
    assert isinstance(resource, get_class('Resource')), 'resource must be Resource'
    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'





    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Resource
    _ret._ptr = self._ptr.call_with_return(57,tuple([resource._ptr, py_string_path._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _begin_customize_scenes(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , features:'PackedStringArray'   ) -> typing.Union[bool]:
    r'''
				Return `true` if this plugin will customize scenes based on the platform and features used.
				When enabled, `_get_customization_configuration_hash` and `_customize_scene` will be called and must be implemented.
				**Note:** `_customize_scene` will only be called for scenes that have been modified since the last export.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert(not features is None)
    assert isinstance(features, PackedStringArray), 'features must be PackedStringArray'







    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([platform._ptr, features._ptr]))
    return _ret


  @functools.native_method
  def _customize_scene(self, scene:'py4godot_node.Node'   , path:'str'   ) -> typing.Any:
    r'''
				Customize a scene. If changes are made to it, return the same or a new scene. Otherwise, return `null`. If a new scene is returned, it is up to you to dispose of the old one.
				Implementing this method is required if `_begin_customize_scenes` returns `true`.
			'''

    assert(not scene is None)
    assert isinstance(scene, get_class('Node')), 'scene must be Node'
    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'





    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Node
    _ret._ptr = self._ptr.call_with_return(59,tuple([scene._ptr, py_string_path._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _get_customization_configuration_hash(self) -> typing.Union[int]:
    r'''
				Return a hash based on the configuration passed (for both scenes and resources). This helps keep separate caches for separate export configurations.
				Implementing this method is required if `_begin_customize_resources` returns `true`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(60,tuple([]))
    return _ret


  @functools.native_method
  def _end_customize_scenes(self) -> None:
    r'''
				This is called when the customization process for scenes ends.
			'''




    self._ptr.call_with_return(61,tuple([]))

  @functools.native_method
  def _end_customize_resources(self) -> None:
    r'''
				This is called when the customization process for resources ends.
			'''




    self._ptr.call_with_return(62,tuple([]))

  @functools.native_method
  def _get_export_options(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   ) -> typing.Union['py4godot_dictionarytypedarray.DictionaryTypedArray']:
    r'''
				Return a list of export options that can be configured for this export plugin.
				Each element in the return value is a `Dictionary` with the following keys:
				- `option`: A dictionary with the structure documented by `Object.get_property_list`, but all keys are optional.
				- `default_value`: The default value for this option.
				- `update_visibility`: An optional boolean value. If set to `true`, the preset will emit `signal Object.property_list_changed` when the option is changed.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'






    _ret = py4godot_dictionarytypedarray.DictionaryTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(63,tuple([platform._ptr]))
    return _ret


  @functools.native_method
  def _get_export_options_overrides(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   ) -> typing.Union['Dictionary']:
    r'''
				Return a `Dictionary` of override values for export options, that will be used instead of user-provided values. Overridden options will be hidden from the user interface.
				```gdscript
				class MyExportPlugin extends EditorExportPlugin:
					func _get_name() -> String:
						return "MyExportPlugin"

					func _supports_platform(platform) -> bool:
						if platform is EditorExportPlatformPC:
							# Run on all desktop platforms including Windows, MacOS and Linux.
							return true
						return false

					func _get_export_options_overrides(platform) -> Dictionary:
						# Override "Embed PCK" to always be enabled.
						return {
							"binary_format/embed_pck": true,
						}
				```
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'






    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(64,tuple([platform._ptr]))
    return _ret


  @functools.native_method
  def _should_update_export_options(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   ) -> typing.Union[bool]:
    r'''
				Return `true` if the result of `_get_export_options` has changed and the export options of the preset corresponding to `platform` should be updated.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'






    _ret = 0
    _ret = self._ptr.call_with_return(65,tuple([platform._ptr]))
    return _ret


  @functools.native_method
  def _get_export_option_visibility(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , option:'str'   ) -> typing.Union[bool]:
    r'''
				Validates `option` and returns the visibility for the specified `platform`. The default implementation returns `true` for all options.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert(not option is None)
    assert isinstance(option, (str, String)), 'option must be str or String'





    assert(isinstance(option, (str, String)))
    py_string_option = option if isinstance(option, StringName) else c_utils.py_string_to_string(option)

    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([platform._ptr, py_string_option._ptr]))
    return _ret


  @functools.native_method
  def _get_export_option_warning(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , option:'str'   ) -> typing.Union[str]:
    r'''
				Check the requirements for the given `option` and return a non-empty warning string if they are not met.
				**Note:** Use `get_option` to check the value of the export options.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert(not option is None)
    assert isinstance(option, (str, String)), 'option must be str or String'





    assert(isinstance(option, (str, String)))
    py_string_option = option if isinstance(option, StringName) else c_utils.py_string_to_string(option)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(67,tuple([platform._ptr, py_string_option._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _get_export_features(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , debug:'bool'   ) -> typing.Union['PackedStringArray']:
    r'''
				Return a `PackedStringArray` of additional features this preset, for the given `platform`, should have.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert isinstance(debug, bool), 'debug must be bool'







    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(68,tuple([platform._ptr, debug]))
    return _ret


  @functools.native_method
  def _get_name(self) -> typing.Union[str]:
    r'''
				Return the name identifier of this plugin (for future identification by the exporter). The plugins are sorted by name before exporting.
				Implementing this method is required.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(69,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _supports_platform(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   ) -> typing.Union[bool]:
    r'''
				Return `true` if the plugin supports the given `platform`.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'






    _ret = 0
    _ret = self._ptr.call_with_return(70,tuple([platform._ptr]))
    return _ret


  @functools.native_method
  def _get_android_dependencies(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , debug:'bool'   ) -> typing.Union['PackedStringArray']:
    r'''
				Virtual method to be overridden by the user. This is called to retrieve the set of Android dependencies provided by this plugin. Each returned Android dependency should have the format of an Android remote binary dependency: `org.godot.example:my-plugin:0.0.0`
				For more information see `url=https://developer.android.com/build/dependencies?agpversion=4.1#dependency-types`Android documentation on dependencies`/url`.
				**Note:** Only supported on Android and requires `EditorExportPlatformAndroid.gradle_build/use_gradle_build` to be enabled.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert isinstance(debug, bool), 'debug must be bool'







    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(71,tuple([platform._ptr, debug]))
    return _ret


  @functools.native_method
  def _get_android_dependencies_maven_repos(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , debug:'bool'   ) -> typing.Union['PackedStringArray']:
    r'''
				Virtual method to be overridden by the user. This is called to retrieve the URLs of Maven repositories for the set of Android dependencies provided by this plugin.
				For more information see `url=https://docs.gradle.org/current/userguide/dependency_management.html#sec:maven_repo`Gradle documentation on dependency management`/url`.
				**Note:** Google's Maven repo and the Maven Central repo are already included by default.
				**Note:** Only supported on Android and requires `EditorExportPlatformAndroid.gradle_build/use_gradle_build` to be enabled.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert isinstance(debug, bool), 'debug must be bool'







    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(72,tuple([platform._ptr, debug]))
    return _ret


  @functools.native_method
  def _get_android_libraries(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , debug:'bool'   ) -> typing.Union['PackedStringArray']:
    r'''
				Virtual method to be overridden by the user. This is called to retrieve the local paths of the Android libraries archive (AAR) files provided by this plugin.
				**Note:** Relative paths **must** be relative to Godot's `res://addons/` directory. For example, an AAR file located under `res://addons/hello_world_plugin/HelloWorld.release.aar` can be returned as an absolute path using `res://addons/hello_world_plugin/HelloWorld.release.aar` or a relative path using `hello_world_plugin/HelloWorld.release.aar`.
				**Note:** Only supported on Android and requires `EditorExportPlatformAndroid.gradle_build/use_gradle_build` to be enabled.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert isinstance(debug, bool), 'debug must be bool'







    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(73,tuple([platform._ptr, debug]))
    return _ret


  @functools.native_method
  def _get_android_manifest_activity_element_contents(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , debug:'bool'   ) -> typing.Union[str]:
    r'''
				Virtual method to be overridden by the user. This is used at export time to update the contents of the `activity` element in the generated Android manifest.
				**Note:** Only supported on Android and requires `EditorExportPlatformAndroid.gradle_build/use_gradle_build` to be enabled.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert isinstance(debug, bool), 'debug must be bool'







    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(74,tuple([platform._ptr, debug]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _get_android_manifest_application_element_contents(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , debug:'bool'   ) -> typing.Union[str]:
    r'''
				Virtual method to be overridden by the user. This is used at export time to update the contents of the `application` element in the generated Android manifest.
				**Note:** Only supported on Android and requires `EditorExportPlatformAndroid.gradle_build/use_gradle_build` to be enabled.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert isinstance(debug, bool), 'debug must be bool'







    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(75,tuple([platform._ptr, debug]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _get_android_manifest_element_contents(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , debug:'bool'   ) -> typing.Union[str]:
    r'''
				Virtual method to be overridden by the user. This is used at export time to update the contents of the `manifest` element in the generated Android manifest.
				**Note:** Only supported on Android and requires `EditorExportPlatformAndroid.gradle_build/use_gradle_build` to be enabled.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert isinstance(debug, bool), 'debug must be bool'







    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(76,tuple([platform._ptr, debug]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _update_android_prebuilt_manifest(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   , manifest_data:'PackedByteArray'   ) -> typing.Union['PackedByteArray']:
    r'''
				Provide access to the Android prebuilt manifest and allows the plugin to modify it if needed.
				Implementers of this virtual method should take the binary manifest data from `manifest_data`, copy it, modify it, and then return it with the modifications.
				If no modifications are needed, then an empty `PackedByteArray` should be returned.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'
    assert(not manifest_data is None)
    assert isinstance(manifest_data, PackedByteArray), 'manifest_data must be PackedByteArray'







    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([platform._ptr, manifest_data._ptr]))
    return _ret


  @functools.native_method
  def add_shared_object(self, path:'str'   , tags:'PackedStringArray'   , target:'str'   ) -> None:
    r'''
				Adds a shared object or a directory containing only shared objects with the given `tags` and destination `path`.
				**Note:** In case of macOS exports, those shared objects will be added to `Frameworks` directory of app bundle.
				In case of a directory code-sign will error if you place non code object in directory.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not tags is None)
    assert isinstance(tags, PackedStringArray), 'tags must be PackedStringArray'
    assert(not target is None)
    assert isinstance(target, (str, String)), 'target must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    assert(isinstance(target, (str, String)))
    py_string_target = target if isinstance(target, StringName) else c_utils.py_string_to_string(target)

    self._ptr.call_with_return(78,tuple([py_string_path._ptr, tags._ptr, py_string_target._ptr]))

  @functools.native_method
  def add_file(self, path:'str'   , file:'PackedByteArray'   , remap:'bool'   ) -> None:
    r'''
				Adds a custom file to be exported. `path` is the virtual path that can be used to load the file, `file` is the binary data of the file.
				When called inside `_export_file` and `remap` is `true`, the current file will not be exported, but instead remapped to this custom file. `remap` is ignored when called in other places.
				`file` will not be imported, so consider using `_customize_resource` to remap imported resources.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not file is None)
    assert isinstance(file, PackedByteArray), 'file must be PackedByteArray'
    assert isinstance(remap, bool), 'remap must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)



    self._ptr.call_with_return(79,tuple([py_string_path._ptr, file._ptr, remap]))

  @functools.native_method
  def add_apple_embedded_platform_project_static_lib(self, path:'str'   ) -> None:
    r'''
				Adds a static library from the given `path` to the Apple embedded platform project.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(80,tuple([py_string_path._ptr]))

  @functools.native_method
  def add_apple_embedded_platform_framework(self, path:'str'   ) -> None:
    r'''
				Adds a static library (*.a) or a dynamic library (*.dylib, *.framework) to the Linking Phase to the Apple embedded platform's Xcode project.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(81,tuple([py_string_path._ptr]))

  @functools.native_method
  def add_apple_embedded_platform_embedded_framework(self, path:'str'   ) -> None:
    r'''
				Adds a dynamic library (*.dylib, *.framework) to the Linking Phase in the Apple embedded platform's Xcode project and embeds it into the resulting binary.
				**Note:** For static libraries (*.a), this works in the same way as `add_apple_embedded_platform_framework`.
				**Note:** This method should not be used for System libraries as they are already present on the device.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(82,tuple([py_string_path._ptr]))

  @functools.native_method
  def add_apple_embedded_platform_plist_content(self, plist_content:'str'   ) -> None:
    r'''
				Adds additional fields to the Apple embedded platform's project Info.plist file.
			'''

    assert(not plist_content is None)
    assert isinstance(plist_content, (str, String)), 'plist_content must be str or String'




    assert(isinstance(plist_content, (str, String)))
    py_string_plist_content = plist_content if isinstance(plist_content, StringName) else c_utils.py_string_to_string(plist_content)

    self._ptr.call_with_return(83,tuple([py_string_plist_content._ptr]))

  @functools.native_method
  def add_apple_embedded_platform_linker_flags(self, flags:'str'   ) -> None:
    r'''
				Adds linker flags for the Apple embedded platform export.
			'''

    assert(not flags is None)
    assert isinstance(flags, (str, String)), 'flags must be str or String'




    assert(isinstance(flags, (str, String)))
    py_string_flags = flags if isinstance(flags, StringName) else c_utils.py_string_to_string(flags)

    self._ptr.call_with_return(84,tuple([py_string_flags._ptr]))

  @functools.native_method
  def add_apple_embedded_platform_bundle_file(self, path:'str'   ) -> None:
    r'''
				Adds an Apple embedded platform bundle file from the given `path` to the exported project.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(85,tuple([py_string_path._ptr]))

  @functools.native_method
  def add_apple_embedded_platform_cpp_code(self, code:'str'   ) -> None:
    r'''
				Adds C++ code to the Apple embedded platform export. The final code is created from the code appended by each active export plugin.
			'''

    assert(not code is None)
    assert isinstance(code, (str, String)), 'code must be str or String'




    assert(isinstance(code, (str, String)))
    py_string_code = code if isinstance(code, StringName) else c_utils.py_string_to_string(code)

    self._ptr.call_with_return(86,tuple([py_string_code._ptr]))

  @functools.native_method
  def add_ios_project_static_lib(self, path:'str'   ) -> None:
    r'''
				Adds a static library from the given `path` to the iOS project.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(87,tuple([py_string_path._ptr]))

  @functools.native_method
  def add_ios_framework(self, path:'str'   ) -> None:
    r'''
				Adds a static library (*.a) or a dynamic library (*.dylib, *.framework) to the Linking Phase to the iOS Xcode project.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(88,tuple([py_string_path._ptr]))

  @functools.native_method
  def add_ios_embedded_framework(self, path:'str'   ) -> None:
    r'''
				Adds a dynamic library (*.dylib, *.framework) to Linking Phase in iOS's Xcode project and embeds it into resulting binary.
				**Note:** For static libraries (*.a), this works the in same way as `add_apple_embedded_platform_framework`.
				**Note:** This method should not be used for System libraries as they are already present on the device.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(89,tuple([py_string_path._ptr]))

  @functools.native_method
  def add_ios_plist_content(self, plist_content:'str'   ) -> None:
    r'''
				Adds additional fields to the iOS project Info.plist file.
			'''

    assert(not plist_content is None)
    assert isinstance(plist_content, (str, String)), 'plist_content must be str or String'




    assert(isinstance(plist_content, (str, String)))
    py_string_plist_content = plist_content if isinstance(plist_content, StringName) else c_utils.py_string_to_string(plist_content)

    self._ptr.call_with_return(90,tuple([py_string_plist_content._ptr]))

  @functools.native_method
  def add_ios_linker_flags(self, flags:'str'   ) -> None:
    r'''
				Adds linker flags for the iOS export.
			'''

    assert(not flags is None)
    assert isinstance(flags, (str, String)), 'flags must be str or String'




    assert(isinstance(flags, (str, String)))
    py_string_flags = flags if isinstance(flags, StringName) else c_utils.py_string_to_string(flags)

    self._ptr.call_with_return(91,tuple([py_string_flags._ptr]))

  @functools.native_method
  def add_ios_bundle_file(self, path:'str'   ) -> None:
    r'''
				Adds an iOS bundle file from the given `path` to the exported project.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(92,tuple([py_string_path._ptr]))

  @functools.native_method
  def add_ios_cpp_code(self, code:'str'   ) -> None:
    r'''
				Adds C++ code to the iOS export. The final code is created from the code appended by each active export plugin.
			'''

    assert(not code is None)
    assert isinstance(code, (str, String)), 'code must be str or String'




    assert(isinstance(code, (str, String)))
    py_string_code = code if isinstance(code, StringName) else c_utils.py_string_to_string(code)

    self._ptr.call_with_return(93,tuple([py_string_code._ptr]))

  @functools.native_method
  def add_macos_plugin_file(self, path:'str'   ) -> None:
    r'''
				Adds file or directory matching `path` to `PlugIns` directory of macOS app bundle.
				**Note:** This is useful only for macOS exports.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(94,tuple([py_string_path._ptr]))

  @functools.native_method
  def skip(self) -> None:
    r'''
				To be called inside `_export_file`. Skips the current file, so it's not included in the export.
			'''




    self._ptr.call_with_return(95,tuple([]))

  @functools.native_method
  def get_option(self, name:'object'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the current value of an export option supplied by `_get_export_options`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = None
    _ret = self._ptr.call_with_return(96,tuple([py_stringname_name._ptr]))
    return _ret


  @functools.native_method
  def get_export_preset(self) -> typing.Union['py4godot_editorexportpreset.EditorExportPreset']:
    r'''
				Returns currently used export preset.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: EditorExportPreset
    _ret._ptr = self._ptr.call_with_return(97,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_export_platform(self) -> typing.Any:
    r'''
				Returns currently used export platform.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: EditorExportPlatform
    _ret._ptr = self._ptr.call_with_return(98,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('EditorExportPlugin', EditorExportPlugin.cast)
register_class('EditorExportPlugin', EditorExportPlugin)
