# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
  import py4godot.classes.intTypedArray as py4godot_inttypedarray 
import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.intTypedArray as py4godot_inttypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPPhysicsTestMotionParameters2DWrapper


class PhysicsTestMotionParameters2D(py4godot_refcounted.RefCounted):
  r'''
		By changing various properties of this object, such as the motion, you can configure the parameters for `PhysicsServer2D.body_test_motion`.
	'''

  @staticmethod
  def constructor():
    class_ = PhysicsTestMotionParameters2D.construct_without_init()
    class_._ptr = constructor(613,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PhysicsTestMotionParameters2D.construct_without_init()
    class_._ptr = constructor(613,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPhysicsTestMotionParameters2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(613,0, ())


  def generate_wrapper(self):
    return CPPPhysicsTestMotionParameters2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsTestMotionParameters2D.__new__(PhysicsTestMotionParameters2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsTestMotionParameters2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsTestMotionParameters2D.construct_without_init()
    cls._ptr = CPPPhysicsTestMotionParameters2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsTestMotionParameters2D.construct_without_init()
    cls._ptr = CPPPhysicsTestMotionParameters2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def from_(self) -> typing.Union['Transform2D']:
    r''''''
    _ret = self. get_from()
    return _ret
  @from_.setter
  def from_(self,  value:'Transform2D'):
    self.set_from(value)
  @property
  def motion(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_motion()
    return _ret
  @motion.setter
  def motion(self,  value:'Vector2'):
    self.set_motion(value)
  @property
  def margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_margin()
    return _ret
  @margin.setter
  def margin(self,  value:'float'):
    self.set_margin(value)
  @property
  def collide_separation_ray(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_collide_separation_ray_enabled()
    return _ret
  @collide_separation_ray.setter
  def collide_separation_ray(self,  value:'bool'):
    self.set_collide_separation_ray_enabled(value)
  @property
  def exclude_bodies(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''
    _ret = self. get_exclude_bodies()
    return _ret
  @exclude_bodies.setter
  def exclude_bodies(self, value:'Array'):
    self.set_exclude_bodies(value)
  @property
  def exclude_objects(self) -> typing.Union['Array']:
    r''''''
    _ret = self. get_exclude_objects()
    return _ret
  @exclude_objects.setter
  def exclude_objects(self,  value:'Array'):
    self.set_exclude_objects(value)
  @property
  def recovery_as_collision(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_recovery_as_collision_enabled()
    return _ret
  @recovery_as_collision.setter
  def recovery_as_collision(self,  value:'bool'):
    self.set_recovery_as_collision_enabled(value)
  @functools.native_method
  def get_from(self) -> typing.Union['Transform2D']:
    r''''''




    _ret = Transform2D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))

    return _ret


  @functools.native_method
  def set_from(self, from_:'Transform2D'   ) -> None:
    r''''''

    assert(not from_ is None)
    assert isinstance(from_, Transform2D), 'from_ must be Transform2D'

    self.py__from = from_






    self._ptr.call_with_return(54,tuple([from_._ptr]))

  @functools.native_method
  def get_motion(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))

    return _ret


  @functools.native_method
  def set_motion(self, motion:'Vector2'   ) -> None:
    r''''''

    assert(not motion is None)
    assert isinstance(motion, Vector2), 'motion must be Vector2'

    self.py__motion = motion






    self._ptr.call_with_return(56,tuple([motion._ptr]))

  @functools.native_method
  def get_margin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))

    return _ret


  @functools.native_method
  def set_margin(self, margin:'float'   ) -> None:
    r''''''

    assert isinstance(margin, (int, float)), 'margin must be int or float'

    self.py__margin = margin






    self._ptr.call_with_return(58,tuple([margin]))

  @functools.native_method
  def is_collide_separation_ray_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([]))

    return _ret


  @functools.native_method
  def set_collide_separation_ray_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__collide_separation_ray = enabled






    self._ptr.call_with_return(60,tuple([enabled]))

  @functools.native_method
  def get_exclude_bodies(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''




    _ret = py4godot_ridtypedarray.RIDTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(61,tuple([]))

    return _ret


  @functools.native_method
  def set_exclude_bodies(self, exclude_list:'py4godot_ridtypedarray.RIDTypedArray'   ) -> None:
    r''''''

    assert isinstance(exclude_list, get_class('RIDTypedArray')), 'exclude_list must be RIDTypedArray'

    self.py__exclude_bodies = exclude_list






    self._ptr.call_with_return(62,tuple([exclude_list._ptr]))

  @functools.native_method
  def get_exclude_objects(self) -> typing.Union['py4godot_inttypedarray.intTypedArray']:
    r''''''




    _ret = py4godot_inttypedarray.intTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(63,tuple([]))

    return _ret


  @functools.native_method
  def set_exclude_objects(self, exclude_list:'py4godot_inttypedarray.intTypedArray'   ) -> None:
    r''''''

    assert isinstance(exclude_list, get_class('intTypedArray')), 'exclude_list must be intTypedArray'

    self.py__exclude_objects = exclude_list






    self._ptr.call_with_return(64,tuple([exclude_list._ptr]))

  @functools.native_method
  def is_recovery_as_collision_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(65,tuple([]))

    return _ret


  @functools.native_method
  def set_recovery_as_collision_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__recovery_as_collision = enabled






    self._ptr.call_with_return(66,tuple([enabled]))


register_cast_function('PhysicsTestMotionParameters2D', PhysicsTestMotionParameters2D.cast)
register_class('PhysicsTestMotionParameters2D', PhysicsTestMotionParameters2D)
