# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node as py4godot_node 
from py4godot.wrappers.wrappers import CPPShaderGlobalsOverrideWrapper


class ShaderGlobalsOverride(py4godot_node.Node):
  r'''
		Similar to how a `WorldEnvironment` node can be used to override the environment while a specific scene is loaded, `ShaderGlobalsOverride` can be used to override global shader parameters temporarily. Once the node is removed, the project-wide values for the global shader parameters are restored. See the `RenderingServer` `global_shader_parameter_*` methods for more information.
		**Note:** Only one `ShaderGlobalsOverride` can be used per scene. If there is more than one `ShaderGlobalsOverride` node in the scene tree, only the first node (in tree order) will be taken into account.
		**Note:** All `ShaderGlobalsOverride` nodes are made part of a `"shader_overrides_group"` group when they are added to the scene tree. The currently active `ShaderGlobalsOverride` node also has a `"shader_overrides_group_active"` group added to it. You can use this to check which `ShaderGlobalsOverride` node is currently active.
	'''

  @staticmethod
  def constructor():
    class_ = ShaderGlobalsOverride.construct_without_init()
    class_._ptr = constructor(737,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ShaderGlobalsOverride.construct_without_init()
    class_._ptr = constructor(737,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPShaderGlobalsOverrideWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(737,0, ())


  def generate_wrapper(self):
    return CPPShaderGlobalsOverrideWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ShaderGlobalsOverride.__new__(ShaderGlobalsOverride)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ShaderGlobalsOverride'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ShaderGlobalsOverride.construct_without_init()
    cls._ptr = CPPShaderGlobalsOverrideWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ShaderGlobalsOverride.construct_without_init()
    cls._ptr = CPPShaderGlobalsOverrideWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('ShaderGlobalsOverride', ShaderGlobalsOverride.cast)
register_class('ShaderGlobalsOverride', ShaderGlobalsOverride)
