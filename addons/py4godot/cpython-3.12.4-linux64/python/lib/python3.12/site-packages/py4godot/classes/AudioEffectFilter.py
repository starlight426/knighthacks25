# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AudioEffectLowShelfFilter as py4godot_audioeffectlowshelffilter 
  import py4godot.classes.AudioEffectBandLimitFilter as py4godot_audioeffectbandlimitfilter 
  import py4godot.classes.AudioEffectLowPassFilter as py4godot_audioeffectlowpassfilter 
  import py4godot.classes.AudioEffectHighPassFilter as py4godot_audioeffecthighpassfilter 
  import py4godot.classes.AudioEffectHighShelfFilter as py4godot_audioeffecthighshelffilter 
  import py4godot.classes.AudioEffectNotchFilter as py4godot_audioeffectnotchfilter 
  import py4godot.classes.AudioEffectBandPassFilter as py4godot_audioeffectbandpassfilter 
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectFilterWrapper

class FilterDB:
  FILTER_6DB = 0
  FILTER_12DB = 1
  FILTER_18DB = 2
  FILTER_24DB = 3


class AudioEffectFilter(py4godot_audioeffect.AudioEffect):
  r'''
		Allows frequencies other than the `cutoff_hz` to pass.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectFilter.construct_without_init()
    class_._ptr = constructor(118,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectFilter.construct_without_init()
    class_._ptr = constructor(118,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectFilterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(118,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectFilterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectFilter.__new__(AudioEffectFilter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectFilter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectFilter.construct_without_init()
    cls._ptr = CPPAudioEffectFilterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectFilter.construct_without_init()
    cls._ptr = CPPAudioEffectFilterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def cutoff_hz(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_cutoff()
    return _ret
  @cutoff_hz.setter
  def cutoff_hz(self,  value:'float'):
    self.set_cutoff(value)
  @property
  def resonance(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_resonance()
    return _ret
  @resonance.setter
  def resonance(self,  value:'float'):
    self.set_resonance(value)
  @property
  def gain(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_gain()
    return _ret
  @gain.setter
  def gain(self,  value:'float'):
    self.set_gain(value)
  @property
  def db(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_db()
    return _ret
  @db.setter
  def db(self,  value:'int'):
    self.set_db(value)
  @functools.native_method
  def set_cutoff(self, freq:'float'   ) -> None:
    r''''''

    assert isinstance(freq, (int, float)), 'freq must be int or float'

    self.py__cutoff_hz = freq






    self._ptr.call_with_return(78,tuple([freq]))

  @functools.native_method
  def get_cutoff(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_resonance(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__resonance = amount






    self._ptr.call_with_return(80,tuple([amount]))

  @functools.native_method
  def get_resonance(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_gain(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__gain = amount






    self._ptr.call_with_return(82,tuple([amount]))

  @functools.native_method
  def get_gain(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_db(self, amount:'int'  ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__db = amount






    self._ptr.call_with_return(84,tuple([amount]))

  @functools.native_method
  def get_db(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret



register_cast_function('AudioEffectFilter', AudioEffectFilter.cast)
register_class('AudioEffectFilter', AudioEffectFilter)
