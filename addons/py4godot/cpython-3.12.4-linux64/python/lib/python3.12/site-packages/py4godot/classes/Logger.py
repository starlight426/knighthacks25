# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ScriptBacktraceTypedArray as py4godot_scriptbacktracetypedarray 
import py4godot.classes.ScriptBacktraceTypedArray as py4godot_scriptbacktracetypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPLoggerWrapper

class ErrorType:
  ERROR_TYPE_ERROR = 0
  ERROR_TYPE_WARNING = 1
  ERROR_TYPE_SCRIPT = 2
  ERROR_TYPE_SHADER = 3


class Logger(py4godot_refcounted.RefCounted):
  r'''
		Custom logger to receive messages from the internal error/warning stream. Loggers are registered via `OS.add_logger`.
	'''

  @staticmethod
  def constructor():
    class_ = Logger.construct_without_init()
    class_._ptr = constructor(460,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Logger.construct_without_init()
    class_._ptr = constructor(460,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPLoggerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(460,0, ())


  def generate_wrapper(self):
    return CPPLoggerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Logger.__new__(Logger)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Logger'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Logger.construct_without_init()
    cls._ptr = CPPLoggerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Logger.construct_without_init()
    cls._ptr = CPPLoggerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _log_error(self, function:'str'   , file:'str'   , line:'int'   , code:'str'   , rationale:'str'   , editor_notify:'bool'   , error_type:'int'   , script_backtraces:'py4godot_scriptbacktracetypedarray.ScriptBacktraceTypedArray'   ) -> None:
    r'''
				Called when an error is logged. The error provides the `function`, `file`, and `line` that it originated from, as well as either the `code` that generated the error or a `rationale`.
				The type of error provided by `error_type` is described in the `enum ErrorType` enumeration.
				Additionally, `script_backtraces` provides backtraces for each of the script languages. These will only contain stack frames in editor builds and debug builds by default. To enable them for release builds as well, you need to enable `ProjectSettings.debug/settings/gdscript/always_track_call_stacks`.
				**Warning:** This method will be called from threads other than the main thread, possibly at the same time, so you will need to have some kind of thread-safety in your implementation of it, like a `Mutex`.
				**Note:** `script_backtraces` will not contain any captured variables, due to its prohibitively high cost. To get those you will need to capture the backtraces yourself, from within the `Logger` virtual methods, using `Engine.capture_script_backtraces`.
			'''

    assert(not function is None)
    assert isinstance(function, (str, String)), 'function must be str or String'
    assert(not file is None)
    assert isinstance(file, (str, String)), 'file must be str or String'
    assert isinstance(line, (int, float)), 'line must be int or float'
    assert(not code is None)
    assert isinstance(code, (str, String)), 'code must be str or String'
    assert(not rationale is None)
    assert isinstance(rationale, (str, String)), 'rationale must be str or String'
    assert isinstance(editor_notify, bool), 'editor_notify must be bool'
    assert isinstance(error_type, (int, float)), 'error_type must be int or float'
    assert isinstance(script_backtraces, get_class('ScriptBacktraceTypedArray')), 'script_backtraces must be ScriptBacktraceTypedArray'




    assert(isinstance(function, (str, String)))
    py_string_function = function if isinstance(function, StringName) else c_utils.py_string_to_string(function)
    assert(isinstance(file, (str, String)))
    py_string_file = file if isinstance(file, StringName) else c_utils.py_string_to_string(file)

    assert(isinstance(code, (str, String)))
    py_string_code = code if isinstance(code, StringName) else c_utils.py_string_to_string(code)
    assert(isinstance(rationale, (str, String)))
    py_string_rationale = rationale if isinstance(rationale, StringName) else c_utils.py_string_to_string(rationale)




    self._ptr.call_with_return(53,tuple([py_string_function._ptr, py_string_file._ptr, line, py_string_code._ptr, py_string_rationale._ptr, editor_notify, error_type, script_backtraces._ptr]))

  @functools.native_method
  def _log_message(self, message:'str'   , error:'bool'   ) -> None:
    r'''
				Called when a message is logged. If `error` is `true`, then this message was meant to be sent to `stderr`.
				**Warning:** This method will be called from threads other than the main thread, possibly at the same time, so you will need to have some kind of thread-safety in your implementation of it, like a `Mutex`.
			'''

    assert(not message is None)
    assert isinstance(message, (str, String)), 'message must be str or String'
    assert isinstance(error, bool), 'error must be bool'




    assert(isinstance(message, (str, String)))
    py_string_message = message if isinstance(message, StringName) else c_utils.py_string_to_string(message)


    self._ptr.call_with_return(54,tuple([py_string_message._ptr, error]))


register_cast_function('Logger', Logger.cast)
register_class('Logger', Logger)
