# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Expression as py4godot_expression 
  import py4godot.classes.PackedStringArrayTypedArray as py4godot_packedstringarraytypedarray 
  import py4godot.classes.GLTFAccessor as py4godot_gltfaccessor 
  import py4godot.classes.NodePathTypedArray as py4godot_nodepathtypedarray 
import py4godot.classes.PackedStringArrayTypedArray as py4godot_packedstringarraytypedarray 
import py4godot.classes.NodePathTypedArray as py4godot_nodepathtypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPGLTFObjectModelPropertyWrapper

class GLTFObjectModelType:
  GLTF_OBJECT_MODEL_TYPE_UNKNOWN = 0
  GLTF_OBJECT_MODEL_TYPE_BOOL = 1
  GLTF_OBJECT_MODEL_TYPE_FLOAT = 2
  GLTF_OBJECT_MODEL_TYPE_FLOAT_ARRAY = 3
  GLTF_OBJECT_MODEL_TYPE_FLOAT2 = 4
  GLTF_OBJECT_MODEL_TYPE_FLOAT3 = 5
  GLTF_OBJECT_MODEL_TYPE_FLOAT4 = 6
  GLTF_OBJECT_MODEL_TYPE_FLOAT2X2 = 7
  GLTF_OBJECT_MODEL_TYPE_FLOAT3X3 = 8
  GLTF_OBJECT_MODEL_TYPE_FLOAT4X4 = 9
  GLTF_OBJECT_MODEL_TYPE_INT = 10


class GLTFObjectModelProperty(py4godot_refcounted.RefCounted):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFObjectModelProperty.construct_without_init()
    class_._ptr = constructor(355,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFObjectModelProperty.construct_without_init()
    class_._ptr = constructor(355,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFObjectModelPropertyWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(355,0, ())


  def generate_wrapper(self):
    return CPPGLTFObjectModelPropertyWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFObjectModelProperty.__new__(GLTFObjectModelProperty)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFObjectModelProperty'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFObjectModelProperty.construct_without_init()
    cls._ptr = CPPGLTFObjectModelPropertyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFObjectModelProperty.construct_without_init()
    cls._ptr = CPPGLTFObjectModelPropertyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def gltf_to_godot_expression(self) -> typing.Union['py4godot_expression.Expression']:
    r''''''
    _ret = self. get_gltf_to_godot_expression()
    return _ret
  @gltf_to_godot_expression.setter
  def gltf_to_godot_expression(self,  value:'py4godot_object.Object'):
    self.set_gltf_to_godot_expression(value)
  @property
  def godot_to_gltf_expression(self) -> typing.Union['py4godot_expression.Expression']:
    r''''''
    _ret = self. get_godot_to_gltf_expression()
    return _ret
  @godot_to_gltf_expression.setter
  def godot_to_gltf_expression(self,  value:'py4godot_object.Object'):
    self.set_godot_to_gltf_expression(value)
  @property
  def node_paths(self) -> typing.Union['Array']:
    r''''''
    _ret = self. get_node_paths()
    return _ret
  @node_paths.setter
  def node_paths(self,  value:'Array'):
    self.set_node_paths(value)
  @property
  def object_model_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_object_model_type()
    return _ret
  @object_model_type.setter
  def object_model_type(self,  value:'int'):
    self.set_object_model_type(value)
  @property
  def json_pointers(self) -> typing.Union['PackedStringArray']:
    r''''''
    _ret = self. get_json_pointers()
    return _ret
  @json_pointers.setter
  def json_pointers(self,  value:'PackedStringArray'):
    self.set_json_pointers(value)
  @property
  def variant_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_variant_type()
    return _ret
  @variant_type.setter
  def variant_type(self,  value:'int'):
    self.set_variant_type(value)
  @functools.native_method
  def append_node_path(self, node_path:'object'   ) -> None:
    r''''''

    assert(not node_path is None)
    assert isinstance(node_path, (str, NodePath)), 'node_path must be str or NodePath'




    assert(isinstance(node_path, (str, NodePath)))
    py_nodepath_node_path = node_path if isinstance(node_path,NodePath) else NodePath.new2(node_path)

    self._ptr.call_with_return(53,tuple([py_nodepath_node_path._ptr]))

  @functools.native_method
  def append_path_to_property(self, node_path:'object'   , prop_name:'object'   ) -> None:
    r''''''

    assert(not node_path is None)
    assert isinstance(node_path, (str, NodePath)), 'node_path must be str or NodePath'
    assert(not prop_name is None)
    assert isinstance(prop_name, (str, StringName)), 'prop_name must be str or StringName'




    assert(isinstance(node_path, (str, NodePath)))
    py_nodepath_node_path = node_path if isinstance(node_path,NodePath) else NodePath.new2(node_path)
    assert(isinstance(prop_name, (str, StringName)))
    py_stringname_prop_name = prop_name if isinstance(prop_name, StringName) else c_utils.py_string_to_string_name(prop_name)

    self._ptr.call_with_return(54,tuple([py_nodepath_node_path._ptr, py_stringname_prop_name._ptr]))

  @functools.native_method
  def get_accessor_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def get_gltf_to_godot_expression(self) -> typing.Union['py4godot_expression.Expression']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Expression
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_gltf_to_godot_expression(self, gltf_to_godot_expr:'py4godot_expression.Expression'   ) -> None:
    r''''''

    assert(not gltf_to_godot_expr is None)
    assert isinstance(gltf_to_godot_expr, get_class('Expression')), 'gltf_to_godot_expr must be Expression'

    self.py__gltf_to_godot_expression = gltf_to_godot_expr






    self._ptr.call_with_return(57,tuple([gltf_to_godot_expr._ptr]))

  @functools.native_method
  def get_godot_to_gltf_expression(self) -> typing.Union['py4godot_expression.Expression']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Expression
    _ret._ptr = self._ptr.call_with_return(58,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_godot_to_gltf_expression(self, godot_to_gltf_expr:'py4godot_expression.Expression'   ) -> None:
    r''''''

    assert(not godot_to_gltf_expr is None)
    assert isinstance(godot_to_gltf_expr, get_class('Expression')), 'godot_to_gltf_expr must be Expression'

    self.py__godot_to_gltf_expression = godot_to_gltf_expr






    self._ptr.call_with_return(59,tuple([godot_to_gltf_expr._ptr]))

  @functools.native_method
  def get_node_paths(self) -> typing.Union['py4godot_nodepathtypedarray.NodePathTypedArray']:
    r''''''




    _ret = py4godot_nodepathtypedarray.NodePathTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def has_node_paths(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(61,tuple([]))
    return _ret


  @functools.native_method
  def set_node_paths(self, node_paths:'py4godot_nodepathtypedarray.NodePathTypedArray'   ) -> None:
    r''''''

    assert isinstance(node_paths, get_class('NodePathTypedArray')), 'node_paths must be NodePathTypedArray'

    self.py__node_paths = node_paths






    self._ptr.call_with_return(62,tuple([node_paths._ptr]))

  @functools.native_method
  def get_object_model_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([]))

    return _ret


  @functools.native_method
  def set_object_model_type(self, type:'int'  ) -> None:
    r''''''

    assert isinstance(type, (int, float)), 'type must be int or float'

    self.py__object_model_type = type






    self._ptr.call_with_return(64,tuple([type]))

  @functools.native_method
  def get_json_pointers(self) -> typing.Union['py4godot_packedstringarraytypedarray.PackedStringArrayTypedArray']:
    r''''''




    _ret = py4godot_packedstringarraytypedarray.PackedStringArrayTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(65,tuple([]))

    return _ret


  @functools.native_method
  def has_json_pointers(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([]))
    return _ret


  @functools.native_method
  def set_json_pointers(self, json_pointers:'py4godot_packedstringarraytypedarray.PackedStringArrayTypedArray'   ) -> None:
    r''''''

    assert isinstance(json_pointers, get_class('PackedStringArrayTypedArray')), 'json_pointers must be PackedStringArrayTypedArray'

    self.py__json_pointers = json_pointers






    self._ptr.call_with_return(67,tuple([json_pointers._ptr]))

  @functools.native_method
  def get_variant_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(68,tuple([]))

    return _ret


  @functools.native_method
  def set_variant_type(self, variant_type:'int'  ) -> None:
    r''''''

    assert isinstance(variant_type, (int, float)), 'variant_type must be int or float'

    self.py__variant_type = variant_type






    self._ptr.call_with_return(69,tuple([variant_type]))

  @functools.native_method
  def set_types(self, variant_type:'int'  , obj_model_type:'int'  ) -> None:
    r''''''

    assert isinstance(variant_type, (int, float)), 'variant_type must be int or float'
    assert isinstance(obj_model_type, (int, float)), 'obj_model_type must be int or float'







    self._ptr.call_with_return(70,tuple([variant_type, obj_model_type]))


register_cast_function('GLTFObjectModelProperty', GLTFObjectModelProperty.cast)
register_class('GLTFObjectModelProperty', GLTFObjectModelProperty)
