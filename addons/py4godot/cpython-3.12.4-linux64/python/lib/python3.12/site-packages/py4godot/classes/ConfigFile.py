# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPConfigFileWrapper


class ConfigFile(py4godot_refcounted.RefCounted):
  r'''
		This helper class can be used to store `Variant` values on the filesystem using INI-style formatting. The stored values are identified by a section and a key:
		`codeblock lang=text`
		`section`
		some_key=42
		string_example="Hello World3D!"
		a_vector=Vector3(1, 0, 2)
		```
		The stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.
		The following example shows how to create a simple `ConfigFile` and save it on disc:
		
		```gdscript
		# Create new ConfigFile object.
		var config = ConfigFile.new()

		# Store some values.
		config.set_value("Player1", "player_name", "Steve")
		config.set_value("Player1", "best_score", 10)
		config.set_value("Player2", "player_name", "V3geta")
		config.set_value("Player2", "best_score", 9001)

		# Save it to a file (overwrite if already exists).
		config.save("user://scores.cfg")
		```
		
		
		This example shows how the above file could be loaded:
		
		```gdscript
		var score_data = {}
		var config = ConfigFile.new()

		# Load data from a file.
		var err = config.load("user://scores.cfg")

		# If the file didn't load, ignore it.
		if err != OK:
			return

		# Iterate over all sections.
		for player in config.get_sections():
			# Fetch the data for each section.
			var player_name = config.get_value(player, "player_name")
			var player_score = config.get_value(player, "best_score")
			score_data`player_name` = player_score
		```
		
		
		Any operation that mutates the ConfigFile such as `set_value`, `clear`, or `erase_section`, only changes what is loaded in memory. If you want to write the change to a file, you have to save the changes with `save`, `save_encrypted`, or `save_encrypted_pass`.
		Keep in mind that section and property names can't contain spaces. Anything after a space will be ignored on save and on load.
		ConfigFiles can also contain manually written comment lines starting with a semicolon (`;`). Those lines will be ignored when parsing the file. Note that comments will be lost when saving the ConfigFile. This can still be useful for dedicated server configuration files, which are typically never overwritten without explicit user action.
		**Note:** The file extension given to a ConfigFile does not have any impact on its formatting or behavior. By convention, the `.cfg` extension is used here, but any other extension such as `.ini` is also valid. Since neither `.cfg` nor `.ini` are standardized, Godot's ConfigFile formatting may differ from files written by other programs.
	'''

  @staticmethod
  def constructor():
    class_ = ConfigFile.construct_without_init()
    class_._ptr = constructor(236,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ConfigFile.construct_without_init()
    class_._ptr = constructor(236,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPConfigFileWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(236,0, ())


  def generate_wrapper(self):
    return CPPConfigFileWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ConfigFile.__new__(ConfigFile)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ConfigFile'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConfigFile.construct_without_init()
    cls._ptr = CPPConfigFileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConfigFile.construct_without_init()
    cls._ptr = CPPConfigFileWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_value(self, section:'str'   , key:'str'   , value:'object'   ) -> None:
    r'''
				Assigns a value to the specified key of the specified section. If either the section or the key do not exist, they are created. Passing a `null` value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed.
			'''

    assert(not section is None)
    assert isinstance(section, (str, String)), 'section must be str or String'
    assert(not key is None)
    assert isinstance(key, (str, String)), 'key must be str or String'
    




    assert(isinstance(section, (str, String)))
    py_string_section = section if isinstance(section, StringName) else c_utils.py_string_to_string(section)
    assert(isinstance(key, (str, String)))
    py_string_key = key if isinstance(key, StringName) else c_utils.py_string_to_string(key)


    self._ptr.call_with_return(53,tuple([py_string_section._ptr, py_string_key._ptr, value]))

  @functools.native_method
  def get_value(self, section:'str'   , key:'str'   , default:'object' =None  ) -> typing.Union[typing.Any]:
    r'''
				Returns the current value for the specified section and key. If either the section or the key do not exist, the method returns the fallback `default` value. If `default` is not specified or set to `null`, an error is also raised.
			'''



    assert(not section is None)
    assert isinstance(section, (str, String)), 'section must be str or String'
    assert(not key is None)
    assert isinstance(key, (str, String)), 'key must be str or String'
    




    assert(isinstance(section, (str, String)))
    py_string_section = section if isinstance(section, StringName) else c_utils.py_string_to_string(section)
    assert(isinstance(key, (str, String)))
    py_string_key = key if isinstance(key, StringName) else c_utils.py_string_to_string(key)


    _ret = None
    _ret = self._ptr.call_with_return(54,tuple([py_string_section._ptr, py_string_key._ptr, default]))
    return _ret


  @functools.native_method
  def has_section(self, section:'str'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the specified section exists.
			'''

    assert(not section is None)
    assert isinstance(section, (str, String)), 'section must be str or String'




    assert(isinstance(section, (str, String)))
    py_string_section = section if isinstance(section, StringName) else c_utils.py_string_to_string(section)

    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([py_string_section._ptr]))
    return _ret


  @functools.native_method
  def has_section_key(self, section:'str'   , key:'str'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the specified section-key pair exists.
			'''

    assert(not section is None)
    assert isinstance(section, (str, String)), 'section must be str or String'
    assert(not key is None)
    assert isinstance(key, (str, String)), 'key must be str or String'




    assert(isinstance(section, (str, String)))
    py_string_section = section if isinstance(section, StringName) else c_utils.py_string_to_string(section)
    assert(isinstance(key, (str, String)))
    py_string_key = key if isinstance(key, StringName) else c_utils.py_string_to_string(key)

    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([py_string_section._ptr, py_string_key._ptr]))
    return _ret


  @functools.native_method
  def get_sections(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns an array of all defined section identifiers.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(57,tuple([]))
    return _ret


  @functools.native_method
  def get_section_keys(self, section:'str'   ) -> typing.Union['PackedStringArray']:
    r'''
				Returns an array of all defined key identifiers in the specified section. Raises an error and returns an empty array if the section does not exist.
			'''

    assert(not section is None)
    assert isinstance(section, (str, String)), 'section must be str or String'




    assert(isinstance(section, (str, String)))
    py_string_section = section if isinstance(section, StringName) else c_utils.py_string_to_string(section)

    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([py_string_section._ptr]))
    return _ret


  @functools.native_method
  def erase_section(self, section:'str'   ) -> None:
    r'''
				Deletes the specified section along with all the key-value pairs inside. Raises an error if the section does not exist.
			'''

    assert(not section is None)
    assert isinstance(section, (str, String)), 'section must be str or String'




    assert(isinstance(section, (str, String)))
    py_string_section = section if isinstance(section, StringName) else c_utils.py_string_to_string(section)

    self._ptr.call_with_return(59,tuple([py_string_section._ptr]))

  @functools.native_method
  def erase_section_key(self, section:'str'   , key:'str'   ) -> None:
    r'''
				Deletes the specified key in a section. Raises an error if either the section or the key do not exist.
			'''

    assert(not section is None)
    assert isinstance(section, (str, String)), 'section must be str or String'
    assert(not key is None)
    assert isinstance(key, (str, String)), 'key must be str or String'




    assert(isinstance(section, (str, String)))
    py_string_section = section if isinstance(section, StringName) else c_utils.py_string_to_string(section)
    assert(isinstance(key, (str, String)))
    py_string_key = key if isinstance(key, StringName) else c_utils.py_string_to_string(key)

    self._ptr.call_with_return(60,tuple([py_string_section._ptr, py_string_key._ptr]))

  @functools.native_method
  def load(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Loads the config file specified as a parameter. The file's contents are parsed and loaded in the `ConfigFile` object which the method was called on.
				Returns `constant OK` on success, or one of the other `enum Error` values if the operation failed.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def parse(self, data:'str'   ) -> typing.Union[int]:
    r'''
				Parses the passed string as the contents of a config file. The string is parsed and loaded in the ConfigFile object which the method was called on.
				Returns `constant OK` on success, or one of the other `enum Error` values if the operation failed.
			'''

    assert(not data is None)
    assert isinstance(data, (str, String)), 'data must be str or String'




    assert(isinstance(data, (str, String)))
    py_string_data = data if isinstance(data, StringName) else c_utils.py_string_to_string(data)

    _ret:int
    _ret = self._ptr.call_with_return(62,tuple([py_string_data._ptr]))
    return _ret


  @functools.native_method
  def save(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Saves the contents of the `ConfigFile` object to the file specified as a parameter. The output file uses an INI-style structure.
				Returns `constant OK` on success, or one of the other `enum Error` values if the operation failed.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def encode_to_text(self) -> typing.Union[str]:
    r'''
				Obtain the text version of this config file (the same text that would be written to a file).
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(64,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def load_encrypted(self, path:'str'   , key:'PackedByteArray'   ) -> typing.Union[int]:
    r'''
				Loads the encrypted config file specified as a parameter, using the provided `key` to decrypt it. The file's contents are parsed and loaded in the `ConfigFile` object which the method was called on.
				Returns `constant OK` on success, or one of the other `enum Error` values if the operation failed.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not key is None)
    assert isinstance(key, PackedByteArray), 'key must be PackedByteArray'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret:int
    _ret = self._ptr.call_with_return(65,tuple([py_string_path._ptr, key._ptr]))
    return _ret


  @functools.native_method
  def load_encrypted_pass(self, path:'str'   , password:'str'   ) -> typing.Union[int]:
    r'''
				Loads the encrypted config file specified as a parameter, using the provided `password` to decrypt it. The file's contents are parsed and loaded in the `ConfigFile` object which the method was called on.
				Returns `constant OK` on success, or one of the other `enum Error` values if the operation failed.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not password is None)
    assert isinstance(password, (str, String)), 'password must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)
    assert(isinstance(password, (str, String)))
    py_string_password = password if isinstance(password, StringName) else c_utils.py_string_to_string(password)

    _ret:int
    _ret = self._ptr.call_with_return(66,tuple([py_string_path._ptr, py_string_password._ptr]))
    return _ret


  @functools.native_method
  def save_encrypted(self, path:'str'   , key:'PackedByteArray'   ) -> typing.Union[int]:
    r'''
				Saves the contents of the `ConfigFile` object to the AES-256 encrypted file specified as a parameter, using the provided `key` to encrypt it. The output file uses an INI-style structure.
				Returns `constant OK` on success, or one of the other `enum Error` values if the operation failed.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not key is None)
    assert isinstance(key, PackedByteArray), 'key must be PackedByteArray'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret:int
    _ret = self._ptr.call_with_return(67,tuple([py_string_path._ptr, key._ptr]))
    return _ret


  @functools.native_method
  def save_encrypted_pass(self, path:'str'   , password:'str'   ) -> typing.Union[int]:
    r'''
				Saves the contents of the `ConfigFile` object to the AES-256 encrypted file specified as a parameter, using the provided `password` to encrypt it. The output file uses an INI-style structure.
				Returns `constant OK` on success, or one of the other `enum Error` values if the operation failed.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not password is None)
    assert isinstance(password, (str, String)), 'password must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)
    assert(isinstance(password, (str, String)))
    py_string_password = password if isinstance(password, StringName) else c_utils.py_string_to_string(password)

    _ret:int
    _ret = self._ptr.call_with_return(68,tuple([py_string_path._ptr, py_string_password._ptr]))
    return _ret


  @functools.native_method
  def clear(self) -> None:
    r'''
				Removes the entire contents of the config.
			'''




    self._ptr.call_with_return(69,tuple([]))


register_cast_function('ConfigFile', ConfigFile.cast)
register_class('ConfigFile', ConfigFile)
