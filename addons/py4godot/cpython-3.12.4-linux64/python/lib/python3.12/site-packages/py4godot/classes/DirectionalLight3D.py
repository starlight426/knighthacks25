# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Light3D as py4godot_light3d 
from py4godot.wrappers.wrappers import CPPDirectionalLight3DWrapper

class ShadowMode:
  SHADOW_ORTHOGONAL = 0
  SHADOW_PARALLEL_2_SPLITS = 1
  SHADOW_PARALLEL_4_SPLITS = 2
class SkyMode:
  SKY_MODE_LIGHT_AND_SKY = 0
  SKY_MODE_LIGHT_ONLY = 1
  SKY_MODE_SKY_ONLY = 2


class DirectionalLight3D(py4godot_light3d.Light3D):
  r'''
		A directional light is a type of `Light3D` node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene to model sunlight or moonlight.
		Light is emitted in the -Z direction of the node's global basis. For an unrotated light, this means that the light is emitted forwards, illuminating the front side of a 3D model (see `constant Vector3.FORWARD` and `constant Vector3.MODEL_FRONT`). The position of the node is ignored; only the basis is used to determine light direction.
	'''

  @staticmethod
  def constructor():
    class_ = DirectionalLight3D.construct_without_init()
    class_._ptr = constructor(261,0, ())
    return class_
  @staticmethod
  def new():
    class_ = DirectionalLight3D.construct_without_init()
    class_._ptr = constructor(261,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPDirectionalLight3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(261,0, ())


  def generate_wrapper(self):
    return CPPDirectionalLight3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = DirectionalLight3D.__new__(DirectionalLight3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'DirectionalLight3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = DirectionalLight3D.construct_without_init()
    cls._ptr = CPPDirectionalLight3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = DirectionalLight3D.construct_without_init()
    cls._ptr = CPPDirectionalLight3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def directional_shadow_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_shadow_mode()
    return _ret
  @directional_shadow_mode.setter
  def directional_shadow_mode(self,  value:'int'):
    self.set_shadow_mode(value)
  @property
  def directional_shadow_split_1(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(10)
    return _ret
  @directional_shadow_split_1.setter
  def directional_shadow_split_1(self,  value:'float'):
    self.set_param(value)
  @property
  def directional_shadow_split_2(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(11)
    return _ret
  @directional_shadow_split_2.setter
  def directional_shadow_split_2(self,  value:'float'):
    self.set_param(value)
  @property
  def directional_shadow_split_3(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(12)
    return _ret
  @directional_shadow_split_3.setter
  def directional_shadow_split_3(self,  value:'float'):
    self.set_param(value)
  @property
  def directional_shadow_blend_splits(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_blend_splits_enabled()
    return _ret
  @directional_shadow_blend_splits.setter
  def directional_shadow_blend_splits(self,  value:'bool'):
    self.set_blend_splits(value)
  @property
  def directional_shadow_fade_start(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(13)
    return _ret
  @directional_shadow_fade_start.setter
  def directional_shadow_fade_start(self,  value:'float'):
    self.set_param(value)
  @property
  def directional_shadow_max_distance(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(9)
    return _ret
  @directional_shadow_max_distance.setter
  def directional_shadow_max_distance(self,  value:'float'):
    self.set_param(value)
  @property
  def directional_shadow_pancake_size(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(16)
    return _ret
  @directional_shadow_pancake_size.setter
  def directional_shadow_pancake_size(self,  value:'float'):
    self.set_param(value)
  @property
  def sky_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sky_mode()
    return _ret
  @sky_mode.setter
  def sky_mode(self,  value:'int'):
    self.set_sky_mode(value)
  @functools.native_method
  def set_shadow_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__directional_shadow_mode = mode






    self._ptr.call_with_return(295,tuple([mode]))

  @functools.native_method
  def get_shadow_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(296,tuple([]))

    return _ret


  @functools.native_method
  def set_blend_splits(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__directional_shadow_blend_splits = enabled






    self._ptr.call_with_return(297,tuple([enabled]))

  @functools.native_method
  def is_blend_splits_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(298,tuple([]))

    return _ret


  @functools.native_method
  def set_sky_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__sky_mode = mode






    self._ptr.call_with_return(299,tuple([mode]))

  @functools.native_method
  def get_sky_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(300,tuple([]))

    return _ret



register_cast_function('DirectionalLight3D', DirectionalLight3D.cast)
register_class('DirectionalLight3D', DirectionalLight3D)
