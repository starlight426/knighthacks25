# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CameraAttributesPhysical as py4godot_cameraattributesphysical 
  import py4godot.classes.VoxelGIData as py4godot_voxelgidata 
  import py4godot.classes.Node as py4godot_node 
  import py4godot.classes.CameraAttributes as py4godot_cameraattributes 
  import py4godot.classes.CameraAttributesPractical as py4godot_cameraattributespractical 
import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
from py4godot.wrappers.wrappers import CPPVoxelGIWrapper

class Subdiv:
  SUBDIV_64 = 0
  SUBDIV_128 = 1
  SUBDIV_256 = 2
  SUBDIV_512 = 3
  SUBDIV_MAX = 4


class VoxelGI(py4godot_visualinstance3d.VisualInstance3D):
  r'''
		`VoxelGI`s are used to provide high-quality real-time indirect light and reflections to scenes. They precompute the effect of objects that emit light and the effect of static geometry to simulate the behavior of complex light in real-time. `VoxelGI`s need to be baked before having a visible effect. However, once baked, dynamic objects will receive light from them. Furthermore, lights can be fully dynamic or baked.
		**Note:** `VoxelGI` is only supported in the Forward+ rendering method, not Mobile or Compatibility.
		**Procedural generation:** `VoxelGI` can be baked in an exported project, which makes it suitable for procedurally generated or user-built levels as long as all the geometry is generated in advance. For games where geometry is generated at any time during gameplay, SDFGI is more suitable (see `Environment.sdfgi_enabled`).
		**Performance:** `VoxelGI` is relatively demanding on the GPU and is not suited to low-end hardware such as integrated graphics (consider `LightmapGI` instead). To improve performance, adjust `ProjectSettings.rendering/global_illumination/voxel_gi/quality` and enable `ProjectSettings.rendering/global_illumination/gi/use_half_resolution` in the Project Settings. To provide a fallback for low-end hardware, consider adding an option to disable `VoxelGI` in your project's options menus. A `VoxelGI` node can be disabled by hiding it.
		**Note:** Meshes should have sufficiently thick walls to avoid light leaks (avoid one-sided walls). For interior levels, enclose your level geometry in a sufficiently large box and bridge the loops to close the mesh. To further prevent light leaks, you can also strategically place temporary `MeshInstance3D` nodes with their `GeometryInstance3D.gi_mode` set to `constant GeometryInstance3D.GI_MODE_STATIC`. These temporary nodes can then be hidden after baking the `VoxelGI` node.
	'''

  @staticmethod
  def constructor():
    class_ = VoxelGI.construct_without_init()
    class_._ptr = constructor(991,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VoxelGI.construct_without_init()
    class_._ptr = constructor(991,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVoxelGIWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(991,0, ())


  def generate_wrapper(self):
    return CPPVoxelGIWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VoxelGI.__new__(VoxelGI)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VoxelGI'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VoxelGI.construct_without_init()
    cls._ptr = CPPVoxelGIWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VoxelGI.construct_without_init()
    cls._ptr = CPPVoxelGIWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def subdiv(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_subdiv()
    return _ret
  @subdiv.setter
  def subdiv(self,  value:'int'):
    self.set_subdiv(value)
  @property
  def size(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector3'):
    self.set_size(value)
  @property
  def camera_attributes(self) -> typing.Union['py4godot_cameraattributespractical.CameraAttributesPractical']:
    r''''''
    _ret = self. get_camera_attributes()
    return _ret
  @camera_attributes.setter
  def camera_attributes(self,  value:'py4godot_object.Object'):
    self.set_camera_attributes(value)
  @property
  def data(self) -> typing.Union['py4godot_voxelgidata.VoxelGIData']:
    r''''''
    _ret = self. get_probe_data()
    return _ret
  @data.setter
  def data(self,  value:'py4godot_object.Object'):
    self.set_probe_data(value)
  @functools.native_method
  def set_probe_data(self, data:'py4godot_voxelgidata.VoxelGIData'   ) -> None:
    r''''''

    assert(not data is None)
    assert isinstance(data, get_class('VoxelGIData')), 'data must be VoxelGIData'

    self.py__data = data






    self._ptr.call_with_return(264,tuple([data._ptr]))

  @functools.native_method
  def get_probe_data(self) -> typing.Union['py4godot_voxelgidata.VoxelGIData']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: VoxelGIData
    _ret._ptr = self._ptr.call_with_return(265,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_subdiv(self, subdiv:'int'  ) -> None:
    r''''''

    assert isinstance(subdiv, (int, float)), 'subdiv must be int or float'

    self.py__subdiv = subdiv






    self._ptr.call_with_return(266,tuple([subdiv]))

  @functools.native_method
  def get_subdiv(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(267,tuple([]))

    return _ret


  @functools.native_method
  def set_size(self, size:'Vector3'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector3), 'size must be Vector3'

    self.py__size = size






    self._ptr.call_with_return(268,tuple([size._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(269,tuple([]))

    return _ret


  @functools.native_method
  def set_camera_attributes(self, camera_attributes:'py4godot_cameraattributes.CameraAttributes'   ) -> None:
    r''''''

    assert(not camera_attributes is None)
    assert isinstance(camera_attributes, get_class('CameraAttributes')), 'camera_attributes must be CameraAttributes'

    self.py__camera_attributes = camera_attributes






    self._ptr.call_with_return(270,tuple([camera_attributes._ptr]))

  @functools.native_method
  def get_camera_attributes(self) -> typing.Union['py4godot_cameraattributesphysical.CameraAttributesPhysical','py4godot_cameraattributes.CameraAttributes','py4godot_cameraattributespractical.CameraAttributesPractical']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: CameraAttributes
    _ret._ptr = self._ptr.call_with_return(271,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def bake(self, from_node:'py4godot_node.Node' = None  , create_visual_debug:'bool' =False  ) -> None:
    r'''
				Bakes the effect from all `GeometryInstance3D`s marked with `constant GeometryInstance3D.GI_MODE_STATIC` and `Light3D`s marked with either `constant Light3D.BAKE_STATIC` or `constant Light3D.BAKE_DYNAMIC`. If `create_visual_debug` is `true`, after baking the light, this will generate a `MultiMesh` that has a cube representing each solid cell with each cube colored to the cell's albedo color. This can be used to visualize the `VoxelGI`'s data and debug any issues that may be occurring.
				**Note:** `bake` works from the editor and in exported projects. This makes it suitable for procedurally generated or user-built levels. Baking a `VoxelGI` node generally takes from 5 to 20 seconds in most scenes. Reducing `subdiv` can speed up baking.
				**Note:** `GeometryInstance3D`s and `Light3D`s must be fully ready before `bake` is called. If you are procedurally creating those and some meshes or lights are missing from your baked `VoxelGI`, use `call_deferred("bake")` instead of calling `bake` directly.
			'''
    if from_node is None:
      from_node = c_utils.empty_object
    if from_node is None:
      from_node = c_utils.empty_object

    assert isinstance(create_visual_debug, bool), 'create_visual_debug must be bool'







    self._ptr.call_with_return(272,tuple([from_node._ptr, create_visual_debug]))

  @functools.native_method
  def debug_bake(self) -> None:
    r'''
				Calls `bake` with `create_visual_debug` enabled.
			'''




    self._ptr.call_with_return(273,tuple([]))


register_cast_function('VoxelGI', VoxelGI.cast)
register_class('VoxelGI', VoxelGI)
