# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Gradient as py4godot_gradient 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPGradientTexture1DWrapper


class GradientTexture1D(py4godot_texture2d.Texture2D):
  r'''
		A 1D texture that obtains colors from a `Gradient` to fill the texture data. The texture is filled by sampling the gradient for each pixel. Therefore, the texture does not necessarily represent an exact copy of the gradient, as it may miss some colors if there are not enough pixels. See also `GradientTexture2D`, `CurveTexture` and `CurveXYZTexture`.
	'''

  @staticmethod
  def constructor():
    class_ = GradientTexture1D.construct_without_init()
    class_._ptr = constructor(380,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GradientTexture1D.construct_without_init()
    class_._ptr = constructor(380,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGradientTexture1DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(380,0, ())


  def generate_wrapper(self):
    return CPPGradientTexture1DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GradientTexture1D.__new__(GradientTexture1D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GradientTexture1D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GradientTexture1D.construct_without_init()
    cls._ptr = CPPGradientTexture1DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GradientTexture1D.construct_without_init()
    cls._ptr = CPPGradientTexture1DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def gradient(self) -> typing.Union['py4godot_gradient.Gradient']:
    r''''''
    _ret = self. get_gradient()
    return _ret
  @gradient.setter
  def gradient(self,  value:'py4godot_object.Object'):
    self.set_gradient(value)
  @property
  def width(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_width()
    return _ret
  @width.setter
  def width(self,  value:'int'):
    self.set_width(value)
  @property
  def use_hdr(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_hdr()
    return _ret
  @use_hdr.setter
  def use_hdr(self,  value:'bool'):
    self.set_use_hdr(value)
  @functools.native_method
  def set_gradient(self, gradient:'py4godot_gradient.Gradient'   ) -> None:
    r''''''

    assert(not gradient is None)
    assert isinstance(gradient, get_class('Gradient')), 'gradient must be Gradient'

    self.py__gradient = gradient






    self._ptr.call_with_return(93,tuple([gradient._ptr]))

  @functools.native_method
  def get_gradient(self) -> typing.Union['py4godot_gradient.Gradient']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Gradient
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_width(self, width:'int'   ) -> None:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'

    self.py__width = width






    self._ptr.call_with_return(95,tuple([width]))

  @functools.native_method
  def set_use_hdr(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__use_hdr = enabled






    self._ptr.call_with_return(96,tuple([enabled]))

  @functools.native_method
  def is_using_hdr(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret



register_cast_function('GradientTexture1D', GradientTexture1D.cast)
register_class('GradientTexture1D', GradientTexture1D)
