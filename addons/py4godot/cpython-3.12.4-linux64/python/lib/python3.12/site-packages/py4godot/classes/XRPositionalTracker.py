# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.XRPose as py4godot_xrpose 
  import py4godot.classes.XRControllerTracker as py4godot_xrcontrollertracker 
  import py4godot.classes.XRHandTracker as py4godot_xrhandtracker 
  import py4godot.classes.XRBodyTracker as py4godot_xrbodytracker 
import py4godot.classes.XRTracker as py4godot_xrtracker 
from py4godot.wrappers.wrappers import CPPXRPositionalTrackerWrapper

class TrackerHand:
  TRACKER_HAND_UNKNOWN = 0
  TRACKER_HAND_LEFT = 1
  TRACKER_HAND_RIGHT = 2
  TRACKER_HAND_MAX = 3


class XRPositionalTracker(py4godot_xrtracker.XRTracker):
  r'''
		An instance of this object represents a device that is tracked, such as a controller or anchor point. HMDs aren't represented here as they are handled internally.
		As controllers are turned on and the `XRInterface` detects them, instances of this object are automatically added to this list of active tracking objects accessible through the `XRServer`.
		The `XRNode3D` and `XRAnchor3D` both consume objects of this type and should be used in your project. The positional trackers are just under-the-hood objects that make this all work. These are mostly exposed so that GDExtension-based interfaces can interact with them.
	'''

  @staticmethod
  def constructor():
    class_ = XRPositionalTracker.construct_without_init()
    class_._ptr = constructor(1026,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRPositionalTracker.construct_without_init()
    class_._ptr = constructor(1026,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRPositionalTrackerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1026,0, ())


  def generate_wrapper(self):
    return CPPXRPositionalTrackerWrapper()
  def init_signals(self):
    super().init_signals()
    pose_changed_name = utils.py_string_to_string_name("pose_changed")
    self.pose_changed = signals.BuiltinSignal(self, pose_changed_name)
    pose_lost_tracking_name = utils.py_string_to_string_name("pose_lost_tracking")
    self.pose_lost_tracking = signals.BuiltinSignal(self, pose_lost_tracking_name)
    button_pressed_name = utils.py_string_to_string_name("button_pressed")
    self.button_pressed = signals.BuiltinSignal(self, button_pressed_name)
    button_released_name = utils.py_string_to_string_name("button_released")
    self.button_released = signals.BuiltinSignal(self, button_released_name)
    input_float_changed_name = utils.py_string_to_string_name("input_float_changed")
    self.input_float_changed = signals.BuiltinSignal(self, input_float_changed_name)
    input_vector2_changed_name = utils.py_string_to_string_name("input_vector2_changed")
    self.input_vector2_changed = signals.BuiltinSignal(self, input_vector2_changed_name)
    profile_changed_name = utils.py_string_to_string_name("profile_changed")
    self.profile_changed = signals.BuiltinSignal(self, profile_changed_name)

  @staticmethod
  def construct_without_init():
    cls = XRPositionalTracker.__new__(XRPositionalTracker)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRPositionalTracker'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRPositionalTracker.construct_without_init()
    cls._ptr = CPPXRPositionalTrackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRPositionalTracker.construct_without_init()
    cls._ptr = CPPXRPositionalTrackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def profile(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_tracker_profile()
    return _ret
  @profile.setter
  def profile(self,  value:'str'):
    self.set_tracker_profile(value)
  @property
  def hand(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_tracker_hand()
    return _ret
  @hand.setter
  def hand(self,  value:'int'):
    self.set_tracker_hand(value)
  @functools.native_method
  def get_tracker_profile(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(59,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_tracker_profile(self, profile:'str'   ) -> None:
    r''''''

    assert(not profile is None)
    assert isinstance(profile, (str, String)), 'profile must be str or String'

    self.py__profile = profile



    assert(isinstance(profile, (str, String)))
    py_string_profile = profile if isinstance(profile, StringName) else c_utils.py_string_to_string(profile)

    py__string_profile = utils.py_string_to_string(profile)
    py__string_profile.shouldBeDeleted = False


    self._ptr.call_with_return(60,tuple([py__string_profile._ptr]))

  @functools.native_method
  def get_tracker_hand(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([]))

    return _ret


  @functools.native_method
  def set_tracker_hand(self, hand:'int'  ) -> None:
    r''''''

    assert isinstance(hand, (int, float)), 'hand must be int or float'

    self.py__hand = hand






    self._ptr.call_with_return(62,tuple([hand]))

  @functools.native_method
  def has_pose(self, name:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the tracker is available and is currently tracking the bound `name` pose.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = 0
    _ret = self._ptr.call_with_return(63,tuple([py_stringname_name._ptr]))
    return _ret


  @functools.native_method
  def get_pose(self, name:'object'   ) -> typing.Union['py4godot_xrpose.XRPose']:
    r'''
				Returns the current `XRPose` state object for the bound `name` pose.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: XRPose
    _ret._ptr = self._ptr.call_with_return(64,tuple([py_stringname_name._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def invalidate_pose(self, name:'object'   ) -> None:
    r'''
				Marks this pose as invalid, we don't clear the last reported state but it allows users to decide if trackers need to be hidden if we lose tracking or just remain at their last known position.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    self._ptr.call_with_return(65,tuple([py_stringname_name._ptr]))

  @functools.native_method
  def set_pose(self, name:'object'   , transform:'Transform3D'   , linear_velocity:'Vector3'   , angular_velocity:'Vector3'   , tracking_confidence:'int'  ) -> None:
    r'''
				Sets the transform, linear velocity, angular velocity and tracking confidence for the given pose. This method is called by an `XRInterface` implementation and should not be used directly.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not transform is None)
    assert isinstance(transform, Transform3D), 'transform must be Transform3D'
    assert(not linear_velocity is None)
    assert isinstance(linear_velocity, Vector3), 'linear_velocity must be Vector3'
    assert(not angular_velocity is None)
    assert isinstance(angular_velocity, Vector3), 'angular_velocity must be Vector3'
    assert isinstance(tracking_confidence, (int, float)), 'tracking_confidence must be int or float'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)





    self._ptr.call_with_return(66,tuple([py_stringname_name._ptr, transform._ptr, linear_velocity._ptr, angular_velocity._ptr, tracking_confidence]))

  @functools.native_method
  def get_input(self, name:'object'   ) -> typing.Union[typing.Any]:
    r'''
				Returns an input for this tracker. It can return a boolean, float or `Vector2` value depending on whether the input is a button, trigger or thumbstick/thumbpad.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = None
    _ret = self._ptr.call_with_return(67,tuple([py_stringname_name._ptr]))
    return _ret


  @functools.native_method
  def set_input(self, name:'object'   , value:'object'   ) -> None:
    r'''
				Changes the value for the given input. This method is called by an `XRInterface` implementation and should not be used directly.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)


    self._ptr.call_with_return(68,tuple([py_stringname_name._ptr, value]))


register_cast_function('XRPositionalTracker', XRPositionalTracker.cast)
register_class('XRPositionalTracker', XRPositionalTracker)
