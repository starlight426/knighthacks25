# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Occluder3D as py4godot_occluder3d 
from py4godot.wrappers.wrappers import CPPArrayOccluder3DWrapper


class ArrayOccluder3D(py4godot_occluder3d.Occluder3D):
  r'''
		`ArrayOccluder3D` stores an arbitrary 3D polygon shape that can be used by the engine's occlusion culling system. This is analogous to `ArrayMesh`, but for occluders.
		See `OccluderInstance3D`'s documentation for instructions on setting up occlusion culling.
	'''

  @staticmethod
  def constructor():
    class_ = ArrayOccluder3D.construct_without_init()
    class_._ptr = constructor(101,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ArrayOccluder3D.construct_without_init()
    class_._ptr = constructor(101,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPArrayOccluder3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(101,0, ())


  def generate_wrapper(self):
    return CPPArrayOccluder3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ArrayOccluder3D.__new__(ArrayOccluder3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ArrayOccluder3D'

  def __del__(self):
    pass
  def __setitem__(self,  index, value):
    self._ptr.call_with_return(83, (index, value))

  def __getitem__(self,  index):

    if index < 0:
      raise KeyError(f"Index '{index}' invalid")
    pyobject = self._ptr.call_with_return(82, (index,))
    return pyobject
  def __iter__(self):
    self._index = 0
    return self
  def __next__(self):
    if self._index >= self.size():
      raise StopIteration()
    val = self[self._index]
    self._index += 1
    return val

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ArrayOccluder3D.construct_without_init()
    cls._ptr = CPPArrayOccluder3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ArrayOccluder3D.construct_without_init()
    cls._ptr = CPPArrayOccluder3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def from_list(values):
    result = ArrayOccluder3D.new0()
    for value in values:
      result.push_back(value)
    return result

  def to_list(self):
    return [value for value in self]


  @property
  def vertices(self) -> typing.Union['PackedVector3Array']:
    r''''''
    _ret = self. get_vertices()
    return _ret
  @vertices.setter
  def vertices(self,  value:'PackedVector3Array'):
    self.set_vertices(value)
  @property
  def indices(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_indices()
    return _ret
  @indices.setter
  def indices(self,  value:'PackedInt32Array'):
    self.set_indices(value)
  @functools.native_method
  def set_arrays(self, vertices:'PackedVector3Array'   , indices:'PackedInt32Array'   ) -> None:
    r'''
				Sets `indices` and `vertices`, while updating the final occluder only once after both values are set.
			'''

    assert(not vertices is None)
    assert isinstance(vertices, PackedVector3Array), 'vertices must be PackedVector3Array'
    assert(not indices is None)
    assert isinstance(indices, PackedInt32Array), 'indices must be PackedInt32Array'







    self._ptr.call_with_return(79,tuple([vertices._ptr, indices._ptr]))

  @functools.native_method
  def set_vertices(self, vertices:'PackedVector3Array'   ) -> None:
    r''''''

    assert(not vertices is None)
    assert isinstance(vertices, PackedVector3Array), 'vertices must be PackedVector3Array'

    self.py__vertices = vertices






    self._ptr.call_with_return(80,tuple([vertices._ptr]))

  @functools.native_method
  def set_indices(self, indices:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not indices is None)
    assert isinstance(indices, PackedInt32Array), 'indices must be PackedInt32Array'

    self.py__indices = indices






    self._ptr.call_with_return(81,tuple([indices._ptr]))


register_cast_function('ArrayOccluder3D', ArrayOccluder3D.cast)
register_class('ArrayOccluder3D', ArrayOccluder3D)
