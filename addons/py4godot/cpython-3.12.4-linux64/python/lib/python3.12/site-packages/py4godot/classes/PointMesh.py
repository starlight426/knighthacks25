# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.PrimitiveMesh as py4godot_primitivemesh 
from py4godot.wrappers.wrappers import CPPPointMeshWrapper


class PointMesh(py4godot_primitivemesh.PrimitiveMesh):
  r'''
		A `PointMesh` is a primitive mesh composed of a single point. Instead of relying on triangles, points are rendered as a single rectangle on the screen with a constant size. They are intended to be used with particle systems, but can also be used as a cheap way to render billboarded sprites (for example in a point cloud).
		In order to be displayed, point meshes must be used with a material that has a point size. The point size can be accessed in a shader with the `POINT_SIZE` built-in, or in a `BaseMaterial3D` by setting the `BaseMaterial3D.use_point_size` and `BaseMaterial3D.point_size` properties.
		**Note:** When using point meshes, properties that normally affect vertices will be ignored, including `BaseMaterial3D.billboard_mode`, `BaseMaterial3D.grow`, and `BaseMaterial3D.cull_mode`.
	'''

  @staticmethod
  def constructor():
    class_ = PointMesh.construct_without_init()
    class_._ptr = constructor(629,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PointMesh.construct_without_init()
    class_._ptr = constructor(629,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPointMeshWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(629,0, ())


  def generate_wrapper(self):
    return CPPPointMeshWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PointMesh.__new__(PointMesh)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PointMesh'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PointMesh.construct_without_init()
    cls._ptr = CPPPointMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PointMesh.construct_without_init()
    cls._ptr = CPPPointMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('PointMesh', PointMesh.cast)
register_class('PointMesh', PointMesh)
