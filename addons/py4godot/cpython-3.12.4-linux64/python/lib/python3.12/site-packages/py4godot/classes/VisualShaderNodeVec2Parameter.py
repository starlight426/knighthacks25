# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNodeParameter as py4godot_visualshadernodeparameter 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeVec2ParameterWrapper


class VisualShaderNodeVec2Parameter(py4godot_visualshadernodeparameter.VisualShaderNodeParameter):
  r'''
		Translated to `uniform vec2` in the shader language.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeVec2Parameter.construct_without_init()
    class_._ptr = constructor(977,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeVec2Parameter.construct_without_init()
    class_._ptr = constructor(977,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeVec2ParameterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(977,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeVec2ParameterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeVec2Parameter.__new__(VisualShaderNodeVec2Parameter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeVec2Parameter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeVec2Parameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeVec2ParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeVec2Parameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeVec2ParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def default_value_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_default_value_enabled()
    return _ret
  @default_value_enabled.setter
  def default_value_enabled(self,  value:'bool'):
    self.set_default_value_enabled(value)
  @property
  def default_value(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_default_value()
    return _ret
  @default_value.setter
  def default_value(self,  value:'Vector2'):
    self.set_default_value(value)
  @functools.native_method
  def set_default_value_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__default_value_enabled = enabled






    self._ptr.call_with_return(92,tuple([enabled]))

  @functools.native_method
  def is_default_value_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_default_value(self, value:'Vector2'   ) -> None:
    r''''''

    assert(not value is None)
    assert isinstance(value, Vector2), 'value must be Vector2'

    self.py__default_value = value






    self._ptr.call_with_return(94,tuple([value._ptr]))

  @functools.native_method
  def get_default_value(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(95,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeVec2Parameter', VisualShaderNodeVec2Parameter.cast)
register_class('VisualShaderNodeVec2Parameter', VisualShaderNodeVec2Parameter)
