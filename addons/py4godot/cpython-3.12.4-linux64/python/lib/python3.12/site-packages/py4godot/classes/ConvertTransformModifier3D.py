# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
from py4godot.wrappers.wrappers import CPPConvertTransformModifier3DWrapper

class TransformMode:
  TRANSFORM_MODE_POSITION = 0
  TRANSFORM_MODE_ROTATION = 1
  TRANSFORM_MODE_SCALE = 2


class ConvertTransformModifier3D(py4godot_boneconstraint3d.BoneConstraint3D):
  r'''
		Apply the copied transform of the bone set by `BoneConstraint3D.set_reference_bone` to the bone set by `BoneConstraint3D.set_apply_bone` about the specific axis with remapping it with some options.
		There are 4 ways to apply the transform, depending on the combination of `set_relative` and `set_additive`.
		**Relative + Additive:**
		- Extract reference pose relative to the rest and add it to the apply bone's pose.
		**Relative + Not Additive:**
		- Extract reference pose relative to the rest and add it to the apply bone's rest.
		**Not Relative + Additive:**
		- Extract reference pose absolutely and add it to the apply bone's pose.
		**Not Relative + Not Additive:**
		- Extract reference pose absolutely and the apply bone's pose is replaced with it.
	'''

  @staticmethod
  def constructor():
    class_ = ConvertTransformModifier3D.construct_without_init()
    class_._ptr = constructor(240,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ConvertTransformModifier3D.construct_without_init()
    class_._ptr = constructor(240,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPConvertTransformModifier3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(240,0, ())


  def generate_wrapper(self):
    return CPPConvertTransformModifier3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ConvertTransformModifier3D.__new__(ConvertTransformModifier3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ConvertTransformModifier3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConvertTransformModifier3D.construct_without_init()
    cls._ptr = CPPConvertTransformModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConvertTransformModifier3D.construct_without_init()
    cls._ptr = CPPConvertTransformModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def setting_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_setting_count()
    return _ret
  @setting_count.setter
  def setting_count(self,  value:'int'):
    self.set_setting_count(value)
  @functools.native_method
  def set_apply_transform_mode(self, index:'int'   , transform_mode:'int'  ) -> None:
    r'''
				Sets the operation of the remapping destination transform.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(transform_mode, (int, float)), 'transform_mode must be int or float'







    self._ptr.call_with_return(273,tuple([index, transform_mode]))

  @functools.native_method
  def get_apply_transform_mode(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the operation of the remapping destination transform.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(274,tuple([index]))
    return _ret


  @functools.native_method
  def set_apply_axis(self, index:'int'   , axis:'int'  ) -> None:
    r'''
				Sets the axis of the remapping destination transform.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(axis, (int, float)), 'axis must be int or float'







    self._ptr.call_with_return(275,tuple([index, axis]))

  @functools.native_method
  def get_apply_axis(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the axis of the remapping destination transform.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(276,tuple([index]))
    return _ret


  @functools.native_method
  def set_apply_range_min(self, index:'int'   , range_min:'float'   ) -> None:
    r'''
				Sets the minimum value of the remapping destination range.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(range_min, (int, float)), 'range_min must be int or float'







    self._ptr.call_with_return(277,tuple([index, range_min]))

  @functools.native_method
  def get_apply_range_min(self, index:'int'   ) -> typing.Union[float]:
    r'''
				Returns the minimum value of the remapping destination range.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(278,tuple([index]))
    return _ret


  @functools.native_method
  def set_apply_range_max(self, index:'int'   , range_max:'float'   ) -> None:
    r'''
				Sets the maximum value of the remapping destination range.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(range_max, (int, float)), 'range_max must be int or float'







    self._ptr.call_with_return(279,tuple([index, range_max]))

  @functools.native_method
  def get_apply_range_max(self, index:'int'   ) -> typing.Union[float]:
    r'''
				Returns the maximum value of the remapping destination range.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(280,tuple([index]))
    return _ret


  @functools.native_method
  def set_reference_transform_mode(self, index:'int'   , transform_mode:'int'  ) -> None:
    r'''
				Sets the operation of the remapping source transform.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(transform_mode, (int, float)), 'transform_mode must be int or float'







    self._ptr.call_with_return(281,tuple([index, transform_mode]))

  @functools.native_method
  def get_reference_transform_mode(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the operation of the remapping source transform.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(282,tuple([index]))
    return _ret


  @functools.native_method
  def set_reference_axis(self, index:'int'   , axis:'int'  ) -> None:
    r'''
				Sets the axis of the remapping source transform.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(axis, (int, float)), 'axis must be int or float'







    self._ptr.call_with_return(283,tuple([index, axis]))

  @functools.native_method
  def get_reference_axis(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the axis of the remapping source transform.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(284,tuple([index]))
    return _ret


  @functools.native_method
  def set_reference_range_min(self, index:'int'   , range_min:'float'   ) -> None:
    r'''
				Sets the minimum value of the remapping source range.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(range_min, (int, float)), 'range_min must be int or float'







    self._ptr.call_with_return(285,tuple([index, range_min]))

  @functools.native_method
  def get_reference_range_min(self, index:'int'   ) -> typing.Union[float]:
    r'''
				Returns the minimum value of the remapping source range.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(286,tuple([index]))
    return _ret


  @functools.native_method
  def set_reference_range_max(self, index:'int'   , range_max:'float'   ) -> None:
    r'''
				Sets the maximum value of the remapping source range.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(range_max, (int, float)), 'range_max must be int or float'







    self._ptr.call_with_return(287,tuple([index, range_max]))

  @functools.native_method
  def get_reference_range_max(self, index:'int'   ) -> typing.Union[float]:
    r'''
				Returns the maximum value of the remapping source range.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(288,tuple([index]))
    return _ret


  @functools.native_method
  def set_relative(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				Sets relative option in the setting at `index` to `enabled`.
				If sets `enabled` to `true`, the extracted and applying transform is relative to the rest.
				If sets `enabled` to `false`, the extracted transform is absolute.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(289,tuple([index, enabled]))

  @functools.native_method
  def is_relative(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the relative option is enabled in the setting at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(290,tuple([index]))
    return _ret


  @functools.native_method
  def set_additive(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				Sets additive option in the setting at `index` to `enabled`. This mainly affects the process of applying transform to the `BoneConstraint3D.set_apply_bone`.
				If sets `enabled` to `true`, the processed transform is added to the pose of the current apply bone.
				If sets `enabled` to `false`, the pose of the current apply bone is replaced with the processed transform. However, if set `set_relative` to `true`, the transform is relative to rest.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(291,tuple([index, enabled]))

  @functools.native_method
  def is_additive(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the additive option is enabled in the setting at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(292,tuple([index]))
    return _ret



register_cast_function('ConvertTransformModifier3D', ConvertTransformModifier3D.cast)
register_class('ConvertTransformModifier3D', ConvertTransformModifier3D)
