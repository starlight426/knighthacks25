# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Occluder3D as py4godot_occluder3d 
from py4godot.wrappers.wrappers import CPPQuadOccluder3DWrapper


class QuadOccluder3D(py4godot_occluder3d.Occluder3D):
  r'''
		`QuadOccluder3D` stores a flat plane shape that can be used by the engine's occlusion culling system. See also `PolygonOccluder3D` if you need to customize the quad's shape.
		See `OccluderInstance3D`'s documentation for instructions on setting up occlusion culling.
	'''

  @staticmethod
  def constructor():
    class_ = QuadOccluder3D.construct_without_init()
    class_._ptr = constructor(644,0, ())
    return class_
  @staticmethod
  def new():
    class_ = QuadOccluder3D.construct_without_init()
    class_._ptr = constructor(644,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPQuadOccluder3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(644,0, ())


  def generate_wrapper(self):
    return CPPQuadOccluder3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = QuadOccluder3D.__new__(QuadOccluder3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'QuadOccluder3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = QuadOccluder3D.construct_without_init()
    cls._ptr = CPPQuadOccluder3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = QuadOccluder3D.construct_without_init()
    cls._ptr = CPPQuadOccluder3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def size(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector2'):
    self.set_size(value)
  @functools.native_method
  def set_size(self, size:'Vector2'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector2), 'size must be Vector2'

    self.py__size = size






    self._ptr.call_with_return(79,tuple([size._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([]))

    return _ret



register_cast_function('QuadOccluder3D', QuadOccluder3D.cast)
register_class('QuadOccluder3D', QuadOccluder3D)
