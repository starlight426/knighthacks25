# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioStream as py4godot_audiostream 
from py4godot.wrappers.wrappers import CPPAudioStreamWAVWrapper

class Format:
  FORMAT_8_BITS = 0
  FORMAT_16_BITS = 1
  FORMAT_IMA_ADPCM = 2
  FORMAT_QOA = 3
class LoopMode:
  LOOP_DISABLED = 0
  LOOP_FORWARD = 1
  LOOP_PINGPONG = 2
  LOOP_BACKWARD = 3


class AudioStreamWAV(py4godot_audiostream.AudioStream):
  r'''
		AudioStreamWAV stores sound samples loaded from WAV files. To play the stored sound, use an `AudioStreamPlayer` (for non-positional audio) or `AudioStreamPlayer2D`/`AudioStreamPlayer3D` (for positional audio). The sound can be looped.
		This class can also be used to store dynamically-generated PCM audio data. See also `AudioStreamGenerator` for procedural audio generation.
	'''

  @staticmethod
  def constructor():
    class_ = AudioStreamWAV.construct_without_init()
    class_._ptr = constructor(161,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamWAV.construct_without_init()
    class_._ptr = constructor(161,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamWAVWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(161,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamWAVWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamWAV.__new__(AudioStreamWAV)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamWAV'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamWAV.construct_without_init()
    cls._ptr = CPPAudioStreamWAVWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamWAV.construct_without_init()
    cls._ptr = CPPAudioStreamWAVWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def data(self) -> typing.Union['PackedByteArray']:
    r''''''
    _ret = self. get_data()
    return _ret
  @data.setter
  def data(self,  value:'PackedByteArray'):
    self.set_data(value)
  @property
  def format(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_format()
    return _ret
  @format.setter
  def format(self,  value:'int'):
    self.set_format(value)
  @property
  def loop_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_loop_mode()
    return _ret
  @loop_mode.setter
  def loop_mode(self,  value:'int'):
    self.set_loop_mode(value)
  @property
  def loop_begin(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_loop_begin()
    return _ret
  @loop_begin.setter
  def loop_begin(self,  value:'int'):
    self.set_loop_begin(value)
  @property
  def loop_end(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_loop_end()
    return _ret
  @loop_end.setter
  def loop_end(self,  value:'int'):
    self.set_loop_end(value)
  @property
  def mix_rate(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mix_rate()
    return _ret
  @mix_rate.setter
  def mix_rate(self,  value:'int'):
    self.set_mix_rate(value)
  @property
  def stereo(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_stereo()
    return _ret
  @stereo.setter
  def stereo(self,  value:'bool'):
    self.set_stereo(value)
  @property
  def tags(self) -> typing.Union['Dictionary']:
    r''''''
    _ret = self. get_tags()
    return _ret
  @tags.setter
  def tags(self,  value:'Dictionary'):
    self.set_tags(value)
  @staticmethod
  def load_from_buffer(stream_data:'PackedByteArray'   , options:'Dictionary' = None  ) -> typing.Union['typing.Self']:
    r'''
				Creates a new `AudioStreamWAV` instance from the given buffer. The buffer must contain WAV data.
				The keys and values of `options` match the properties of `ResourceImporterWAV`. The usage of `options` is identical to `AudioStreamWAV.load_from_file`.
			'''
    if options is None:
      options = Dictionary.new0()
    if options is None:
      options = Dictionary.new0()

    assert(not stream_data is None)
    assert isinstance(stream_data, PackedByteArray), 'stream_data must be PackedByteArray'







    _ret = AudioStreamWAV.construct_without_init()
    _ret._ptr = static_method(161,1,tuple([stream_data._ptr, options._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def load_from_file(path:'str'   , options:'Dictionary' = None  ) -> typing.Union['typing.Self']:
    r'''
				Creates a new `AudioStreamWAV` instance from the given file path. The file must be in WAV format.
				The keys and values of `options` match the properties of `ResourceImporterWAV`.
				**Example:** Load the first file dropped as a WAV and play it:
				```gdscript
				@onready var audio_player = $AudioStreamPlayer

				func _ready():
					get_window().files_dropped.connect(_on_files_dropped)

				func _on_files_dropped(files):
					if files`0`.get_extension() == "wav":
						audio_player.stream = AudioStreamWAV.load_from_file(files`0`, {
								"force/max_rate": true,
								"force/max_rate_hz": 11025
							})
						audio_player.play()
				```
			'''
    if options is None:
      options = Dictionary.new0()
    if options is None:
      options = Dictionary.new0()

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret = AudioStreamWAV.construct_without_init()
    _ret._ptr = static_method(161,2,tuple([py_string_path._ptr, options._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_data(self, data:'PackedByteArray'   ) -> None:
    r''''''

    assert(not data is None)
    assert isinstance(data, PackedByteArray), 'data must be PackedByteArray'

    self.py__data = data






    self._ptr.call_with_return(93,tuple([data._ptr]))

  @functools.native_method
  def get_data(self) -> typing.Union['PackedByteArray']:
    r''''''




    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_format(self, format:'int'  ) -> None:
    r''''''

    assert isinstance(format, (int, float)), 'format must be int or float'

    self.py__format = format






    self._ptr.call_with_return(95,tuple([format]))

  @functools.native_method
  def get_format(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_loop_mode(self, loop_mode:'int'  ) -> None:
    r''''''

    assert isinstance(loop_mode, (int, float)), 'loop_mode must be int or float'

    self.py__loop_mode = loop_mode






    self._ptr.call_with_return(97,tuple([loop_mode]))

  @functools.native_method
  def get_loop_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(98,tuple([]))

    return _ret


  @functools.native_method
  def set_loop_begin(self, loop_begin:'int'   ) -> None:
    r''''''

    assert isinstance(loop_begin, (int, float)), 'loop_begin must be int or float'

    self.py__loop_begin = loop_begin






    self._ptr.call_with_return(99,tuple([loop_begin]))

  @functools.native_method
  def get_loop_begin(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(100,tuple([]))

    return _ret


  @functools.native_method
  def set_loop_end(self, loop_end:'int'   ) -> None:
    r''''''

    assert isinstance(loop_end, (int, float)), 'loop_end must be int or float'

    self.py__loop_end = loop_end






    self._ptr.call_with_return(101,tuple([loop_end]))

  @functools.native_method
  def get_loop_end(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(102,tuple([]))

    return _ret


  @functools.native_method
  def set_mix_rate(self, mix_rate:'int'   ) -> None:
    r''''''

    assert isinstance(mix_rate, (int, float)), 'mix_rate must be int or float'

    self.py__mix_rate = mix_rate






    self._ptr.call_with_return(103,tuple([mix_rate]))

  @functools.native_method
  def get_mix_rate(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([]))

    return _ret


  @functools.native_method
  def set_stereo(self, stereo:'bool'   ) -> None:
    r''''''

    assert isinstance(stereo, bool), 'stereo must be bool'

    self.py__stereo = stereo






    self._ptr.call_with_return(105,tuple([stereo]))

  @functools.native_method
  def is_stereo(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(106,tuple([]))

    return _ret


  @functools.native_method
  def set_tags(self, tags:'Dictionary'   ) -> None:
    r''''''

    assert(not tags is None)
    assert isinstance(tags, Dictionary), 'tags must be Dictionary'

    self.py__tags = tags






    self._ptr.call_with_return(107,tuple([tags._ptr]))

  @functools.native_method
  def get_tags(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(108,tuple([]))

    return _ret


  @functools.native_method
  def save_to_wav(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Saves the AudioStreamWAV as a WAV file to `path`. Samples with IMA ADPCM or Quite OK Audio formats can't be saved.
				**Note:** A `.wav` extension is automatically appended to `path` if it is missing.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(109,tuple([py_string_path._ptr]))
    return _ret



register_cast_function('AudioStreamWAV', AudioStreamWAV.cast)
register_class('AudioStreamWAV', AudioStreamWAV)
