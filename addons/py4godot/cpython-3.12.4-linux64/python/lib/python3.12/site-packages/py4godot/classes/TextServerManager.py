# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.TextServerDummy as py4godot_textserverdummy 
  import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
  import py4godot.classes.TextServerExtension as py4godot_textserverextension 
  import py4godot.classes.TextServer as py4godot_textserver 
  import py4godot.classes.TextServerAdvanced as py4godot_textserveradvanced 
import py4godot.classes.Object as py4godot_object 
import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
from py4godot.wrappers.wrappers import CPPTextServerManagerWrapper

_TextServerManager_singleton_instance = None

class TextServerManager(py4godot_object.Object):
  r'''
		`TextServerManager` is the API backend for loading, enumerating, and switching `TextServer`s.
		**Note:** Switching text server at runtime is possible, but will invalidate all fonts and text buffers. Make sure to unload all controls, fonts, and themes before doing so.
	'''


  def generate_wrapper(self):
    return CPPTextServerManagerWrapper()
  def init_signals(self):
    super().init_signals()
    interface_added_name = utils.py_string_to_string_name("interface_added")
    self.interface_added = signals.BuiltinSignal(self, interface_added_name)
    interface_removed_name = utils.py_string_to_string_name("interface_removed")
    self.interface_removed = signals.BuiltinSignal(self, interface_removed_name)

  @staticmethod
  def construct_without_init():
    cls = TextServerManager.__new__(TextServerManager)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TextServerManager'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextServerManager.construct_without_init()
    cls._ptr = CPPTextServerManagerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextServerManager.construct_without_init()
    cls._ptr = CPPTextServerManagerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _TextServerManager_singleton_instance
    if _TextServerManager_singleton_instance is None:
      singleton = TextServerManager()
      singleton._ptr = constructor(816,0, ())
      _TextServerManager_singleton_instance = singleton
    return _TextServerManager_singleton_instance

  @functools.native_method
  def add_interface(self, interface:'py4godot_textserver.TextServer'   ) -> None:
    r'''
				Registers a `TextServer` interface.
			'''

    assert(not interface is None)
    assert isinstance(interface, get_class('TextServer')), 'interface must be TextServer'






    self._ptr.call_with_return(49,tuple([interface._ptr]))

  @functools.native_method
  def get_interface_count(self) -> typing.Union[int]:
    r'''
				Returns the number of interfaces currently registered.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(50,tuple([]))
    return _ret


  @functools.native_method
  def remove_interface(self, interface:'py4godot_textserver.TextServer'   ) -> None:
    r'''
				Removes an interface. All fonts and shaped text caches should be freed before removing an interface.
			'''

    assert(not interface is None)
    assert isinstance(interface, get_class('TextServer')), 'interface must be TextServer'






    self._ptr.call_with_return(51,tuple([interface._ptr]))

  @functools.native_method
  def get_interface_(self, idx:'int'   ) -> typing.Union['py4godot_textserverdummy.TextServerDummy','py4godot_textserver.TextServer','py4godot_textserverextension.TextServerExtension','py4godot_textserveradvanced.TextServerAdvanced']:
    r'''
				Returns the interface registered at a given index.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: TextServer
    _ret._ptr = self._ptr.call_with_return(52,tuple([idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_interfaces(self) -> typing.Union['py4godot_dictionarytypedarray.DictionaryTypedArray']:
    r'''
				Returns a list of available interfaces, with the index and name of each interface.
			'''




    _ret = py4godot_dictionarytypedarray.DictionaryTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def find_interface(self, name:'str'   ) -> typing.Union['py4godot_textserverdummy.TextServerDummy','py4godot_textserver.TextServer','py4godot_textserverextension.TextServerExtension','py4godot_textserveradvanced.TextServerAdvanced']:
    r'''
				Finds an interface by its `name`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: TextServer
    _ret._ptr = self._ptr.call_with_return(54,tuple([py_string_name._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_primary_interface(self, index:'py4godot_textserver.TextServer'   ) -> None:
    r'''
				Sets the primary `TextServer` interface.
			'''

    assert(not index is None)
    assert isinstance(index, get_class('TextServer')), 'index must be TextServer'






    self._ptr.call_with_return(55,tuple([index._ptr]))

  @functools.native_method
  def get_primary_interface(self) -> typing.Union['py4godot_textserverdummy.TextServerDummy','py4godot_textserver.TextServer','py4godot_textserverextension.TextServerExtension','py4godot_textserveradvanced.TextServerAdvanced']:
    r'''
				Returns the primary `TextServer` interface currently in use.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: TextServer
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('TextServerManager', TextServerManager.cast)
register_class('TextServerManager', TextServerManager)
