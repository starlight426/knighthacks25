# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDShaderSourceWrapper


class RDShaderSource(py4godot_refcounted.RefCounted):
  r'''
		Shader source code in text form.
		See also `RDShaderFile`. `RDShaderSource` is only meant to be used with the `RenderingDevice` API. It should not be confused with Godot's own `Shader` resource, which is what Godot's various nodes use for high-level shader programming.
	'''

  @staticmethod
  def constructor():
    class_ = RDShaderSource.construct_without_init()
    class_._ptr = constructor(656,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDShaderSource.construct_without_init()
    class_._ptr = constructor(656,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDShaderSourceWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(656,0, ())


  def generate_wrapper(self):
    return CPPRDShaderSourceWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDShaderSource.__new__(RDShaderSource)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDShaderSource'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDShaderSource.construct_without_init()
    cls._ptr = CPPRDShaderSourceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDShaderSource.construct_without_init()
    cls._ptr = CPPRDShaderSourceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def source_vertex(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_source(0)
    return _ret
  @source_vertex.setter
  def source_vertex(self,  value:'str'):
    self.set_stage_source(value)
  @property
  def source_fragment(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_source(1)
    return _ret
  @source_fragment.setter
  def source_fragment(self,  value:'str'):
    self.set_stage_source(value)
  @property
  def source_tesselation_control(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_source(2)
    return _ret
  @source_tesselation_control.setter
  def source_tesselation_control(self,  value:'str'):
    self.set_stage_source(value)
  @property
  def source_tesselation_evaluation(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_source(3)
    return _ret
  @source_tesselation_evaluation.setter
  def source_tesselation_evaluation(self,  value:'str'):
    self.set_stage_source(value)
  @property
  def source_compute(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_source(4)
    return _ret
  @source_compute.setter
  def source_compute(self,  value:'str'):
    self.set_stage_source(value)
  @property
  def language(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_language()
    return _ret
  @language.setter
  def language(self,  value:'int'):
    self.set_language(value)
  @functools.native_method
  def set_stage_source(self, stage:'int'  , source:'str'   ) -> None:
    r'''
				Sets `source` code for the specified shader `stage`. Equivalent to setting one of `source_compute`, `source_fragment`, `source_tesselation_control`, `source_tesselation_evaluation` or `source_vertex`.
				**Note:** If you set the compute shader source code using this method directly, remember to remove the Godot-specific hint `#`compute``.
			'''

    assert isinstance(stage, (int, float)), 'stage must be int or float'
    assert(not source is None)
    assert isinstance(source, (str, String)), 'source must be str or String'

    self.py__source_vertex = stage




    assert(isinstance(source, (str, String)))
    py_string_source = source if isinstance(source, StringName) else c_utils.py_string_to_string(source)

    py__string_source = utils.py_string_to_string(source)
    py__string_source.shouldBeDeleted = False


    self._ptr.call_with_return(53,tuple([stage, py__string_source._ptr]))

  @functools.native_method
  def get_stage_source(self, stage:'int'  ) -> typing.Union[str]:
    r'''
				Returns source code for the specified shader `stage`. Equivalent to getting one of `source_compute`, `source_fragment`, `source_tesselation_control`, `source_tesselation_evaluation` or `source_vertex`.
			'''

    assert isinstance(stage, (int, float)), 'stage must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([stage]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_language(self, language:'int'  ) -> None:
    r''''''

    assert isinstance(language, (int, float)), 'language must be int or float'

    self.py__language = language






    self._ptr.call_with_return(55,tuple([language]))

  @functools.native_method
  def get_language(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret



register_cast_function('RDShaderSource', RDShaderSource.cast)
register_class('RDShaderSource', RDShaderSource)
