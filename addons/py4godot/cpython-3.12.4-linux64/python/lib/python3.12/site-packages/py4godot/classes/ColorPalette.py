# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPColorPaletteWrapper


class ColorPalette(py4godot_resource.Resource):
  r'''
		The `ColorPalette` resource is designed to store and manage a collection of colors. This resource is useful in scenarios where a predefined set of colors is required, such as for creating themes, designing user interfaces, or managing game assets. The built-in `ColorPicker` control can also make use of `ColorPalette` without additional code.
	'''

  @staticmethod
  def constructor():
    class_ = ColorPalette.construct_without_init()
    class_._ptr = constructor(221,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ColorPalette.construct_without_init()
    class_._ptr = constructor(221,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPColorPaletteWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(221,0, ())


  def generate_wrapper(self):
    return CPPColorPaletteWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ColorPalette.__new__(ColorPalette)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ColorPalette'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ColorPalette.construct_without_init()
    cls._ptr = CPPColorPaletteWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ColorPalette.construct_without_init()
    cls._ptr = CPPColorPaletteWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def colors(self) -> typing.Union['PackedColorArray']:
    r''''''
    _ret = self. get_colors()
    return _ret
  @colors.setter
  def colors(self,  value:'PackedColorArray'):
    self.set_colors(value)
  @functools.native_method
  def set_colors(self, colors:'PackedColorArray'   ) -> None:
    r''''''

    assert(not colors is None)
    assert isinstance(colors, PackedColorArray), 'colors must be PackedColorArray'

    self.py__colors = colors






    self._ptr.call_with_return(77,tuple([colors._ptr]))

  @functools.native_method
  def get_colors(self) -> typing.Union['PackedColorArray']:
    r''''''




    _ret = PackedColorArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return _ret



register_cast_function('ColorPalette', ColorPalette.cast)
register_class('ColorPalette', ColorPalette)
