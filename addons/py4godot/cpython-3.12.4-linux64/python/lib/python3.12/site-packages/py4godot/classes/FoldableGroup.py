# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.FoldableContainerTypedArray as py4godot_foldablecontainertypedarray 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
import py4godot.classes.Resource as py4godot_resource 
import py4godot.classes.FoldableContainerTypedArray as py4godot_foldablecontainertypedarray 
from py4godot.wrappers.wrappers import CPPFoldableGroupWrapper


class FoldableGroup(py4godot_resource.Resource):
  r'''
		A group of `FoldableContainer`-derived nodes. Only one container can be expanded at a time.
	'''

  @staticmethod
  def constructor():
    class_ = FoldableGroup.construct_without_init()
    class_._ptr = constructor(336,0, ())
    return class_
  @staticmethod
  def new():
    class_ = FoldableGroup.construct_without_init()
    class_._ptr = constructor(336,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPFoldableGroupWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(336,0, ())


  def generate_wrapper(self):
    return CPPFoldableGroupWrapper()
  def init_signals(self):
    super().init_signals()
    expanded_name = utils.py_string_to_string_name("expanded")
    self.expanded = signals.BuiltinSignal(self, expanded_name)

  @staticmethod
  def construct_without_init():
    cls = FoldableGroup.__new__(FoldableGroup)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'FoldableGroup'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = FoldableGroup.construct_without_init()
    cls._ptr = CPPFoldableGroupWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = FoldableGroup.construct_without_init()
    cls._ptr = CPPFoldableGroupWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def allow_folding_all(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_allow_folding_all()
    return _ret
  @allow_folding_all.setter
  def allow_folding_all(self,  value:'bool'):
    self.set_allow_folding_all(value)
  @functools.native_method
  def get_expanded_container(self) -> typing.Union['py4godot_foldablecontainer.FoldableContainer']:
    r'''
				Returns the current expanded container.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: FoldableContainer
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_containers(self) -> typing.Union['py4godot_foldablecontainertypedarray.FoldableContainerTypedArray']:
    r'''
				Returns an `Array` of `FoldableContainer`s that have this as their FoldableGroup (see `FoldableContainer.foldable_group`). This is equivalent to `ButtonGroup` but for FoldableContainers.
			'''




    _ret = py4godot_foldablecontainertypedarray.FoldableContainerTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))
    return _ret


  @functools.native_method
  def set_allow_folding_all(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__allow_folding_all = enabled






    self._ptr.call_with_return(79,tuple([enabled]))

  @functools.native_method
  def is_allow_folding_all(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret



register_cast_function('FoldableGroup', FoldableGroup.cast)
register_class('FoldableGroup', FoldableGroup)
