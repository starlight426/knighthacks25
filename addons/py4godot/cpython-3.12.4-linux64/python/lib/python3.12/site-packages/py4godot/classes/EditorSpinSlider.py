# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Range as py4godot_range 
from py4godot.wrappers.wrappers import CPPEditorSpinSliderWrapper


class EditorSpinSlider(py4godot_range.Range):
  r'''
		This `Control` node is used in the editor's Inspector dock to allow editing of numeric values. Can be used with `EditorInspectorPlugin` to recreate the same behavior.
		If the `Range.step` value is `1`, the `EditorSpinSlider` will display up/down arrows, similar to `SpinBox`. If the `Range.step` value is not `1`, a slider will be displayed instead.
	'''

  @staticmethod
  def constructor():
    class_ = EditorSpinSlider.construct_without_init()
    class_._ptr = constructor(313,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorSpinSlider.construct_without_init()
    class_._ptr = constructor(313,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorSpinSliderWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(313,0, ())


  def generate_wrapper(self):
    return CPPEditorSpinSliderWrapper()
  def init_signals(self):
    super().init_signals()
    grabbed_name = utils.py_string_to_string_name("grabbed")
    self.grabbed = signals.BuiltinSignal(self, grabbed_name)
    ungrabbed_name = utils.py_string_to_string_name("ungrabbed")
    self.ungrabbed = signals.BuiltinSignal(self, ungrabbed_name)
    updown_pressed_name = utils.py_string_to_string_name("updown_pressed")
    self.updown_pressed = signals.BuiltinSignal(self, updown_pressed_name)
    value_focus_entered_name = utils.py_string_to_string_name("value_focus_entered")
    self.value_focus_entered = signals.BuiltinSignal(self, value_focus_entered_name)
    value_focus_exited_name = utils.py_string_to_string_name("value_focus_exited")
    self.value_focus_exited = signals.BuiltinSignal(self, value_focus_exited_name)

  @staticmethod
  def construct_without_init():
    cls = EditorSpinSlider.__new__(EditorSpinSlider)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorSpinSlider'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorSpinSlider.construct_without_init()
    cls._ptr = CPPEditorSpinSliderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorSpinSlider.construct_without_init()
    cls._ptr = CPPEditorSpinSliderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def label(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_label()
    return _ret
  @label.setter
  def label(self,  value:'str'):
    self.set_label(value)
  @property
  def suffix(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_suffix()
    return _ret
  @suffix.setter
  def suffix(self,  value:'str'):
    self.set_suffix(value)
  @property
  def read_only(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_read_only()
    return _ret
  @read_only.setter
  def read_only(self,  value:'bool'):
    self.set_read_only(value)
  @property
  def flat(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_flat()
    return _ret
  @flat.setter
  def flat(self,  value:'bool'):
    self.set_flat(value)
  @property
  def hide_slider(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_hiding_slider()
    return _ret
  @hide_slider.setter
  def hide_slider(self,  value:'bool'):
    self.set_hide_slider(value)
  @property
  def editing_integer(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_editing_integer()
    return _ret
  @editing_integer.setter
  def editing_integer(self,  value:'bool'):
    self.set_editing_integer(value)
  @functools.native_method
  def set_label(self, label:'str'   ) -> None:
    r''''''

    assert(not label is None)
    assert isinstance(label, (str, String)), 'label must be str or String'

    self.py__label = label



    assert(isinstance(label, (str, String)))
    py_string_label = label if isinstance(label, StringName) else c_utils.py_string_to_string(label)

    py__string_label = utils.py_string_to_string(label)
    py__string_label.shouldBeDeleted = False


    self._ptr.call_with_return(457,tuple([py__string_label._ptr]))

  @functools.native_method
  def get_label(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(458,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_suffix(self, suffix:'str'   ) -> None:
    r''''''

    assert(not suffix is None)
    assert isinstance(suffix, (str, String)), 'suffix must be str or String'

    self.py__suffix = suffix



    assert(isinstance(suffix, (str, String)))
    py_string_suffix = suffix if isinstance(suffix, StringName) else c_utils.py_string_to_string(suffix)

    py__string_suffix = utils.py_string_to_string(suffix)
    py__string_suffix.shouldBeDeleted = False


    self._ptr.call_with_return(459,tuple([py__string_suffix._ptr]))

  @functools.native_method
  def get_suffix(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(460,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_read_only(self, read_only:'bool'   ) -> None:
    r''''''

    assert isinstance(read_only, bool), 'read_only must be bool'

    self.py__read_only = read_only






    self._ptr.call_with_return(461,tuple([read_only]))

  @functools.native_method
  def is_read_only(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(462,tuple([]))

    return _ret


  @functools.native_method
  def set_flat(self, flat:'bool'   ) -> None:
    r''''''

    assert isinstance(flat, bool), 'flat must be bool'

    self.py__flat = flat






    self._ptr.call_with_return(463,tuple([flat]))

  @functools.native_method
  def is_flat(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(464,tuple([]))

    return _ret


  @functools.native_method
  def set_hide_slider(self, hide_slider:'bool'   ) -> None:
    r''''''

    assert isinstance(hide_slider, bool), 'hide_slider must be bool'

    self.py__hide_slider = hide_slider






    self._ptr.call_with_return(465,tuple([hide_slider]))

  @functools.native_method
  def is_hiding_slider(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(466,tuple([]))

    return _ret


  @functools.native_method
  def set_editing_integer(self, editing_integer:'bool'   ) -> None:
    r''''''

    assert isinstance(editing_integer, bool), 'editing_integer must be bool'

    self.py__editing_integer = editing_integer






    self._ptr.call_with_return(467,tuple([editing_integer]))

  @functools.native_method
  def is_editing_integer(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(468,tuple([]))

    return _ret



register_cast_function('EditorSpinSlider', EditorSpinSlider.cast)
register_class('EditorSpinSlider', EditorSpinSlider)
