# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.JavaClass as py4godot_javaclass 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPJavaObjectWrapper


class JavaObject(py4godot_refcounted.RefCounted):
  r'''
		Represents an object from the Java Native Interface. It can be returned from Java methods called on `JavaClass` or other `JavaObject`s. See `JavaClassWrapper` for an example.
		**Note:** This class only works on Android. On any other platform, this class does nothing.
		**Note:** This class is not to be confused with `JavaScriptObject`.
	'''

  @staticmethod
  def constructor():
    class_ = JavaObject.construct_without_init()
    class_._ptr = constructor(439,0, ())
    return class_
  @staticmethod
  def new():
    class_ = JavaObject.construct_without_init()
    class_._ptr = constructor(439,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPJavaObjectWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(439,0, ())


  def generate_wrapper(self):
    return CPPJavaObjectWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = JavaObject.__new__(JavaObject)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'JavaObject'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = JavaObject.construct_without_init()
    cls._ptr = CPPJavaObjectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = JavaObject.construct_without_init()
    cls._ptr = CPPJavaObjectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_java_class(self) -> typing.Union['py4godot_javaclass.JavaClass']:
    r'''
				Returns the `JavaClass` that this object is an instance of.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: JavaClass
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('JavaObject', JavaObject.cast)
register_class('JavaObject', JavaObject)
