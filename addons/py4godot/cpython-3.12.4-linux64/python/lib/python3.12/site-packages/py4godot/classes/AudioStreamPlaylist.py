# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AudioStreamGenerator as py4godot_audiostreamgenerator 
  import py4godot.classes.AudioStreamSynchronized as py4godot_audiostreamsynchronized 
  import py4godot.classes.AudioStreamOggVorbis as py4godot_audiostreamoggvorbis 
  import py4godot.classes.AudioStreamMicrophone as py4godot_audiostreammicrophone 
  import py4godot.classes.AudioStreamWAV as py4godot_audiostreamwav 
  import py4godot.classes.AudioStreamMP3 as py4godot_audiostreammp3 
  import py4godot.classes.AudioStreamPolyphonic as py4godot_audiostreampolyphonic 
  import py4godot.classes.AudioStreamRandomizer as py4godot_audiostreamrandomizer 
  import py4godot.classes.AudioStreamInteractive as py4godot_audiostreaminteractive 
import py4godot.classes.AudioStream as py4godot_audiostream 
from py4godot.wrappers.wrappers import CPPAudioStreamPlaylistWrapper


class AudioStreamPlaylist(py4godot_audiostream.AudioStream):
  r''''''
  MAX_STREAMS:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = AudioStreamPlaylist.construct_without_init()
    class_._ptr = constructor(157,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamPlaylist.construct_without_init()
    class_._ptr = constructor(157,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamPlaylistWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(157,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamPlaylistWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamPlaylist.__new__(AudioStreamPlaylist)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamPlaylist'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamPlaylist.construct_without_init()
    cls._ptr = CPPAudioStreamPlaylistWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamPlaylist.construct_without_init()
    cls._ptr = CPPAudioStreamPlaylistWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def shuffle(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_shuffle()
    return _ret
  @shuffle.setter
  def shuffle(self,  value:'bool'):
    self.set_shuffle(value)
  @property
  def loop(self) -> typing.Union[bool]:
    r''''''
    _ret = self. has_loop()
    return _ret
  @loop.setter
  def loop(self,  value:'bool'):
    self.set_loop(value)
  @property
  def fade_time(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_fade_time()
    return _ret
  @fade_time.setter
  def fade_time(self,  value:'float'):
    self.set_fade_time(value)
  @property
  def stream_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stream_count()
    return _ret
  @stream_count.setter
  def stream_count(self,  value:'int'):
    self.set_stream_count(value)
  @property
  def stream_0(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(0)
    return _ret
  @stream_0.setter
  def stream_0(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_1(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(1)
    return _ret
  @stream_1.setter
  def stream_1(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_2(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(2)
    return _ret
  @stream_2.setter
  def stream_2(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_3(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(3)
    return _ret
  @stream_3.setter
  def stream_3(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_4(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(4)
    return _ret
  @stream_4.setter
  def stream_4(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_5(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(5)
    return _ret
  @stream_5.setter
  def stream_5(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_6(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(6)
    return _ret
  @stream_6.setter
  def stream_6(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_7(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(7)
    return _ret
  @stream_7.setter
  def stream_7(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_8(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(8)
    return _ret
  @stream_8.setter
  def stream_8(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_9(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(9)
    return _ret
  @stream_9.setter
  def stream_9(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_10(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(10)
    return _ret
  @stream_10.setter
  def stream_10(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_11(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(11)
    return _ret
  @stream_11.setter
  def stream_11(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_12(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(12)
    return _ret
  @stream_12.setter
  def stream_12(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_13(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(13)
    return _ret
  @stream_13.setter
  def stream_13(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_14(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(14)
    return _ret
  @stream_14.setter
  def stream_14(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_15(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(15)
    return _ret
  @stream_15.setter
  def stream_15(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_16(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(16)
    return _ret
  @stream_16.setter
  def stream_16(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_17(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(17)
    return _ret
  @stream_17.setter
  def stream_17(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_18(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(18)
    return _ret
  @stream_18.setter
  def stream_18(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_19(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(19)
    return _ret
  @stream_19.setter
  def stream_19(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_20(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(20)
    return _ret
  @stream_20.setter
  def stream_20(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_21(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(21)
    return _ret
  @stream_21.setter
  def stream_21(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_22(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(22)
    return _ret
  @stream_22.setter
  def stream_22(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_23(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(23)
    return _ret
  @stream_23.setter
  def stream_23(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_24(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(24)
    return _ret
  @stream_24.setter
  def stream_24(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_25(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(25)
    return _ret
  @stream_25.setter
  def stream_25(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_26(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(26)
    return _ret
  @stream_26.setter
  def stream_26(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_27(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(27)
    return _ret
  @stream_27.setter
  def stream_27(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_28(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(28)
    return _ret
  @stream_28.setter
  def stream_28(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_29(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(29)
    return _ret
  @stream_29.setter
  def stream_29(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_30(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(30)
    return _ret
  @stream_30.setter
  def stream_30(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_31(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(31)
    return _ret
  @stream_31.setter
  def stream_31(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_32(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(32)
    return _ret
  @stream_32.setter
  def stream_32(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_33(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(33)
    return _ret
  @stream_33.setter
  def stream_33(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_34(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(34)
    return _ret
  @stream_34.setter
  def stream_34(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_35(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(35)
    return _ret
  @stream_35.setter
  def stream_35(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_36(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(36)
    return _ret
  @stream_36.setter
  def stream_36(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_37(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(37)
    return _ret
  @stream_37.setter
  def stream_37(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_38(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(38)
    return _ret
  @stream_38.setter
  def stream_38(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_39(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(39)
    return _ret
  @stream_39.setter
  def stream_39(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_40(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(40)
    return _ret
  @stream_40.setter
  def stream_40(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_41(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(41)
    return _ret
  @stream_41.setter
  def stream_41(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_42(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(42)
    return _ret
  @stream_42.setter
  def stream_42(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_43(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(43)
    return _ret
  @stream_43.setter
  def stream_43(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_44(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(44)
    return _ret
  @stream_44.setter
  def stream_44(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_45(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(45)
    return _ret
  @stream_45.setter
  def stream_45(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_46(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(46)
    return _ret
  @stream_46.setter
  def stream_46(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_47(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(47)
    return _ret
  @stream_47.setter
  def stream_47(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_48(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(48)
    return _ret
  @stream_48.setter
  def stream_48(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_49(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(49)
    return _ret
  @stream_49.setter
  def stream_49(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_50(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(50)
    return _ret
  @stream_50.setter
  def stream_50(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_51(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(51)
    return _ret
  @stream_51.setter
  def stream_51(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_52(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(52)
    return _ret
  @stream_52.setter
  def stream_52(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_53(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(53)
    return _ret
  @stream_53.setter
  def stream_53(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_54(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(54)
    return _ret
  @stream_54.setter
  def stream_54(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_55(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(55)
    return _ret
  @stream_55.setter
  def stream_55(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_56(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(56)
    return _ret
  @stream_56.setter
  def stream_56(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_57(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(57)
    return _ret
  @stream_57.setter
  def stream_57(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_58(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(58)
    return _ret
  @stream_58.setter
  def stream_58(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_59(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(59)
    return _ret
  @stream_59.setter
  def stream_59(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_60(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(60)
    return _ret
  @stream_60.setter
  def stream_60(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_61(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(61)
    return _ret
  @stream_61.setter
  def stream_61(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_62(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(62)
    return _ret
  @stream_62.setter
  def stream_62(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @property
  def stream_63(self) -> typing.Any:
    r''''''
    _ret = self. get_list_stream(63)
    return _ret
  @stream_63.setter
  def stream_63(self,  value:'py4godot_object.Object'):
    self.set_list_stream(value)
  @functools.native_method
  def set_stream_count(self, stream_count:'int'   ) -> None:
    r''''''

    assert isinstance(stream_count, (int, float)), 'stream_count must be int or float'

    self.py__stream_count = stream_count






    self._ptr.call_with_return(93,tuple([stream_count]))

  @functools.native_method
  def get_stream_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def get_bpm(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))
    return _ret


  @functools.native_method
  def set_list_stream(self, stream_index:'int'   , audio_stream:'py4godot_audiostream.AudioStream'   ) -> None:
    r''''''

    assert isinstance(stream_index, (int, float)), 'stream_index must be int or float'
    assert(not audio_stream is None)
    assert isinstance(audio_stream, get_class('AudioStream')), 'audio_stream must be AudioStream'

    self.py__stream_0 = stream_index







    self._ptr.call_with_return(96,tuple([stream_index, audio_stream._ptr]))

  @functools.native_method
  def get_list_stream(self, stream_index:'int'   ) -> typing.Any:
    r''''''

    assert isinstance(stream_index, (int, float)), 'stream_index must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AudioStream
    _ret._ptr = self._ptr.call_with_return(97,tuple([stream_index]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_shuffle(self, shuffle:'bool'   ) -> None:
    r''''''

    assert isinstance(shuffle, bool), 'shuffle must be bool'

    self.py__shuffle = shuffle






    self._ptr.call_with_return(98,tuple([shuffle]))

  @functools.native_method
  def get_shuffle(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_fade_time(self, dec:'float'   ) -> None:
    r''''''

    assert isinstance(dec, (int, float)), 'dec must be int or float'

    self.py__fade_time = dec






    self._ptr.call_with_return(100,tuple([dec]))

  @functools.native_method
  def get_fade_time(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(101,tuple([]))

    return _ret


  @functools.native_method
  def set_loop(self, loop:'bool'   ) -> None:
    r''''''

    assert isinstance(loop, bool), 'loop must be bool'

    self.py__loop = loop






    self._ptr.call_with_return(102,tuple([loop]))

  @functools.native_method
  def has_loop(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(103,tuple([]))

    return _ret



register_cast_function('AudioStreamPlaylist', AudioStreamPlaylist.cast)
register_class('AudioStreamPlaylist', AudioStreamPlaylist)
