# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.FileAccess as py4godot_fileaccess 
  import py4godot.classes.Image as py4godot_image 
import py4godot.classes.ImageFormatLoader as py4godot_imageformatloader 
from py4godot.wrappers.wrappers import CPPImageFormatLoaderExtensionWrapper


class ImageFormatLoaderExtension(py4godot_imageformatloader.ImageFormatLoader):
  r'''
		The engine supports multiple image formats out of the box (PNG, SVG, JPEG, WebP to name a few), but you can choose to implement support for additional image formats by extending this class.
		Be sure to respect the documented return types and values. You should create an instance of it, and call `add_format_loader` to register that loader during the initialization phase.
	'''

  @staticmethod
  def constructor():
    class_ = ImageFormatLoaderExtension.construct_without_init()
    class_._ptr = constructor(405,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ImageFormatLoaderExtension.construct_without_init()
    class_._ptr = constructor(405,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPImageFormatLoaderExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(405,0, ())


  def generate_wrapper(self):
    return CPPImageFormatLoaderExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ImageFormatLoaderExtension.__new__(ImageFormatLoaderExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ImageFormatLoaderExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImageFormatLoaderExtension.construct_without_init()
    cls._ptr = CPPImageFormatLoaderExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ImageFormatLoaderExtension.construct_without_init()
    cls._ptr = CPPImageFormatLoaderExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_recognized_extensions(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns the list of file extensions for this image format. Files with the given extensions will be treated as image file and loaded using this class.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def _load_image(self, image:'py4godot_image.Image'   , fileaccess:'py4godot_fileaccess.FileAccess'   , flags:'int'   , scale:'float'   ) -> typing.Union[int]:
    r'''
				Loads the content of `fileaccess` into the provided `image`.
			'''

    assert(not image is None)
    assert isinstance(image, get_class('Image')), 'image must be Image'
    assert(not fileaccess is None)
    assert isinstance(fileaccess, get_class('FileAccess')), 'fileaccess must be FileAccess'
    assert isinstance(flags, (int, float)), 'flags must be int or float'
    assert isinstance(scale, (int, float)), 'scale must be int or float'









    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([image._ptr, fileaccess._ptr, flags, scale]))
    return _ret


  @functools.native_method
  def add_format_loader(self) -> None:
    r'''
				Add this format loader to the engine, allowing it to recognize the file extensions returned by `_get_recognized_extensions`.
			'''




    self._ptr.call_with_return(55,tuple([]))

  @functools.native_method
  def remove_format_loader(self) -> None:
    r'''
				Remove this format loader from the engine.
			'''




    self._ptr.call_with_return(56,tuple([]))


register_cast_function('ImageFormatLoaderExtension', ImageFormatLoaderExtension.cast)
register_class('ImageFormatLoaderExtension', ImageFormatLoaderExtension)
