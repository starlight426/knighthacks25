# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPParallax2DWrapper


class Parallax2D(py4godot_node2d.Node2D):
  r'''
		A `Parallax2D` is used to create a parallax effect. It can move at a different speed relative to the camera movement using `scroll_scale`. This creates an illusion of depth in a 2D game. If manual scrolling is desired, the `Camera2D` position can be ignored with `ignore_camera_scroll`.
		**Note:** Any changes to this node's position made after it enters the scene tree will be overridden if `ignore_camera_scroll` is `false` or `screen_offset` is modified.
	'''

  @staticmethod
  def constructor():
    class_ = Parallax2D.construct_without_init()
    class_._ptr = constructor(576,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Parallax2D.construct_without_init()
    class_._ptr = constructor(576,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPParallax2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(576,0, ())


  def generate_wrapper(self):
    return CPPParallax2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Parallax2D.__new__(Parallax2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Parallax2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Parallax2D.construct_without_init()
    cls._ptr = CPPParallax2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Parallax2D.construct_without_init()
    cls._ptr = CPPParallax2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def scroll_scale(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_scroll_scale()
    return _ret
  @scroll_scale.setter
  def scroll_scale(self,  value:'Vector2'):
    self.set_scroll_scale(value)
  @property
  def scroll_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_scroll_offset()
    return _ret
  @scroll_offset.setter
  def scroll_offset(self,  value:'Vector2'):
    self.set_scroll_offset(value)
  @property
  def repeat_size(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_repeat_size()
    return _ret
  @repeat_size.setter
  def repeat_size(self,  value:'Vector2'):
    self.set_repeat_size(value)
  @property
  def autoscroll(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_autoscroll()
    return _ret
  @autoscroll.setter
  def autoscroll(self,  value:'Vector2'):
    self.set_autoscroll(value)
  @property
  def repeat_times(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_repeat_times()
    return _ret
  @repeat_times.setter
  def repeat_times(self,  value:'int'):
    self.set_repeat_times(value)
  @property
  def limit_begin(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_limit_begin()
    return _ret
  @limit_begin.setter
  def limit_begin(self,  value:'Vector2'):
    self.set_limit_begin(value)
  @property
  def limit_end(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_limit_end()
    return _ret
  @limit_end.setter
  def limit_end(self,  value:'Vector2'):
    self.set_limit_end(value)
  @property
  def follow_viewport(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_follow_viewport()
    return _ret
  @follow_viewport.setter
  def follow_viewport(self,  value:'bool'):
    self.set_follow_viewport(value)
  @property
  def ignore_camera_scroll(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_ignore_camera_scroll()
    return _ret
  @ignore_camera_scroll.setter
  def ignore_camera_scroll(self,  value:'bool'):
    self.set_ignore_camera_scroll(value)
  @property
  def screen_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_screen_offset()
    return _ret
  @screen_offset.setter
  def screen_offset(self,  value:'Vector2'):
    self.set_screen_offset(value)
  @functools.native_method
  def set_scroll_scale(self, scale:'Vector2'   ) -> None:
    r''''''

    assert(not scale is None)
    assert isinstance(scale, Vector2), 'scale must be Vector2'

    self.py__scroll_scale = scale






    self._ptr.call_with_return(303,tuple([scale._ptr]))

  @functools.native_method
  def get_scroll_scale(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def set_repeat_size(self, repeat_size:'Vector2'   ) -> None:
    r''''''

    assert(not repeat_size is None)
    assert isinstance(repeat_size, Vector2), 'repeat_size must be Vector2'

    self.py__repeat_size = repeat_size






    self._ptr.call_with_return(305,tuple([repeat_size._ptr]))

  @functools.native_method
  def get_repeat_size(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_repeat_times(self, repeat_times:'int'   ) -> None:
    r''''''

    assert isinstance(repeat_times, (int, float)), 'repeat_times must be int or float'

    self.py__repeat_times = repeat_times






    self._ptr.call_with_return(307,tuple([repeat_times]))

  @functools.native_method
  def get_repeat_times(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(308,tuple([]))

    return _ret


  @functools.native_method
  def set_autoscroll(self, autoscroll:'Vector2'   ) -> None:
    r''''''

    assert(not autoscroll is None)
    assert isinstance(autoscroll, Vector2), 'autoscroll must be Vector2'

    self.py__autoscroll = autoscroll






    self._ptr.call_with_return(309,tuple([autoscroll._ptr]))

  @functools.native_method
  def get_autoscroll(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(310,tuple([]))

    return _ret


  @functools.native_method
  def set_scroll_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__scroll_offset = offset






    self._ptr.call_with_return(311,tuple([offset._ptr]))

  @functools.native_method
  def get_scroll_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(312,tuple([]))

    return _ret


  @functools.native_method
  def set_screen_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__screen_offset = offset






    self._ptr.call_with_return(313,tuple([offset._ptr]))

  @functools.native_method
  def get_screen_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(314,tuple([]))

    return _ret


  @functools.native_method
  def set_limit_begin(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__limit_begin = offset






    self._ptr.call_with_return(315,tuple([offset._ptr]))

  @functools.native_method
  def get_limit_begin(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(316,tuple([]))

    return _ret


  @functools.native_method
  def set_limit_end(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__limit_end = offset






    self._ptr.call_with_return(317,tuple([offset._ptr]))

  @functools.native_method
  def get_limit_end(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(318,tuple([]))

    return _ret


  @functools.native_method
  def set_follow_viewport(self, follow:'bool'   ) -> None:
    r''''''

    assert isinstance(follow, bool), 'follow must be bool'

    self.py__follow_viewport = follow






    self._ptr.call_with_return(319,tuple([follow]))

  @functools.native_method
  def get_follow_viewport(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(320,tuple([]))

    return _ret


  @functools.native_method
  def set_ignore_camera_scroll(self, ignore:'bool'   ) -> None:
    r''''''

    assert isinstance(ignore, bool), 'ignore must be bool'

    self.py__ignore_camera_scroll = ignore






    self._ptr.call_with_return(321,tuple([ignore]))

  @functools.native_method
  def is_ignore_camera_scroll(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(322,tuple([]))

    return _ret



register_cast_function('Parallax2D', Parallax2D.cast)
register_class('Parallax2D', Parallax2D)
