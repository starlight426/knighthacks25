# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.VisualShaderNodeTexture2DArrayParameter as py4godot_visualshadernodetexture2darrayparameter 
  import py4godot.classes.VisualShaderNodeCubemapParameter as py4godot_visualshadernodecubemapparameter 
  import py4godot.classes.VisualShaderNodeTextureParameterTriplanar as py4godot_visualshadernodetextureparametertriplanar 
  import py4godot.classes.VisualShaderNodeTexture3DParameter as py4godot_visualshadernodetexture3dparameter 
  import py4godot.classes.VisualShaderNodeTexture2DParameter as py4godot_visualshadernodetexture2dparameter 
import py4godot.classes.VisualShaderNodeParameter as py4godot_visualshadernodeparameter 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeTextureParameterWrapper

class TextureType:
  TYPE_DATA = 0
  TYPE_COLOR = 1
  TYPE_NORMAL_MAP = 2
  TYPE_ANISOTROPY = 3
  TYPE_MAX = 4
class ColorDefault:
  COLOR_DEFAULT_WHITE = 0
  COLOR_DEFAULT_BLACK = 1
  COLOR_DEFAULT_TRANSPARENT = 2
  COLOR_DEFAULT_MAX = 3
class TextureFilter:
  FILTER_DEFAULT = 0
  FILTER_NEAREST = 1
  FILTER_LINEAR = 2
  FILTER_NEAREST_MIPMAP = 3
  FILTER_LINEAR_MIPMAP = 4
  FILTER_NEAREST_MIPMAP_ANISOTROPIC = 5
  FILTER_LINEAR_MIPMAP_ANISOTROPIC = 6
  FILTER_MAX = 7
class TextureRepeat:
  REPEAT_DEFAULT = 0
  REPEAT_ENABLED = 1
  REPEAT_DISABLED = 2
  REPEAT_MAX = 3
class TextureSource:
  SOURCE_NONE = 0
  SOURCE_SCREEN = 1
  SOURCE_DEPTH = 2
  SOURCE_NORMAL_ROUGHNESS = 3
  SOURCE_MAX = 4


class VisualShaderNodeTextureParameter(py4godot_visualshadernodeparameter.VisualShaderNodeParameter):
  r'''
		Performs a lookup operation on the texture provided as a uniform for the shader.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeTextureParameter.construct_without_init()
    class_._ptr = constructor(956,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeTextureParameter.construct_without_init()
    class_._ptr = constructor(956,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeTextureParameterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(956,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeTextureParameterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeTextureParameter.__new__(VisualShaderNodeTextureParameter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeTextureParameter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTextureParameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTextureParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTextureParameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTextureParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_type()
    return _ret
  @texture_type.setter
  def texture_type(self,  value:'int'):
    self.set_texture_type(value)
  @property
  def color_default(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_color_default()
    return _ret
  @color_default.setter
  def color_default(self,  value:'int'):
    self.set_color_default(value)
  @property
  def texture_filter(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_filter()
    return _ret
  @texture_filter.setter
  def texture_filter(self,  value:'int'):
    self.set_texture_filter(value)
  @property
  def texture_repeat(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_repeat()
    return _ret
  @texture_repeat.setter
  def texture_repeat(self,  value:'int'):
    self.set_texture_repeat(value)
  @property
  def texture_source(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_source()
    return _ret
  @texture_source.setter
  def texture_source(self,  value:'int'):
    self.set_texture_source(value)
  @functools.native_method
  def set_texture_type(self, type:'int'  ) -> None:
    r''''''

    assert isinstance(type, (int, float)), 'type must be int or float'

    self.py__texture_type = type






    self._ptr.call_with_return(92,tuple([type]))

  @functools.native_method
  def get_texture_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_color_default(self, color:'int'  ) -> None:
    r''''''

    assert isinstance(color, (int, float)), 'color must be int or float'

    self.py__color_default = color






    self._ptr.call_with_return(94,tuple([color]))

  @functools.native_method
  def get_color_default(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_texture_filter(self, filter:'int'  ) -> None:
    r''''''

    assert isinstance(filter, (int, float)), 'filter must be int or float'

    self.py__texture_filter = filter






    self._ptr.call_with_return(96,tuple([filter]))

  @functools.native_method
  def get_texture_filter(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_texture_repeat(self, repeat:'int'  ) -> None:
    r''''''

    assert isinstance(repeat, (int, float)), 'repeat must be int or float'

    self.py__texture_repeat = repeat






    self._ptr.call_with_return(98,tuple([repeat]))

  @functools.native_method
  def get_texture_repeat(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_texture_source(self, source:'int'  ) -> None:
    r''''''

    assert isinstance(source, (int, float)), 'source must be int or float'

    self.py__texture_source = source






    self._ptr.call_with_return(100,tuple([source]))

  @functools.native_method
  def get_texture_source(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(101,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeTextureParameter', VisualShaderNodeTextureParameter.cast)
register_class('VisualShaderNodeTextureParameter', VisualShaderNodeTextureParameter)
