# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.FogVolume as py4godot_fogvolume 
  import py4godot.classes.AudioStreamPlayer3D as py4godot_audiostreamplayer3d 
  import py4godot.classes.Sprite3D as py4godot_sprite3d 
  import py4godot.classes.VisibleOnScreenEnabler3D as py4godot_visibleonscreenenabler3d 
  import py4godot.classes.XRAnchor3D as py4godot_xranchor3d 
  import py4godot.classes.GPUParticlesCollisionBox3D as py4godot_gpuparticlescollisionbox3d 
  import py4godot.classes.CPUParticles3D as py4godot_cpuparticles3d 
  import py4godot.classes.LightmapProbe as py4godot_lightmapprobe 
  import py4godot.classes.GPUParticlesAttractor3D as py4godot_gpuparticlesattractor3d 
  import py4godot.classes.Area3D as py4godot_area3d 
  import py4godot.classes.Camera3D as py4godot_camera3d 
  import py4godot.classes.SpriteBase3D as py4godot_spritebase3d 
  import py4godot.classes.CollisionShape3D as py4godot_collisionshape3d 
  import py4godot.classes.XRHandModifier3D as py4godot_xrhandmodifier3d 
  import py4godot.classes.XRNode3D as py4godot_xrnode3d 
  import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
  import py4godot.classes.PhysicsBody3D as py4godot_physicsbody3d 
  import py4godot.classes.CSGPolygon3D as py4godot_csgpolygon3d 
  import py4godot.classes.MultiMeshInstance3D as py4godot_multimeshinstance3d 
  import py4godot.classes.PathFollow3D as py4godot_pathfollow3d 
  import py4godot.classes.SkeletonIK3D as py4godot_skeletonik3d 
  import py4godot.classes.PhysicalBoneSimulator3D as py4godot_physicalbonesimulator3d 
  import py4godot.classes.SpringBoneCollision3D as py4godot_springbonecollision3d 
  import py4godot.classes.ImporterMeshInstance3D as py4godot_importermeshinstance3d 
  import py4godot.classes.CopyTransformModifier3D as py4godot_copytransformmodifier3d 
  import py4godot.classes.AimModifier3D as py4godot_aimmodifier3d 
  import py4godot.classes.GPUParticlesCollisionSDF3D as py4godot_gpuparticlescollisionsdf3d 
  import py4godot.classes.RetargetModifier3D as py4godot_retargetmodifier3d 
  import py4godot.classes.XRController3D as py4godot_xrcontroller3d 
  import py4godot.classes.GPUParticlesCollision3D as py4godot_gpuparticlescollision3d 
  import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
  import py4godot.classes.Node3D as py4godot_node3d 
  import py4godot.classes.OpenXRVisibilityMask as py4godot_openxrvisibilitymask 
  import py4godot.classes.GPUParticles3D as py4godot_gpuparticles3d 
  import py4godot.classes.SpringArm3D as py4godot_springarm3d 
  import py4godot.classes.AudioListener3D as py4godot_audiolistener3d 
  import py4godot.classes.SpringBoneCollisionPlane3D as py4godot_springbonecollisionplane3d 
  import py4godot.classes.VehicleWheel3D as py4godot_vehiclewheel3d 
  import py4godot.classes.VehicleBody3D as py4godot_vehiclebody3d 
  import py4godot.classes.SpringBoneSimulator3D as py4godot_springbonesimulator3d 
  import py4godot.classes.SoftBody3D as py4godot_softbody3d 
  import py4godot.classes.GPUParticlesAttractorVectorField3D as py4godot_gpuparticlesattractorvectorfield3d 
  import py4godot.classes.CSGBox3D as py4godot_csgbox3d 
  import py4godot.classes.OpenXRCompositionLayerCylinder as py4godot_openxrcompositionlayercylinder 
  import py4godot.classes.CharacterBody3D as py4godot_characterbody3d 
  import py4godot.classes.ShapeCast3D as py4godot_shapecast3d 
  import py4godot.classes.XRCamera3D as py4godot_xrcamera3d 
  import py4godot.classes.CSGShape3D as py4godot_csgshape3d 
  import py4godot.classes.SpringBoneCollisionCapsule3D as py4godot_springbonecollisioncapsule3d 
  import py4godot.classes.LightmapGI as py4godot_lightmapgi 
  import py4godot.classes.VoxelGI as py4godot_voxelgi 
  import py4godot.classes.XRFaceModifier3D as py4godot_xrfacemodifier3d 
  import py4godot.classes.GPUParticlesCollisionHeightField3D as py4godot_gpuparticlescollisionheightfield3d 
  import py4godot.classes.XRPose as py4godot_xrpose 
  import py4godot.classes.PhysicalBone3D as py4godot_physicalbone3d 
  import py4godot.classes.ConeTwistJoint3D as py4godot_conetwistjoint3d 
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
  import py4godot.classes.VisibleOnScreenNotifier3D as py4godot_visibleonscreennotifier3d 
  import py4godot.classes.CollisionObject3D as py4godot_collisionobject3d 
  import py4godot.classes.SpotLight3D as py4godot_spotlight3d 
  import py4godot.classes.Marker3D as py4godot_marker3d 
  import py4godot.classes.AnimatedSprite3D as py4godot_animatedsprite3d 
  import py4godot.classes.CSGTorus3D as py4godot_csgtorus3d 
  import py4godot.classes.OpenXRHand as py4godot_openxrhand 
  import py4godot.classes.Generic6DOFJoint3D as py4godot_generic6dofjoint3d 
  import py4godot.classes.MeshInstance3D as py4godot_meshinstance3d 
  import py4godot.classes.Joint3D as py4godot_joint3d 
  import py4godot.classes.RigidBody3D as py4godot_rigidbody3d 
  import py4godot.classes.RayCast3D as py4godot_raycast3d 
  import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
  import py4godot.classes.XRBodyModifier3D as py4godot_xrbodymodifier3d 
  import py4godot.classes.CollisionPolygon3D as py4godot_collisionpolygon3d 
  import py4godot.classes.PinJoint3D as py4godot_pinjoint3d 
  import py4godot.classes.GeometryInstance3D as py4godot_geometryinstance3d 
  import py4godot.classes.Label3D as py4godot_label3d 
  import py4godot.classes.CSGSphere3D as py4godot_csgsphere3d 
  import py4godot.classes.OpenXRRenderModel as py4godot_openxrrendermodel 
  import py4godot.classes.GridMap as py4godot_gridmap 
  import py4godot.classes.ModifierBoneTarget3D as py4godot_modifierbonetarget3d 
  import py4godot.classes.CSGCylinder3D as py4godot_csgcylinder3d 
  import py4godot.classes.OpenXRCompositionLayer as py4godot_openxrcompositionlayer 
  import py4godot.classes.LookAtModifier3D as py4godot_lookatmodifier3d 
  import py4godot.classes.NavigationRegion3D as py4godot_navigationregion3d 
  import py4godot.classes.GPUParticlesCollisionSphere3D as py4godot_gpuparticlescollisionsphere3d 
  import py4godot.classes.NavigationObstacle3D as py4godot_navigationobstacle3d 
  import py4godot.classes.StaticBody3D as py4godot_staticbody3d 
  import py4godot.classes.HingeJoint3D as py4godot_hingejoint3d 
  import py4godot.classes.OpenXRCompositionLayerEquirect as py4godot_openxrcompositionlayerequirect 
  import py4godot.classes.SpringBoneCollisionSphere3D as py4godot_springbonecollisionsphere3d 
  import py4godot.classes.SliderJoint3D as py4godot_sliderjoint3d 
  import py4godot.classes.ConvertTransformModifier3D as py4godot_converttransformmodifier3d 
  import py4godot.classes.AnimatableBody3D as py4godot_animatablebody3d 
  import py4godot.classes.OpenXRCompositionLayerQuad as py4godot_openxrcompositionlayerquad 
  import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
  import py4godot.classes.ReflectionProbe as py4godot_reflectionprobe 
  import py4godot.classes.OpenXRRenderModelManager as py4godot_openxrrendermodelmanager 
  import py4godot.classes.NavigationLink3D as py4godot_navigationlink3d 
  import py4godot.classes.Decal as py4godot_decal 
  import py4godot.classes.GPUParticlesAttractorBox3D as py4godot_gpuparticlesattractorbox3d 
  import py4godot.classes.DirectionalLight3D as py4godot_directionallight3d 
  import py4godot.classes.Path3D as py4godot_path3d 
  import py4godot.classes.OmniLight3D as py4godot_omnilight3d 
  import py4godot.classes.RootMotionView as py4godot_rootmotionview 
  import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
  import py4godot.classes.CSGMesh3D as py4godot_csgmesh3d 
  import py4godot.classes.XROrigin3D as py4godot_xrorigin3d 
  import py4godot.classes.Light3D as py4godot_light3d 
  import py4godot.classes.BoneAttachment3D as py4godot_boneattachment3d 
  import py4godot.classes.RemoteTransform3D as py4godot_remotetransform3d 
  import py4godot.classes.CSGCombiner3D as py4godot_csgcombiner3d 
  import py4godot.classes.GPUParticlesAttractorSphere3D as py4godot_gpuparticlesattractorsphere3d 
  import py4godot.classes.OccluderInstance3D as py4godot_occluderinstance3d 
import py4godot.classes.OpenXRExtensionWrapper as py4godot_openxrextensionwrapper 
import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
from py4godot.wrappers.wrappers import CPPOpenXRRenderModelExtensionWrapper


class OpenXRRenderModelExtension(py4godot_openxrextensionwrapper.OpenXRExtensionWrapper):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRRenderModelExtension.construct_without_init()
    class_._ptr = constructor(559,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRRenderModelExtension.construct_without_init()
    class_._ptr = constructor(559,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRRenderModelExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(559,0, ())


  def generate_wrapper(self):
    return CPPOpenXRRenderModelExtensionWrapper()
  def init_signals(self):
    super().init_signals()
    render_model_added_name = utils.py_string_to_string_name("render_model_added")
    self.render_model_added = signals.BuiltinSignal(self, render_model_added_name)
    render_model_removed_name = utils.py_string_to_string_name("render_model_removed")
    self.render_model_removed = signals.BuiltinSignal(self, render_model_removed_name)
    render_model_top_level_path_changed_name = utils.py_string_to_string_name("render_model_top_level_path_changed")
    self.render_model_top_level_path_changed = signals.BuiltinSignal(self, render_model_top_level_path_changed_name)

  @staticmethod
  def construct_without_init():
    cls = OpenXRRenderModelExtension.__new__(OpenXRRenderModelExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRRenderModelExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRRenderModelExtension.construct_without_init()
    cls._ptr = CPPOpenXRRenderModelExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRRenderModelExtension.construct_without_init()
    cls._ptr = CPPOpenXRRenderModelExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def is_active(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))
    return _ret


  @functools.native_method
  def render_model_create(self, render_model_id:'int'   ) -> typing.Union['RID']:
    r''''''

    assert isinstance(render_model_id, (int, float)), 'render_model_id must be int or float'






    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([render_model_id]))
    return _ret


  @functools.native_method
  def render_model_destroy(self, render_model:'RID'   ) -> None:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'






    self._ptr.call_with_return(80,tuple([render_model._ptr]))

  @functools.native_method
  def render_model_get_all(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''




    _ret = py4godot_ridtypedarray.RIDTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([]))
    return _ret


  @functools.native_method
  def render_model_new_scene_instance(self, render_model:'RID'   ) -> typing.Any:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Node3D
    _ret._ptr = self._ptr.call_with_return(82,tuple([render_model._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def render_model_get_subaction_paths(self, render_model:'RID'   ) -> typing.Union['PackedStringArray']:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'






    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([render_model._ptr]))
    return _ret


  @functools.native_method
  def render_model_get_top_level_path(self, render_model:'RID'   ) -> typing.Union[str]:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([render_model._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def render_model_get_confidence(self, render_model:'RID'   ) -> typing.Union[int]:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'






    _ret:int
    _ret = self._ptr.call_with_return(85,tuple([render_model._ptr]))
    return _ret


  @functools.native_method
  def render_model_get_root_transform(self, render_model:'RID'   ) -> typing.Union['Transform3D']:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'






    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(86,tuple([render_model._ptr]))
    return _ret


  @functools.native_method
  def render_model_get_animatable_node_count(self, render_model:'RID'   ) -> typing.Union[int]:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([render_model._ptr]))
    return _ret


  @functools.native_method
  def render_model_get_animatable_node_name(self, render_model:'RID'   , index:'int'   ) -> typing.Union[str]:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'
    assert isinstance(index, (int, float)), 'index must be int or float'







    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(88,tuple([render_model._ptr, index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def render_model_is_animatable_node_visible(self, render_model:'RID'   , index:'int'   ) -> typing.Union[bool]:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'
    assert isinstance(index, (int, float)), 'index must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([render_model._ptr, index]))
    return _ret


  @functools.native_method
  def render_model_get_animatable_node_transform(self, render_model:'RID'   , index:'int'   ) -> typing.Union['Transform3D']:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'
    assert isinstance(index, (int, float)), 'index must be int or float'







    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(90,tuple([render_model._ptr, index]))
    return _ret



register_cast_function('OpenXRRenderModelExtension', OpenXRRenderModelExtension.cast)
register_class('OpenXRRenderModelExtension', OpenXRRenderModelExtension)
