# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.PhysicsServer2DExtension as py4godot_physicsserver2dextension 
  import py4godot.classes.PhysicsDirectBodyState2DExtension as py4godot_physicsdirectbodystate2dextension 
  import py4godot.classes.PhysicsTestMotionParameters2D as py4godot_physicstestmotionparameters2d 
  import py4godot.classes.PhysicsDirectBodyState2D as py4godot_physicsdirectbodystate2d 
  import py4godot.classes.PhysicsDirectSpaceState2D as py4godot_physicsdirectspacestate2d 
  import py4godot.classes.PhysicsDirectSpaceState2DExtension as py4godot_physicsdirectspacestate2dextension 
  import py4godot.classes.PhysicsTestMotionResult2D as py4godot_physicstestmotionresult2d 
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPPhysicsServer2DWrapper

_PhysicsServer2D_singleton_instance = None
class SpaceParameter:
  SPACE_PARAM_CONTACT_RECYCLE_RADIUS = 0
  SPACE_PARAM_CONTACT_MAX_SEPARATION = 1
  SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION = 2
  SPACE_PARAM_CONTACT_DEFAULT_BIAS = 3
  SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD = 4
  SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD = 5
  SPACE_PARAM_BODY_TIME_TO_SLEEP = 6
  SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS = 7
  SPACE_PARAM_SOLVER_ITERATIONS = 8
class ShapeType:
  SHAPE_WORLD_BOUNDARY = 0
  SHAPE_SEPARATION_RAY = 1
  SHAPE_SEGMENT = 2
  SHAPE_CIRCLE = 3
  SHAPE_RECTANGLE = 4
  SHAPE_CAPSULE = 5
  SHAPE_CONVEX_POLYGON = 6
  SHAPE_CONCAVE_POLYGON = 7
  SHAPE_CUSTOM = 8
class AreaParameter:
  AREA_PARAM_GRAVITY_OVERRIDE_MODE = 0
  AREA_PARAM_GRAVITY = 1
  AREA_PARAM_GRAVITY_VECTOR = 2
  AREA_PARAM_GRAVITY_IS_POINT = 3
  AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE = 4
  AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE = 5
  AREA_PARAM_LINEAR_DAMP = 6
  AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE = 7
  AREA_PARAM_ANGULAR_DAMP = 8
  AREA_PARAM_PRIORITY = 9
class AreaSpaceOverrideMode:
  AREA_SPACE_OVERRIDE_DISABLED = 0
  AREA_SPACE_OVERRIDE_COMBINE = 1
  AREA_SPACE_OVERRIDE_COMBINE_REPLACE = 2
  AREA_SPACE_OVERRIDE_REPLACE = 3
  AREA_SPACE_OVERRIDE_REPLACE_COMBINE = 4
class BodyMode:
  BODY_MODE_STATIC = 0
  BODY_MODE_KINEMATIC = 1
  BODY_MODE_RIGID = 2
  BODY_MODE_RIGID_LINEAR = 3
class BodyParameter:
  BODY_PARAM_BOUNCE = 0
  BODY_PARAM_FRICTION = 1
  BODY_PARAM_MASS = 2
  BODY_PARAM_INERTIA = 3
  BODY_PARAM_CENTER_OF_MASS = 4
  BODY_PARAM_GRAVITY_SCALE = 5
  BODY_PARAM_LINEAR_DAMP_MODE = 6
  BODY_PARAM_ANGULAR_DAMP_MODE = 7
  BODY_PARAM_LINEAR_DAMP = 8
  BODY_PARAM_ANGULAR_DAMP = 9
  BODY_PARAM_MAX = 10
class BodyDampMode:
  BODY_DAMP_MODE_COMBINE = 0
  BODY_DAMP_MODE_REPLACE = 1
class BodyState:
  BODY_STATE_TRANSFORM = 0
  BODY_STATE_LINEAR_VELOCITY = 1
  BODY_STATE_ANGULAR_VELOCITY = 2
  BODY_STATE_SLEEPING = 3
  BODY_STATE_CAN_SLEEP = 4
class JointType:
  JOINT_TYPE_PIN = 0
  JOINT_TYPE_GROOVE = 1
  JOINT_TYPE_DAMPED_SPRING = 2
  JOINT_TYPE_MAX = 3
class JointParam:
  JOINT_PARAM_BIAS = 0
  JOINT_PARAM_MAX_BIAS = 1
  JOINT_PARAM_MAX_FORCE = 2
class PinJointParam:
  PIN_JOINT_SOFTNESS = 0
  PIN_JOINT_LIMIT_UPPER = 1
  PIN_JOINT_LIMIT_LOWER = 2
  PIN_JOINT_MOTOR_TARGET_VELOCITY = 3
class PinJointFlag:
  PIN_JOINT_FLAG_ANGULAR_LIMIT_ENABLED = 0
  PIN_JOINT_FLAG_MOTOR_ENABLED = 1
class DampedSpringParam:
  DAMPED_SPRING_REST_LENGTH = 0
  DAMPED_SPRING_STIFFNESS = 1
  DAMPED_SPRING_DAMPING = 2
class CCDMode:
  CCD_MODE_DISABLED = 0
  CCD_MODE_CAST_RAY = 1
  CCD_MODE_CAST_SHAPE = 2
class AreaBodyStatus:
  AREA_BODY_ADDED = 0
  AREA_BODY_REMOVED = 1
class ProcessInfo:
  INFO_ACTIVE_OBJECTS = 0
  INFO_COLLISION_PAIRS = 1
  INFO_ISLAND_COUNT = 2


class PhysicsServer2D(py4godot_object.Object):
  r'''
		PhysicsServer2D is the server responsible for all 2D physics. It can directly create and manipulate all physics objects:
		- A _space_ is a self-contained world for a physics simulation. It contains bodies, areas, and joints. Its state can be queried for collision and intersection information, and several parameters of the simulation can be modified.
		- A _shape_ is a geometric shape such as a circle, a rectangle, a capsule, or a polygon. It can be used for collision detection by adding it to a body/area, possibly with an extra transformation relative to the body/area's origin. Bodies/areas can have multiple (transformed) shapes added to them, and a single shape can be added to bodies/areas multiple times with different local transformations.
		- A _body_ is a physical object which can be in static, kinematic, or rigid mode. Its state (such as position and velocity) can be queried and updated. A force integration callback can be set to customize the body's physics.
		- An _area_ is a region in space which can be used to detect bodies and areas entering and exiting it. A body monitoring callback can be set to report entering/exiting body shapes, and similarly an area monitoring callback can be set. Gravity and damping can be overridden within the area by setting area parameters.
		- A _joint_ is a constraint, either between two bodies or on one body relative to a point. Parameters such as the joint bias and the rest length of a spring joint can be adjusted.
		Physics objects in `PhysicsServer2D` may be created and manipulated independently; they do not have to be tied to nodes in the scene tree.
		**Note:** All the 2D physics nodes use the physics server internally. Adding a physics node to the scene tree will cause a corresponding physics object to be created in the physics server. A rigid body node registers a callback that updates the node's transform with the transform of the respective body object in the physics server (every physics update). An area node registers a callback to inform the area node about overlaps with the respective area object in the physics server. The raycast node queries the direct state of the relevant space in the physics server.
	'''


  def generate_wrapper(self):
    return CPPPhysicsServer2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsServer2D.__new__(PhysicsServer2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsServer2D'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsServer2D.construct_without_init()
    cls._ptr = CPPPhysicsServer2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsServer2D.construct_without_init()
    cls._ptr = CPPPhysicsServer2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _PhysicsServer2D_singleton_instance
    if _PhysicsServer2D_singleton_instance is None:
      singleton = PhysicsServer2D()
      singleton._ptr = constructor(604,0, ())
      _PhysicsServer2D_singleton_instance = singleton
    return _PhysicsServer2D_singleton_instance

  @functools.native_method
  def world_boundary_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D world boundary shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the shape's normal direction and distance properties.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(49,tuple([]))
    return _ret


  @functools.native_method
  def separation_ray_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D separation ray shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the shape's `length` and `slide_on_slope` properties.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(50,tuple([]))
    return _ret


  @functools.native_method
  def segment_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D segment shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the segment's start and end points.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(51,tuple([]))
    return _ret


  @functools.native_method
  def circle_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D circle shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the circle's radius.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(52,tuple([]))
    return _ret


  @functools.native_method
  def rectangle_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D rectangle shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the rectangle's half-extents.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def capsule_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D capsule shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the capsule's height and radius.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def convex_polygon_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D convex polygon shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the convex polygon's points.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def concave_polygon_shape_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D concave polygon shape in the physics server, and returns the `RID` that identifies it. Use `shape_set_data` to set the concave polygon's segments.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))
    return _ret


  @functools.native_method
  def shape_set_data(self, shape:'RID'   , data:'object'   ) -> None:
    r'''
				Sets the shape data that defines the configuration of the shape. The `data` to be passed depends on the shape's type (see `shape_get_type`):
				- `constant SHAPE_WORLD_BOUNDARY`: an array of length two containing a `Vector2` `normal` direction and a `float` distance `d`,
				- `constant SHAPE_SEPARATION_RAY`: a dictionary containing the key `length` with a `float` value and the key `slide_on_slope` with a `bool` value,
				- `constant SHAPE_SEGMENT`: a `Rect2` `rect` containing the first point of the segment in `rect.position` and the second point of the segment in `rect.size`,
				- `constant SHAPE_CIRCLE`: a `float` `radius`,
				- `constant SHAPE_RECTANGLE`: a `Vector2` `half_extents`,
				- `constant SHAPE_CAPSULE`: an array of length two (or a `Vector2`) containing a `float` `height` and a `float` `radius`,
				- `constant SHAPE_CONVEX_POLYGON`: either a `PackedVector2Array` of points defining a convex polygon in counterclockwise order (the clockwise outward normal of each segment formed by consecutive points is calculated internally), or a `PackedFloat32Array` of length divisible by four so that every 4-tuple of `float`s contains the coordinates of a point followed by the coordinates of the clockwise outward normal vector to the segment between the current point and the next point,
				- `constant SHAPE_CONCAVE_POLYGON`: a `PackedVector2Array` of length divisible by two (each pair of points forms one segment).
				**Warning:** In the case of `constant SHAPE_CONVEX_POLYGON`, this method does not check if the points supplied actually form a convex polygon (unlike the `CollisionPolygon2D.polygon` property).
			'''

    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'
    







    self._ptr.call_with_return(57,tuple([shape._ptr, data]))

  @functools.native_method
  def shape_get_type(self, shape:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the shape's type.
			'''

    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'






    _ret:int
    _ret = self._ptr.call_with_return(58,tuple([shape._ptr]))
    return _ret


  @functools.native_method
  def shape_get_data(self, shape:'RID'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the shape data that defines the configuration of the shape, such as the half-extents of a rectangle or the segments of a concave shape. See `shape_set_data` for the precise format of this data in each case.
			'''

    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'






    _ret = None
    _ret = self._ptr.call_with_return(59,tuple([shape._ptr]))
    return _ret


  @functools.native_method
  def space_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D space in the physics server, and returns the `RID` that identifies it. A space contains bodies and areas, and controls the stepping of the physics simulation of the objects in it.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))
    return _ret


  @functools.native_method
  def space_set_active(self, space:'RID'   , active:'bool'   ) -> None:
    r'''
				Activates or deactivates the space. If `active` is `false`, then the physics server will not do anything with this space in its physics step.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'
    assert isinstance(active, bool), 'active must be bool'







    self._ptr.call_with_return(61,tuple([space._ptr, active]))

  @functools.native_method
  def space_is_active(self, space:'RID'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the space is active.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([space._ptr]))
    return _ret


  @functools.native_method
  def space_set_param(self, space:'RID'   , param:'int'  , value:'float'   ) -> None:
    r'''
				Sets the value of the given space parameter.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'








    self._ptr.call_with_return(63,tuple([space._ptr, param, value]))

  @functools.native_method
  def space_get_param(self, space:'RID'   , param:'int'  ) -> typing.Union[float]:
    r'''
				Returns the value of the given space parameter.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([space._ptr, param]))
    return _ret


  @functools.native_method
  def space_get_direct_state(self, space:'RID'   ) -> typing.Union['py4godot_physicsdirectspacestate2dextension.PhysicsDirectSpaceState2DExtension','py4godot_physicsdirectspacestate2d.PhysicsDirectSpaceState2D']:
    r'''
				Returns the state of a space, a `PhysicsDirectSpaceState2D`. This object can be used for collision/intersection queries.
			'''

    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PhysicsDirectSpaceState2D
    _ret._ptr = self._ptr.call_with_return(65,tuple([space._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def area_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D area object in the physics server, and returns the `RID` that identifies it. The default settings for the created area include a collision layer and mask set to `1`, and `monitorable` set to `false`.
				Use `area_add_shape` to add shapes to it, use `area_set_transform` to set its transform, and use `area_set_space` to add the area to a space. If you want the area to be detectable use `area_set_monitorable`.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(66,tuple([]))
    return _ret


  @functools.native_method
  def area_set_space(self, area:'RID'   , space:'RID'   ) -> None:
    r'''
				Adds the area to the given space, after removing the area from the previously assigned space (if any).
				**Note:** To remove an area from a space without immediately adding it back elsewhere, use `PhysicsServer2D.area_set_space(area, RID())`.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'







    self._ptr.call_with_return(67,tuple([area._ptr, space._ptr]))

  @functools.native_method
  def area_get_space(self, area:'RID'   ) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the space assigned to the area. Returns an empty `RID` if no space is assigned.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(68,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_add_shape(self, area:'RID'   , shape:'RID'   , transform:'Transform2D' = None  , disabled:'bool' =False  ) -> None:
    r'''
				Adds a shape to the area, with the given local transform. The shape (together with its `transform` and `disabled` properties) is added to an array of shapes, and the shapes of an area are usually referenced by their index in this array.
			'''
    if transform is None:
      transform = Transform2D.new0()
    if transform is None:
      transform = Transform2D.new0()

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'
    assert isinstance(disabled, bool), 'disabled must be bool'









    self._ptr.call_with_return(69,tuple([area._ptr, shape._ptr, transform._ptr, disabled]))

  @functools.native_method
  def area_set_shape(self, area:'RID'   , shape_idx:'int'   , shape:'RID'   ) -> None:
    r'''
				Replaces the area's shape at the given index by another shape, while not affecting the `transform` and `disabled` properties at the same index.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'








    self._ptr.call_with_return(70,tuple([area._ptr, shape_idx, shape._ptr]))

  @functools.native_method
  def area_set_shape_transform(self, area:'RID'   , shape_idx:'int'   , transform:'Transform2D'   ) -> None:
    r'''
				Sets the local transform matrix of the area's shape with the given index.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert(not transform is None)
    assert isinstance(transform, Transform2D), 'transform must be Transform2D'








    self._ptr.call_with_return(71,tuple([area._ptr, shape_idx, transform._ptr]))

  @functools.native_method
  def area_set_shape_disabled(self, area:'RID'   , shape_idx:'int'   , disabled:'bool'   ) -> None:
    r'''
				Sets the disabled property of the area's shape with the given index. If `disabled` is `true`, then the shape will not detect any other shapes entering or exiting it.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert isinstance(disabled, bool), 'disabled must be bool'








    self._ptr.call_with_return(72,tuple([area._ptr, shape_idx, disabled]))

  @functools.native_method
  def area_get_shape_count(self, area:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the number of shapes added to the area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_get_shape(self, area:'RID'   , shape_idx:'int'   ) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the shape with the given index in the area's array of shapes.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(74,tuple([area._ptr, shape_idx]))
    return _ret


  @functools.native_method
  def area_get_shape_transform(self, area:'RID'   , shape_idx:'int'   ) -> typing.Union['Transform2D']:
    r'''
				Returns the local transform matrix of the shape with the given index in the area's array of shapes.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    _ret = Transform2D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(75,tuple([area._ptr, shape_idx]))
    return _ret


  @functools.native_method
  def area_remove_shape(self, area:'RID'   , shape_idx:'int'   ) -> None:
    r'''
				Removes the shape with the given index from the area's array of shapes. The shape itself is not deleted, so it can continue to be used elsewhere or added back later. As a result of this operation, the area's shapes which used to have indices higher than `shape_idx` will have their index decreased by one.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    self._ptr.call_with_return(76,tuple([area._ptr, shape_idx]))

  @functools.native_method
  def area_clear_shapes(self, area:'RID'   ) -> None:
    r'''
				Removes all shapes from the area. This does not delete the shapes themselves, so they can continue to be used elsewhere or added back later.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    self._ptr.call_with_return(77,tuple([area._ptr]))

  @functools.native_method
  def area_set_collision_layer(self, area:'RID'   , layer:'int'   ) -> None:
    r'''
				Assigns the area to one or many physics layers, via a bitmask.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(layer, (int, float)), 'layer must be int or float'







    self._ptr.call_with_return(78,tuple([area._ptr, layer]))

  @functools.native_method
  def area_get_collision_layer(self, area:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers the area belongs to, as a bitmask.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_set_collision_mask(self, area:'RID'   , mask:'int'   ) -> None:
    r'''
				Sets which physics layers the area will monitor, via a bitmask.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(mask, (int, float)), 'mask must be int or float'







    self._ptr.call_with_return(80,tuple([area._ptr, mask]))

  @functools.native_method
  def area_get_collision_mask(self, area:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers the area can contact with, as a bitmask.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_set_param(self, area:'RID'   , param:'int'  , value:'object'   ) -> None:
    r'''
				Sets the value of the given area parameter.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    








    self._ptr.call_with_return(82,tuple([area._ptr, param, value]))

  @functools.native_method
  def area_set_transform(self, area:'RID'   , transform:'Transform2D'   ) -> None:
    r'''
				Sets the transform matrix of the area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not transform is None)
    assert isinstance(transform, Transform2D), 'transform must be Transform2D'







    self._ptr.call_with_return(83,tuple([area._ptr, transform._ptr]))

  @functools.native_method
  def area_get_param(self, area:'RID'   , param:'int'  ) -> typing.Union[typing.Any]:
    r'''
				Returns the value of the given area parameter.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(84,tuple([area._ptr, param]))
    return _ret


  @functools.native_method
  def area_get_transform(self, area:'RID'   ) -> typing.Union['Transform2D']:
    r'''
				Returns the transform matrix of the area.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = Transform2D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_attach_object_instance_id(self, area:'RID'   , id:'int'   ) -> None:
    r'''
				Attaches the `ObjectID` of an `Object` to the area. Use `Object.get_instance_id` to get the `ObjectID` of a `CollisionObject2D`.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(id, (int, float)), 'id must be int or float'







    self._ptr.call_with_return(86,tuple([area._ptr, id]))

  @functools.native_method
  def area_get_object_instance_id(self, area:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the `ObjectID` attached to the area. Use `@GlobalScope.instance_from_id` to retrieve an `Object` from a nonzero `ObjectID`.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_attach_canvas_instance_id(self, area:'RID'   , id:'int'   ) -> None:
    r'''
				Attaches the `ObjectID` of a canvas to the area. Use `Object.get_instance_id` to get the `ObjectID` of a `CanvasLayer`.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(id, (int, float)), 'id must be int or float'







    self._ptr.call_with_return(88,tuple([area._ptr, id]))

  @functools.native_method
  def area_get_canvas_instance_id(self, area:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the `ObjectID` of the canvas attached to the area. Use `@GlobalScope.instance_from_id` to retrieve a `CanvasLayer` from a nonzero `ObjectID`.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([area._ptr]))
    return _ret


  @functools.native_method
  def area_set_monitor_callback(self, area:'RID'   , callback:'Callable'   ) -> None:
    r'''
				Sets the area's body monitor callback. This callback will be called when any other (shape of a) body enters or exits (a shape of) the given area, and must take the following five parameters:
				1. an integer `status`: either `constant AREA_BODY_ADDED` or `constant AREA_BODY_REMOVED` depending on whether the other body shape entered or exited the area,
				2. an `RID` `body_rid`: the `RID` of the body that entered or exited the area,
				3. an integer `instance_id`: the `ObjectID` attached to the body,
				4. an integer `body_shape_idx`: the index of the shape of the body that entered or exited the area,
				5. an integer `self_shape_idx`: the index of the shape of the area where the body entered or exited.
				By counting (or keeping track of) the shapes that enter and exit, it can be determined if a body (with all its shapes) is entering for the first time or exiting for the last time.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not callback is None)
    assert isinstance(callback, Callable), 'callback must be Callable'







    self._ptr.call_with_return(90,tuple([area._ptr, callback._ptr]))

  @functools.native_method
  def area_set_area_monitor_callback(self, area:'RID'   , callback:'Callable'   ) -> None:
    r'''
				Sets the area's area monitor callback. This callback will be called when any other (shape of an) area enters or exits (a shape of) the given area, and must take the following five parameters:
				1. an integer `status`: either `constant AREA_BODY_ADDED` or `constant AREA_BODY_REMOVED` depending on whether the other area's shape entered or exited the area,
				2. an `RID` `area_rid`: the `RID` of the other area that entered or exited the area,
				3. an integer `instance_id`: the `ObjectID` attached to the other area,
				4. an integer `area_shape_idx`: the index of the shape of the other area that entered or exited the area,
				5. an integer `self_shape_idx`: the index of the shape of the area where the other area entered or exited.
				By counting (or keeping track of) the shapes that enter and exit, it can be determined if an area (with all its shapes) is entering for the first time or exiting for the last time.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert(not callback is None)
    assert isinstance(callback, Callable), 'callback must be Callable'







    self._ptr.call_with_return(91,tuple([area._ptr, callback._ptr]))

  @functools.native_method
  def area_set_monitorable(self, area:'RID'   , monitorable:'bool'   ) -> None:
    r'''
				Sets whether the area is monitorable or not. If `monitorable` is `true`, the area monitoring callback of other areas will be called when this area enters or exits them.
			'''

    assert(not area is None)
    assert isinstance(area, RID), 'area must be RID'
    assert isinstance(monitorable, bool), 'monitorable must be bool'







    self._ptr.call_with_return(92,tuple([area._ptr, monitorable]))

  @functools.native_method
  def body_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D body object in the physics server, and returns the `RID` that identifies it. The default settings for the created area include a collision layer and mask set to `1`, and body mode set to `constant BODY_MODE_RIGID`.
				Use `body_add_shape` to add shapes to it, use `body_set_state` to set its transform, and use `body_set_space` to add the body to a space.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(93,tuple([]))
    return _ret


  @functools.native_method
  def body_set_space(self, body:'RID'   , space:'RID'   ) -> None:
    r'''
				Adds the body to the given space, after removing the body from the previously assigned space (if any). If the body's mode is set to `constant BODY_MODE_RIGID`, then adding the body to a space will have the following additional effects:
				- If the parameter `constant BODY_PARAM_CENTER_OF_MASS` has never been set explicitly, then the value of that parameter will be recalculated based on the body's shapes.
				- If the parameter `constant BODY_PARAM_INERTIA` is set to a value `<= 0.0`, then the value of that parameter will be recalculated based on the body's shapes, mass, and center of mass.
				**Note:** To remove a body from a space without immediately adding it back elsewhere, use `PhysicsServer2D.body_set_space(body, RID())`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not space is None)
    assert isinstance(space, RID), 'space must be RID'







    self._ptr.call_with_return(94,tuple([body._ptr, space._ptr]))

  @functools.native_method
  def body_get_space(self, body:'RID'   ) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the space assigned to the body. Returns an empty `RID` if no space is assigned.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(95,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_mode(self, body:'RID'   , mode:'int'  ) -> None:
    r'''
				Sets the body's mode.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(mode, (int, float)), 'mode must be int or float'







    self._ptr.call_with_return(96,tuple([body._ptr, mode]))

  @functools.native_method
  def body_get_mode(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the body's mode.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret:int
    _ret = self._ptr.call_with_return(97,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_add_shape(self, body:'RID'   , shape:'RID'   , transform:'Transform2D' = None  , disabled:'bool' =False  ) -> None:
    r'''
				Adds a shape to the area, with the given local transform. The shape (together with its `transform` and `disabled` properties) is added to an array of shapes, and the shapes of a body are usually referenced by their index in this array.
			'''
    if transform is None:
      transform = Transform2D.new0()
    if transform is None:
      transform = Transform2D.new0()

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'
    assert isinstance(disabled, bool), 'disabled must be bool'









    self._ptr.call_with_return(98,tuple([body._ptr, shape._ptr, transform._ptr, disabled]))

  @functools.native_method
  def body_set_shape(self, body:'RID'   , shape_idx:'int'   , shape:'RID'   ) -> None:
    r'''
				Replaces the body's shape at the given index by another shape, while not affecting the `transform`, `disabled`, and one-way collision properties at the same index.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert(not shape is None)
    assert isinstance(shape, RID), 'shape must be RID'








    self._ptr.call_with_return(99,tuple([body._ptr, shape_idx, shape._ptr]))

  @functools.native_method
  def body_set_shape_transform(self, body:'RID'   , shape_idx:'int'   , transform:'Transform2D'   ) -> None:
    r'''
				Sets the local transform matrix of the body's shape with the given index.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert(not transform is None)
    assert isinstance(transform, Transform2D), 'transform must be Transform2D'








    self._ptr.call_with_return(100,tuple([body._ptr, shape_idx, transform._ptr]))

  @functools.native_method
  def body_get_shape_count(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the number of shapes added to the body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(101,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_get_shape(self, body:'RID'   , shape_idx:'int'   ) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the shape with the given index in the body's array of shapes.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(102,tuple([body._ptr, shape_idx]))
    return _ret


  @functools.native_method
  def body_get_shape_transform(self, body:'RID'   , shape_idx:'int'   ) -> typing.Union['Transform2D']:
    r'''
				Returns the local transform matrix of the shape with the given index in the area's array of shapes.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    _ret = Transform2D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(103,tuple([body._ptr, shape_idx]))
    return _ret


  @functools.native_method
  def body_remove_shape(self, body:'RID'   , shape_idx:'int'   ) -> None:
    r'''
				Removes the shape with the given index from the body's array of shapes. The shape itself is not deleted, so it can continue to be used elsewhere or added back later. As a result of this operation, the body's shapes which used to have indices higher than `shape_idx` will have their index decreased by one.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'







    self._ptr.call_with_return(104,tuple([body._ptr, shape_idx]))

  @functools.native_method
  def body_clear_shapes(self, body:'RID'   ) -> None:
    r'''
				Removes all shapes from the body. This does not delete the shapes themselves, so they can continue to be used elsewhere or added back later.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    self._ptr.call_with_return(105,tuple([body._ptr]))

  @functools.native_method
  def body_set_shape_disabled(self, body:'RID'   , shape_idx:'int'   , disabled:'bool'   ) -> None:
    r'''
				Sets the disabled property of the body's shape with the given index. If `disabled` is `true`, then the shape will be ignored in all collision detection.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert isinstance(disabled, bool), 'disabled must be bool'








    self._ptr.call_with_return(106,tuple([body._ptr, shape_idx, disabled]))

  @functools.native_method
  def body_set_shape_as_one_way_collision(self, body:'RID'   , shape_idx:'int'   , enable:'bool'   , margin:'float'   ) -> None:
    r'''
				Sets the one-way collision properties of the body's shape with the given index. If `enable` is `true`, the one-way collision direction given by the shape's local upward axis `body_get_shape_transform(body, shape_idx).y` will be used to ignore collisions with the shape in the opposite direction, and to ensure depenetration of kinematic bodies happens in this direction.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(shape_idx, (int, float)), 'shape_idx must be int or float'
    assert isinstance(enable, bool), 'enable must be bool'
    assert isinstance(margin, (int, float)), 'margin must be int or float'









    self._ptr.call_with_return(107,tuple([body._ptr, shape_idx, enable, margin]))

  @functools.native_method
  def body_attach_object_instance_id(self, body:'RID'   , id:'int'   ) -> None:
    r'''
				Attaches the `ObjectID` of an `Object` to the body. Use `Object.get_instance_id` to get the `ObjectID` of a `CollisionObject2D`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(id, (int, float)), 'id must be int or float'







    self._ptr.call_with_return(108,tuple([body._ptr, id]))

  @functools.native_method
  def body_get_object_instance_id(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the `ObjectID` attached to the body. Use `@GlobalScope.instance_from_id` to retrieve an `Object` from a nonzero `ObjectID`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(109,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_attach_canvas_instance_id(self, body:'RID'   , id:'int'   ) -> None:
    r'''
				Attaches the `ObjectID` of a canvas to the body. Use `Object.get_instance_id` to get the `ObjectID` of a `CanvasLayer`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(id, (int, float)), 'id must be int or float'







    self._ptr.call_with_return(110,tuple([body._ptr, id]))

  @functools.native_method
  def body_get_canvas_instance_id(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the `ObjectID` of the canvas attached to the body. Use `@GlobalScope.instance_from_id` to retrieve a `CanvasLayer` from a nonzero `ObjectID`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(111,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_continuous_collision_detection_mode(self, body:'RID'   , mode:'int'  ) -> None:
    r'''
				Sets the continuous collision detection mode.
				Continuous collision detection tries to predict where a moving body would collide in between physics updates, instead of moving it and correcting its movement if it collided.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(mode, (int, float)), 'mode must be int or float'







    self._ptr.call_with_return(112,tuple([body._ptr, mode]))

  @functools.native_method
  def body_get_continuous_collision_detection_mode(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the body's continuous collision detection mode.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret:int
    _ret = self._ptr.call_with_return(113,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_collision_layer(self, body:'RID'   , layer:'int'   ) -> None:
    r'''
				Sets the physics layer or layers the body belongs to, via a bitmask.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(layer, (int, float)), 'layer must be int or float'







    self._ptr.call_with_return(114,tuple([body._ptr, layer]))

  @functools.native_method
  def body_get_collision_layer(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers the body belongs to, as a bitmask.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(115,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_collision_mask(self, body:'RID'   , mask:'int'   ) -> None:
    r'''
				Sets the physics layer or layers the body can collide with, via a bitmask.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(mask, (int, float)), 'mask must be int or float'







    self._ptr.call_with_return(116,tuple([body._ptr, mask]))

  @functools.native_method
  def body_get_collision_mask(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the physics layer or layers the body can collide with, as a bitmask.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(117,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_collision_priority(self, body:'RID'   , priority:'float'   ) -> None:
    r'''
				Sets the body's collision priority. This is used in the depenetration phase of `body_test_motion`. The higher the priority is, the lower the penetration into the body will be.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(priority, (int, float)), 'priority must be int or float'







    self._ptr.call_with_return(118,tuple([body._ptr, priority]))

  @functools.native_method
  def body_get_collision_priority(self, body:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the body's collision priority. This is used in the depenetration phase of `body_test_motion`. The higher the priority is, the lower the penetration into the body will be.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(119,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_param(self, body:'RID'   , param:'int'  , value:'object'   ) -> None:
    r'''
				Sets the value of the given body parameter.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    








    self._ptr.call_with_return(120,tuple([body._ptr, param, value]))

  @functools.native_method
  def body_get_param(self, body:'RID'   , param:'int'  ) -> typing.Union[typing.Any]:
    r'''
				Returns the value of the given body parameter.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(121,tuple([body._ptr, param]))
    return _ret


  @functools.native_method
  def body_reset_mass_properties(self, body:'RID'   ) -> None:
    r'''
				Restores the default inertia and center of mass of the body based on its shapes. This undoes any custom values previously set using `body_set_param`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    self._ptr.call_with_return(122,tuple([body._ptr]))

  @functools.native_method
  def body_set_state(self, body:'RID'   , state:'int'  , value:'object'   ) -> None:
    r'''
				Sets the value of a body's state.
				**Note:** The state change doesn't take effect immediately. The state will change on the next physics frame.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(state, (int, float)), 'state must be int or float'
    








    self._ptr.call_with_return(123,tuple([body._ptr, state, value]))

  @functools.native_method
  def body_get_state(self, body:'RID'   , state:'int'  ) -> typing.Union[typing.Any]:
    r'''
				Returns the value of the given state of the body.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(state, (int, float)), 'state must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(124,tuple([body._ptr, state]))
    return _ret


  @functools.native_method
  def body_apply_central_impulse(self, body:'RID'   , impulse:'Vector2'   ) -> None:
    r'''
				Applies a directional impulse to the body, at the body's center of mass. The impulse does not affect rotation.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				This is equivalent to using `body_apply_impulse` at the body's center of mass.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not impulse is None)
    assert isinstance(impulse, Vector2), 'impulse must be Vector2'







    self._ptr.call_with_return(125,tuple([body._ptr, impulse._ptr]))

  @functools.native_method
  def body_apply_torque_impulse(self, body:'RID'   , impulse:'float'   ) -> None:
    r'''
				Applies a rotational impulse to the body. The impulse does not affect position.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(impulse, (int, float)), 'impulse must be int or float'







    self._ptr.call_with_return(126,tuple([body._ptr, impulse]))

  @functools.native_method
  def body_apply_impulse(self, body:'RID'   , impulse:'Vector2'   , position:'Vector2' = None  ) -> None:
    r'''
				Applies a positioned impulse to the body. The impulse can affect rotation if `position` is different from the body's center of mass.
				An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
				`position` is the offset from the body origin in global coordinates.
			'''
    if position is None:
      position = Vector2.new0()
    if position is None:
      position = Vector2.new0()

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not impulse is None)
    assert isinstance(impulse, Vector2), 'impulse must be Vector2'








    self._ptr.call_with_return(127,tuple([body._ptr, impulse._ptr, position._ptr]))

  @functools.native_method
  def body_apply_central_force(self, body:'RID'   , force:'Vector2'   ) -> None:
    r'''
				Applies a directional force to the body, at the body's center of mass. The force does not affect rotation. A force is time dependent and meant to be applied every physics update.
				This is equivalent to using `body_apply_force` at the body's center of mass.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector2), 'force must be Vector2'







    self._ptr.call_with_return(128,tuple([body._ptr, force._ptr]))

  @functools.native_method
  def body_apply_force(self, body:'RID'   , force:'Vector2'   , position:'Vector2' = None  ) -> None:
    r'''
				Applies a positioned force to the body. The force can affect rotation if `position` is different from the body's center of mass. A force is time dependent and meant to be applied every physics update.
				`position` is the offset from the body origin in global coordinates.
			'''
    if position is None:
      position = Vector2.new0()
    if position is None:
      position = Vector2.new0()

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector2), 'force must be Vector2'








    self._ptr.call_with_return(129,tuple([body._ptr, force._ptr, position._ptr]))

  @functools.native_method
  def body_apply_torque(self, body:'RID'   , torque:'float'   ) -> None:
    r'''
				Applies a rotational force to the body. The force does not affect position. A force is time dependent and meant to be applied every physics update.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(torque, (int, float)), 'torque must be int or float'







    self._ptr.call_with_return(130,tuple([body._ptr, torque]))

  @functools.native_method
  def body_add_constant_central_force(self, body:'RID'   , force:'Vector2'   ) -> None:
    r'''
				Adds a constant directional force to the body. The force does not affect rotation. The force remains applied over time until cleared with `PhysicsServer2D.body_set_constant_force(body, Vector2(0, 0))`.
				This is equivalent to using `body_add_constant_force` at the body's center of mass.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector2), 'force must be Vector2'







    self._ptr.call_with_return(131,tuple([body._ptr, force._ptr]))

  @functools.native_method
  def body_add_constant_force(self, body:'RID'   , force:'Vector2'   , position:'Vector2' = None  ) -> None:
    r'''
				Adds a constant positioned force to the body. The force can affect rotation if `position` is different from the body's center of mass. The force remains applied over time until cleared with `PhysicsServer2D.body_set_constant_force(body, Vector2(0, 0))`.
				`position` is the offset from the body origin in global coordinates.
			'''
    if position is None:
      position = Vector2.new0()
    if position is None:
      position = Vector2.new0()

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector2), 'force must be Vector2'








    self._ptr.call_with_return(132,tuple([body._ptr, force._ptr, position._ptr]))

  @functools.native_method
  def body_add_constant_torque(self, body:'RID'   , torque:'float'   ) -> None:
    r'''
				Adds a constant rotational force to the body. The force does not affect position. The force remains applied over time until cleared with `PhysicsServer2D.body_set_constant_torque(body, 0)`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(torque, (int, float)), 'torque must be int or float'







    self._ptr.call_with_return(133,tuple([body._ptr, torque]))

  @functools.native_method
  def body_set_constant_force(self, body:'RID'   , force:'Vector2'   ) -> None:
    r'''
				Sets the body's total constant positional force applied during each physics update.
				See `body_add_constant_force` and `body_add_constant_central_force`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not force is None)
    assert isinstance(force, Vector2), 'force must be Vector2'







    self._ptr.call_with_return(134,tuple([body._ptr, force._ptr]))

  @functools.native_method
  def body_get_constant_force(self, body:'RID'   ) -> typing.Union['Vector2']:
    r'''
				Returns the body's total constant positional force applied during each physics update.
				See `body_add_constant_force` and `body_add_constant_central_force`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(135,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_constant_torque(self, body:'RID'   , torque:'float'   ) -> None:
    r'''
				Sets the body's total constant rotational force applied during each physics update.
				See `body_add_constant_torque`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(torque, (int, float)), 'torque must be int or float'







    self._ptr.call_with_return(136,tuple([body._ptr, torque]))

  @functools.native_method
  def body_get_constant_torque(self, body:'RID'   ) -> typing.Union[float]:
    r'''
				Returns the body's total constant rotational force applied during each physics update.
				See `body_add_constant_torque`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(137,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_axis_velocity(self, body:'RID'   , axis_velocity:'Vector2'   ) -> None:
    r'''
				Modifies the body's linear velocity so that its projection to the axis `axis_velocity.normalized()` is exactly `axis_velocity.length()`. This is useful for jumping behavior.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not axis_velocity is None)
    assert isinstance(axis_velocity, Vector2), 'axis_velocity must be Vector2'







    self._ptr.call_with_return(138,tuple([body._ptr, axis_velocity._ptr]))

  @functools.native_method
  def body_add_collision_exception(self, body:'RID'   , excepted_body:'RID'   ) -> None:
    r'''
				Adds `excepted_body` to the body's list of collision exceptions, so that collisions with it are ignored.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not excepted_body is None)
    assert isinstance(excepted_body, RID), 'excepted_body must be RID'







    self._ptr.call_with_return(139,tuple([body._ptr, excepted_body._ptr]))

  @functools.native_method
  def body_remove_collision_exception(self, body:'RID'   , excepted_body:'RID'   ) -> None:
    r'''
				Removes `excepted_body` from the body's list of collision exceptions, so that collisions with it are no longer ignored.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not excepted_body is None)
    assert isinstance(excepted_body, RID), 'excepted_body must be RID'







    self._ptr.call_with_return(140,tuple([body._ptr, excepted_body._ptr]))

  @functools.native_method
  def body_set_max_contacts_reported(self, body:'RID'   , amount:'int'   ) -> None:
    r'''
				Sets the maximum number of contacts that the body can report. If `amount` is greater than zero, then the body will keep track of at most this many contacts with other bodies.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(amount, (int, float)), 'amount must be int or float'







    self._ptr.call_with_return(141,tuple([body._ptr, amount]))

  @functools.native_method
  def body_get_max_contacts_reported(self, body:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the maximum number of contacts that the body can report. See `body_set_max_contacts_reported`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(142,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_omit_force_integration(self, body:'RID'   , enable:'bool'   ) -> None:
    r'''
				Sets whether the body omits the standard force integration. If `enable` is `true`, the body will not automatically use applied forces, torques, and damping to update the body's linear and angular velocity. In this case, `body_set_force_integration_callback` can be used to manually update the linear and angular velocity instead.
				This method is called when the property `RigidBody2D.custom_integrator` is set.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert isinstance(enable, bool), 'enable must be bool'







    self._ptr.call_with_return(143,tuple([body._ptr, enable]))

  @functools.native_method
  def body_is_omitting_force_integration(self, body:'RID'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the body is omitting the standard force integration. See `body_set_omit_force_integration`.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(144,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def body_set_state_sync_callback(self, body:'RID'   , callable:'Callable'   ) -> None:
    r'''
				Sets the body's state synchronization callback function to `callable`. Use an empty `Callable` (`code skip-lint`Callable()`) to clear the callback.
				The function `callable` will be called every physics frame, assuming that the body was active during the previous physics tick, and can be used to fetch the latest state from the physics server.
				The function `callable` must take the following parameters:
				1. `state`: a `PhysicsDirectBodyState2D`, used to retrieve the body's state.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not callable is None)
    assert isinstance(callable, Callable), 'callable must be Callable'







    self._ptr.call_with_return(145,tuple([body._ptr, callable._ptr]))

  @functools.native_method
  def body_set_force_integration_callback(self, body:'RID'   , callable:'Callable'   , userdata:'object' =None  ) -> None:
    r'''
				Sets the body's custom force integration callback function to `callable`. Use an empty `Callable` (`code skip-lint`Callable()`) to clear the custom callback.
				The function `callable` will be called every physics tick, before the standard force integration (see `body_set_omit_force_integration`). It can be used for example to update the body's linear and angular velocity based on contact with other bodies.
				If `userdata` is not `null`, the function `callable` must take the following two parameters:
				1. `state`: a `PhysicsDirectBodyState2D` used to retrieve and modify the body's state,
				2. `code skip-lint`userdata`: a `Variant`; its value will be the `userdata` passed into this method.
				If `userdata` is `null`, then `callable` must take only the `state` parameter.
			'''



    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not callable is None)
    assert isinstance(callable, Callable), 'callable must be Callable'
    








    self._ptr.call_with_return(146,tuple([body._ptr, callable._ptr, userdata]))

  @functools.native_method
  def body_test_motion(self, body:'RID'   , parameters:'py4godot_physicstestmotionparameters2d.PhysicsTestMotionParameters2D'   , result:'py4godot_physicstestmotionresult2d.PhysicsTestMotionResult2D' = None  ) -> typing.Union[bool]:
    r'''
				Returns `true` if a collision would result from moving the body along a motion vector from a given point in space. See `PhysicsTestMotionParameters2D` for the available motion parameters. Optionally a `PhysicsTestMotionResult2D` object can be passed, which will be used to store the information about the resulting collision.
			'''
    if result is None:
      result = c_utils.empty_object
    if result is None:
      result = c_utils.empty_object

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'
    assert(not parameters is None)
    assert isinstance(parameters, get_class('PhysicsTestMotionParameters2D')), 'parameters must be PhysicsTestMotionParameters2D'








    _ret = 0
    _ret = self._ptr.call_with_return(147,tuple([body._ptr, parameters._ptr, result._ptr]))
    return _ret


  @functools.native_method
  def body_get_direct_state(self, body:'RID'   ) -> typing.Union['py4godot_physicsdirectbodystate2dextension.PhysicsDirectBodyState2DExtension','py4godot_physicsdirectbodystate2d.PhysicsDirectBodyState2D']:
    r'''
				Returns the `PhysicsDirectBodyState2D` of the body. Returns `null` if the body is destroyed or not assigned to a space.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PhysicsDirectBodyState2D
    _ret._ptr = self._ptr.call_with_return(148,tuple([body._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def joint_create(self) -> typing.Union['RID']:
    r'''
				Creates a 2D joint in the physics server, and returns the `RID` that identifies it. To set the joint type, use `joint_make_damped_spring`, `joint_make_groove` or `joint_make_pin`. Use `joint_set_param` to set generic joint parameters.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(149,tuple([]))
    return _ret


  @functools.native_method
  def joint_clear(self, joint:'RID'   ) -> None:
    r'''
				Destroys the joint with the given `RID`, creates a new uninitialized joint, and makes the `RID` refer to this new joint.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'






    self._ptr.call_with_return(150,tuple([joint._ptr]))

  @functools.native_method
  def joint_set_param(self, joint:'RID'   , param:'int'  , value:'float'   ) -> None:
    r'''
				Sets the value of the given joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'








    self._ptr.call_with_return(151,tuple([joint._ptr, param, value]))

  @functools.native_method
  def joint_get_param(self, joint:'RID'   , param:'int'  ) -> typing.Union[float]:
    r'''
				Returns the value of the given joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(152,tuple([joint._ptr, param]))
    return _ret


  @functools.native_method
  def joint_disable_collisions_between_bodies(self, joint:'RID'   , disable:'bool'   ) -> None:
    r'''
				Sets whether the bodies attached to the `Joint2D` will collide with each other.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(disable, bool), 'disable must be bool'







    self._ptr.call_with_return(153,tuple([joint._ptr, disable]))

  @functools.native_method
  def joint_is_disabled_collisions_between_bodies(self, joint:'RID'   ) -> typing.Union[bool]:
    r'''
				Returns whether the bodies attached to the `Joint2D` will collide with each other.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(154,tuple([joint._ptr]))
    return _ret


  @functools.native_method
  def joint_make_pin(self, joint:'RID'   , anchor:'Vector2'   , body_a:'RID'   , body_b:'RID' = None  ) -> None:
    r'''
				Makes the joint a pin joint. If `body_b` is an empty `RID`, then `body_a` is pinned to the point `anchor` (given in global coordinates); otherwise, `body_a` is pinned to `body_b` at the point `anchor` (given in global coordinates). To set the parameters which are specific to the pin joint, see `pin_joint_set_param`.
			'''
    if body_b is None:
      body_b = RID.new0()
    if body_b is None:
      body_b = RID.new0()

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not anchor is None)
    assert isinstance(anchor, Vector2), 'anchor must be Vector2'
    assert(not body_a is None)
    assert isinstance(body_a, RID), 'body_a must be RID'









    self._ptr.call_with_return(155,tuple([joint._ptr, anchor._ptr, body_a._ptr, body_b._ptr]))

  @functools.native_method
  def joint_make_groove(self, joint:'RID'   , groove1_a:'Vector2'   , groove2_a:'Vector2'   , anchor_b:'Vector2'   , body_a:'RID' = None  , body_b:'RID' = None  ) -> None:
    r'''
				Makes the joint a groove joint.
			'''
    if body_a is None:
      body_a = RID.new0()
    if body_b is None:
      body_b = RID.new0()
    if body_a is None:
      body_a = RID.new0()
    if body_b is None:
      body_b = RID.new0()

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not groove1_a is None)
    assert isinstance(groove1_a, Vector2), 'groove1_a must be Vector2'
    assert(not groove2_a is None)
    assert isinstance(groove2_a, Vector2), 'groove2_a must be Vector2'
    assert(not anchor_b is None)
    assert isinstance(anchor_b, Vector2), 'anchor_b must be Vector2'











    self._ptr.call_with_return(156,tuple([joint._ptr, groove1_a._ptr, groove2_a._ptr, anchor_b._ptr, body_a._ptr, body_b._ptr]))

  @functools.native_method
  def joint_make_damped_spring(self, joint:'RID'   , anchor_a:'Vector2'   , anchor_b:'Vector2'   , body_a:'RID'   , body_b:'RID' = None  ) -> None:
    r'''
				Makes the joint a damped spring joint, attached at the point `anchor_a` (given in global coordinates) on the body `body_a` and at the point `anchor_b` (given in global coordinates) on the body `body_b`. To set the parameters which are specific to the damped spring, see `damped_spring_joint_set_param`.
			'''
    if body_b is None:
      body_b = RID.new0()
    if body_b is None:
      body_b = RID.new0()

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert(not anchor_a is None)
    assert isinstance(anchor_a, Vector2), 'anchor_a must be Vector2'
    assert(not anchor_b is None)
    assert isinstance(anchor_b, Vector2), 'anchor_b must be Vector2'
    assert(not body_a is None)
    assert isinstance(body_a, RID), 'body_a must be RID'










    self._ptr.call_with_return(157,tuple([joint._ptr, anchor_a._ptr, anchor_b._ptr, body_a._ptr, body_b._ptr]))

  @functools.native_method
  def pin_joint_set_flag(self, joint:'RID'   , flag:'int'  , enabled:'bool'   ) -> None:
    r'''
				Sets a pin joint flag.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(flag, (int, float)), 'flag must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'








    self._ptr.call_with_return(158,tuple([joint._ptr, flag, enabled]))

  @functools.native_method
  def pin_joint_get_flag(self, joint:'RID'   , flag:'int'  ) -> typing.Union[bool]:
    r'''
				Gets a pin joint flag.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(flag, (int, float)), 'flag must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(159,tuple([joint._ptr, flag]))
    return _ret


  @functools.native_method
  def pin_joint_set_param(self, joint:'RID'   , param:'int'  , value:'float'   ) -> None:
    r'''
				Sets a pin joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'








    self._ptr.call_with_return(160,tuple([joint._ptr, param, value]))

  @functools.native_method
  def pin_joint_get_param(self, joint:'RID'   , param:'int'  ) -> typing.Union[float]:
    r'''
				Returns the value of a pin joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(161,tuple([joint._ptr, param]))
    return _ret


  @functools.native_method
  def damped_spring_joint_set_param(self, joint:'RID'   , param:'int'  , value:'float'   ) -> None:
    r'''
				Sets the value of the given damped spring joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'








    self._ptr.call_with_return(162,tuple([joint._ptr, param, value]))

  @functools.native_method
  def damped_spring_joint_get_param(self, joint:'RID'   , param:'int'  ) -> typing.Union[float]:
    r'''
				Returns the value of the given damped spring joint parameter.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'
    assert isinstance(param, (int, float)), 'param must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(163,tuple([joint._ptr, param]))
    return _ret


  @functools.native_method
  def joint_get_type(self, joint:'RID'   ) -> typing.Union[int]:
    r'''
				Returns the joint's type.
			'''

    assert(not joint is None)
    assert isinstance(joint, RID), 'joint must be RID'






    _ret:int
    _ret = self._ptr.call_with_return(164,tuple([joint._ptr]))
    return _ret


  @functools.native_method
  def free_rid(self, rid:'RID'   ) -> None:
    r'''
				Destroys any of the objects created by PhysicsServer2D. If the `RID` passed is not one of the objects that can be created by PhysicsServer2D, an error will be printed to the console.
			'''

    assert(not rid is None)
    assert isinstance(rid, RID), 'rid must be RID'






    self._ptr.call_with_return(165,tuple([rid._ptr]))

  @functools.native_method
  def set_active(self, active:'bool'   ) -> None:
    r'''
				Activates or deactivates the 2D physics server. If `active` is `false`, then the physics server will not do anything in its physics step.
			'''

    assert isinstance(active, bool), 'active must be bool'






    self._ptr.call_with_return(166,tuple([active]))

  @functools.native_method
  def get_process_info(self, process_info:'int'  ) -> typing.Union[int]:
    r'''
				Returns the value of a physics engine state specified by `process_info`.
			'''

    assert isinstance(process_info, (int, float)), 'process_info must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(167,tuple([process_info]))
    return _ret



register_cast_function('PhysicsServer2D', PhysicsServer2D.cast)
register_class('PhysicsServer2D', PhysicsServer2D)
