# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.CameraAttributes as py4godot_cameraattributes 
from py4godot.wrappers.wrappers import CPPCameraAttributesPracticalWrapper


class CameraAttributesPractical(py4godot_cameraattributes.CameraAttributes):
  r'''
		Controls camera-specific attributes such as auto-exposure, depth of field, and exposure override.
		When used in a `WorldEnvironment` it provides default settings for exposure, auto-exposure, and depth of field that will be used by all cameras without their own `CameraAttributes`, including the editor camera. When used in a `Camera3D` it will override any `CameraAttributes` set in the `WorldEnvironment`. When used in `VoxelGI` or `LightmapGI`, only the exposure settings will be used.
	'''

  @staticmethod
  def constructor():
    class_ = CameraAttributesPractical.construct_without_init()
    class_._ptr = constructor(192,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CameraAttributesPractical.construct_without_init()
    class_._ptr = constructor(192,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCameraAttributesPracticalWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(192,0, ())


  def generate_wrapper(self):
    return CPPCameraAttributesPracticalWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CameraAttributesPractical.__new__(CameraAttributesPractical)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CameraAttributesPractical'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CameraAttributesPractical.construct_without_init()
    cls._ptr = CPPCameraAttributesPracticalWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CameraAttributesPractical.construct_without_init()
    cls._ptr = CPPCameraAttributesPracticalWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def dof_blur_far_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_dof_blur_far_enabled()
    return _ret
  @dof_blur_far_enabled.setter
  def dof_blur_far_enabled(self,  value:'bool'):
    self.set_dof_blur_far_enabled(value)
  @property
  def dof_blur_far_distance(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_dof_blur_far_distance()
    return _ret
  @dof_blur_far_distance.setter
  def dof_blur_far_distance(self,  value:'float'):
    self.set_dof_blur_far_distance(value)
  @property
  def dof_blur_far_transition(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_dof_blur_far_transition()
    return _ret
  @dof_blur_far_transition.setter
  def dof_blur_far_transition(self,  value:'float'):
    self.set_dof_blur_far_transition(value)
  @property
  def dof_blur_near_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_dof_blur_near_enabled()
    return _ret
  @dof_blur_near_enabled.setter
  def dof_blur_near_enabled(self,  value:'bool'):
    self.set_dof_blur_near_enabled(value)
  @property
  def dof_blur_near_distance(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_dof_blur_near_distance()
    return _ret
  @dof_blur_near_distance.setter
  def dof_blur_near_distance(self,  value:'float'):
    self.set_dof_blur_near_distance(value)
  @property
  def dof_blur_near_transition(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_dof_blur_near_transition()
    return _ret
  @dof_blur_near_transition.setter
  def dof_blur_near_transition(self,  value:'float'):
    self.set_dof_blur_near_transition(value)
  @property
  def dof_blur_amount(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_dof_blur_amount()
    return _ret
  @dof_blur_amount.setter
  def dof_blur_amount(self,  value:'float'):
    self.set_dof_blur_amount(value)
  @property
  def auto_exposure_min_sensitivity(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_auto_exposure_min_sensitivity()
    return _ret
  @auto_exposure_min_sensitivity.setter
  def auto_exposure_min_sensitivity(self,  value:'float'):
    self.set_auto_exposure_min_sensitivity(value)
  @property
  def auto_exposure_max_sensitivity(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_auto_exposure_max_sensitivity()
    return _ret
  @auto_exposure_max_sensitivity.setter
  def auto_exposure_max_sensitivity(self,  value:'float'):
    self.set_auto_exposure_max_sensitivity(value)
  @functools.native_method
  def set_dof_blur_far_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__dof_blur_far_enabled = enabled






    self._ptr.call_with_return(87,tuple([enabled]))

  @functools.native_method
  def is_dof_blur_far_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_dof_blur_far_distance(self, distance:'float'   ) -> None:
    r''''''

    assert isinstance(distance, (int, float)), 'distance must be int or float'

    self.py__dof_blur_far_distance = distance






    self._ptr.call_with_return(89,tuple([distance]))

  @functools.native_method
  def get_dof_blur_far_distance(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_dof_blur_far_transition(self, distance:'float'   ) -> None:
    r''''''

    assert isinstance(distance, (int, float)), 'distance must be int or float'

    self.py__dof_blur_far_transition = distance






    self._ptr.call_with_return(91,tuple([distance]))

  @functools.native_method
  def get_dof_blur_far_transition(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))

    return _ret


  @functools.native_method
  def set_dof_blur_near_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__dof_blur_near_enabled = enabled






    self._ptr.call_with_return(93,tuple([enabled]))

  @functools.native_method
  def is_dof_blur_near_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_dof_blur_near_distance(self, distance:'float'   ) -> None:
    r''''''

    assert isinstance(distance, (int, float)), 'distance must be int or float'

    self.py__dof_blur_near_distance = distance






    self._ptr.call_with_return(95,tuple([distance]))

  @functools.native_method
  def get_dof_blur_near_distance(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_dof_blur_near_transition(self, distance:'float'   ) -> None:
    r''''''

    assert isinstance(distance, (int, float)), 'distance must be int or float'

    self.py__dof_blur_near_transition = distance






    self._ptr.call_with_return(97,tuple([distance]))

  @functools.native_method
  def get_dof_blur_near_transition(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([]))

    return _ret


  @functools.native_method
  def set_dof_blur_amount(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__dof_blur_amount = amount






    self._ptr.call_with_return(99,tuple([amount]))

  @functools.native_method
  def get_dof_blur_amount(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(100,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_exposure_max_sensitivity(self, max_sensitivity:'float'   ) -> None:
    r''''''

    assert isinstance(max_sensitivity, (int, float)), 'max_sensitivity must be int or float'

    self.py__auto_exposure_max_sensitivity = max_sensitivity






    self._ptr.call_with_return(101,tuple([max_sensitivity]))

  @functools.native_method
  def get_auto_exposure_max_sensitivity(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(102,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_exposure_min_sensitivity(self, min_sensitivity:'float'   ) -> None:
    r''''''

    assert isinstance(min_sensitivity, (int, float)), 'min_sensitivity must be int or float'

    self.py__auto_exposure_min_sensitivity = min_sensitivity






    self._ptr.call_with_return(103,tuple([min_sensitivity]))

  @functools.native_method
  def get_auto_exposure_min_sensitivity(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([]))

    return _ret



register_cast_function('CameraAttributesPractical', CameraAttributesPractical.cast)
register_class('CameraAttributesPractical', CameraAttributesPractical)
