# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPOpenXRActionWrapper

class ActionType:
  OPENXR_ACTION_BOOL = 0
  OPENXR_ACTION_FLOAT = 1
  OPENXR_ACTION_VECTOR2 = 2
  OPENXR_ACTION_POSE = 3


class OpenXRAction(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRAction.construct_without_init()
    class_._ptr = constructor(532,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRAction.construct_without_init()
    class_._ptr = constructor(532,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRActionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(532,0, ())


  def generate_wrapper(self):
    return CPPOpenXRActionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRAction.__new__(OpenXRAction)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRAction'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRAction.construct_without_init()
    cls._ptr = CPPOpenXRActionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRAction.construct_without_init()
    cls._ptr = CPPOpenXRActionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def localized_name(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_localized_name()
    return _ret
  @localized_name.setter
  def localized_name(self,  value:'str'):
    self.set_localized_name(value)
  @property
  def action_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_action_type()
    return _ret
  @action_type.setter
  def action_type(self,  value:'int'):
    self.set_action_type(value)
  @property
  def toplevel_paths(self) -> typing.Union['PackedStringArray']:
    r''''''
    _ret = self. get_toplevel_paths()
    return _ret
  @toplevel_paths.setter
  def toplevel_paths(self,  value:'PackedStringArray'):
    self.set_toplevel_paths(value)
  @functools.native_method
  def set_localized_name(self, localized_name:'str'   ) -> None:
    r''''''

    assert(not localized_name is None)
    assert isinstance(localized_name, (str, String)), 'localized_name must be str or String'

    self.py__localized_name = localized_name



    assert(isinstance(localized_name, (str, String)))
    py_string_localized_name = localized_name if isinstance(localized_name, StringName) else c_utils.py_string_to_string(localized_name)

    py__string_localized_name = utils.py_string_to_string(localized_name)
    py__string_localized_name.shouldBeDeleted = False


    self._ptr.call_with_return(77,tuple([py__string_localized_name._ptr]))

  @functools.native_method
  def get_localized_name(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_action_type(self, action_type:'int'  ) -> None:
    r''''''

    assert isinstance(action_type, (int, float)), 'action_type must be int or float'

    self.py__action_type = action_type






    self._ptr.call_with_return(79,tuple([action_type]))

  @functools.native_method
  def get_action_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_toplevel_paths(self, toplevel_paths:'PackedStringArray'   ) -> None:
    r''''''

    assert(not toplevel_paths is None)
    assert isinstance(toplevel_paths, PackedStringArray), 'toplevel_paths must be PackedStringArray'

    self.py__toplevel_paths = toplevel_paths






    self._ptr.call_with_return(81,tuple([toplevel_paths._ptr]))

  @functools.native_method
  def get_toplevel_paths(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return _ret



register_cast_function('OpenXRAction', OpenXRAction.cast)
register_class('OpenXRAction', OpenXRAction)
