# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.OpenXRBindingModifier as py4godot_openxrbindingmodifier 
from py4godot.wrappers.wrappers import CPPOpenXRIPBindingModifierWrapper


class OpenXRIPBindingModifier(py4godot_openxrbindingmodifier.OpenXRBindingModifier):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRIPBindingModifier.construct_without_init()
    class_._ptr = constructor(552,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRIPBindingModifier.construct_without_init()
    class_._ptr = constructor(552,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRIPBindingModifierWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(552,0, ())


  def generate_wrapper(self):
    return CPPOpenXRIPBindingModifierWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRIPBindingModifier.__new__(OpenXRIPBindingModifier)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRIPBindingModifier'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRIPBindingModifier.construct_without_init()
    cls._ptr = CPPOpenXRIPBindingModifierWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRIPBindingModifier.construct_without_init()
    cls._ptr = CPPOpenXRIPBindingModifierWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('OpenXRIPBindingModifier', OpenXRIPBindingModifier.cast)
register_class('OpenXRIPBindingModifier', OpenXRIPBindingModifier)
