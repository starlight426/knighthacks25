# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPPhysicsRayQueryParameters3DWrapper


class PhysicsRayQueryParameters3D(py4godot_refcounted.RefCounted):
  r'''
		By changing various properties of this object, such as the ray position, you can configure the parameters for `PhysicsDirectSpaceState3D.intersect_ray`.
	'''

  @staticmethod
  def constructor():
    class_ = PhysicsRayQueryParameters3D.construct_without_init()
    class_._ptr = constructor(603,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PhysicsRayQueryParameters3D.construct_without_init()
    class_._ptr = constructor(603,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPhysicsRayQueryParameters3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(603,0, ())


  def generate_wrapper(self):
    return CPPPhysicsRayQueryParameters3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsRayQueryParameters3D.__new__(PhysicsRayQueryParameters3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsRayQueryParameters3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsRayQueryParameters3D.construct_without_init()
    cls._ptr = CPPPhysicsRayQueryParameters3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsRayQueryParameters3D.construct_without_init()
    cls._ptr = CPPPhysicsRayQueryParameters3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def from_(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_from()
    return _ret
  @from_.setter
  def from_(self,  value:'Vector3'):
    self.set_from(value)
  @property
  def to(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_to()
    return _ret
  @to.setter
  def to(self,  value:'Vector3'):
    self.set_to(value)
  @property
  def collision_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_collision_mask()
    return _ret
  @collision_mask.setter
  def collision_mask(self,  value:'int'):
    self.set_collision_mask(value)
  @property
  def exclude(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''
    _ret = self. get_exclude()
    return _ret
  @exclude.setter
  def exclude(self, value:'Array'):
    self.set_exclude(value)
  @property
  def collide_with_bodies(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_collide_with_bodies_enabled()
    return _ret
  @collide_with_bodies.setter
  def collide_with_bodies(self,  value:'bool'):
    self.set_collide_with_bodies(value)
  @property
  def collide_with_areas(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_collide_with_areas_enabled()
    return _ret
  @collide_with_areas.setter
  def collide_with_areas(self,  value:'bool'):
    self.set_collide_with_areas(value)
  @property
  def hit_from_inside(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_hit_from_inside_enabled()
    return _ret
  @hit_from_inside.setter
  def hit_from_inside(self,  value:'bool'):
    self.set_hit_from_inside(value)
  @property
  def hit_back_faces(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_hit_back_faces_enabled()
    return _ret
  @hit_back_faces.setter
  def hit_back_faces(self,  value:'bool'):
    self.set_hit_back_faces(value)
  @staticmethod
  def create(from_:'Vector3'   , to:'Vector3'   , collision_mask:'int' =4294967295  , exclude:'py4godot_ridtypedarray.RIDTypedArray' = None  ) -> typing.Union['typing.Self']:
    r'''
				Returns a new, pre-configured `PhysicsRayQueryParameters3D` object. Use it to quickly create query parameters using the most common options.
				```gdscript
				var query = PhysicsRayQueryParameters3D.create(position, position + Vector3(0, -10, 0))
				var collision = get_world_3d().direct_space_state.intersect_ray(query)
				```
			'''



    assert(not from_ is None)
    assert isinstance(from_, Vector3), 'from_ must be Vector3'
    assert(not to is None)
    assert isinstance(to, Vector3), 'to must be Vector3'
    assert isinstance(collision_mask, (int, float)), 'collision_mask must be int or float'
    assert isinstance(exclude, get_class('RIDTypedArray')), 'exclude must be RIDTypedArray'









    _ret = PhysicsRayQueryParameters3D.construct_without_init()
    _ret._ptr = static_method(603,0,tuple([from_._ptr, to._ptr, collision_mask, exclude._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_from(self, from_:'Vector3'   ) -> None:
    r''''''

    assert(not from_ is None)
    assert isinstance(from_, Vector3), 'from_ must be Vector3'

    self.py__from = from_






    self._ptr.call_with_return(53,tuple([from_._ptr]))

  @functools.native_method
  def get_from(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_to(self, to:'Vector3'   ) -> None:
    r''''''

    assert(not to is None)
    assert isinstance(to, Vector3), 'to must be Vector3'

    self.py__to = to






    self._ptr.call_with_return(55,tuple([to._ptr]))

  @functools.native_method
  def get_to(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_collision_mask(self, collision_mask:'int'   ) -> None:
    r''''''

    assert isinstance(collision_mask, (int, float)), 'collision_mask must be int or float'

    self.py__collision_mask = collision_mask






    self._ptr.call_with_return(57,tuple([collision_mask]))

  @functools.native_method
  def get_collision_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_exclude(self, exclude:'py4godot_ridtypedarray.RIDTypedArray'   ) -> None:
    r''''''

    assert isinstance(exclude, get_class('RIDTypedArray')), 'exclude must be RIDTypedArray'

    self.py__exclude = exclude






    self._ptr.call_with_return(59,tuple([exclude._ptr]))

  @functools.native_method
  def get_exclude(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''




    _ret = py4godot_ridtypedarray.RIDTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_collide_with_bodies(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__collide_with_bodies = enable






    self._ptr.call_with_return(61,tuple([enable]))

  @functools.native_method
  def is_collide_with_bodies_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def set_collide_with_areas(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__collide_with_areas = enable






    self._ptr.call_with_return(63,tuple([enable]))

  @functools.native_method
  def is_collide_with_areas_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([]))

    return _ret


  @functools.native_method
  def set_hit_from_inside(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__hit_from_inside = enable






    self._ptr.call_with_return(65,tuple([enable]))

  @functools.native_method
  def is_hit_from_inside_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([]))

    return _ret


  @functools.native_method
  def set_hit_back_faces(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__hit_back_faces = enable






    self._ptr.call_with_return(67,tuple([enable]))

  @functools.native_method
  def is_hit_back_faces_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([]))

    return _ret



register_cast_function('PhysicsRayQueryParameters3D', PhysicsRayQueryParameters3D.cast)
register_class('PhysicsRayQueryParameters3D', PhysicsRayQueryParameters3D)
