# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPScriptBacktraceWrapper


class ScriptBacktrace(py4godot_refcounted.RefCounted):
  r'''
		`ScriptBacktrace` holds an already captured backtrace of a specific script language, such as GDScript or C#, which are captured using `Engine.capture_script_backtraces`.
		See `ProjectSettings.debug/settings/gdscript/always_track_call_stacks` and `ProjectSettings.debug/settings/gdscript/always_track_local_variables` for ways of controlling the contents of this class.
	'''

  @staticmethod
  def constructor():
    class_ = ScriptBacktrace.construct_without_init()
    class_._ptr = constructor(722,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ScriptBacktrace.construct_without_init()
    class_._ptr = constructor(722,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPScriptBacktraceWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(722,0, ())


  def generate_wrapper(self):
    return CPPScriptBacktraceWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ScriptBacktrace.__new__(ScriptBacktrace)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ScriptBacktrace'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ScriptBacktrace.construct_without_init()
    cls._ptr = CPPScriptBacktraceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ScriptBacktrace.construct_without_init()
    cls._ptr = CPPScriptBacktraceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_language_name(self) -> typing.Union[str]:
    r'''
				Returns the name of the script language that this backtrace was captured from.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def is_empty(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the backtrace has no stack frames.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def get_frame_count(self) -> typing.Union[int]:
    r'''
				Returns the number of stack frames in the backtrace.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def get_frame_function(self, index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the name of the function called at the stack frame at the specified index.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_frame_file(self, index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the file name of the call site represented by the stack frame at the specified index.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(57,tuple([index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_frame_line(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the line number of the call site represented by the stack frame at the specified index.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([index]))
    return _ret


  @functools.native_method
  def get_global_variable_count(self) -> typing.Union[int]:
    r'''
				Returns the number of global variables (e.g. autoload singletons) in the backtrace.
				**Note:** This will be non-zero only if the `include_variables` parameter was `true` when capturing the backtrace with `Engine.capture_script_backtraces`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([]))
    return _ret


  @functools.native_method
  def get_global_variable_name(self, variable_index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the name of the global variable at the specified index.
			'''

    assert isinstance(variable_index, (int, float)), 'variable_index must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([variable_index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_global_variable_value(self, variable_index:'int'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the value of the global variable at the specified index.
				**Warning:** With GDScript backtraces, the returned `Variant` will be the variable's actual value, including any object references. This means that storing the returned `Variant` will prevent any such object from being deallocated, so it's generally recommended not to do so.
			'''

    assert isinstance(variable_index, (int, float)), 'variable_index must be int or float'






    _ret = None
    _ret = self._ptr.call_with_return(61,tuple([variable_index]))
    return _ret


  @functools.native_method
  def get_local_variable_count(self, frame_index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the number of local variables in the stack frame at the specified index.
				**Note:** This will be non-zero only if the `include_variables` parameter was `true` when capturing the backtrace with `Engine.capture_script_backtraces`.
			'''

    assert isinstance(frame_index, (int, float)), 'frame_index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([frame_index]))
    return _ret


  @functools.native_method
  def get_local_variable_name(self, frame_index:'int'   , variable_index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the name of the local variable at the specified `variable_index` in the stack frame at the specified `frame_index`.
			'''

    assert isinstance(frame_index, (int, float)), 'frame_index must be int or float'
    assert isinstance(variable_index, (int, float)), 'variable_index must be int or float'







    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(63,tuple([frame_index, variable_index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_local_variable_value(self, frame_index:'int'   , variable_index:'int'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the value of the local variable at the specified `variable_index` in the stack frame at the specified `frame_index`.
				**Warning:** With GDScript backtraces, the returned `Variant` will be the variable's actual value, including any object references. This means that storing the returned `Variant` will prevent any such object from being deallocated, so it's generally recommended not to do so.
			'''

    assert isinstance(frame_index, (int, float)), 'frame_index must be int or float'
    assert isinstance(variable_index, (int, float)), 'variable_index must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(64,tuple([frame_index, variable_index]))
    return _ret


  @functools.native_method
  def get_member_variable_count(self, frame_index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the number of member variables in the stack frame at the specified index.
				**Note:** This will be non-zero only if the `include_variables` parameter was `true` when capturing the backtrace with `Engine.capture_script_backtraces`.
			'''

    assert isinstance(frame_index, (int, float)), 'frame_index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(65,tuple([frame_index]))
    return _ret


  @functools.native_method
  def get_member_variable_name(self, frame_index:'int'   , variable_index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the name of the member variable at the specified `variable_index` in the stack frame at the specified `frame_index`.
			'''

    assert isinstance(frame_index, (int, float)), 'frame_index must be int or float'
    assert isinstance(variable_index, (int, float)), 'variable_index must be int or float'







    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(66,tuple([frame_index, variable_index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_member_variable_value(self, frame_index:'int'   , variable_index:'int'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the value of the member variable at the specified `variable_index` in the stack frame at the specified `frame_index`.
				**Warning:** With GDScript backtraces, the returned `Variant` will be the variable's actual value, including any object references. This means that storing the returned `Variant` will prevent any such object from being deallocated, so it's generally recommended not to do so.
			'''

    assert isinstance(frame_index, (int, float)), 'frame_index must be int or float'
    assert isinstance(variable_index, (int, float)), 'variable_index must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(67,tuple([frame_index, variable_index]))
    return _ret


  @functools.native_method
  def format(self, indent_all:'int' =0  , indent_frames:'int' =4  ) -> typing.Union[str]:
    r'''
				Converts the backtrace to a `String`, where the entire string will be indented by `indent_all` number of spaces, and the individual stack frames will be additionally indented by `indent_frames` number of spaces.
				**Note:** Calling `Object.to_string` on a `ScriptBacktrace` will produce the same output as calling `format` with all parameters left at their default values.
			'''

    assert isinstance(indent_all, (int, float)), 'indent_all must be int or float'
    assert isinstance(indent_frames, (int, float)), 'indent_frames must be int or float'







    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(68,tuple([indent_all, indent_frames]))
    return utils.gd_string_to_py_string(_ret)



register_cast_function('ScriptBacktrace', ScriptBacktrace.cast)
register_class('ScriptBacktrace', ScriptBacktrace)
