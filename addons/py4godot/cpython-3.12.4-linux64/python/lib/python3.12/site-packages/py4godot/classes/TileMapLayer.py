# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.TileSet as py4godot_tileset 
  import py4godot.classes.TileData as py4godot_tiledata 
  import py4godot.classes.TileMapPattern as py4godot_tilemappattern 
  import py4godot.classes.Vector2iTypedArray as py4godot_vector2itypedarray 
import py4godot.classes.Node2D as py4godot_node2d 
import py4godot.classes.Vector2iTypedArray as py4godot_vector2itypedarray 
from py4godot.wrappers.wrappers import CPPTileMapLayerWrapper

class DebugVisibilityMode:
  DEBUG_VISIBILITY_MODE_DEFAULT = 0
  DEBUG_VISIBILITY_MODE_FORCE_HIDE = 2
  DEBUG_VISIBILITY_MODE_FORCE_SHOW = 1


class TileMapLayer(py4godot_node2d.Node2D):
  r'''
		Node for 2D tile-based maps. A `TileMapLayer` uses a `TileSet` which contain a list of tiles which are used to create grid-based maps. Unlike the `TileMap` node, which is deprecated, `TileMapLayer` has only one layer of tiles. You can use several `TileMapLayer` to achieve the same result as a `TileMap` node.
		For performance reasons, all TileMap updates are batched at the end of a frame. Notably, this means that scene tiles from a `TileSetScenesCollectionSource` are initialized after their parent. This is only queued when inside the scene tree.
		To force an update earlier on, call `update_internals`.
		**Note:** For performance and compatibility reasons, the coordinates serialized by `TileMapLayer` are limited to 16-bit signed integers, i.e. the range for X and Y coordinates is from `-32768` to `32767`. When saving tile data, tiles outside this range are wrapped.
	'''

  @staticmethod
  def constructor():
    class_ = TileMapLayer.construct_without_init()
    class_._ptr = constructor(836,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TileMapLayer.construct_without_init()
    class_._ptr = constructor(836,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTileMapLayerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(836,0, ())


  def generate_wrapper(self):
    return CPPTileMapLayerWrapper()
  def init_signals(self):
    super().init_signals()
    changed_name = utils.py_string_to_string_name("changed")
    self.changed = signals.BuiltinSignal(self, changed_name)

  @staticmethod
  def construct_without_init():
    cls = TileMapLayer.__new__(TileMapLayer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TileMapLayer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TileMapLayer.construct_without_init()
    cls._ptr = CPPTileMapLayerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TileMapLayer.construct_without_init()
    cls._ptr = CPPTileMapLayerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def tile_map_data(self) -> typing.Union['PackedByteArray']:
    r''''''
    _ret = self. get_tile_map_data_as_array()
    return _ret
  @tile_map_data.setter
  def tile_map_data(self,  value:'PackedByteArray'):
    self.set_tile_map_data_from_array(value)
  @property
  def enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_enabled()
    return _ret
  @enabled.setter
  def enabled(self,  value:'bool'):
    self.set_enabled(value)
  @property
  def tile_set(self) -> typing.Union['py4godot_tileset.TileSet']:
    r''''''
    _ret = self. get_tile_set()
    return _ret
  @tile_set.setter
  def tile_set(self,  value:'py4godot_object.Object'):
    self.set_tile_set(value)
  @property
  def occlusion_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_occlusion_enabled()
    return _ret
  @occlusion_enabled.setter
  def occlusion_enabled(self,  value:'bool'):
    self.set_occlusion_enabled(value)
  @property
  def y_sort_origin(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_y_sort_origin()
    return _ret
  @y_sort_origin.setter
  def y_sort_origin(self,  value:'int'):
    self.set_y_sort_origin(value)
  @property
  def x_draw_order_reversed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_x_draw_order_reversed()
    return _ret
  @x_draw_order_reversed.setter
  def x_draw_order_reversed(self,  value:'bool'):
    self.set_x_draw_order_reversed(value)
  @property
  def rendering_quadrant_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_rendering_quadrant_size()
    return _ret
  @rendering_quadrant_size.setter
  def rendering_quadrant_size(self,  value:'int'):
    self.set_rendering_quadrant_size(value)
  @property
  def collision_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_collision_enabled()
    return _ret
  @collision_enabled.setter
  def collision_enabled(self,  value:'bool'):
    self.set_collision_enabled(value)
  @property
  def use_kinematic_bodies(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_kinematic_bodies()
    return _ret
  @use_kinematic_bodies.setter
  def use_kinematic_bodies(self,  value:'bool'):
    self.set_use_kinematic_bodies(value)
  @property
  def collision_visibility_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_collision_visibility_mode()
    return _ret
  @collision_visibility_mode.setter
  def collision_visibility_mode(self,  value:'int'):
    self.set_collision_visibility_mode(value)
  @property
  def physics_quadrant_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_physics_quadrant_size()
    return _ret
  @physics_quadrant_size.setter
  def physics_quadrant_size(self,  value:'int'):
    self.set_physics_quadrant_size(value)
  @property
  def navigation_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_navigation_enabled()
    return _ret
  @navigation_enabled.setter
  def navigation_enabled(self,  value:'bool'):
    self.set_navigation_enabled(value)
  @property
  def navigation_visibility_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_navigation_visibility_mode()
    return _ret
  @navigation_visibility_mode.setter
  def navigation_visibility_mode(self,  value:'int'):
    self.set_navigation_visibility_mode(value)
  @functools.native_method
  def _use_tile_data_runtime_update(self, coords:'Vector2i'   ) -> typing.Union[bool]:
    r'''
				Should return `true` if the tile at coordinates `coords` requires a runtime update.
				**Warning:** Make sure this function only returns `true` when needed. Any tile processed at runtime without a need for it will imply a significant performance penalty.
				**Note:** If the result of this function should change, use `notify_runtime_tile_data_update` to notify the `TileMapLayer` it needs an update.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(303,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def _tile_data_runtime_update(self, coords:'Vector2i'   , tile_data:'py4godot_tiledata.TileData'   ) -> None:
    r'''
				Called with a `TileData` object about to be used internally by the `TileMapLayer`, allowing its modification at runtime.
				This method is only called if `_use_tile_data_runtime_update` is implemented and returns `true` for the given tile `coords`.
				**Warning:** The `tile_data` object's sub-resources are the same as the one in the TileSet. Modifying them might impact the whole TileSet. Instead, make sure to duplicate those resources.
				**Note:** If the properties of `tile_data` object should change over time, use `notify_runtime_tile_data_update` to notify the `TileMapLayer` it needs an update.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'
    assert(not tile_data is None)
    assert isinstance(tile_data, get_class('TileData')), 'tile_data must be TileData'







    self._ptr.call_with_return(304,tuple([coords._ptr, tile_data._ptr]))

  @functools.native_method
  def _update_cells(self, coords:'py4godot_vector2itypedarray.Vector2iTypedArray'   , forced_cleanup:'bool'   ) -> None:
    r'''
				Called when this `TileMapLayer`'s cells need an internal update. This update may be caused from individual cells being modified or by a change in the `tile_set` (causing all cells to be queued for an update). The first call to this function is always for initializing all the `TileMapLayer`'s cells. `coords` contains the coordinates of all modified cells, roughly in the order they were modified. `forced_cleanup` is `true` when the `TileMapLayer`'s internals should be fully cleaned up. This is the case when:
				- The layer is disabled;
				- The layer is not visible;
				- `tile_set` is set to `null`;
				- The node is removed from the tree;
				- The node is freed.
				Note that any internal update happening while one of these conditions is verified is considered to be a "cleanup". See also `update_internals`.
				**Warning:** Implementing this method may degrade the `TileMapLayer`'s performance.
			'''

    assert isinstance(coords, get_class('Vector2iTypedArray')), 'coords must be Vector2iTypedArray'
    assert isinstance(forced_cleanup, bool), 'forced_cleanup must be bool'







    self._ptr.call_with_return(305,tuple([coords._ptr, forced_cleanup]))

  @functools.native_method
  def set_cell(self, coords:'Vector2i'   , source_id:'int' =-1  , atlas_coords:'Vector2i' = None  , alternative_tile:'int' =0  ) -> None:
    r'''
				Sets the tile identifiers for the cell at coordinates `coords`. Each tile of the `TileSet` is identified using three parts:
				- The source identifier `source_id` identifies a `TileSetSource` identifier. See `TileSet.set_source_id`,
				- The atlas coordinate identifier `atlas_coords` identifies a tile coordinates in the atlas (if the source is a `TileSetAtlasSource`). For `TileSetScenesCollectionSource` it should always be `Vector2i(0, 0)`,
				- The alternative tile identifier `alternative_tile` identifies a tile alternative in the atlas (if the source is a `TileSetAtlasSource`), and the scene for a `TileSetScenesCollectionSource`.
				If `source_id` is set to `-1`, `atlas_coords` to `Vector2i(-1, -1)`, or `alternative_tile` to `-1`, the cell will be erased. An erased cell gets **all** its identifiers automatically set to their respective invalid values, namely `-1`, `Vector2i(-1, -1)` and `-1`.
			'''
    if atlas_coords is None:
      atlas_coords = Vector2i.new0()
    if atlas_coords is None:
      atlas_coords = Vector2i.new0()

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'
    assert isinstance(source_id, (int, float)), 'source_id must be int or float'
    assert isinstance(alternative_tile, (int, float)), 'alternative_tile must be int or float'









    self._ptr.call_with_return(306,tuple([coords._ptr, source_id, atlas_coords._ptr, alternative_tile]))

  @functools.native_method
  def erase_cell(self, coords:'Vector2i'   ) -> None:
    r'''
				Erases the cell at coordinates `coords`.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    self._ptr.call_with_return(307,tuple([coords._ptr]))

  @functools.native_method
  def fix_invalid_tiles(self) -> None:
    r'''
				Clears cells containing tiles that do not exist in the `tile_set`.
			'''




    self._ptr.call_with_return(308,tuple([]))

  @functools.native_method
  def clear(self) -> None:
    r'''
				Clears all cells.
			'''




    self._ptr.call_with_return(309,tuple([]))

  @functools.native_method
  def get_cell_source_id(self, coords:'Vector2i'   ) -> typing.Union[int]:
    r'''
				Returns the tile source ID of the cell at coordinates `coords`. Returns `-1` if the cell does not exist.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(310,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def get_cell_atlas_coords(self, coords:'Vector2i'   ) -> typing.Union['Vector2i']:
    r'''
				Returns the tile atlas coordinates ID of the cell at coordinates `coords`. Returns `Vector2i(-1, -1)` if the cell does not exist.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(311,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def get_cell_alternative_tile(self, coords:'Vector2i'   ) -> typing.Union[int]:
    r'''
				Returns the tile alternative ID of the cell at coordinates `coords`.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(312,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def get_cell_tile_data(self, coords:'Vector2i'   ) -> typing.Union['py4godot_tiledata.TileData']:
    r'''
				Returns the `TileData` object associated with the given cell, or `null` if the cell does not exist or is not a `TileSetAtlasSource`.
				```gdscript
				func get_clicked_tile_power():
					var clicked_cell = tile_map_layer.local_to_map(tile_map_layer.get_local_mouse_position())
					var data = tile_map_layer.get_cell_tile_data(clicked_cell)
					if data:
						return data.get_custom_data("power")
					else:
						return 0
				```
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: TileData
    _ret._ptr = self._ptr.call_with_return(313,tuple([coords._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def is_cell_flipped_h(self, coords:'Vector2i'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the cell at coordinates `coords` is flipped horizontally. The result is valid only for atlas sources.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(314,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def is_cell_flipped_v(self, coords:'Vector2i'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the cell at coordinates `coords` is flipped vertically. The result is valid only for atlas sources.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(315,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def is_cell_transposed(self, coords:'Vector2i'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the cell at coordinates `coords` is transposed. The result is valid only for atlas sources.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(316,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def get_used_cells(self) -> typing.Union['py4godot_vector2itypedarray.Vector2iTypedArray']:
    r'''
				Returns a `Vector2i` array with the positions of all cells containing a tile. A cell is considered empty if its source identifier equals `-1`, its atlas coordinate identifier is `Vector2(-1, -1)` and its alternative identifier is `-1`.
			'''




    _ret = py4godot_vector2itypedarray.Vector2iTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(317,tuple([]))
    return _ret


  @functools.native_method
  def get_used_cells_by_id(self, source_id:'int' =-1  , atlas_coords:'Vector2i' = None  , alternative_tile:'int' =-1  ) -> typing.Union['py4godot_vector2itypedarray.Vector2iTypedArray']:
    r'''
				Returns a `Vector2i` array with the positions of all cells containing a tile. Tiles may be filtered according to their source (`source_id`), their atlas coordinates (`atlas_coords`), or alternative id (`alternative_tile`).
				If a parameter has its value set to the default one, this parameter is not used to filter a cell. Thus, if all parameters have their respective default values, this method returns the same result as `get_used_cells`.
				A cell is considered empty if its source identifier equals `-1`, its atlas coordinate identifier is `Vector2(-1, -1)` and its alternative identifier is `-1`.
			'''
    if atlas_coords is None:
      atlas_coords = Vector2i.new0()
    if atlas_coords is None:
      atlas_coords = Vector2i.new0()

    assert isinstance(source_id, (int, float)), 'source_id must be int or float'
    assert isinstance(alternative_tile, (int, float)), 'alternative_tile must be int or float'








    _ret = py4godot_vector2itypedarray.Vector2iTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(318,tuple([source_id, atlas_coords._ptr, alternative_tile]))
    return _ret


  @functools.native_method
  def get_used_rect(self) -> typing.Union['Rect2i']:
    r'''
				Returns a rectangle enclosing the used (non-empty) tiles of the map.
			'''




    _ret = Rect2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(319,tuple([]))
    return _ret


  @functools.native_method
  def get_pattern(self, coords_array:'py4godot_vector2itypedarray.Vector2iTypedArray'   ) -> typing.Union['py4godot_tilemappattern.TileMapPattern']:
    r'''
				Creates and returns a new `TileMapPattern` from the given array of cells. See also `set_pattern`.
			'''

    assert isinstance(coords_array, get_class('Vector2iTypedArray')), 'coords_array must be Vector2iTypedArray'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: TileMapPattern
    _ret._ptr = self._ptr.call_with_return(320,tuple([coords_array._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_pattern(self, position:'Vector2i'   , pattern:'py4godot_tilemappattern.TileMapPattern'   ) -> None:
    r'''
				Pastes the `TileMapPattern` at the given `position` in the tile map. See also `get_pattern`.
			'''

    assert(not position is None)
    assert isinstance(position, Vector2i), 'position must be Vector2i'
    assert(not pattern is None)
    assert isinstance(pattern, get_class('TileMapPattern')), 'pattern must be TileMapPattern'







    self._ptr.call_with_return(321,tuple([position._ptr, pattern._ptr]))

  @functools.native_method
  def set_cells_terrain_connect(self, cells:'py4godot_vector2itypedarray.Vector2iTypedArray'   , terrain_set:'int'   , terrain:'int'   , ignore_empty_terrains:'bool' =True  ) -> None:
    r'''
				Update all the cells in the `cells` coordinates array so that they use the given `terrain` for the given `terrain_set`. If an updated cell has the same terrain as one of its neighboring cells, this function tries to join the two. This function might update neighboring tiles if needed to create correct terrain transitions.
				If `ignore_empty_terrains` is `true`, empty terrains will be ignored when trying to find the best fitting tile for the given terrain constraints.
				**Note:** To work correctly, this method requires the `TileMapLayer`'s TileSet to have terrains set up with all required terrain combinations. Otherwise, it may produce unexpected results.
			'''

    assert isinstance(cells, get_class('Vector2iTypedArray')), 'cells must be Vector2iTypedArray'
    assert isinstance(terrain_set, (int, float)), 'terrain_set must be int or float'
    assert isinstance(terrain, (int, float)), 'terrain must be int or float'
    assert isinstance(ignore_empty_terrains, bool), 'ignore_empty_terrains must be bool'









    self._ptr.call_with_return(322,tuple([cells._ptr, terrain_set, terrain, ignore_empty_terrains]))

  @functools.native_method
  def set_cells_terrain_path(self, path:'py4godot_vector2itypedarray.Vector2iTypedArray'   , terrain_set:'int'   , terrain:'int'   , ignore_empty_terrains:'bool' =True  ) -> None:
    r'''
				Update all the cells in the `path` coordinates array so that they use the given `terrain` for the given `terrain_set`. The function will also connect two successive cell in the path with the same terrain. This function might update neighboring tiles if needed to create correct terrain transitions.
				If `ignore_empty_terrains` is `true`, empty terrains will be ignored when trying to find the best fitting tile for the given terrain constraints.
				**Note:** To work correctly, this method requires the `TileMapLayer`'s TileSet to have terrains set up with all required terrain combinations. Otherwise, it may produce unexpected results.
			'''

    assert isinstance(path, get_class('Vector2iTypedArray')), 'path must be Vector2iTypedArray'
    assert isinstance(terrain_set, (int, float)), 'terrain_set must be int or float'
    assert isinstance(terrain, (int, float)), 'terrain must be int or float'
    assert isinstance(ignore_empty_terrains, bool), 'ignore_empty_terrains must be bool'









    self._ptr.call_with_return(323,tuple([path._ptr, terrain_set, terrain, ignore_empty_terrains]))

  @functools.native_method
  def has_body_rid(self, body:'RID'   ) -> typing.Union[bool]:
    r'''
				Returns whether the provided `body` `RID` belongs to one of this `TileMapLayer`'s cells.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(324,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def get_coords_for_body_rid(self, body:'RID'   ) -> typing.Union['Vector2i']:
    r'''
				Returns the coordinates of the physics quadrant (see `physics_quadrant_size`) for given physics body `RID`. Such an `RID` can be retrieved from `KinematicCollision2D.get_collider_rid`, when colliding with a tile.
			'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(325,tuple([body._ptr]))
    return _ret


  @functools.native_method
  def update_internals(self) -> None:
    r'''
				Triggers a direct update of the `TileMapLayer`. Usually, calling this function is not needed, as `TileMapLayer` node updates automatically when one of its properties or cells is modified.
				However, for performance reasons, those updates are batched and delayed to the end of the frame. Calling this function will force the `TileMapLayer` to update right away instead.
				**Warning:** Updating the `TileMapLayer` is computationally expensive and may impact performance. Try to limit the number of updates and how many tiles they impact.
			'''




    self._ptr.call_with_return(326,tuple([]))

  @functools.native_method
  def notify_runtime_tile_data_update(self) -> None:
    r'''
				Notifies the `TileMapLayer` node that calls to `_use_tile_data_runtime_update` or `_tile_data_runtime_update` will lead to different results. This will thus trigger a `TileMapLayer` update.
				**Warning:** Updating the `TileMapLayer` is computationally expensive and may impact performance. Try to limit the number of calls to this function to avoid unnecessary update.
				**Note:** This does not trigger a direct update of the `TileMapLayer`, the update will be done at the end of the frame as usual (unless you call `update_internals`).
			'''




    self._ptr.call_with_return(327,tuple([]))

  @functools.native_method
  def map_pattern(self, position_in_tilemap:'Vector2i'   , coords_in_pattern:'Vector2i'   , pattern:'py4godot_tilemappattern.TileMapPattern'   ) -> typing.Union['Vector2i']:
    r'''
				Returns for the given coordinates `coords_in_pattern` in a `TileMapPattern` the corresponding cell coordinates if the pattern was pasted at the `position_in_tilemap` coordinates (see `set_pattern`). This mapping is required as in half-offset tile shapes, the mapping might not work by calculating `position_in_tile_map + coords_in_pattern`.
			'''

    assert(not position_in_tilemap is None)
    assert isinstance(position_in_tilemap, Vector2i), 'position_in_tilemap must be Vector2i'
    assert(not coords_in_pattern is None)
    assert isinstance(coords_in_pattern, Vector2i), 'coords_in_pattern must be Vector2i'
    assert(not pattern is None)
    assert isinstance(pattern, get_class('TileMapPattern')), 'pattern must be TileMapPattern'








    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(328,tuple([position_in_tilemap._ptr, coords_in_pattern._ptr, pattern._ptr]))
    return _ret


  @functools.native_method
  def get_surrounding_cells(self, coords:'Vector2i'   ) -> typing.Union['py4godot_vector2itypedarray.Vector2iTypedArray']:
    r'''
				Returns the list of all neighboring cells to the one at `coords`. Any neighboring cell is one that is touching edges, so for a square cell 4 cells would be returned, for a hexagon 6 cells are returned.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'






    _ret = py4godot_vector2itypedarray.Vector2iTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(329,tuple([coords._ptr]))
    return _ret


  @functools.native_method
  def get_neighbor_cell(self, coords:'Vector2i'   , neighbor:'int'  ) -> typing.Union['Vector2i']:
    r'''
				Returns the neighboring cell to the one at coordinates `coords`, identified by the `neighbor` direction. This method takes into account the different layouts a TileMap can take.
			'''

    assert(not coords is None)
    assert isinstance(coords, Vector2i), 'coords must be Vector2i'
    assert isinstance(neighbor, (int, float)), 'neighbor must be int or float'







    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(330,tuple([coords._ptr, neighbor]))
    return _ret


  @functools.native_method
  def map_to_local(self, map_position:'Vector2i'   ) -> typing.Union['Vector2']:
    r'''
				Returns the centered position of a cell in the `TileMapLayer`'s local coordinate space. To convert the returned value into global coordinates, use `Node2D.to_global`. See also `local_to_map`.
				**Note:** This may not correspond to the visual position of the tile, i.e. it ignores the `TileData.texture_origin` property of individual tiles.
			'''

    assert(not map_position is None)
    assert isinstance(map_position, Vector2i), 'map_position must be Vector2i'






    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(331,tuple([map_position._ptr]))
    return _ret


  @functools.native_method
  def local_to_map(self, local_position:'Vector2'   ) -> typing.Union['Vector2i']:
    r'''
				Returns the map coordinates of the cell containing the given `local_position`. If `local_position` is in global coordinates, consider using `Node2D.to_local` before passing it to this method. See also `map_to_local`.
			'''

    assert(not local_position is None)
    assert isinstance(local_position, Vector2), 'local_position must be Vector2'






    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(332,tuple([local_position._ptr]))
    return _ret


  @functools.native_method
  def set_tile_map_data_from_array(self, tile_map_layer_data:'PackedByteArray'   ) -> None:
    r''''''

    assert(not tile_map_layer_data is None)
    assert isinstance(tile_map_layer_data, PackedByteArray), 'tile_map_layer_data must be PackedByteArray'

    self.py__tile_map_data = tile_map_layer_data






    self._ptr.call_with_return(333,tuple([tile_map_layer_data._ptr]))

  @functools.native_method
  def get_tile_map_data_as_array(self) -> typing.Union['PackedByteArray']:
    r''''''




    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(334,tuple([]))

    return _ret


  @functools.native_method
  def set_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__enabled = enabled






    self._ptr.call_with_return(335,tuple([enabled]))

  @functools.native_method
  def is_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(336,tuple([]))

    return _ret


  @functools.native_method
  def set_tile_set(self, tile_set:'py4godot_tileset.TileSet'   ) -> None:
    r''''''

    assert(not tile_set is None)
    assert isinstance(tile_set, get_class('TileSet')), 'tile_set must be TileSet'

    self.py__tile_set = tile_set






    self._ptr.call_with_return(337,tuple([tile_set._ptr]))

  @functools.native_method
  def get_tile_set(self) -> typing.Union['py4godot_tileset.TileSet']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: TileSet
    _ret._ptr = self._ptr.call_with_return(338,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_y_sort_origin(self, y_sort_origin:'int'   ) -> None:
    r''''''

    assert isinstance(y_sort_origin, (int, float)), 'y_sort_origin must be int or float'

    self.py__y_sort_origin = y_sort_origin






    self._ptr.call_with_return(339,tuple([y_sort_origin]))

  @functools.native_method
  def get_y_sort_origin(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(340,tuple([]))

    return _ret


  @functools.native_method
  def set_x_draw_order_reversed(self, x_draw_order_reversed:'bool'   ) -> None:
    r''''''

    assert isinstance(x_draw_order_reversed, bool), 'x_draw_order_reversed must be bool'

    self.py__x_draw_order_reversed = x_draw_order_reversed






    self._ptr.call_with_return(341,tuple([x_draw_order_reversed]))

  @functools.native_method
  def is_x_draw_order_reversed(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(342,tuple([]))

    return _ret


  @functools.native_method
  def set_rendering_quadrant_size(self, size:'int'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__rendering_quadrant_size = size






    self._ptr.call_with_return(343,tuple([size]))

  @functools.native_method
  def get_rendering_quadrant_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(344,tuple([]))

    return _ret


  @functools.native_method
  def set_collision_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__collision_enabled = enabled






    self._ptr.call_with_return(345,tuple([enabled]))

  @functools.native_method
  def is_collision_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(346,tuple([]))

    return _ret


  @functools.native_method
  def set_use_kinematic_bodies(self, use_kinematic_bodies:'bool'   ) -> None:
    r''''''

    assert isinstance(use_kinematic_bodies, bool), 'use_kinematic_bodies must be bool'

    self.py__use_kinematic_bodies = use_kinematic_bodies






    self._ptr.call_with_return(347,tuple([use_kinematic_bodies]))

  @functools.native_method
  def is_using_kinematic_bodies(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(348,tuple([]))

    return _ret


  @functools.native_method
  def set_collision_visibility_mode(self, visibility_mode:'int'  ) -> None:
    r''''''

    assert isinstance(visibility_mode, (int, float)), 'visibility_mode must be int or float'

    self.py__collision_visibility_mode = visibility_mode






    self._ptr.call_with_return(349,tuple([visibility_mode]))

  @functools.native_method
  def get_collision_visibility_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(350,tuple([]))

    return _ret


  @functools.native_method
  def set_physics_quadrant_size(self, size:'int'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__physics_quadrant_size = size






    self._ptr.call_with_return(351,tuple([size]))

  @functools.native_method
  def get_physics_quadrant_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(352,tuple([]))

    return _ret


  @functools.native_method
  def set_occlusion_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__occlusion_enabled = enabled






    self._ptr.call_with_return(353,tuple([enabled]))

  @functools.native_method
  def is_occlusion_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(354,tuple([]))

    return _ret


  @functools.native_method
  def set_navigation_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__navigation_enabled = enabled






    self._ptr.call_with_return(355,tuple([enabled]))

  @functools.native_method
  def is_navigation_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(356,tuple([]))

    return _ret


  @functools.native_method
  def set_navigation_map(self, map:'RID'   ) -> None:
    r'''
				Sets a custom `map` as a `NavigationServer2D` navigation map. If not set, uses the default `World2D` navigation map instead.
			'''

    assert(not map is None)
    assert isinstance(map, RID), 'map must be RID'






    self._ptr.call_with_return(357,tuple([map._ptr]))

  @functools.native_method
  def get_navigation_map(self) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the `NavigationServer2D` navigation used by this `TileMapLayer`.
				By default this returns the default `World2D` navigation map, unless a custom map was provided using `set_navigation_map`.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(358,tuple([]))
    return _ret


  @functools.native_method
  def set_navigation_visibility_mode(self, show_navigation:'int'  ) -> None:
    r''''''

    assert isinstance(show_navigation, (int, float)), 'show_navigation must be int or float'

    self.py__navigation_visibility_mode = show_navigation






    self._ptr.call_with_return(359,tuple([show_navigation]))

  @functools.native_method
  def get_navigation_visibility_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(360,tuple([]))

    return _ret



register_cast_function('TileMapLayer', TileMapLayer.cast)
register_class('TileMapLayer', TileMapLayer)
