# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Material as py4godot_material 
  import py4godot.classes.PanoramaSkyMaterial as py4godot_panoramaskymaterial 
  import py4godot.classes.FogMaterial as py4godot_fogmaterial 
  import py4godot.classes.ORMMaterial3D as py4godot_ormmaterial3d 
  import py4godot.classes.PhysicalSkyMaterial as py4godot_physicalskymaterial 
  import py4godot.classes.PlaceholderMaterial as py4godot_placeholdermaterial 
  import py4godot.classes.CanvasItemMaterial as py4godot_canvasitemmaterial 
  import py4godot.classes.ParticleProcessMaterial as py4godot_particleprocessmaterial 
  import py4godot.classes.ProceduralSkyMaterial as py4godot_proceduralskymaterial 
  import py4godot.classes.BaseMaterial3D as py4godot_basematerial3d 
  import py4godot.classes.ShaderMaterial as py4godot_shadermaterial 
  import py4godot.classes.StandardMaterial3D as py4godot_standardmaterial3d 
import py4godot.classes.Mesh as py4godot_mesh 
from py4godot.wrappers.wrappers import CPPPrimitiveMeshWrapper


class PrimitiveMesh(py4godot_mesh.Mesh):
  r'''
		Base class for all primitive meshes. Handles applying a `Material` to a primitive mesh. Examples include `BoxMesh`, `CapsuleMesh`, `CylinderMesh`, `PlaneMesh`, `PrismMesh`, and `SphereMesh`.
	'''

  @staticmethod
  def constructor():
    class_ = PrimitiveMesh.construct_without_init()
    class_._ptr = constructor(637,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PrimitiveMesh.construct_without_init()
    class_._ptr = constructor(637,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPrimitiveMeshWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(637,0, ())


  def generate_wrapper(self):
    return CPPPrimitiveMeshWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PrimitiveMesh.__new__(PrimitiveMesh)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PrimitiveMesh'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PrimitiveMesh.construct_without_init()
    cls._ptr = CPPPrimitiveMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PrimitiveMesh.construct_without_init()
    cls._ptr = CPPPrimitiveMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def material(self) -> typing.Union['py4godot_basematerial3d.BaseMaterial3D','py4godot_ormmaterial3d.ORMMaterial3D','py4godot_standardmaterial3d.StandardMaterial3D']:
    r''''''
    _ret = self. get_material()
    return _ret
  @material.setter
  def material(self,  value:'py4godot_object.Object'):
    self.set_material(value)
  @property
  def custom_aabb(self) -> typing.Union['AABB']:
    r''''''
    _ret = self. get_custom_aabb()
    return _ret
  @custom_aabb.setter
  def custom_aabb(self,  value:'AABB'):
    self.set_custom_aabb(value)
  @property
  def flip_faces(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_flip_faces()
    return _ret
  @flip_faces.setter
  def flip_faces(self,  value:'bool'):
    self.set_flip_faces(value)
  @property
  def add_uv2(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_add_uv2()
    return _ret
  @add_uv2.setter
  def add_uv2(self,  value:'bool'):
    self.set_add_uv2(value)
  @property
  def uv2_padding(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_uv2_padding()
    return _ret
  @uv2_padding.setter
  def uv2_padding(self,  value:'float'):
    self.set_uv2_padding(value)
  @functools.native_method
  def _create_mesh_array(self) -> typing.Union['Array']:
    r'''
				Override this method to customize how this primitive mesh should be generated. Should return an `Array` where each element is another Array of values required for the mesh (see the `enum Mesh.ArrayType` constants).
			'''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(105,tuple([]))
    return _ret


  @functools.native_method
  def set_material(self, material:'py4godot_material.Material'   ) -> None:
    r''''''

    assert(not material is None)
    assert isinstance(material, get_class('Material')), 'material must be Material'

    self.py__material = material






    self._ptr.call_with_return(106,tuple([material._ptr]))

  @functools.native_method
  def get_material(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Material
    _ret._ptr = self._ptr.call_with_return(107,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_mesh_arrays(self) -> typing.Union['Array']:
    r'''
				Returns the mesh arrays used to make up the surface of this primitive mesh.
				**Example:** Pass the result to `ArrayMesh.add_surface_from_arrays` to create a new surface:
				
				```gdscript
				var c = CylinderMesh.new()
				var arr_mesh = ArrayMesh.new()
				arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, c.get_mesh_arrays())
				```
				
				
			'''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(108,tuple([]))
    return _ret


  @functools.native_method
  def set_custom_aabb(self, aabb:'AABB'   ) -> None:
    r''''''

    assert(not aabb is None)
    assert isinstance(aabb, AABB), 'aabb must be AABB'

    self.py__custom_aabb = aabb






    self._ptr.call_with_return(109,tuple([aabb._ptr]))

  @functools.native_method
  def get_custom_aabb(self) -> typing.Union['AABB']:
    r''''''




    _ret = AABB.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(110,tuple([]))

    return _ret


  @functools.native_method
  def set_flip_faces(self, flip_faces:'bool'   ) -> None:
    r''''''

    assert isinstance(flip_faces, bool), 'flip_faces must be bool'

    self.py__flip_faces = flip_faces






    self._ptr.call_with_return(111,tuple([flip_faces]))

  @functools.native_method
  def get_flip_faces(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(112,tuple([]))

    return _ret


  @functools.native_method
  def set_add_uv2(self, add_uv2:'bool'   ) -> None:
    r''''''

    assert isinstance(add_uv2, bool), 'add_uv2 must be bool'

    self.py__add_uv2 = add_uv2






    self._ptr.call_with_return(113,tuple([add_uv2]))

  @functools.native_method
  def get_add_uv2(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(114,tuple([]))

    return _ret


  @functools.native_method
  def set_uv2_padding(self, uv2_padding:'float'   ) -> None:
    r''''''

    assert isinstance(uv2_padding, (int, float)), 'uv2_padding must be int or float'

    self.py__uv2_padding = uv2_padding






    self._ptr.call_with_return(115,tuple([uv2_padding]))

  @functools.native_method
  def get_uv2_padding(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(116,tuple([]))

    return _ret


  @functools.native_method
  def request_update(self) -> None:
    r'''
				Request an update of this primitive mesh based on its properties.
			'''




    self._ptr.call_with_return(117,tuple([]))


register_cast_function('PrimitiveMesh', PrimitiveMesh.cast)
register_class('PrimitiveMesh', PrimitiveMesh)
