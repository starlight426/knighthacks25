# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPTileSetSourceWrapper


class TileSetSource(py4godot_resource.Resource):
  r'''
		Exposes a set of tiles for a `TileSet` resource.
		Tiles in a source are indexed with two IDs, coordinates ID (of type Vector2i) and an alternative ID (of type int), named according to their use in the `TileSetAtlasSource` class.
		Depending on the TileSet source type, those IDs might have restrictions on their values, this is why the base `TileSetSource` class only exposes getters for them.
		You can iterate over all tiles exposed by a TileSetSource by first iterating over coordinates IDs using `get_tiles_count` and `get_tile_id`, then over alternative IDs using `get_alternative_tiles_count` and `get_alternative_tile_id`.
		**Warning:** `TileSetSource` can only be added to one TileSet at the same time. Calling `TileSet.add_source` on a second `TileSet` will remove the source from the first one.
	'''

  @staticmethod
  def constructor():
    class_ = TileSetSource.construct_without_init()
    class_._ptr = constructor(841,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TileSetSource.construct_without_init()
    class_._ptr = constructor(841,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTileSetSourceWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(841,0, ())


  def generate_wrapper(self):
    return CPPTileSetSourceWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = TileSetSource.__new__(TileSetSource)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TileSetSource'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TileSetSource.construct_without_init()
    cls._ptr = CPPTileSetSourceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TileSetSource.construct_without_init()
    cls._ptr = CPPTileSetSourceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_tiles_count(self) -> typing.Union[int]:
    r'''
				Returns how many tiles this atlas source defines (not including alternative tiles).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([]))
    return _ret


  @functools.native_method
  def get_tile_id(self, index:'int'   ) -> typing.Union['Vector2i']:
    r'''
				Returns the tile coordinates ID of the tile with index `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([index]))
    return _ret


  @functools.native_method
  def has_tile(self, atlas_coords:'Vector2i'   ) -> typing.Union[bool]:
    r'''
				Returns if this atlas has a tile with coordinates ID `atlas_coords`.
			'''

    assert(not atlas_coords is None)
    assert isinstance(atlas_coords, Vector2i), 'atlas_coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([atlas_coords._ptr]))
    return _ret


  @functools.native_method
  def get_alternative_tiles_count(self, atlas_coords:'Vector2i'   ) -> typing.Union[int]:
    r'''
				Returns the number of alternatives tiles for the coordinates ID `atlas_coords`.
				For `TileSetAtlasSource`, this always return at least 1, as the base tile with ID 0 is always part of the alternatives list.
				Returns -1 if there is not tile at the given coords.
			'''

    assert(not atlas_coords is None)
    assert isinstance(atlas_coords, Vector2i), 'atlas_coords must be Vector2i'






    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([atlas_coords._ptr]))
    return _ret


  @functools.native_method
  def get_alternative_tile_id(self, atlas_coords:'Vector2i'   , index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the alternative ID for the tile with coordinates ID `atlas_coords` at index `index`.
			'''

    assert(not atlas_coords is None)
    assert isinstance(atlas_coords, Vector2i), 'atlas_coords must be Vector2i'
    assert isinstance(index, (int, float)), 'index must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([atlas_coords._ptr, index]))
    return _ret


  @functools.native_method
  def has_alternative_tile(self, atlas_coords:'Vector2i'   , alternative_tile:'int'   ) -> typing.Union[bool]:
    r'''
				Returns if the base tile at coordinates `atlas_coords` has an alternative with ID `alternative_tile`.
			'''

    assert(not atlas_coords is None)
    assert isinstance(atlas_coords, Vector2i), 'atlas_coords must be Vector2i'
    assert isinstance(alternative_tile, (int, float)), 'alternative_tile must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([atlas_coords._ptr, alternative_tile]))
    return _ret



register_cast_function('TileSetSource', TileSetSource.cast)
register_class('TileSetSource', TileSetSource)
