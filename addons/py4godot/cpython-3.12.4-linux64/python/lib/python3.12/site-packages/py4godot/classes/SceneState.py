# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.PackedScene as py4godot_packedscene 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPSceneStateWrapper

class GenEditState:
  GEN_EDIT_STATE_DISABLED = 0
  GEN_EDIT_STATE_INSTANCE = 1
  GEN_EDIT_STATE_MAIN = 2
  GEN_EDIT_STATE_MAIN_INHERITED = 3


class SceneState(py4godot_refcounted.RefCounted):
  r'''
		Maintains a list of resources, nodes, exported and overridden properties, and built-in scripts associated with a scene. They cannot be modified from a `SceneState`, only accessed. Useful for peeking into what a `PackedScene` contains without instantiating it.
		This class cannot be instantiated directly, it is retrieved for a given scene as the result of `PackedScene.get_state`.
	'''

  @staticmethod
  def constructor():
    class_ = SceneState.construct_without_init()
    class_._ptr = constructor(718,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SceneState.construct_without_init()
    class_._ptr = constructor(718,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSceneStateWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(718,0, ())


  def generate_wrapper(self):
    return CPPSceneStateWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SceneState.__new__(SceneState)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SceneState'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SceneState.construct_without_init()
    cls._ptr = CPPSceneStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SceneState.construct_without_init()
    cls._ptr = CPPSceneStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_path(self) -> typing.Union[str]:
    r'''
				Returns the resource path to the represented `PackedScene`.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_base_scene_state(self) -> typing.Union['typing.Self']:
    r'''
				Returns the `SceneState` of the scene that this scene inherits from, or `null` if it doesn't inherit from any scene.
			'''




    _ret = SceneState.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_node_count(self) -> typing.Union[int]:
    r'''
				Returns the number of nodes in the scene.
				The `idx` argument used to query node data in other `get_node_*` methods in the interval ``0, get_node_count() - 1``.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def get_node_type(self, idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the type of the node at `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([idx]))
    return _ret


  @functools.native_method
  def get_node_name(self, idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the name of the node at `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(57,tuple([idx]))
    return _ret


  @functools.native_method
  def get_node_path(self, idx:'int'   , for_parent:'bool' =False  ) -> typing.Union['NodePath']:
    r'''
				Returns the path to the node at `idx`.
				If `for_parent` is `true`, returns the path of the `idx` node's parent instead.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert isinstance(for_parent, bool), 'for_parent must be bool'







    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([idx, for_parent]))
    return _ret


  @functools.native_method
  def get_node_owner_path(self, idx:'int'   ) -> typing.Union['NodePath']:
    r'''
				Returns the path to the owner of the node at `idx`, relative to the root node.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(59,tuple([idx]))
    return _ret


  @functools.native_method
  def is_node_instance_placeholder(self, idx:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the node at `idx` is an `InstancePlaceholder`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(60,tuple([idx]))
    return _ret


  @functools.native_method
  def get_node_instance_placeholder(self, idx:'int'   ) -> typing.Union[str]:
    r'''
				Returns the path to the represented scene file if the node at `idx` is an `InstancePlaceholder`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(61,tuple([idx]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_node_instance(self, idx:'int'   ) -> typing.Union['py4godot_packedscene.PackedScene']:
    r'''
				Returns a `PackedScene` for the node at `idx` (i.e. the whole branch starting at this node, with its child nodes and resources), or `null` if the node is not an instance.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PackedScene
    _ret._ptr = self._ptr.call_with_return(62,tuple([idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_node_groups(self, idx:'int'   ) -> typing.Union['PackedStringArray']:
    r'''
				Returns the list of group names associated with the node at `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(63,tuple([idx]))
    return _ret


  @functools.native_method
  def get_node_index(self, idx:'int'   ) -> typing.Union[int]:
    r'''
				Returns the node's index, which is its position relative to its siblings. This is only relevant and saved in scenes for cases where new nodes are added to an instantiated or inherited scene among siblings from the base scene. Despite the name, this index is not related to the `idx` argument used here and in other methods.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([idx]))
    return _ret


  @functools.native_method
  def get_node_property_count(self, idx:'int'   ) -> typing.Union[int]:
    r'''
				Returns the number of exported or overridden properties for the node at `idx`.
				The `prop_idx` argument used to query node property data in other `get_node_property_*` methods in the interval ``0, get_node_property_count() - 1``.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(65,tuple([idx]))
    return _ret


  @functools.native_method
  def get_node_property_name(self, idx:'int'   , prop_idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the name of the property at `prop_idx` for the node at `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert isinstance(prop_idx, (int, float)), 'prop_idx must be int or float'







    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(66,tuple([idx, prop_idx]))
    return _ret


  @functools.native_method
  def get_node_property_value(self, idx:'int'   , prop_idx:'int'   ) -> typing.Union[typing.Any]:
    r'''
				Returns the value of the property at `prop_idx` for the node at `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert isinstance(prop_idx, (int, float)), 'prop_idx must be int or float'







    _ret = None
    _ret = self._ptr.call_with_return(67,tuple([idx, prop_idx]))
    return _ret


  @functools.native_method
  def get_connection_count(self) -> typing.Union[int]:
    r'''
				Returns the number of signal connections in the scene.
				The `idx` argument used to query connection metadata in other `get_connection_*` methods in the interval ``0, get_connection_count() - 1``.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([]))
    return _ret


  @functools.native_method
  def get_connection_source(self, idx:'int'   ) -> typing.Union['NodePath']:
    r'''
				Returns the path to the node that owns the signal at `idx`, relative to the root node.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(69,tuple([idx]))
    return _ret


  @functools.native_method
  def get_connection_signal(self, idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the name of the signal at `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(70,tuple([idx]))
    return _ret


  @functools.native_method
  def get_connection_target(self, idx:'int'   ) -> typing.Union['NodePath']:
    r'''
				Returns the path to the node that owns the method connected to the signal at `idx`, relative to the root node.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(71,tuple([idx]))
    return _ret


  @functools.native_method
  def get_connection_method(self, idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the method connected to the signal at `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(72,tuple([idx]))
    return _ret


  @functools.native_method
  def get_connection_flags(self, idx:'int'   ) -> typing.Union[int]:
    r'''
				Returns the connection flags for the signal at `idx`. See `enum Object.ConnectFlags` constants.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([idx]))
    return _ret


  @functools.native_method
  def get_connection_binds(self, idx:'int'   ) -> typing.Union['Array']:
    r'''
				Returns the list of bound parameters for the signal at `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(74,tuple([idx]))
    return _ret


  @functools.native_method
  def get_connection_unbinds(self, idx:'int'   ) -> typing.Union[int]:
    r'''
				Returns the number of unbound parameters for the signal at `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(75,tuple([idx]))
    return _ret



register_cast_function('SceneState', SceneState.cast)
register_class('SceneState', SceneState)
