# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Material as py4godot_material 
from py4godot.wrappers.wrappers import CPPCanvasItemMaterialWrapper

class BlendMode:
  BLEND_MODE_MIX = 0
  BLEND_MODE_ADD = 1
  BLEND_MODE_SUB = 2
  BLEND_MODE_MUL = 3
  BLEND_MODE_PREMULT_ALPHA = 4
class LightMode:
  LIGHT_MODE_NORMAL = 0
  LIGHT_MODE_UNSHADED = 1
  LIGHT_MODE_LIGHT_ONLY = 2


class CanvasItemMaterial(py4godot_material.Material):
  r'''
		`CanvasItemMaterial`s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a `ShaderMaterial` to more fully customize a material's interactions with a `CanvasItem`.
	'''

  @staticmethod
  def constructor():
    class_ = CanvasItemMaterial.construct_without_init()
    class_._ptr = constructor(198,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CanvasItemMaterial.construct_without_init()
    class_._ptr = constructor(198,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCanvasItemMaterialWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(198,0, ())


  def generate_wrapper(self):
    return CPPCanvasItemMaterialWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CanvasItemMaterial.__new__(CanvasItemMaterial)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CanvasItemMaterial'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CanvasItemMaterial.construct_without_init()
    cls._ptr = CPPCanvasItemMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CanvasItemMaterial.construct_without_init()
    cls._ptr = CPPCanvasItemMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def blend_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_blend_mode()
    return _ret
  @blend_mode.setter
  def blend_mode(self,  value:'int'):
    self.set_blend_mode(value)
  @property
  def light_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_light_mode()
    return _ret
  @light_mode.setter
  def light_mode(self,  value:'int'):
    self.set_light_mode(value)
  @property
  def particles_animation(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_particles_animation()
    return _ret
  @particles_animation.setter
  def particles_animation(self,  value:'bool'):
    self.set_particles_animation(value)
  @property
  def particles_anim_h_frames(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_particles_anim_h_frames()
    return _ret
  @particles_anim_h_frames.setter
  def particles_anim_h_frames(self,  value:'int'):
    self.set_particles_anim_h_frames(value)
  @property
  def particles_anim_v_frames(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_particles_anim_v_frames()
    return _ret
  @particles_anim_v_frames.setter
  def particles_anim_v_frames(self,  value:'int'):
    self.set_particles_anim_v_frames(value)
  @property
  def particles_anim_loop(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_particles_anim_loop()
    return _ret
  @particles_anim_loop.setter
  def particles_anim_loop(self,  value:'bool'):
    self.set_particles_anim_loop(value)
  @functools.native_method
  def set_blend_mode(self, blend_mode:'int'  ) -> None:
    r''''''

    assert isinstance(blend_mode, (int, float)), 'blend_mode must be int or float'

    self.py__blend_mode = blend_mode






    self._ptr.call_with_return(87,tuple([blend_mode]))

  @functools.native_method
  def get_blend_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_light_mode(self, light_mode:'int'  ) -> None:
    r''''''

    assert isinstance(light_mode, (int, float)), 'light_mode must be int or float'

    self.py__light_mode = light_mode






    self._ptr.call_with_return(89,tuple([light_mode]))

  @functools.native_method
  def get_light_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_particles_animation(self, particles_anim:'bool'   ) -> None:
    r''''''

    assert isinstance(particles_anim, bool), 'particles_anim must be bool'

    self.py__particles_animation = particles_anim






    self._ptr.call_with_return(91,tuple([particles_anim]))

  @functools.native_method
  def get_particles_animation(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))

    return _ret


  @functools.native_method
  def set_particles_anim_h_frames(self, frames:'int'   ) -> None:
    r''''''

    assert isinstance(frames, (int, float)), 'frames must be int or float'

    self.py__particles_anim_h_frames = frames






    self._ptr.call_with_return(93,tuple([frames]))

  @functools.native_method
  def get_particles_anim_h_frames(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_particles_anim_v_frames(self, frames:'int'   ) -> None:
    r''''''

    assert isinstance(frames, (int, float)), 'frames must be int or float'

    self.py__particles_anim_v_frames = frames






    self._ptr.call_with_return(95,tuple([frames]))

  @functools.native_method
  def get_particles_anim_v_frames(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_particles_anim_loop(self, loop:'bool'   ) -> None:
    r''''''

    assert isinstance(loop, bool), 'loop must be bool'

    self.py__particles_anim_loop = loop






    self._ptr.call_with_return(97,tuple([loop]))

  @functools.native_method
  def get_particles_anim_loop(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([]))

    return _ret



register_cast_function('CanvasItemMaterial', CanvasItemMaterial.cast)
register_class('CanvasItemMaterial', CanvasItemMaterial)
