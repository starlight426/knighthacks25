# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.DirectionalLight2D as py4godot_directionallight2d 
  import py4godot.classes.PointLight2D as py4godot_pointlight2d 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPLight2DWrapper

class ShadowFilter:
  SHADOW_FILTER_NONE = 0
  SHADOW_FILTER_PCF5 = 1
  SHADOW_FILTER_PCF13 = 2
class BlendMode:
  BLEND_MODE_ADD = 0
  BLEND_MODE_SUB = 1
  BLEND_MODE_MIX = 2


class Light2D(py4godot_node2d.Node2D):
  r'''
		Casts light in a 2D environment. A light is defined as a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related).
	'''

  @staticmethod
  def constructor():
    class_ = Light2D.construct_without_init()
    class_._ptr = constructor(449,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Light2D.construct_without_init()
    class_._ptr = constructor(449,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPLight2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(449,0, ())


  def generate_wrapper(self):
    return CPPLight2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Light2D.__new__(Light2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Light2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Light2D.construct_without_init()
    cls._ptr = CPPLight2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Light2D.construct_without_init()
    cls._ptr = CPPLight2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_enabled()
    return _ret
  @enabled.setter
  def enabled(self,  value:'bool'):
    self.set_enabled(value)
  @property
  def editor_only(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_editor_only()
    return _ret
  @editor_only.setter
  def editor_only(self,  value:'bool'):
    self.set_editor_only(value)
  @property
  def color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_color()
    return _ret
  @color.setter
  def color(self,  value:'Color'):
    self.set_color(value)
  @property
  def energy(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_energy()
    return _ret
  @energy.setter
  def energy(self,  value:'float'):
    self.set_energy(value)
  @property
  def blend_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_blend_mode()
    return _ret
  @blend_mode.setter
  def blend_mode(self,  value:'int'):
    self.set_blend_mode(value)
  @property
  def range_z_min(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_z_range_min()
    return _ret
  @range_z_min.setter
  def range_z_min(self,  value:'int'):
    self.set_z_range_min(value)
  @property
  def range_z_max(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_z_range_max()
    return _ret
  @range_z_max.setter
  def range_z_max(self,  value:'int'):
    self.set_z_range_max(value)
  @property
  def range_layer_min(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_layer_range_min()
    return _ret
  @range_layer_min.setter
  def range_layer_min(self,  value:'int'):
    self.set_layer_range_min(value)
  @property
  def range_layer_max(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_layer_range_max()
    return _ret
  @range_layer_max.setter
  def range_layer_max(self,  value:'int'):
    self.set_layer_range_max(value)
  @property
  def range_item_cull_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_item_cull_mask()
    return _ret
  @range_item_cull_mask.setter
  def range_item_cull_mask(self,  value:'int'):
    self.set_item_cull_mask(value)
  @property
  def shadow_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_shadow_enabled()
    return _ret
  @shadow_enabled.setter
  def shadow_enabled(self,  value:'bool'):
    self.set_shadow_enabled(value)
  @property
  def shadow_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_shadow_color()
    return _ret
  @shadow_color.setter
  def shadow_color(self,  value:'Color'):
    self.set_shadow_color(value)
  @property
  def shadow_filter(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_shadow_filter()
    return _ret
  @shadow_filter.setter
  def shadow_filter(self,  value:'int'):
    self.set_shadow_filter(value)
  @property
  def shadow_filter_smooth(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_shadow_smooth()
    return _ret
  @shadow_filter_smooth.setter
  def shadow_filter_smooth(self,  value:'float'):
    self.set_shadow_smooth(value)
  @property
  def shadow_item_cull_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_item_shadow_cull_mask()
    return _ret
  @shadow_item_cull_mask.setter
  def shadow_item_cull_mask(self,  value:'int'):
    self.set_item_shadow_cull_mask(value)
  @functools.native_method
  def set_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__enabled = enabled






    self._ptr.call_with_return(303,tuple([enabled]))

  @functools.native_method
  def is_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def set_editor_only(self, editor_only:'bool'   ) -> None:
    r''''''

    assert isinstance(editor_only, bool), 'editor_only must be bool'

    self.py__editor_only = editor_only






    self._ptr.call_with_return(305,tuple([editor_only]))

  @functools.native_method
  def is_editor_only(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__color = color






    self._ptr.call_with_return(307,tuple([color._ptr]))

  @functools.native_method
  def get_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(308,tuple([]))

    return _ret


  @functools.native_method
  def set_energy(self, energy:'float'   ) -> None:
    r''''''

    assert isinstance(energy, (int, float)), 'energy must be int or float'

    self.py__energy = energy






    self._ptr.call_with_return(309,tuple([energy]))

  @functools.native_method
  def get_energy(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(310,tuple([]))

    return _ret


  @functools.native_method
  def set_z_range_min(self, z:'int'   ) -> None:
    r''''''

    assert isinstance(z, (int, float)), 'z must be int or float'

    self.py__range_z_min = z






    self._ptr.call_with_return(311,tuple([z]))

  @functools.native_method
  def get_z_range_min(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(312,tuple([]))

    return _ret


  @functools.native_method
  def set_z_range_max(self, z:'int'   ) -> None:
    r''''''

    assert isinstance(z, (int, float)), 'z must be int or float'

    self.py__range_z_max = z






    self._ptr.call_with_return(313,tuple([z]))

  @functools.native_method
  def get_z_range_max(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(314,tuple([]))

    return _ret


  @functools.native_method
  def set_layer_range_min(self, layer:'int'   ) -> None:
    r''''''

    assert isinstance(layer, (int, float)), 'layer must be int or float'

    self.py__range_layer_min = layer






    self._ptr.call_with_return(315,tuple([layer]))

  @functools.native_method
  def get_layer_range_min(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(316,tuple([]))

    return _ret


  @functools.native_method
  def set_layer_range_max(self, layer:'int'   ) -> None:
    r''''''

    assert isinstance(layer, (int, float)), 'layer must be int or float'

    self.py__range_layer_max = layer






    self._ptr.call_with_return(317,tuple([layer]))

  @functools.native_method
  def get_layer_range_max(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(318,tuple([]))

    return _ret


  @functools.native_method
  def set_item_cull_mask(self, item_cull_mask:'int'   ) -> None:
    r''''''

    assert isinstance(item_cull_mask, (int, float)), 'item_cull_mask must be int or float'

    self.py__range_item_cull_mask = item_cull_mask






    self._ptr.call_with_return(319,tuple([item_cull_mask]))

  @functools.native_method
  def get_item_cull_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(320,tuple([]))

    return _ret


  @functools.native_method
  def set_item_shadow_cull_mask(self, item_shadow_cull_mask:'int'   ) -> None:
    r''''''

    assert isinstance(item_shadow_cull_mask, (int, float)), 'item_shadow_cull_mask must be int or float'

    self.py__shadow_item_cull_mask = item_shadow_cull_mask






    self._ptr.call_with_return(321,tuple([item_shadow_cull_mask]))

  @functools.native_method
  def get_item_shadow_cull_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(322,tuple([]))

    return _ret


  @functools.native_method
  def set_shadow_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__shadow_enabled = enabled






    self._ptr.call_with_return(323,tuple([enabled]))

  @functools.native_method
  def is_shadow_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(324,tuple([]))

    return _ret


  @functools.native_method
  def set_shadow_smooth(self, smooth:'float'   ) -> None:
    r''''''

    assert isinstance(smooth, (int, float)), 'smooth must be int or float'

    self.py__shadow_filter_smooth = smooth






    self._ptr.call_with_return(325,tuple([smooth]))

  @functools.native_method
  def get_shadow_smooth(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(326,tuple([]))

    return _ret


  @functools.native_method
  def set_shadow_filter(self, filter:'int'  ) -> None:
    r''''''

    assert isinstance(filter, (int, float)), 'filter must be int or float'

    self.py__shadow_filter = filter






    self._ptr.call_with_return(327,tuple([filter]))

  @functools.native_method
  def get_shadow_filter(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(328,tuple([]))

    return _ret


  @functools.native_method
  def set_shadow_color(self, shadow_color:'Color'   ) -> None:
    r''''''

    assert(not shadow_color is None)
    assert isinstance(shadow_color, Color), 'shadow_color must be Color'

    self.py__shadow_color = shadow_color






    self._ptr.call_with_return(329,tuple([shadow_color._ptr]))

  @functools.native_method
  def get_shadow_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(330,tuple([]))

    return _ret


  @functools.native_method
  def set_blend_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__blend_mode = mode






    self._ptr.call_with_return(331,tuple([mode]))

  @functools.native_method
  def get_blend_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(332,tuple([]))

    return _ret


  @functools.native_method
  def set_height(self, height:'float'   ) -> None:
    r'''
				Sets the light's height, which is used in 2D normal mapping. See `PointLight2D.height` and `DirectionalLight2D.height`.
			'''

    assert isinstance(height, (int, float)), 'height must be int or float'






    self._ptr.call_with_return(333,tuple([height]))

  @functools.native_method
  def get_height(self) -> typing.Union[float]:
    r'''
				Returns the light's height, which is used in 2D normal mapping. See `PointLight2D.height` and `DirectionalLight2D.height`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(334,tuple([]))
    return _ret



register_cast_function('Light2D', Light2D.cast)
register_class('Light2D', Light2D)
