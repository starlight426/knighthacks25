# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Material as py4godot_material 
  import py4godot.classes.PanoramaSkyMaterial as py4godot_panoramaskymaterial 
  import py4godot.classes.FogMaterial as py4godot_fogmaterial 
  import py4godot.classes.ORMMaterial3D as py4godot_ormmaterial3d 
  import py4godot.classes.PhysicalSkyMaterial as py4godot_physicalskymaterial 
  import py4godot.classes.PlaceholderMaterial as py4godot_placeholdermaterial 
  import py4godot.classes.CanvasItemMaterial as py4godot_canvasitemmaterial 
  import py4godot.classes.ParticleProcessMaterial as py4godot_particleprocessmaterial 
  import py4godot.classes.ProceduralSkyMaterial as py4godot_proceduralskymaterial 
  import py4godot.classes.BaseMaterial3D as py4godot_basematerial3d 
  import py4godot.classes.ShaderMaterial as py4godot_shadermaterial 
  import py4godot.classes.StandardMaterial3D as py4godot_standardmaterial3d 
import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
from py4godot.wrappers.wrappers import CPPCSGCylinder3DWrapper


class CSGCylinder3D(py4godot_csgprimitive3d.CSGPrimitive3D):
  r''''''

  @staticmethod
  def constructor():
    class_ = CSGCylinder3D.construct_without_init()
    class_._ptr = constructor(180,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CSGCylinder3D.construct_without_init()
    class_._ptr = constructor(180,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCSGCylinder3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(180,0, ())


  def generate_wrapper(self):
    return CPPCSGCylinder3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CSGCylinder3D.__new__(CSGCylinder3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CSGCylinder3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CSGCylinder3D.construct_without_init()
    cls._ptr = CPPCSGCylinder3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CSGCylinder3D.construct_without_init()
    cls._ptr = CPPCSGCylinder3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def radius(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_radius()
    return _ret
  @radius.setter
  def radius(self,  value:'float'):
    self.set_radius(value)
  @property
  def height(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'float'):
    self.set_height(value)
  @property
  def sides(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_sides()
    return _ret
  @sides.setter
  def sides(self,  value:'int'):
    self.set_sides(value)
  @property
  def cone(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_cone()
    return _ret
  @cone.setter
  def cone(self,  value:'bool'):
    self.set_cone(value)
  @property
  def smooth_faces(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_smooth_faces()
    return _ret
  @smooth_faces.setter
  def smooth_faces(self,  value:'bool'):
    self.set_smooth_faces(value)
  @property
  def material(self) -> typing.Union['py4godot_basematerial3d.BaseMaterial3D','py4godot_ormmaterial3d.ORMMaterial3D','py4godot_standardmaterial3d.StandardMaterial3D']:
    r''''''
    _ret = self. get_material()
    return _ret
  @material.setter
  def material(self,  value:'py4godot_object.Object'):
    self.set_material(value)
  @functools.native_method
  def set_radius(self, radius:'float'   ) -> None:
    r''''''

    assert isinstance(radius, (int, float)), 'radius must be int or float'

    self.py__radius = radius






    self._ptr.call_with_return(322,tuple([radius]))

  @functools.native_method
  def get_radius(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(323,tuple([]))

    return _ret


  @functools.native_method
  def set_height(self, height:'float'   ) -> None:
    r''''''

    assert isinstance(height, (int, float)), 'height must be int or float'

    self.py__height = height






    self._ptr.call_with_return(324,tuple([height]))

  @functools.native_method
  def get_height(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(325,tuple([]))

    return _ret


  @functools.native_method
  def set_sides(self, sides:'int'   ) -> None:
    r''''''

    assert isinstance(sides, (int, float)), 'sides must be int or float'

    self.py__sides = sides






    self._ptr.call_with_return(326,tuple([sides]))

  @functools.native_method
  def get_sides(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(327,tuple([]))

    return _ret


  @functools.native_method
  def set_cone(self, cone:'bool'   ) -> None:
    r''''''

    assert isinstance(cone, bool), 'cone must be bool'

    self.py__cone = cone






    self._ptr.call_with_return(328,tuple([cone]))

  @functools.native_method
  def is_cone(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(329,tuple([]))

    return _ret


  @functools.native_method
  def set_material(self, material:'py4godot_material.Material'   ) -> None:
    r''''''

    assert(not material is None)
    assert isinstance(material, get_class('Material')), 'material must be Material'

    self.py__material = material






    self._ptr.call_with_return(330,tuple([material._ptr]))

  @functools.native_method
  def get_material(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Material
    _ret._ptr = self._ptr.call_with_return(331,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_smooth_faces(self, smooth_faces:'bool'   ) -> None:
    r''''''

    assert isinstance(smooth_faces, bool), 'smooth_faces must be bool'

    self.py__smooth_faces = smooth_faces






    self._ptr.call_with_return(332,tuple([smooth_faces]))

  @functools.native_method
  def get_smooth_faces(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(333,tuple([]))

    return _ret



register_cast_function('CSGCylinder3D', CSGCylinder3D.cast)
register_class('CSGCylinder3D', CSGCylinder3D)
