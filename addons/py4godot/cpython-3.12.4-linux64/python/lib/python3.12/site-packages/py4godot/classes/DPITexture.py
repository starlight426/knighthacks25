# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPDPITextureWrapper


class DPITexture(py4godot_texture2d.Texture2D):
  r'''
		An automatically scalable `Texture2D` based on an SVG image. `DPITexture`s are used to automatically re-rasterize icons and other texture based UI theme elements to match viewport scale and font oversampling. See also `ProjectSettings.display/window/stretch/mode` ("canvas_items" mode) and `Viewport.oversampling_override`.
	'''

  @staticmethod
  def constructor():
    class_ = DPITexture.construct_without_init()
    class_._ptr = constructor(255,0, ())
    return class_
  @staticmethod
  def new():
    class_ = DPITexture.construct_without_init()
    class_._ptr = constructor(255,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPDPITextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(255,0, ())


  def generate_wrapper(self):
    return CPPDPITextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = DPITexture.__new__(DPITexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'DPITexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = DPITexture.construct_without_init()
    cls._ptr = CPPDPITextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = DPITexture.construct_without_init()
    cls._ptr = CPPDPITextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def base_scale(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_base_scale()
    return _ret
  @base_scale.setter
  def base_scale(self,  value:'float'):
    self.set_base_scale(value)
  @property
  def saturation(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_saturation()
    return _ret
  @saturation.setter
  def saturation(self,  value:'float'):
    self.set_saturation(value)
  @property
  def color_map(self) -> typing.Union['Dictionary']:
    r''''''
    _ret = self. get_color_map()
    return _ret
  @color_map.setter
  def color_map(self,  value:'Dictionary'):
    self.set_color_map(value)
  @staticmethod
  def create_from_string(source:'str'   , scale:'float' =1.0  , saturation:'float' =1.0  , color_map:'Dictionary' = None  ) -> typing.Union['typing.Self']:
    r'''
				Creates a new `DPITexture` and initializes it by allocating and setting the SVG data from string.
			'''
    if color_map is None:
      color_map = Dictionary.new0()
    if color_map is None:
      color_map = Dictionary.new0()

    assert(not source is None)
    assert isinstance(source, (str, String)), 'source must be str or String'
    assert isinstance(scale, (int, float)), 'scale must be int or float'
    assert isinstance(saturation, (int, float)), 'saturation must be int or float'




    assert(isinstance(source, (str, String)))
    py_string_source = source if isinstance(source, StringName) else c_utils.py_string_to_string(source)




    _ret = DPITexture.construct_without_init()
    _ret._ptr = static_method(255,1,tuple([py_string_source._ptr, scale, saturation, color_map._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_source(self, source:'str'   ) -> None:
    r'''
				Sets SVG source code.
			'''

    assert(not source is None)
    assert isinstance(source, (str, String)), 'source must be str or String'




    assert(isinstance(source, (str, String)))
    py_string_source = source if isinstance(source, StringName) else c_utils.py_string_to_string(source)

    self._ptr.call_with_return(93,tuple([py_string_source._ptr]))

  @functools.native_method
  def get_source(self) -> typing.Union[str]:
    r'''
				Returns SVG source code.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_base_scale(self, base_scale:'float'   ) -> None:
    r''''''

    assert isinstance(base_scale, (int, float)), 'base_scale must be int or float'

    self.py__base_scale = base_scale






    self._ptr.call_with_return(95,tuple([base_scale]))

  @functools.native_method
  def get_base_scale(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_saturation(self, saturation:'float'   ) -> None:
    r''''''

    assert isinstance(saturation, (int, float)), 'saturation must be int or float'

    self.py__saturation = saturation






    self._ptr.call_with_return(97,tuple([saturation]))

  @functools.native_method
  def get_saturation(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([]))

    return _ret


  @functools.native_method
  def set_color_map(self, color_map:'Dictionary'   ) -> None:
    r''''''

    assert(not color_map is None)
    assert isinstance(color_map, Dictionary), 'color_map must be Dictionary'

    self.py__color_map = color_map






    self._ptr.call_with_return(99,tuple([color_map._ptr]))

  @functools.native_method
  def get_color_map(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(100,tuple([]))

    return _ret


  @functools.native_method
  def set_size_override(self, size:'Vector2i'   ) -> None:
    r'''
				Resizes the texture to the specified dimensions.
			'''

    assert(not size is None)
    assert isinstance(size, Vector2i), 'size must be Vector2i'






    self._ptr.call_with_return(101,tuple([size._ptr]))

  @functools.native_method
  def get_scaled_rid(self) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the texture rasterized to match the oversampling of the currently drawn canvas item.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(102,tuple([]))
    return _ret



register_cast_function('DPITexture', DPITexture.cast)
register_class('DPITexture', DPITexture)
