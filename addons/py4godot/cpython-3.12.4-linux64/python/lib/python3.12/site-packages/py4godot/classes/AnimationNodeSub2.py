# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AnimationNodeSync as py4godot_animationnodesync 
from py4godot.wrappers.wrappers import CPPAnimationNodeSub2Wrapper


class AnimationNodeSub2(py4godot_animationnodesync.AnimationNodeSync):
  r'''
		A resource to add to an `AnimationNodeBlendTree`. Blends two animations subtractively based on the amount value.
		This animation node is usually used for pre-calculation to cancel out any extra poses from the animation for the "add" animation source in `AnimationNodeAdd2` or `AnimationNodeAdd3`.
		In general, the blend value should be in the ``0.0, 1.0`` range, but values outside of this range can be used for amplified or inverted animations.
		**Note:** This calculation is different from using a negative value in `AnimationNodeAdd2`, since the transformation matrices do not satisfy the commutative law. `AnimationNodeSub2` multiplies the transformation matrix of the inverted animation from the left side, while negative `AnimationNodeAdd2` multiplies it from the right side.
	'''

  @staticmethod
  def constructor():
    class_ = AnimationNodeSub2.construct_without_init()
    class_._ptr = constructor(90,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeSub2.construct_without_init()
    class_._ptr = constructor(90,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeSub2Wrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(90,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeSub2Wrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeSub2.__new__(AnimationNodeSub2)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeSub2'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeSub2.construct_without_init()
    cls._ptr = CPPAnimationNodeSub2Wrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeSub2.construct_without_init()
    cls._ptr = CPPAnimationNodeSub2Wrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('AnimationNodeSub2', AnimationNodeSub2.cast)
register_class('AnimationNodeSub2', AnimationNodeSub2)
