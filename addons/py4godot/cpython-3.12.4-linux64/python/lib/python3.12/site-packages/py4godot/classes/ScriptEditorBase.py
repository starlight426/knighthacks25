# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.EditorSyntaxHighlighter as py4godot_editorsyntaxhighlighter 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
from py4godot.wrappers.wrappers import CPPScriptEditorBaseWrapper


class ScriptEditorBase(py4godot_vboxcontainer.VBoxContainer):
  r'''
		Base editor for editing scripts in the `ScriptEditor`. This does not include documentation items.
	'''

  @staticmethod
  def constructor():
    class_ = ScriptEditorBase.construct_without_init()
    class_._ptr = constructor(725,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ScriptEditorBase.construct_without_init()
    class_._ptr = constructor(725,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPScriptEditorBaseWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(725,0, ())


  def generate_wrapper(self):
    return CPPScriptEditorBaseWrapper()
  def init_signals(self):
    super().init_signals()
    name_changed_name = utils.py_string_to_string_name("name_changed")
    self.name_changed = signals.BuiltinSignal(self, name_changed_name)
    edited_script_changed_name = utils.py_string_to_string_name("edited_script_changed")
    self.edited_script_changed = signals.BuiltinSignal(self, edited_script_changed_name)
    request_help_name = utils.py_string_to_string_name("request_help")
    self.request_help = signals.BuiltinSignal(self, request_help_name)
    request_open_script_at_line_name = utils.py_string_to_string_name("request_open_script_at_line")
    self.request_open_script_at_line = signals.BuiltinSignal(self, request_open_script_at_line_name)
    request_save_history_name = utils.py_string_to_string_name("request_save_history")
    self.request_save_history = signals.BuiltinSignal(self, request_save_history_name)
    request_save_previous_state_name = utils.py_string_to_string_name("request_save_previous_state")
    self.request_save_previous_state = signals.BuiltinSignal(self, request_save_previous_state_name)
    go_to_help_name = utils.py_string_to_string_name("go_to_help")
    self.go_to_help = signals.BuiltinSignal(self, go_to_help_name)
    search_in_files_requested_name = utils.py_string_to_string_name("search_in_files_requested")
    self.search_in_files_requested = signals.BuiltinSignal(self, search_in_files_requested_name)
    replace_in_files_requested_name = utils.py_string_to_string_name("replace_in_files_requested")
    self.replace_in_files_requested = signals.BuiltinSignal(self, replace_in_files_requested_name)
    go_to_method_name = utils.py_string_to_string_name("go_to_method")
    self.go_to_method = signals.BuiltinSignal(self, go_to_method_name)

  @staticmethod
  def construct_without_init():
    cls = ScriptEditorBase.__new__(ScriptEditorBase)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ScriptEditorBase'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ScriptEditorBase.construct_without_init()
    cls._ptr = CPPScriptEditorBaseWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ScriptEditorBase.construct_without_init()
    cls._ptr = CPPScriptEditorBaseWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_base_editor(self) -> typing.Any:
    r'''
				Returns the underlying `Control` used for editing scripts. For text scripts, this is a `CodeEdit`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Control
    _ret._ptr = self._ptr.call_with_return(442,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def add_syntax_highlighter(self, highlighter:'py4godot_editorsyntaxhighlighter.EditorSyntaxHighlighter'   ) -> None:
    r'''
				Adds an `EditorSyntaxHighlighter` to the open script.
			'''

    assert(not highlighter is None)
    assert isinstance(highlighter, get_class('EditorSyntaxHighlighter')), 'highlighter must be EditorSyntaxHighlighter'






    self._ptr.call_with_return(443,tuple([highlighter._ptr]))


register_cast_function('ScriptEditorBase', ScriptEditorBase.cast)
register_class('ScriptEditorBase', ScriptEditorBase)
