# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPOpenXRHandWrapper

class Hands:
  HAND_LEFT = 0
  HAND_RIGHT = 1
  HAND_MAX = 2
class MotionRange:
  MOTION_RANGE_UNOBSTRUCTED = 0
  MOTION_RANGE_CONFORM_TO_CONTROLLER = 1
  MOTION_RANGE_MAX = 2
class SkeletonRig:
  SKELETON_RIG_OPENXR = 0
  SKELETON_RIG_HUMANOID = 1
  SKELETON_RIG_MAX = 2
class BoneUpdate:
  BONE_UPDATE_FULL = 0
  BONE_UPDATE_ROTATION_ONLY = 1
  BONE_UPDATE_MAX = 2


class OpenXRHand(py4godot_node3d.Node3D):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRHand.construct_without_init()
    class_._ptr = constructor(548,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRHand.construct_without_init()
    class_._ptr = constructor(548,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRHandWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(548,0, ())


  def generate_wrapper(self):
    return CPPOpenXRHandWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRHand.__new__(OpenXRHand)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRHand'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRHand.construct_without_init()
    cls._ptr = CPPOpenXRHandWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRHand.construct_without_init()
    cls._ptr = CPPOpenXRHandWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def hand(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_hand()
    return _ret
  @hand.setter
  def hand(self,  value:'int'):
    self.set_hand(value)
  @property
  def motion_range(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_motion_range()
    return _ret
  @motion_range.setter
  def motion_range(self,  value:'int'):
    self.set_motion_range(value)
  @property
  def hand_skeleton(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_hand_skeleton()
    return _ret
  @hand_skeleton.setter
  def hand_skeleton(self,  value:'object'):
    self.set_hand_skeleton(value)
  @property
  def skeleton_rig(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_skeleton_rig()
    return _ret
  @skeleton_rig.setter
  def skeleton_rig(self,  value:'int'):
    self.set_skeleton_rig(value)
  @property
  def bone_update(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_bone_update()
    return _ret
  @bone_update.setter
  def bone_update(self,  value:'int'):
    self.set_bone_update(value)
  @functools.native_method
  def set_hand(self, hand:'int'  ) -> None:
    r''''''

    assert isinstance(hand, (int, float)), 'hand must be int or float'

    self.py__hand = hand






    self._ptr.call_with_return(251,tuple([hand]))

  @functools.native_method
  def get_hand(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(252,tuple([]))

    return _ret


  @functools.native_method
  def set_hand_skeleton(self, hand_skeleton:'object'   ) -> None:
    r''''''

    assert(not hand_skeleton is None)
    assert isinstance(hand_skeleton, (str, NodePath)), 'hand_skeleton must be str or NodePath'

    self.py__hand_skeleton = hand_skeleton



    assert(isinstance(hand_skeleton, (str, NodePath)))
    py_nodepath_hand_skeleton = hand_skeleton if isinstance(hand_skeleton,NodePath) else NodePath.new2(hand_skeleton)


    self._ptr.call_with_return(253,tuple([py_nodepath_hand_skeleton._ptr]))

  @functools.native_method
  def get_hand_skeleton(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(254,tuple([]))

    return _ret


  @functools.native_method
  def set_motion_range(self, motion_range:'int'  ) -> None:
    r''''''

    assert isinstance(motion_range, (int, float)), 'motion_range must be int or float'

    self.py__motion_range = motion_range






    self._ptr.call_with_return(255,tuple([motion_range]))

  @functools.native_method
  def get_motion_range(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(256,tuple([]))

    return _ret


  @functools.native_method
  def set_skeleton_rig(self, skeleton_rig:'int'  ) -> None:
    r''''''

    assert isinstance(skeleton_rig, (int, float)), 'skeleton_rig must be int or float'

    self.py__skeleton_rig = skeleton_rig






    self._ptr.call_with_return(257,tuple([skeleton_rig]))

  @functools.native_method
  def get_skeleton_rig(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(258,tuple([]))

    return _ret


  @functools.native_method
  def set_bone_update(self, bone_update:'int'  ) -> None:
    r''''''

    assert isinstance(bone_update, (int, float)), 'bone_update must be int or float'

    self.py__bone_update = bone_update






    self._ptr.call_with_return(259,tuple([bone_update]))

  @functools.native_method
  def get_bone_update(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(260,tuple([]))

    return _ret



register_cast_function('OpenXRHand', OpenXRHand.cast)
register_class('OpenXRHand', OpenXRHand)
