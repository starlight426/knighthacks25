# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.NavigationMeshSourceGeometryData3D as py4godot_navigationmeshsourcegeometrydata3d 
  import py4godot.classes.Node as py4godot_node 
  import py4godot.classes.NavigationMesh as py4godot_navigationmesh 
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPNavigationMeshGeneratorWrapper

_NavigationMeshGenerator_singleton_instance = None

class NavigationMeshGenerator(py4godot_object.Object):
  r'''
		This class is responsible for creating and clearing 3D navigation meshes used as `NavigationMesh` resources inside `NavigationRegion3D`. The `NavigationMeshGenerator` has very limited to no use for 2D as the navigation mesh baking process expects 3D node types and 3D source geometry to parse.
		The entire navigation mesh baking is best done in a separate thread as the voxelization, collision tests and mesh optimization steps involved are very slow and performance-intensive operations.
		Navigation mesh baking happens in multiple steps and the result depends on 3D source geometry and properties of the `NavigationMesh` resource. In the first step, starting from a root node and depending on `NavigationMesh` properties all valid 3D source geometry nodes are collected from the `SceneTree`. Second, all collected nodes are parsed for their relevant 3D geometry data and a combined 3D mesh is build. Due to the many different types of parsable objects, from normal `MeshInstance3D`s to `CSGShape3D`s or various `CollisionObject3D`s, some operations to collect geometry data can trigger `RenderingServer` and `PhysicsServer3D` synchronizations. Server synchronization can have a negative effect on baking time or framerate as it often involves `Mutex` locking for thread security. Many parsable objects and the continuous synchronization with other threaded Servers can increase the baking time significantly. On the other hand only a few but very large and complex objects will take some time to prepare for the Servers which can noticeably stall the next frame render. As a general rule the total number of parsable objects and their individual size and complexity should be balanced to avoid framerate issues or very long baking times. The combined mesh is then passed to the Recast Navigation Object to test the source geometry for walkable terrain suitable to `NavigationMesh` agent properties by creating a voxel world around the meshes bounding area.
		The finalized navigation mesh is then returned and stored inside the `NavigationMesh` for use as a resource inside `NavigationRegion3D` nodes.
		**Note:** Using meshes to not only define walkable surfaces but also obstruct navigation baking does not always work. The navigation baking has no concept of what is a geometry "inside" when dealing with mesh source geometry and this is intentional. Depending on current baking parameters, as soon as the obstructing mesh is large enough to fit a navigation mesh area inside, the baking will generate navigation mesh areas that are inside the obstructing source geometry mesh.
	'''


  def generate_wrapper(self):
    return CPPNavigationMeshGeneratorWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = NavigationMeshGenerator.__new__(NavigationMeshGenerator)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'NavigationMeshGenerator'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = NavigationMeshGenerator.construct_without_init()
    cls._ptr = CPPNavigationMeshGeneratorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = NavigationMeshGenerator.construct_without_init()
    cls._ptr = CPPNavigationMeshGeneratorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _NavigationMeshGenerator_singleton_instance
    if _NavigationMeshGenerator_singleton_instance is None:
      singleton = NavigationMeshGenerator()
      singleton._ptr = constructor(499,0, ())
      _NavigationMeshGenerator_singleton_instance = singleton
    return _NavigationMeshGenerator_singleton_instance

  @functools.native_method
  def bake(self, navigation_mesh:'py4godot_navigationmesh.NavigationMesh'   , root_node:'py4godot_node.Node'   ) -> None:
    r'''
				Bakes the `navigation_mesh` with source geometry collected starting from the `root_node`.
			'''

    assert(not navigation_mesh is None)
    assert isinstance(navigation_mesh, get_class('NavigationMesh')), 'navigation_mesh must be NavigationMesh'
    assert(not root_node is None)
    assert isinstance(root_node, get_class('Node')), 'root_node must be Node'







    self._ptr.call_with_return(49,tuple([navigation_mesh._ptr, root_node._ptr]))

  @functools.native_method
  def clear(self, navigation_mesh:'py4godot_navigationmesh.NavigationMesh'   ) -> None:
    r'''
				Removes all polygons and vertices from the provided `navigation_mesh` resource.
			'''

    assert(not navigation_mesh is None)
    assert isinstance(navigation_mesh, get_class('NavigationMesh')), 'navigation_mesh must be NavigationMesh'






    self._ptr.call_with_return(50,tuple([navigation_mesh._ptr]))

  @functools.native_method
  def parse_source_geometry_data(self, navigation_mesh:'py4godot_navigationmesh.NavigationMesh'   , source_geometry_data:'py4godot_navigationmeshsourcegeometrydata3d.NavigationMeshSourceGeometryData3D'   , root_node:'py4godot_node.Node'   , callback:'Callable' = None  ) -> None:
    r'''
				Parses the `SceneTree` for source geometry according to the properties of `navigation_mesh`. Updates the provided `source_geometry_data` resource with the resulting data. The resource can then be used to bake a navigation mesh with `bake_from_source_geometry_data`. After the process is finished the optional `callback` will be called.
				**Note:** This function needs to run on the main thread or with a deferred call as the SceneTree is not thread-safe.
				**Performance:** While convenient, reading data arrays from `Mesh` resources can affect the frame rate negatively. The data needs to be received from the GPU, stalling the `RenderingServer` in the process. For performance prefer the use of e.g. collision shapes or creating the data arrays entirely in code.
			'''
    if callback is None:
      callback = Callable.new0()
    if callback is None:
      callback = Callable.new0()

    assert(not navigation_mesh is None)
    assert isinstance(navigation_mesh, get_class('NavigationMesh')), 'navigation_mesh must be NavigationMesh'
    assert(not source_geometry_data is None)
    assert isinstance(source_geometry_data, get_class('NavigationMeshSourceGeometryData3D')), 'source_geometry_data must be NavigationMeshSourceGeometryData3D'
    assert(not root_node is None)
    assert isinstance(root_node, get_class('Node')), 'root_node must be Node'









    self._ptr.call_with_return(51,tuple([navigation_mesh._ptr, source_geometry_data._ptr, root_node._ptr, callback._ptr]))

  @functools.native_method
  def bake_from_source_geometry_data(self, navigation_mesh:'py4godot_navigationmesh.NavigationMesh'   , source_geometry_data:'py4godot_navigationmeshsourcegeometrydata3d.NavigationMeshSourceGeometryData3D'   , callback:'Callable' = None  ) -> None:
    r'''
				Bakes the provided `navigation_mesh` with the data from the provided `source_geometry_data`. After the process is finished the optional `callback` will be called.
			'''
    if callback is None:
      callback = Callable.new0()
    if callback is None:
      callback = Callable.new0()

    assert(not navigation_mesh is None)
    assert isinstance(navigation_mesh, get_class('NavigationMesh')), 'navigation_mesh must be NavigationMesh'
    assert(not source_geometry_data is None)
    assert isinstance(source_geometry_data, get_class('NavigationMeshSourceGeometryData3D')), 'source_geometry_data must be NavigationMeshSourceGeometryData3D'








    self._ptr.call_with_return(52,tuple([navigation_mesh._ptr, source_geometry_data._ptr, callback._ptr]))


register_cast_function('NavigationMeshGenerator', NavigationMeshGenerator.cast)
register_class('NavigationMeshGenerator', NavigationMeshGenerator)
