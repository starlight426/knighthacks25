# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDPipelineDepthStencilStateWrapper


class RDPipelineDepthStencilState(py4godot_refcounted.RefCounted):
  r'''
		`RDPipelineDepthStencilState` controls the way depth and stencil comparisons are performed when sampling those values using `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDPipelineDepthStencilState.construct_without_init()
    class_._ptr = constructor(649,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDPipelineDepthStencilState.construct_without_init()
    class_._ptr = constructor(649,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDPipelineDepthStencilStateWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(649,0, ())


  def generate_wrapper(self):
    return CPPRDPipelineDepthStencilStateWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDPipelineDepthStencilState.__new__(RDPipelineDepthStencilState)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDPipelineDepthStencilState'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineDepthStencilState.construct_without_init()
    cls._ptr = CPPRDPipelineDepthStencilStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDPipelineDepthStencilState.construct_without_init()
    cls._ptr = CPPRDPipelineDepthStencilStateWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def enable_depth_test(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_depth_test()
    return _ret
  @enable_depth_test.setter
  def enable_depth_test(self,  value:'bool'):
    self.set_enable_depth_test(value)
  @property
  def enable_depth_write(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_depth_write()
    return _ret
  @enable_depth_write.setter
  def enable_depth_write(self,  value:'bool'):
    self.set_enable_depth_write(value)
  @property
  def depth_compare_operator(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_depth_compare_operator()
    return _ret
  @depth_compare_operator.setter
  def depth_compare_operator(self,  value:'int'):
    self.set_depth_compare_operator(value)
  @property
  def enable_depth_range(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_depth_range()
    return _ret
  @enable_depth_range.setter
  def enable_depth_range(self,  value:'bool'):
    self.set_enable_depth_range(value)
  @property
  def depth_range_min(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth_range_min()
    return _ret
  @depth_range_min.setter
  def depth_range_min(self,  value:'float'):
    self.set_depth_range_min(value)
  @property
  def depth_range_max(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth_range_max()
    return _ret
  @depth_range_max.setter
  def depth_range_max(self,  value:'float'):
    self.set_depth_range_max(value)
  @property
  def enable_stencil(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_enable_stencil()
    return _ret
  @enable_stencil.setter
  def enable_stencil(self,  value:'bool'):
    self.set_enable_stencil(value)
  @property
  def front_op_fail(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_front_op_fail()
    return _ret
  @front_op_fail.setter
  def front_op_fail(self,  value:'int'):
    self.set_front_op_fail(value)
  @property
  def front_op_pass(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_front_op_pass()
    return _ret
  @front_op_pass.setter
  def front_op_pass(self,  value:'int'):
    self.set_front_op_pass(value)
  @property
  def front_op_depth_fail(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_front_op_depth_fail()
    return _ret
  @front_op_depth_fail.setter
  def front_op_depth_fail(self,  value:'int'):
    self.set_front_op_depth_fail(value)
  @property
  def front_op_compare(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_front_op_compare()
    return _ret
  @front_op_compare.setter
  def front_op_compare(self,  value:'int'):
    self.set_front_op_compare(value)
  @property
  def front_op_compare_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_front_op_compare_mask()
    return _ret
  @front_op_compare_mask.setter
  def front_op_compare_mask(self,  value:'int'):
    self.set_front_op_compare_mask(value)
  @property
  def front_op_write_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_front_op_write_mask()
    return _ret
  @front_op_write_mask.setter
  def front_op_write_mask(self,  value:'int'):
    self.set_front_op_write_mask(value)
  @property
  def front_op_reference(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_front_op_reference()
    return _ret
  @front_op_reference.setter
  def front_op_reference(self,  value:'int'):
    self.set_front_op_reference(value)
  @property
  def back_op_fail(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_back_op_fail()
    return _ret
  @back_op_fail.setter
  def back_op_fail(self,  value:'int'):
    self.set_back_op_fail(value)
  @property
  def back_op_pass(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_back_op_pass()
    return _ret
  @back_op_pass.setter
  def back_op_pass(self,  value:'int'):
    self.set_back_op_pass(value)
  @property
  def back_op_depth_fail(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_back_op_depth_fail()
    return _ret
  @back_op_depth_fail.setter
  def back_op_depth_fail(self,  value:'int'):
    self.set_back_op_depth_fail(value)
  @property
  def back_op_compare(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_back_op_compare()
    return _ret
  @back_op_compare.setter
  def back_op_compare(self,  value:'int'):
    self.set_back_op_compare(value)
  @property
  def back_op_compare_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_back_op_compare_mask()
    return _ret
  @back_op_compare_mask.setter
  def back_op_compare_mask(self,  value:'int'):
    self.set_back_op_compare_mask(value)
  @property
  def back_op_write_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_back_op_write_mask()
    return _ret
  @back_op_write_mask.setter
  def back_op_write_mask(self,  value:'int'):
    self.set_back_op_write_mask(value)
  @property
  def back_op_reference(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_back_op_reference()
    return _ret
  @back_op_reference.setter
  def back_op_reference(self,  value:'int'):
    self.set_back_op_reference(value)
  @functools.native_method
  def set_enable_depth_test(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_depth_test = p_member






    self._ptr.call_with_return(53,tuple([p_member]))

  @functools.native_method
  def get_enable_depth_test(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_depth_write(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_depth_write = p_member






    self._ptr.call_with_return(55,tuple([p_member]))

  @functools.native_method
  def get_enable_depth_write(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_compare_operator(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__depth_compare_operator = p_member






    self._ptr.call_with_return(57,tuple([p_member]))

  @functools.native_method
  def get_depth_compare_operator(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_depth_range(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_depth_range = p_member






    self._ptr.call_with_return(59,tuple([p_member]))

  @functools.native_method
  def get_enable_depth_range(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_range_min(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__depth_range_min = p_member






    self._ptr.call_with_return(61,tuple([p_member]))

  @functools.native_method
  def get_depth_range_min(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def set_depth_range_max(self, p_member:'float'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__depth_range_max = p_member






    self._ptr.call_with_return(63,tuple([p_member]))

  @functools.native_method
  def get_depth_range_max(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([]))

    return _ret


  @functools.native_method
  def set_enable_stencil(self, p_member:'bool'   ) -> None:
    r''''''

    assert isinstance(p_member, bool), 'p_member must be bool'

    self.py__enable_stencil = p_member






    self._ptr.call_with_return(65,tuple([p_member]))

  @functools.native_method
  def get_enable_stencil(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([]))

    return _ret


  @functools.native_method
  def set_front_op_fail(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__front_op_fail = p_member






    self._ptr.call_with_return(67,tuple([p_member]))

  @functools.native_method
  def get_front_op_fail(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(68,tuple([]))

    return _ret


  @functools.native_method
  def set_front_op_pass(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__front_op_pass = p_member






    self._ptr.call_with_return(69,tuple([p_member]))

  @functools.native_method
  def get_front_op_pass(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(70,tuple([]))

    return _ret


  @functools.native_method
  def set_front_op_depth_fail(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__front_op_depth_fail = p_member






    self._ptr.call_with_return(71,tuple([p_member]))

  @functools.native_method
  def get_front_op_depth_fail(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(72,tuple([]))

    return _ret


  @functools.native_method
  def set_front_op_compare(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__front_op_compare = p_member






    self._ptr.call_with_return(73,tuple([p_member]))

  @functools.native_method
  def get_front_op_compare(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(74,tuple([]))

    return _ret


  @functools.native_method
  def set_front_op_compare_mask(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__front_op_compare_mask = p_member






    self._ptr.call_with_return(75,tuple([p_member]))

  @functools.native_method
  def get_front_op_compare_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(76,tuple([]))

    return _ret


  @functools.native_method
  def set_front_op_write_mask(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__front_op_write_mask = p_member






    self._ptr.call_with_return(77,tuple([p_member]))

  @functools.native_method
  def get_front_op_write_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_front_op_reference(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__front_op_reference = p_member






    self._ptr.call_with_return(79,tuple([p_member]))

  @functools.native_method
  def get_front_op_reference(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_back_op_fail(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__back_op_fail = p_member






    self._ptr.call_with_return(81,tuple([p_member]))

  @functools.native_method
  def get_back_op_fail(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_back_op_pass(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__back_op_pass = p_member






    self._ptr.call_with_return(83,tuple([p_member]))

  @functools.native_method
  def get_back_op_pass(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_back_op_depth_fail(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__back_op_depth_fail = p_member






    self._ptr.call_with_return(85,tuple([p_member]))

  @functools.native_method
  def get_back_op_depth_fail(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_back_op_compare(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__back_op_compare = p_member






    self._ptr.call_with_return(87,tuple([p_member]))

  @functools.native_method
  def get_back_op_compare(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_back_op_compare_mask(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__back_op_compare_mask = p_member






    self._ptr.call_with_return(89,tuple([p_member]))

  @functools.native_method
  def get_back_op_compare_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_back_op_write_mask(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__back_op_write_mask = p_member






    self._ptr.call_with_return(91,tuple([p_member]))

  @functools.native_method
  def get_back_op_write_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))

    return _ret


  @functools.native_method
  def set_back_op_reference(self, p_member:'int'   ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__back_op_reference = p_member






    self._ptr.call_with_return(93,tuple([p_member]))

  @functools.native_method
  def get_back_op_reference(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret



register_cast_function('RDPipelineDepthStencilState', RDPipelineDepthStencilState.cast)
register_class('RDPipelineDepthStencilState', RDPipelineDepthStencilState)
