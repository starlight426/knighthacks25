# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRHapticVibration as py4godot_openxrhapticvibration 
  import py4godot.classes.OpenXRActionSet as py4godot_openxractionset 
  import py4godot.classes.OpenXRHapticBase as py4godot_openxrhapticbase 
import py4godot.classes.OpenXRIPBindingModifier as py4godot_openxripbindingmodifier 
from py4godot.wrappers.wrappers import CPPOpenXRDpadBindingModifierWrapper


class OpenXRDpadBindingModifier(py4godot_openxripbindingmodifier.OpenXRIPBindingModifier):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRDpadBindingModifier.construct_without_init()
    class_._ptr = constructor(543,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRDpadBindingModifier.construct_without_init()
    class_._ptr = constructor(543,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRDpadBindingModifierWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(543,0, ())


  def generate_wrapper(self):
    return CPPOpenXRDpadBindingModifierWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRDpadBindingModifier.__new__(OpenXRDpadBindingModifier)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRDpadBindingModifier'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRDpadBindingModifier.construct_without_init()
    cls._ptr = CPPOpenXRDpadBindingModifierWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRDpadBindingModifier.construct_without_init()
    cls._ptr = CPPOpenXRDpadBindingModifierWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def action_set(self) -> typing.Union['py4godot_openxractionset.OpenXRActionSet']:
    r''''''
    _ret = self. get_action_set()
    return _ret
  @action_set.setter
  def action_set(self,  value:'py4godot_object.Object'):
    self.set_action_set(value)
  @property
  def input_path(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_input_path()
    return _ret
  @input_path.setter
  def input_path(self,  value:'str'):
    self.set_input_path(value)
  @property
  def threshold(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_threshold()
    return _ret
  @threshold.setter
  def threshold(self,  value:'float'):
    self.set_threshold(value)
  @property
  def threshold_released(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_threshold_released()
    return _ret
  @threshold_released.setter
  def threshold_released(self,  value:'float'):
    self.set_threshold_released(value)
  @property
  def center_region(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_center_region()
    return _ret
  @center_region.setter
  def center_region(self,  value:'float'):
    self.set_center_region(value)
  @property
  def wedge_angle(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_wedge_angle()
    return _ret
  @wedge_angle.setter
  def wedge_angle(self,  value:'float'):
    self.set_wedge_angle(value)
  @property
  def is_sticky(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_is_sticky()
    return _ret
  @is_sticky.setter
  def is_sticky(self,  value:'bool'):
    self.set_is_sticky(value)
  @property
  def on_haptic(self) -> typing.Union['py4godot_openxrhapticbase.OpenXRHapticBase','py4godot_openxrhapticvibration.OpenXRHapticVibration']:
    r''''''
    _ret = self. get_on_haptic()
    return _ret
  @on_haptic.setter
  def on_haptic(self,  value:'py4godot_object.Object'):
    self.set_on_haptic(value)
  @property
  def off_haptic(self) -> typing.Union['py4godot_openxrhapticbase.OpenXRHapticBase','py4godot_openxrhapticvibration.OpenXRHapticVibration']:
    r''''''
    _ret = self. get_off_haptic()
    return _ret
  @off_haptic.setter
  def off_haptic(self,  value:'py4godot_object.Object'):
    self.set_off_haptic(value)
  @functools.native_method
  def set_action_set(self, action_set:'py4godot_openxractionset.OpenXRActionSet'   ) -> None:
    r''''''

    assert(not action_set is None)
    assert isinstance(action_set, get_class('OpenXRActionSet')), 'action_set must be OpenXRActionSet'

    self.py__action_set = action_set






    self._ptr.call_with_return(79,tuple([action_set._ptr]))

  @functools.native_method
  def get_action_set(self) -> typing.Union['py4godot_openxractionset.OpenXRActionSet']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRActionSet
    _ret._ptr = self._ptr.call_with_return(80,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_input_path(self, input_path:'str'   ) -> None:
    r''''''

    assert(not input_path is None)
    assert isinstance(input_path, (str, String)), 'input_path must be str or String'

    self.py__input_path = input_path



    assert(isinstance(input_path, (str, String)))
    py_string_input_path = input_path if isinstance(input_path, StringName) else c_utils.py_string_to_string(input_path)

    py__string_input_path = utils.py_string_to_string(input_path)
    py__string_input_path.shouldBeDeleted = False


    self._ptr.call_with_return(81,tuple([py__string_input_path._ptr]))

  @functools.native_method
  def get_input_path(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_threshold(self, threshold:'float'   ) -> None:
    r''''''

    assert isinstance(threshold, (int, float)), 'threshold must be int or float'

    self.py__threshold = threshold






    self._ptr.call_with_return(83,tuple([threshold]))

  @functools.native_method
  def get_threshold(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_threshold_released(self, threshold_released:'float'   ) -> None:
    r''''''

    assert isinstance(threshold_released, (int, float)), 'threshold_released must be int or float'

    self.py__threshold_released = threshold_released






    self._ptr.call_with_return(85,tuple([threshold_released]))

  @functools.native_method
  def get_threshold_released(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_center_region(self, center_region:'float'   ) -> None:
    r''''''

    assert isinstance(center_region, (int, float)), 'center_region must be int or float'

    self.py__center_region = center_region






    self._ptr.call_with_return(87,tuple([center_region]))

  @functools.native_method
  def get_center_region(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_wedge_angle(self, wedge_angle:'float'   ) -> None:
    r''''''

    assert isinstance(wedge_angle, (int, float)), 'wedge_angle must be int or float'

    self.py__wedge_angle = wedge_angle






    self._ptr.call_with_return(89,tuple([wedge_angle]))

  @functools.native_method
  def get_wedge_angle(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_is_sticky(self, is_sticky:'bool'   ) -> None:
    r''''''

    assert isinstance(is_sticky, bool), 'is_sticky must be bool'

    self.py__is_sticky = is_sticky






    self._ptr.call_with_return(91,tuple([is_sticky]))

  @functools.native_method
  def get_is_sticky(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))

    return _ret


  @functools.native_method
  def set_on_haptic(self, haptic:'py4godot_openxrhapticbase.OpenXRHapticBase'   ) -> None:
    r''''''

    assert(not haptic is None)
    assert isinstance(haptic, get_class('OpenXRHapticBase')), 'haptic must be OpenXRHapticBase'

    self.py__on_haptic = haptic






    self._ptr.call_with_return(93,tuple([haptic._ptr]))

  @functools.native_method
  def get_on_haptic(self) -> typing.Union['py4godot_openxrhapticbase.OpenXRHapticBase','py4godot_openxrhapticvibration.OpenXRHapticVibration']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRHapticBase
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_off_haptic(self, haptic:'py4godot_openxrhapticbase.OpenXRHapticBase'   ) -> None:
    r''''''

    assert(not haptic is None)
    assert isinstance(haptic, get_class('OpenXRHapticBase')), 'haptic must be OpenXRHapticBase'

    self.py__off_haptic = haptic






    self._ptr.call_with_return(95,tuple([haptic._ptr]))

  @functools.native_method
  def get_off_haptic(self) -> typing.Union['py4godot_openxrhapticbase.OpenXRHapticBase','py4godot_openxrhapticvibration.OpenXRHapticVibration']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OpenXRHapticBase
    _ret._ptr = self._ptr.call_with_return(96,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('OpenXRDpadBindingModifier', OpenXRDpadBindingModifier.cast)
register_class('OpenXRDpadBindingModifier', OpenXRDpadBindingModifier)
