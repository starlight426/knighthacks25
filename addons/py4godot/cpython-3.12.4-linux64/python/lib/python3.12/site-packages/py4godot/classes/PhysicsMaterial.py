# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPPhysicsMaterialWrapper


class PhysicsMaterial(py4godot_resource.Resource):
  r'''
		Holds physics-related properties of a surface, namely its roughness and bounciness. This class is used to apply these properties to a physics body.
	'''

  @staticmethod
  def constructor():
    class_ = PhysicsMaterial.construct_without_init()
    class_._ptr = constructor(599,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PhysicsMaterial.construct_without_init()
    class_._ptr = constructor(599,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPhysicsMaterialWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(599,0, ())


  def generate_wrapper(self):
    return CPPPhysicsMaterialWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsMaterial.__new__(PhysicsMaterial)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsMaterial'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsMaterial.construct_without_init()
    cls._ptr = CPPPhysicsMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsMaterial.construct_without_init()
    cls._ptr = CPPPhysicsMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def friction(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_friction()
    return _ret
  @friction.setter
  def friction(self,  value:'float'):
    self.set_friction(value)
  @property
  def rough(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_rough()
    return _ret
  @rough.setter
  def rough(self,  value:'bool'):
    self.set_rough(value)
  @property
  def bounce(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_bounce()
    return _ret
  @bounce.setter
  def bounce(self,  value:'float'):
    self.set_bounce(value)
  @property
  def absorbent(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_absorbent()
    return _ret
  @absorbent.setter
  def absorbent(self,  value:'bool'):
    self.set_absorbent(value)
  @functools.native_method
  def set_friction(self, friction:'float'   ) -> None:
    r''''''

    assert isinstance(friction, (int, float)), 'friction must be int or float'

    self.py__friction = friction






    self._ptr.call_with_return(77,tuple([friction]))

  @functools.native_method
  def get_friction(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_rough(self, rough:'bool'   ) -> None:
    r''''''

    assert isinstance(rough, bool), 'rough must be bool'

    self.py__rough = rough






    self._ptr.call_with_return(79,tuple([rough]))

  @functools.native_method
  def is_rough(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_bounce(self, bounce:'float'   ) -> None:
    r''''''

    assert isinstance(bounce, (int, float)), 'bounce must be int or float'

    self.py__bounce = bounce






    self._ptr.call_with_return(81,tuple([bounce]))

  @functools.native_method
  def get_bounce(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_absorbent(self, absorbent:'bool'   ) -> None:
    r''''''

    assert isinstance(absorbent, bool), 'absorbent must be bool'

    self.py__absorbent = absorbent






    self._ptr.call_with_return(83,tuple([absorbent]))

  @functools.native_method
  def is_absorbent(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret



register_cast_function('PhysicsMaterial', PhysicsMaterial.cast)
register_class('PhysicsMaterial', PhysicsMaterial)
