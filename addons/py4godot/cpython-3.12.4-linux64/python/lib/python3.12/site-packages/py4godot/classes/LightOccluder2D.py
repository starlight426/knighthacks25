# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OccluderPolygon2D as py4godot_occluderpolygon2d 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPLightOccluder2DWrapper


class LightOccluder2D(py4godot_node2d.Node2D):
  r'''
		Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an `OccluderPolygon2D` in order for the shadow to be computed.
	'''

  @staticmethod
  def constructor():
    class_ = LightOccluder2D.construct_without_init()
    class_._ptr = constructor(451,0, ())
    return class_
  @staticmethod
  def new():
    class_ = LightOccluder2D.construct_without_init()
    class_._ptr = constructor(451,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPLightOccluder2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(451,0, ())


  def generate_wrapper(self):
    return CPPLightOccluder2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = LightOccluder2D.__new__(LightOccluder2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'LightOccluder2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = LightOccluder2D.construct_without_init()
    cls._ptr = CPPLightOccluder2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = LightOccluder2D.construct_without_init()
    cls._ptr = CPPLightOccluder2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def occluder(self) -> typing.Union['py4godot_occluderpolygon2d.OccluderPolygon2D']:
    r''''''
    _ret = self. get_occluder_polygon()
    return _ret
  @occluder.setter
  def occluder(self,  value:'py4godot_object.Object'):
    self.set_occluder_polygon(value)
  @property
  def sdf_collision(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_set_as_sdf_collision()
    return _ret
  @sdf_collision.setter
  def sdf_collision(self,  value:'bool'):
    self.set_as_sdf_collision(value)
  @property
  def occluder_light_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_occluder_light_mask()
    return _ret
  @occluder_light_mask.setter
  def occluder_light_mask(self,  value:'int'):
    self.set_occluder_light_mask(value)
  @functools.native_method
  def set_occluder_polygon(self, polygon:'py4godot_occluderpolygon2d.OccluderPolygon2D'   ) -> None:
    r''''''

    assert(not polygon is None)
    assert isinstance(polygon, get_class('OccluderPolygon2D')), 'polygon must be OccluderPolygon2D'

    self.py__occluder = polygon






    self._ptr.call_with_return(303,tuple([polygon._ptr]))

  @functools.native_method
  def get_occluder_polygon(self) -> typing.Union['py4godot_occluderpolygon2d.OccluderPolygon2D']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: OccluderPolygon2D
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_occluder_light_mask(self, mask:'int'   ) -> None:
    r''''''

    assert isinstance(mask, (int, float)), 'mask must be int or float'

    self.py__occluder_light_mask = mask






    self._ptr.call_with_return(305,tuple([mask]))

  @functools.native_method
  def get_occluder_light_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_as_sdf_collision(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__sdf_collision = enable






    self._ptr.call_with_return(307,tuple([enable]))

  @functools.native_method
  def is_set_as_sdf_collision(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(308,tuple([]))

    return _ret



register_cast_function('LightOccluder2D', LightOccluder2D.cast)
register_class('LightOccluder2D', LightOccluder2D)
