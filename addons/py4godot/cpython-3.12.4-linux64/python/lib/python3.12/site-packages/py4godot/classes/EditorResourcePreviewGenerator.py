# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.Resource as py4godot_resource 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPEditorResourcePreviewGeneratorWrapper


class EditorResourcePreviewGenerator(py4godot_refcounted.RefCounted):
  r'''
		Custom code to generate previews. Check `EditorSettings.filesystem/file_dialog/thumbnail_size` to find a proper size to generate previews at.
	'''

  @staticmethod
  def constructor():
    class_ = EditorResourcePreviewGenerator.construct_without_init()
    class_._ptr = constructor(300,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorResourcePreviewGenerator.construct_without_init()
    class_._ptr = constructor(300,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorResourcePreviewGeneratorWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(300,0, ())


  def generate_wrapper(self):
    return CPPEditorResourcePreviewGeneratorWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EditorResourcePreviewGenerator.__new__(EditorResourcePreviewGenerator)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorResourcePreviewGenerator'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorResourcePreviewGenerator.construct_without_init()
    cls._ptr = CPPEditorResourcePreviewGeneratorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorResourcePreviewGenerator.construct_without_init()
    cls._ptr = CPPEditorResourcePreviewGeneratorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _handles(self, type:'str'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if your generator supports the resource of type `type`.
			'''

    assert(not type is None)
    assert isinstance(type, (str, String)), 'type must be str or String'




    assert(isinstance(type, (str, String)))
    py_string_type = type if isinstance(type, StringName) else c_utils.py_string_to_string(type)

    _ret = 0
    _ret = self._ptr.call_with_return(53,tuple([py_string_type._ptr]))
    return _ret


  @functools.native_method
  def _generate(self, resource:'py4godot_resource.Resource'   , size:'Vector2i'   , metadata:'Dictionary'   ) -> typing.Any:
    r'''
				Generate a preview from a given resource with the specified size. This must always be implemented.
				Returning `null` is an OK way to fail and let another generator take care.
				Care must be taken because this function is always called from a thread (not the main thread).
				`metadata` dictionary can be modified to store file-specific metadata that can be used in `EditorResourceTooltipPlugin._make_tooltip_for_path` (like image size, sample length etc.).
			'''

    assert(not resource is None)
    assert isinstance(resource, get_class('Resource')), 'resource must be Resource'
    assert(not size is None)
    assert isinstance(size, Vector2i), 'size must be Vector2i'
    assert(not metadata is None)
    assert isinstance(metadata, Dictionary), 'metadata must be Dictionary'








    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(54,tuple([resource._ptr, size._ptr, metadata._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _generate_from_path(self, path:'str'   , size:'Vector2i'   , metadata:'Dictionary'   ) -> typing.Any:
    r'''
				Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call `_generate`.
				Returning `null` is an OK way to fail and let another generator take care.
				Care must be taken because this function is always called from a thread (not the main thread).
				`metadata` dictionary can be modified to store file-specific metadata that can be used in `EditorResourceTooltipPlugin._make_tooltip_for_path` (like image size, sample length etc.).
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not size is None)
    assert isinstance(size, Vector2i), 'size must be Vector2i'
    assert(not metadata is None)
    assert isinstance(metadata, Dictionary), 'metadata must be Dictionary'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)



    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(55,tuple([py_string_path._ptr, size._ptr, metadata._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _generate_small_preview_automatically(self) -> typing.Union[bool]:
    r'''
				If this function returns `true`, the generator will automatically generate the small previews from the normal preview texture generated by the methods `_generate` or `_generate_from_path`.
				By default, it returns `false`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))
    return _ret


  @functools.native_method
  def _can_generate_small_preview(self) -> typing.Union[bool]:
    r'''
				If this function returns `true`, the generator will call `_generate` or `_generate_from_path` for small previews as well.
				By default, it returns `false`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))
    return _ret



register_cast_function('EditorResourcePreviewGenerator', EditorResourcePreviewGenerator.cast)
register_class('EditorResourcePreviewGenerator', EditorResourcePreviewGenerator)
