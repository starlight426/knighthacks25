# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPPhysicsServer3DRenderingServerHandlerWrapper


class PhysicsServer3DRenderingServerHandler(py4godot_object.Object):
  r'''
'''

  @staticmethod
  def constructor():
    class_ = PhysicsServer3DRenderingServerHandler.construct_without_init()
    class_._ptr = constructor(610,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PhysicsServer3DRenderingServerHandler.construct_without_init()
    class_._ptr = constructor(610,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPhysicsServer3DRenderingServerHandlerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(610,0, ())


  def generate_wrapper(self):
    return CPPPhysicsServer3DRenderingServerHandlerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsServer3DRenderingServerHandler.__new__(PhysicsServer3DRenderingServerHandler)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsServer3DRenderingServerHandler'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsServer3DRenderingServerHandler.construct_without_init()
    cls._ptr = CPPPhysicsServer3DRenderingServerHandlerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsServer3DRenderingServerHandler.construct_without_init()
    cls._ptr = CPPPhysicsServer3DRenderingServerHandlerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _set_vertex(self, vertex_id:'int'   , vertex:'Vector3'   ) -> None:
    r'''
				Called by the `PhysicsServer3D` to set the position for the `SoftBody3D` vertex at the index specified by `vertex_id`.
				**Note:** The `vertex` parameter used to be of type `const void*` prior to Godot 4.2.
			'''

    assert isinstance(vertex_id, (int, float)), 'vertex_id must be int or float'
    assert(not vertex is None)
    assert isinstance(vertex, Vector3), 'vertex must be Vector3'







    self._ptr.call_with_return(49,tuple([vertex_id, vertex._ptr]))

  @functools.native_method
  def _set_normal(self, vertex_id:'int'   , normal:'Vector3'   ) -> None:
    r'''
				Called by the `PhysicsServer3D` to set the normal for the `SoftBody3D` vertex at the index specified by `vertex_id`.
				**Note:** The `normal` parameter used to be of type `const void*` prior to Godot 4.2.
			'''

    assert isinstance(vertex_id, (int, float)), 'vertex_id must be int or float'
    assert(not normal is None)
    assert isinstance(normal, Vector3), 'normal must be Vector3'







    self._ptr.call_with_return(50,tuple([vertex_id, normal._ptr]))

  @functools.native_method
  def _set_aabb(self, aabb:'AABB'   ) -> None:
    r'''
				Called by the `PhysicsServer3D` to set the bounding box for the `SoftBody3D`.
			'''

    assert(not aabb is None)
    assert isinstance(aabb, AABB), 'aabb must be AABB'






    self._ptr.call_with_return(51,tuple([aabb._ptr]))

  @functools.native_method
  def set_vertex(self, vertex_id:'int'   , vertex:'Vector3'   ) -> None:
    r'''
				Sets the position for the `SoftBody3D` vertex at the index specified by `vertex_id`.
			'''

    assert isinstance(vertex_id, (int, float)), 'vertex_id must be int or float'
    assert(not vertex is None)
    assert isinstance(vertex, Vector3), 'vertex must be Vector3'







    self._ptr.call_with_return(52,tuple([vertex_id, vertex._ptr]))

  @functools.native_method
  def set_normal(self, vertex_id:'int'   , normal:'Vector3'   ) -> None:
    r'''
				Sets the normal for the `SoftBody3D` vertex at the index specified by `vertex_id`.
			'''

    assert isinstance(vertex_id, (int, float)), 'vertex_id must be int or float'
    assert(not normal is None)
    assert isinstance(normal, Vector3), 'normal must be Vector3'







    self._ptr.call_with_return(53,tuple([vertex_id, normal._ptr]))

  @functools.native_method
  def set_aabb(self, aabb:'AABB'   ) -> None:
    r'''
				Sets the bounding box for the `SoftBody3D`.
			'''

    assert(not aabb is None)
    assert isinstance(aabb, AABB), 'aabb must be AABB'






    self._ptr.call_with_return(54,tuple([aabb._ptr]))


register_cast_function('PhysicsServer3DRenderingServerHandler', PhysicsServer3DRenderingServerHandler.cast)
register_class('PhysicsServer3DRenderingServerHandler', PhysicsServer3DRenderingServerHandler)
