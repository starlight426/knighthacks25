# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Curve as py4godot_curve 
import py4godot.classes.AnimationNodeSync as py4godot_animationnodesync 
from py4godot.wrappers.wrappers import CPPAnimationNodeOneShotWrapper

class OneShotRequest:
  ONE_SHOT_REQUEST_NONE = 0
  ONE_SHOT_REQUEST_FIRE = 1
  ONE_SHOT_REQUEST_ABORT = 2
  ONE_SHOT_REQUEST_FADE_OUT = 3
class MixMode:
  MIX_MODE_BLEND = 0
  MIX_MODE_ADD = 1


class AnimationNodeOneShot(py4godot_animationnodesync.AnimationNodeSync):
  r'''
		A resource to add to an `AnimationNodeBlendTree`. This animation node will execute a sub-animation and return once it finishes. Blend times for fading in and out can be customized, as well as filters.
		After setting the request and changing the animation playback, the one-shot node automatically clears the request on the next process frame by setting its `request` value to `constant ONE_SHOT_REQUEST_NONE`.
		
		```gdscript
		# Play child animation connected to "shot" port.
		animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE)
		# Alternative syntax (same result as above).
		animation_tree`"parameters/OneShot/request"` = AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE

		# Abort child animation connected to "shot" port.
		animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT)
		# Alternative syntax (same result as above).
		animation_tree`"parameters/OneShot/request"` = AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT

		# Abort child animation with fading out connected to "shot" port.
		animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT)
		# Alternative syntax (same result as above).
		animation_tree`"parameters/OneShot/request"` = AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT

		# Get current state (read-only).
		animation_tree.get("parameters/OneShot/active")
		# Alternative syntax (same result as above).
		animation_tree`"parameters/OneShot/active"`

		# Get current internal state (read-only).
		animation_tree.get("parameters/OneShot/internal_active")
		# Alternative syntax (same result as above).
		animation_tree`"parameters/OneShot/internal_active"`
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = AnimationNodeOneShot.construct_without_init()
    class_._ptr = constructor(85,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeOneShot.construct_without_init()
    class_._ptr = constructor(85,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeOneShotWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(85,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeOneShotWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeOneShot.__new__(AnimationNodeOneShot)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeOneShot'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeOneShot.construct_without_init()
    cls._ptr = CPPAnimationNodeOneShotWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeOneShot.construct_without_init()
    cls._ptr = CPPAnimationNodeOneShotWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def mix_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mix_mode()
    return _ret
  @mix_mode.setter
  def mix_mode(self,  value:'int'):
    self.set_mix_mode(value)
  @property
  def fadein_time(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_fadein_time()
    return _ret
  @fadein_time.setter
  def fadein_time(self,  value:'float'):
    self.set_fadein_time(value)
  @property
  def fadein_curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''
    _ret = self. get_fadein_curve()
    return _ret
  @fadein_curve.setter
  def fadein_curve(self,  value:'py4godot_object.Object'):
    self.set_fadein_curve(value)
  @property
  def fadeout_time(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_fadeout_time()
    return _ret
  @fadeout_time.setter
  def fadeout_time(self,  value:'float'):
    self.set_fadeout_time(value)
  @property
  def fadeout_curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''
    _ret = self. get_fadeout_curve()
    return _ret
  @fadeout_curve.setter
  def fadeout_curve(self,  value:'py4godot_object.Object'):
    self.set_fadeout_curve(value)
  @property
  def break_loop_at_end(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_loop_broken_at_end()
    return _ret
  @break_loop_at_end.setter
  def break_loop_at_end(self,  value:'bool'):
    self.set_break_loop_at_end(value)
  @property
  def autorestart(self) -> typing.Union[bool]:
    r''''''
    _ret = self. has_autorestart()
    return _ret
  @autorestart.setter
  def autorestart(self,  value:'bool'):
    self.set_autorestart(value)
  @property
  def autorestart_delay(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_autorestart_delay()
    return _ret
  @autorestart_delay.setter
  def autorestart_delay(self,  value:'float'):
    self.set_autorestart_delay(value)
  @property
  def autorestart_random_delay(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_autorestart_random_delay()
    return _ret
  @autorestart_random_delay.setter
  def autorestart_random_delay(self,  value:'float'):
    self.set_autorestart_random_delay(value)
  @functools.native_method
  def set_fadein_time(self, time:'float'   ) -> None:
    r''''''

    assert isinstance(time, (int, float)), 'time must be int or float'

    self.py__fadein_time = time






    self._ptr.call_with_return(104,tuple([time]))

  @functools.native_method
  def get_fadein_time(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(105,tuple([]))

    return _ret


  @functools.native_method
  def set_fadein_curve(self, curve:'py4godot_curve.Curve'   ) -> None:
    r''''''

    assert(not curve is None)
    assert isinstance(curve, get_class('Curve')), 'curve must be Curve'

    self.py__fadein_curve = curve






    self._ptr.call_with_return(106,tuple([curve._ptr]))

  @functools.native_method
  def get_fadein_curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Curve
    _ret._ptr = self._ptr.call_with_return(107,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_fadeout_time(self, time:'float'   ) -> None:
    r''''''

    assert isinstance(time, (int, float)), 'time must be int or float'

    self.py__fadeout_time = time






    self._ptr.call_with_return(108,tuple([time]))

  @functools.native_method
  def get_fadeout_time(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(109,tuple([]))

    return _ret


  @functools.native_method
  def set_fadeout_curve(self, curve:'py4godot_curve.Curve'   ) -> None:
    r''''''

    assert(not curve is None)
    assert isinstance(curve, get_class('Curve')), 'curve must be Curve'

    self.py__fadeout_curve = curve






    self._ptr.call_with_return(110,tuple([curve._ptr]))

  @functools.native_method
  def get_fadeout_curve(self) -> typing.Union['py4godot_curve.Curve']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Curve
    _ret._ptr = self._ptr.call_with_return(111,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_break_loop_at_end(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__break_loop_at_end = enable






    self._ptr.call_with_return(112,tuple([enable]))

  @functools.native_method
  def is_loop_broken_at_end(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(113,tuple([]))

    return _ret


  @functools.native_method
  def set_autorestart(self, active:'bool'   ) -> None:
    r''''''

    assert isinstance(active, bool), 'active must be bool'

    self.py__autorestart = active






    self._ptr.call_with_return(114,tuple([active]))

  @functools.native_method
  def has_autorestart(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(115,tuple([]))

    return _ret


  @functools.native_method
  def set_autorestart_delay(self, time:'float'   ) -> None:
    r''''''

    assert isinstance(time, (int, float)), 'time must be int or float'

    self.py__autorestart_delay = time






    self._ptr.call_with_return(116,tuple([time]))

  @functools.native_method
  def get_autorestart_delay(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(117,tuple([]))

    return _ret


  @functools.native_method
  def set_autorestart_random_delay(self, time:'float'   ) -> None:
    r''''''

    assert isinstance(time, (int, float)), 'time must be int or float'

    self.py__autorestart_random_delay = time






    self._ptr.call_with_return(118,tuple([time]))

  @functools.native_method
  def get_autorestart_random_delay(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(119,tuple([]))

    return _ret


  @functools.native_method
  def set_mix_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__mix_mode = mode






    self._ptr.call_with_return(120,tuple([mode]))

  @functools.native_method
  def get_mix_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(121,tuple([]))

    return _ret



register_cast_function('AnimationNodeOneShot', AnimationNodeOneShot.cast)
register_class('AnimationNodeOneShot', AnimationNodeOneShot)
