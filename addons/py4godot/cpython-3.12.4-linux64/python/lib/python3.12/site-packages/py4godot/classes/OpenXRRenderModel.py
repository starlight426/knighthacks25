# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPOpenXRRenderModelWrapper


class OpenXRRenderModel(py4godot_node3d.Node3D):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRRenderModel.construct_without_init()
    class_._ptr = constructor(558,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRRenderModel.construct_without_init()
    class_._ptr = constructor(558,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRRenderModelWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(558,0, ())


  def generate_wrapper(self):
    return CPPOpenXRRenderModelWrapper()
  def init_signals(self):
    super().init_signals()
    render_model_top_level_path_changed_name = utils.py_string_to_string_name("render_model_top_level_path_changed")
    self.render_model_top_level_path_changed = signals.BuiltinSignal(self, render_model_top_level_path_changed_name)

  @staticmethod
  def construct_without_init():
    cls = OpenXRRenderModel.__new__(OpenXRRenderModel)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRRenderModel'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRRenderModel.construct_without_init()
    cls._ptr = CPPOpenXRRenderModelWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRRenderModel.construct_without_init()
    cls._ptr = CPPOpenXRRenderModelWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def render_model(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_render_model()
    return _ret
  @render_model.setter
  def render_model(self,  value:'RID'):
    self.set_render_model(value)
  @functools.native_method
  def get_top_level_path(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(251,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_render_model(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(252,tuple([]))

    return _ret


  @functools.native_method
  def set_render_model(self, render_model:'RID'   ) -> None:
    r''''''

    assert(not render_model is None)
    assert isinstance(render_model, RID), 'render_model must be RID'

    self.py__render_model = render_model






    self._ptr.call_with_return(253,tuple([render_model._ptr]))


register_cast_function('OpenXRRenderModel', OpenXRRenderModel.cast)
register_class('OpenXRRenderModel', OpenXRRenderModel)
