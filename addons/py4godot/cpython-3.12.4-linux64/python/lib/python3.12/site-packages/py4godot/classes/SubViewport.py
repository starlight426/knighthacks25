# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Viewport as py4godot_viewport 
from py4godot.wrappers.wrappers import CPPSubViewportWrapper

class ClearMode:
  CLEAR_MODE_ALWAYS = 0
  CLEAR_MODE_NEVER = 1
  CLEAR_MODE_ONCE = 2
class UpdateMode:
  UPDATE_DISABLED = 0
  UPDATE_ONCE = 1
  UPDATE_WHEN_VISIBLE = 2
  UPDATE_WHEN_PARENT_VISIBLE = 3
  UPDATE_ALWAYS = 4


class SubViewport(py4godot_viewport.Viewport):
  r'''
		`SubViewport` Isolates a rectangular region of a scene to be displayed independently. This can be used, for example, to display UI in 3D space.
		**Note:** `SubViewport` is a `Viewport` that isn't a `Window`, i.e. it doesn't draw anything by itself. To display anything, `SubViewport` must have a non-zero size and be either put inside a `SubViewportContainer` or assigned to a `ViewportTexture`.
		**Note:** `InputEvent`s are not passed to a standalone `SubViewport` by default. To ensure `InputEvent` propagation, a `SubViewport` can be placed inside of a `SubViewportContainer`.
	'''

  @staticmethod
  def constructor():
    class_ = SubViewport.construct_without_init()
    class_._ptr = constructor(798,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SubViewport.construct_without_init()
    class_._ptr = constructor(798,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSubViewportWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(798,0, ())


  def generate_wrapper(self):
    return CPPSubViewportWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SubViewport.__new__(SubViewport)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SubViewport'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SubViewport.construct_without_init()
    cls._ptr = CPPSubViewportWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SubViewport.construct_without_init()
    cls._ptr = CPPSubViewportWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def size(self) -> typing.Union['Vector2i']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector2i'):
    self.set_size(value)
  @property
  def size_2d_override(self) -> typing.Union['Vector2i']:
    r''''''
    _ret = self. get_size_2d_override()
    return _ret
  @size_2d_override.setter
  def size_2d_override(self,  value:'Vector2i'):
    self.set_size_2d_override(value)
  @property
  def size_2d_override_stretch(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_size_2d_override_stretch_enabled()
    return _ret
  @size_2d_override_stretch.setter
  def size_2d_override_stretch(self,  value:'bool'):
    self.set_size_2d_override_stretch(value)
  @property
  def render_target_clear_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_clear_mode()
    return _ret
  @render_target_clear_mode.setter
  def render_target_clear_mode(self,  value:'int'):
    self.set_clear_mode(value)
  @property
  def render_target_update_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_update_mode()
    return _ret
  @render_target_update_mode.setter
  def render_target_update_mode(self,  value:'int'):
    self.set_update_mode(value)
  @functools.native_method
  def set_size(self, size:'Vector2i'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector2i), 'size must be Vector2i'

    self.py__size = size






    self._ptr.call_with_return(308,tuple([size._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector2i']:
    r''''''




    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(309,tuple([]))

    return _ret


  @functools.native_method
  def set_size_2d_override(self, size:'Vector2i'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector2i), 'size must be Vector2i'

    self.py__size_2d_override = size






    self._ptr.call_with_return(310,tuple([size._ptr]))

  @functools.native_method
  def get_size_2d_override(self) -> typing.Union['Vector2i']:
    r''''''




    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(311,tuple([]))

    return _ret


  @functools.native_method
  def set_size_2d_override_stretch(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__size_2d_override_stretch = enable






    self._ptr.call_with_return(312,tuple([enable]))

  @functools.native_method
  def is_size_2d_override_stretch_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(313,tuple([]))

    return _ret


  @functools.native_method
  def set_update_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__render_target_update_mode = mode






    self._ptr.call_with_return(314,tuple([mode]))

  @functools.native_method
  def get_update_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(315,tuple([]))

    return _ret


  @functools.native_method
  def set_clear_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__render_target_clear_mode = mode






    self._ptr.call_with_return(316,tuple([mode]))

  @functools.native_method
  def get_clear_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(317,tuple([]))

    return _ret



register_cast_function('SubViewport', SubViewport.cast)
register_class('SubViewport', SubViewport)
