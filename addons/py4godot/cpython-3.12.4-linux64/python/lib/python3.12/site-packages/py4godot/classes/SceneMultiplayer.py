# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.MultiplayerPeer as py4godot_multiplayerpeer 
import py4godot.classes.MultiplayerAPI as py4godot_multiplayerapi 
from py4godot.wrappers.wrappers import CPPSceneMultiplayerWrapper


class SceneMultiplayer(py4godot_multiplayerapi.MultiplayerAPI):
  r''''''

  @staticmethod
  def constructor():
    class_ = SceneMultiplayer.construct_without_init()
    class_._ptr = constructor(716,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SceneMultiplayer.construct_without_init()
    class_._ptr = constructor(716,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSceneMultiplayerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(716,0, ())


  def generate_wrapper(self):
    return CPPSceneMultiplayerWrapper()
  def init_signals(self):
    super().init_signals()
    peer_authenticating_name = utils.py_string_to_string_name("peer_authenticating")
    self.peer_authenticating = signals.BuiltinSignal(self, peer_authenticating_name)
    peer_authentication_failed_name = utils.py_string_to_string_name("peer_authentication_failed")
    self.peer_authentication_failed = signals.BuiltinSignal(self, peer_authentication_failed_name)
    peer_packet_name = utils.py_string_to_string_name("peer_packet")
    self.peer_packet = signals.BuiltinSignal(self, peer_packet_name)

  @staticmethod
  def construct_without_init():
    cls = SceneMultiplayer.__new__(SceneMultiplayer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SceneMultiplayer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SceneMultiplayer.construct_without_init()
    cls._ptr = CPPSceneMultiplayerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SceneMultiplayer.construct_without_init()
    cls._ptr = CPPSceneMultiplayerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def root_path(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_root_path()
    return _ret
  @root_path.setter
  def root_path(self,  value:'object'):
    self.set_root_path(value)
  @property
  def auth_callback(self) -> typing.Union['Callable']:
    r''''''
    _ret = self. get_auth_callback()
    return _ret
  @auth_callback.setter
  def auth_callback(self,  value:'Callable'):
    self.set_auth_callback(value)
  @property
  def auth_timeout(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_auth_timeout()
    return _ret
  @auth_timeout.setter
  def auth_timeout(self,  value:'float'):
    self.set_auth_timeout(value)
  @property
  def allow_object_decoding(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_object_decoding_allowed()
    return _ret
  @allow_object_decoding.setter
  def allow_object_decoding(self,  value:'bool'):
    self.set_allow_object_decoding(value)
  @property
  def refuse_new_connections(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_refusing_new_connections()
    return _ret
  @refuse_new_connections.setter
  def refuse_new_connections(self,  value:'bool'):
    self.set_refuse_new_connections(value)
  @property
  def server_relay(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_server_relay_enabled()
    return _ret
  @server_relay.setter
  def server_relay(self,  value:'bool'):
    self.set_server_relay_enabled(value)
  @property
  def max_sync_packet_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_max_sync_packet_size()
    return _ret
  @max_sync_packet_size.setter
  def max_sync_packet_size(self,  value:'int'):
    self.set_max_sync_packet_size(value)
  @property
  def max_delta_packet_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_max_delta_packet_size()
    return _ret
  @max_delta_packet_size.setter
  def max_delta_packet_size(self,  value:'int'):
    self.set_max_delta_packet_size(value)
  @functools.native_method
  def set_root_path(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__root_path = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(64,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_root_path(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(65,tuple([]))

    return _ret


  @functools.native_method
  def clear(self) -> None:
    r''''''




    self._ptr.call_with_return(66,tuple([]))

  @functools.native_method
  def disconnect_peer(self, id:'int'   ) -> None:
    r''''''

    assert isinstance(id, (int, float)), 'id must be int or float'






    self._ptr.call_with_return(67,tuple([id]))

  @functools.native_method
  def get_authenticating_peers(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(68,tuple([]))
    return _ret


  @functools.native_method
  def send_auth(self, id:'int'   , data:'PackedByteArray'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(id, (int, float)), 'id must be int or float'
    assert(not data is None)
    assert isinstance(data, PackedByteArray), 'data must be PackedByteArray'







    _ret:int
    _ret = self._ptr.call_with_return(69,tuple([id, data._ptr]))
    return _ret


  @functools.native_method
  def complete_auth(self, id:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(70,tuple([id]))
    return _ret


  @functools.native_method
  def set_auth_callback(self, callback:'Callable'   ) -> None:
    r''''''

    assert(not callback is None)
    assert isinstance(callback, Callable), 'callback must be Callable'

    self.py__auth_callback = callback






    self._ptr.call_with_return(71,tuple([callback._ptr]))

  @functools.native_method
  def get_auth_callback(self) -> typing.Union['Callable']:
    r''''''




    _ret = Callable.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(72,tuple([]))

    return _ret


  @functools.native_method
  def set_auth_timeout(self, timeout:'float'   ) -> None:
    r''''''

    assert isinstance(timeout, (int, float)), 'timeout must be int or float'

    self.py__auth_timeout = timeout






    self._ptr.call_with_return(73,tuple([timeout]))

  @functools.native_method
  def get_auth_timeout(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(74,tuple([]))

    return _ret


  @functools.native_method
  def set_refuse_new_connections(self, refuse:'bool'   ) -> None:
    r''''''

    assert isinstance(refuse, bool), 'refuse must be bool'

    self.py__refuse_new_connections = refuse






    self._ptr.call_with_return(75,tuple([refuse]))

  @functools.native_method
  def is_refusing_new_connections(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(76,tuple([]))

    return _ret


  @functools.native_method
  def set_allow_object_decoding(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__allow_object_decoding = enable






    self._ptr.call_with_return(77,tuple([enable]))

  @functools.native_method
  def is_object_decoding_allowed(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_server_relay_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__server_relay = enabled






    self._ptr.call_with_return(79,tuple([enabled]))

  @functools.native_method
  def is_server_relay_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def send_bytes(self, bytes:'PackedByteArray'   , id:'int' =0  , mode:'int'  =2, channel:'int' =0  ) -> typing.Union[int]:
    r''''''



    assert(not bytes is None)
    assert isinstance(bytes, PackedByteArray), 'bytes must be PackedByteArray'
    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(mode, (int, float)), 'mode must be int or float'
    assert isinstance(channel, (int, float)), 'channel must be int or float'









    _ret:int
    _ret = self._ptr.call_with_return(81,tuple([bytes._ptr, id, mode, channel]))
    return _ret


  @functools.native_method
  def get_max_sync_packet_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_max_sync_packet_size(self, size:'int'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__max_sync_packet_size = size






    self._ptr.call_with_return(83,tuple([size]))

  @functools.native_method
  def get_max_delta_packet_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_max_delta_packet_size(self, size:'int'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__max_delta_packet_size = size






    self._ptr.call_with_return(85,tuple([size]))


register_cast_function('SceneMultiplayer', SceneMultiplayer.cast)
register_class('SceneMultiplayer', SceneMultiplayer)
