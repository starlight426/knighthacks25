# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.PacketPeer as py4godot_packetpeer 
from py4godot.wrappers.wrappers import CPPPacketPeerUDPWrapper


class PacketPeerUDP(py4godot_packetpeer.PacketPeer):
  r'''
		UDP packet peer. Can be used to send and receive raw UDP packets as well as `Variant`s.
		**Example:** Send a packet:
		```gdscript
		var peer = PacketPeerUDP.new()

		# Optionally, you can select the local port used to send the packet.
		peer.bind(4444)

		peer.set_dest_address("1.1.1.1", 4433)
		peer.put_packet("hello".to_utf8_buffer())
		```
		**Example:** Listen for packets:
		```gdscript
		var peer

		func _ready():
			peer = PacketPeerUDP.new()
			peer.bind(4433)


		func _process(_delta):
			if peer.get_available_packet_count() > 0:
				var array_bytes = peer.get_packet()
				var packet_string = array_bytes.get_string_from_ascii()
				print("Received message: ", packet_string)
		```
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	'''

  @staticmethod
  def constructor():
    class_ = PacketPeerUDP.construct_without_init()
    class_._ptr = constructor(572,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PacketPeerUDP.construct_without_init()
    class_._ptr = constructor(572,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPacketPeerUDPWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(572,0, ())


  def generate_wrapper(self):
    return CPPPacketPeerUDPWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PacketPeerUDP.__new__(PacketPeerUDP)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PacketPeerUDP'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PacketPeerUDP.construct_without_init()
    cls._ptr = CPPPacketPeerUDPWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PacketPeerUDP.construct_without_init()
    cls._ptr = CPPPacketPeerUDPWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def bind(self, port:'int'   , bind_address:'str' ="*"  , recv_buf_size:'int' =65536  ) -> typing.Union[int]:
    r'''
				Binds this `PacketPeerUDP` to the specified `port` and `bind_address` with a buffer size `recv_buf_size`, allowing it to receive incoming packets.
				If `bind_address` is set to `"*"` (default), the peer will be bound on all available addresses (both IPv4 and IPv6).
				If `bind_address` is set to `"0.0.0.0"` (for IPv4) or `"::"` (for IPv6), the peer will be bound to all available addresses matching that IP type.
				If `bind_address` is set to any valid address (e.g. `"192.168.1.101"`, `"::1"`, etc.), the peer will only be bound to the interface with that address (or fail if no interface with the given address exists).
			'''
    if bind_address is None:
      bind_address = String.new0()
    if bind_address is None:
      bind_address = String.new0()

    assert isinstance(port, (int, float)), 'port must be int or float'
    assert isinstance(recv_buf_size, (int, float)), 'recv_buf_size must be int or float'





    assert(isinstance(bind_address, (str, String)))
    py_string_bind_address = bind_address if isinstance(bind_address, StringName) else c_utils.py_string_to_string(bind_address)


    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([port, py_string_bind_address._ptr, recv_buf_size]))
    return _ret


  @functools.native_method
  def close(self) -> None:
    r'''
				Closes the `PacketPeerUDP`'s underlying UDP socket.
			'''




    self._ptr.call_with_return(62,tuple([]))

  @functools.native_method
  def wait(self) -> typing.Union[int]:
    r'''
				Waits for a packet to arrive on the bound address. See `bind`.
				**Note:** `wait` can't be interrupted once it has been called. This can be worked around by allowing the other party to send a specific "death pill" packet like this:
				
				```gdscript
				socket = PacketPeerUDP.new()
				# Server
				socket.set_dest_address("127.0.0.1", 789)
				socket.put_packet("Time to stop".to_ascii_buffer())

				# Client
				while socket.wait() == OK:
					var data = socket.get_packet().get_string_from_ascii()
					if data == "Time to stop":
						return
				```
				
				
			'''




    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([]))
    return _ret


  @functools.native_method
  def is_bound(self) -> typing.Union[bool]:
    r'''
				Returns whether this `PacketPeerUDP` is bound to an address and can receive packets.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([]))
    return _ret


  @functools.native_method
  def connect_to_host(self, host:'str'   , port:'int'   ) -> typing.Union[int]:
    r'''
				Calling this method connects this UDP peer to the given `host`/`port` pair. UDP is in reality connectionless, so this option only means that incoming packets from different addresses are automatically discarded, and that outgoing packets are always sent to the connected address (future calls to `set_dest_address` are not allowed). This method does not send any data to the remote peer, to do that, use `PacketPeer.put_var` or `PacketPeer.put_packet` as usual. See also `UDPServer`.
				**Note:** Connecting to the remote peer does not help to protect from malicious attacks like IP spoofing, etc. Think about using an encryption technique like TLS or DTLS if you feel like your application is transferring sensitive information.
			'''

    assert(not host is None)
    assert isinstance(host, (str, String)), 'host must be str or String'
    assert isinstance(port, (int, float)), 'port must be int or float'




    assert(isinstance(host, (str, String)))
    py_string_host = host if isinstance(host, StringName) else c_utils.py_string_to_string(host)


    _ret:int
    _ret = self._ptr.call_with_return(65,tuple([py_string_host._ptr, port]))
    return _ret


  @functools.native_method
  def is_socket_connected(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the UDP socket is open and has been connected to a remote address. See `connect_to_host`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(66,tuple([]))
    return _ret


  @functools.native_method
  def get_packet_ip(self) -> typing.Union[str]:
    r'''
				Returns the IP of the remote peer that sent the last packet(that was received with `PacketPeer.get_packet` or `PacketPeer.get_var`).
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(67,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_packet_port(self) -> typing.Union[int]:
    r'''
				Returns the port of the remote peer that sent the last packet(that was received with `PacketPeer.get_packet` or `PacketPeer.get_var`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(68,tuple([]))
    return _ret


  @functools.native_method
  def get_local_port(self) -> typing.Union[int]:
    r'''
				Returns the local port to which this peer is bound.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(69,tuple([]))
    return _ret


  @functools.native_method
  def set_dest_address(self, host:'str'   , port:'int'   ) -> typing.Union[int]:
    r'''
				Sets the destination address and port for sending packets and variables. A hostname will be resolved using DNS if needed.
				**Note:** `set_broadcast_enabled` must be enabled before sending packets to a broadcast address (e.g. `255.255.255.255`).
			'''

    assert(not host is None)
    assert isinstance(host, (str, String)), 'host must be str or String'
    assert isinstance(port, (int, float)), 'port must be int or float'




    assert(isinstance(host, (str, String)))
    py_string_host = host if isinstance(host, StringName) else c_utils.py_string_to_string(host)


    _ret:int
    _ret = self._ptr.call_with_return(70,tuple([py_string_host._ptr, port]))
    return _ret


  @functools.native_method
  def set_broadcast_enabled(self, enabled:'bool'   ) -> None:
    r'''
				Enable or disable sending of broadcast packets (e.g. `set_dest_address("255.255.255.255", 4343)`. This option is disabled by default.
				**Note:** Some Android devices might require the `CHANGE_WIFI_MULTICAST_STATE` permission and this option to be enabled to receive broadcast packets too.
			'''

    assert isinstance(enabled, bool), 'enabled must be bool'






    self._ptr.call_with_return(71,tuple([enabled]))

  @functools.native_method
  def join_multicast_group(self, multicast_address:'str'   , interface_name:'str'   ) -> typing.Union[int]:
    r'''
				Joins the multicast group specified by `multicast_address` using the interface identified by `interface_name`.
				You can join the same multicast group with multiple interfaces. Use `IP.get_local_interfaces` to know which are available.
				**Note:** Some Android devices might require the `CHANGE_WIFI_MULTICAST_STATE` permission for multicast to work.
			'''

    assert(not multicast_address is None)
    assert isinstance(multicast_address, (str, String)), 'multicast_address must be str or String'
    assert(not interface_name is None)
    assert isinstance(interface_name, (str, String)), 'interface_name must be str or String'




    assert(isinstance(multicast_address, (str, String)))
    py_string_multicast_address = multicast_address if isinstance(multicast_address, StringName) else c_utils.py_string_to_string(multicast_address)
    assert(isinstance(interface_name, (str, String)))
    py_string_interface_name = interface_name if isinstance(interface_name, StringName) else c_utils.py_string_to_string(interface_name)

    _ret:int
    _ret = self._ptr.call_with_return(72,tuple([py_string_multicast_address._ptr, py_string_interface_name._ptr]))
    return _ret


  @functools.native_method
  def leave_multicast_group(self, multicast_address:'str'   , interface_name:'str'   ) -> typing.Union[int]:
    r'''
				Removes the interface identified by `interface_name` from the multicast group specified by `multicast_address`.
			'''

    assert(not multicast_address is None)
    assert isinstance(multicast_address, (str, String)), 'multicast_address must be str or String'
    assert(not interface_name is None)
    assert isinstance(interface_name, (str, String)), 'interface_name must be str or String'




    assert(isinstance(multicast_address, (str, String)))
    py_string_multicast_address = multicast_address if isinstance(multicast_address, StringName) else c_utils.py_string_to_string(multicast_address)
    assert(isinstance(interface_name, (str, String)))
    py_string_interface_name = interface_name if isinstance(interface_name, StringName) else c_utils.py_string_to_string(interface_name)

    _ret:int
    _ret = self._ptr.call_with_return(73,tuple([py_string_multicast_address._ptr, py_string_interface_name._ptr]))
    return _ret



register_cast_function('PacketPeerUDP', PacketPeerUDP.cast)
register_class('PacketPeerUDP', PacketPeerUDP)
