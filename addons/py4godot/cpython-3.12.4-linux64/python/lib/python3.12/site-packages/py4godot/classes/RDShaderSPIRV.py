# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPRDShaderSPIRVWrapper


class RDShaderSPIRV(py4godot_resource.Resource):
  r'''
		`RDShaderSPIRV` represents an `RDShaderFile`'s `url=https://www.khronos.org/spir/`SPIR-V`/url` code for various shader stages, as well as possible compilation error messages. SPIR-V is a low-level intermediate shader representation. This intermediate representation is not used directly by GPUs for rendering, but it can be compiled into binary shaders that GPUs can understand. Unlike compiled shaders, SPIR-V is portable across GPU models and driver versions.
		This object is used by `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDShaderSPIRV.construct_without_init()
    class_._ptr = constructor(655,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDShaderSPIRV.construct_without_init()
    class_._ptr = constructor(655,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDShaderSPIRVWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(655,0, ())


  def generate_wrapper(self):
    return CPPRDShaderSPIRVWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDShaderSPIRV.__new__(RDShaderSPIRV)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDShaderSPIRV'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDShaderSPIRV.construct_without_init()
    cls._ptr = CPPRDShaderSPIRVWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDShaderSPIRV.construct_without_init()
    cls._ptr = CPPRDShaderSPIRVWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def bytecode_vertex(self) -> typing.Union['PackedByteArray']:
    r''''''
    _ret = self. get_stage_bytecode(0)
    return _ret
  @bytecode_vertex.setter
  def bytecode_vertex(self,  value:'PackedByteArray'):
    self.set_stage_bytecode(value)
  @property
  def bytecode_fragment(self) -> typing.Union['PackedByteArray']:
    r''''''
    _ret = self. get_stage_bytecode(1)
    return _ret
  @bytecode_fragment.setter
  def bytecode_fragment(self,  value:'PackedByteArray'):
    self.set_stage_bytecode(value)
  @property
  def bytecode_tesselation_control(self) -> typing.Union['PackedByteArray']:
    r''''''
    _ret = self. get_stage_bytecode(2)
    return _ret
  @bytecode_tesselation_control.setter
  def bytecode_tesselation_control(self,  value:'PackedByteArray'):
    self.set_stage_bytecode(value)
  @property
  def bytecode_tesselation_evaluation(self) -> typing.Union['PackedByteArray']:
    r''''''
    _ret = self. get_stage_bytecode(3)
    return _ret
  @bytecode_tesselation_evaluation.setter
  def bytecode_tesselation_evaluation(self,  value:'PackedByteArray'):
    self.set_stage_bytecode(value)
  @property
  def bytecode_compute(self) -> typing.Union['PackedByteArray']:
    r''''''
    _ret = self. get_stage_bytecode(4)
    return _ret
  @bytecode_compute.setter
  def bytecode_compute(self,  value:'PackedByteArray'):
    self.set_stage_bytecode(value)
  @property
  def compile_error_vertex(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_compile_error(0)
    return _ret
  @compile_error_vertex.setter
  def compile_error_vertex(self,  value:'str'):
    self.set_stage_compile_error(value)
  @property
  def compile_error_fragment(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_compile_error(1)
    return _ret
  @compile_error_fragment.setter
  def compile_error_fragment(self,  value:'str'):
    self.set_stage_compile_error(value)
  @property
  def compile_error_tesselation_control(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_compile_error(2)
    return _ret
  @compile_error_tesselation_control.setter
  def compile_error_tesselation_control(self,  value:'str'):
    self.set_stage_compile_error(value)
  @property
  def compile_error_tesselation_evaluation(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_compile_error(3)
    return _ret
  @compile_error_tesselation_evaluation.setter
  def compile_error_tesselation_evaluation(self,  value:'str'):
    self.set_stage_compile_error(value)
  @property
  def compile_error_compute(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_stage_compile_error(4)
    return _ret
  @compile_error_compute.setter
  def compile_error_compute(self,  value:'str'):
    self.set_stage_compile_error(value)
  @functools.native_method
  def set_stage_bytecode(self, stage:'int'  , bytecode:'PackedByteArray'   ) -> None:
    r'''
				Sets the SPIR-V `bytecode` for the given shader `stage`. Equivalent to setting one of `bytecode_compute`, `bytecode_fragment`, `bytecode_tesselation_control`, `bytecode_tesselation_evaluation`, `bytecode_vertex`.
			'''

    assert isinstance(stage, (int, float)), 'stage must be int or float'
    assert(not bytecode is None)
    assert isinstance(bytecode, PackedByteArray), 'bytecode must be PackedByteArray'

    self.py__bytecode_vertex = stage







    self._ptr.call_with_return(77,tuple([stage, bytecode._ptr]))

  @functools.native_method
  def get_stage_bytecode(self, stage:'int'  ) -> typing.Union['PackedByteArray']:
    r'''
				Equivalent to getting one of `bytecode_compute`, `bytecode_fragment`, `bytecode_tesselation_control`, `bytecode_tesselation_evaluation`, `bytecode_vertex`.
			'''

    assert isinstance(stage, (int, float)), 'stage must be int or float'






    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([stage]))

    return _ret


  @functools.native_method
  def set_stage_compile_error(self, stage:'int'  , compile_error:'str'   ) -> None:
    r'''
				Sets the compilation error message for the given shader `stage` to `compile_error`. Equivalent to setting one of `compile_error_compute`, `compile_error_fragment`, `compile_error_tesselation_control`, `compile_error_tesselation_evaluation`, `compile_error_vertex`.
			'''

    assert isinstance(stage, (int, float)), 'stage must be int or float'
    assert(not compile_error is None)
    assert isinstance(compile_error, (str, String)), 'compile_error must be str or String'

    self.py__compile_error_vertex = stage




    assert(isinstance(compile_error, (str, String)))
    py_string_compile_error = compile_error if isinstance(compile_error, StringName) else c_utils.py_string_to_string(compile_error)

    py__string_compile_error = utils.py_string_to_string(compile_error)
    py__string_compile_error.shouldBeDeleted = False


    self._ptr.call_with_return(79,tuple([stage, py__string_compile_error._ptr]))

  @functools.native_method
  def get_stage_compile_error(self, stage:'int'  ) -> typing.Union[str]:
    r'''
				Returns the compilation error message for the given shader `stage`. Equivalent to getting one of `compile_error_compute`, `compile_error_fragment`, `compile_error_tesselation_control`, `compile_error_tesselation_evaluation`, `compile_error_vertex`.
			'''

    assert isinstance(stage, (int, float)), 'stage must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([stage]))

    return utils.gd_string_to_py_string(_ret)



register_cast_function('RDShaderSPIRV', RDShaderSPIRV.cast)
register_class('RDShaderSPIRV', RDShaderSPIRV)
