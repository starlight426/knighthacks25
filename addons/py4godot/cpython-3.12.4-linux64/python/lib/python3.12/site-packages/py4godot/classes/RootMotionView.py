# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
from py4godot.wrappers.wrappers import CPPRootMotionViewWrapper


class RootMotionView(py4godot_visualinstance3d.VisualInstance3D):
  r'''
		_Root motion_ refers to an animation technique where a mesh's skeleton is used to give impulse to a character. When working with 3D animations, a popular technique is for animators to use the root skeleton bone to give motion to the rest of the skeleton. This allows animating characters in a way where steps actually match the floor below. It also allows precise interaction with objects during cinematics. See also `AnimationMixer`.
		**Note:** `RootMotionView` is only visible in the editor. It will be hidden automatically in the running project.
	'''

  @staticmethod
  def constructor():
    class_ = RootMotionView.construct_without_init()
    class_._ptr = constructor(715,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RootMotionView.construct_without_init()
    class_._ptr = constructor(715,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRootMotionViewWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(715,0, ())


  def generate_wrapper(self):
    return CPPRootMotionViewWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RootMotionView.__new__(RootMotionView)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RootMotionView'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RootMotionView.construct_without_init()
    cls._ptr = CPPRootMotionViewWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RootMotionView.construct_without_init()
    cls._ptr = CPPRootMotionViewWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def animation_path(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_animation_path()
    return _ret
  @animation_path.setter
  def animation_path(self,  value:'object'):
    self.set_animation_path(value)
  @property
  def color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_color()
    return _ret
  @color.setter
  def color(self,  value:'Color'):
    self.set_color(value)
  @property
  def cell_size(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_cell_size()
    return _ret
  @cell_size.setter
  def cell_size(self,  value:'float'):
    self.set_cell_size(value)
  @property
  def radius(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_radius()
    return _ret
  @radius.setter
  def radius(self,  value:'float'):
    self.set_radius(value)
  @property
  def zero_y(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_zero_y()
    return _ret
  @zero_y.setter
  def zero_y(self,  value:'bool'):
    self.set_zero_y(value)
  @functools.native_method
  def set_animation_path(self, path:'object'   ) -> None:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'

    self.py__animation_path = path



    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)


    self._ptr.call_with_return(264,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_animation_path(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(265,tuple([]))

    return _ret


  @functools.native_method
  def set_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__color = color






    self._ptr.call_with_return(266,tuple([color._ptr]))

  @functools.native_method
  def get_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(267,tuple([]))

    return _ret


  @functools.native_method
  def set_cell_size(self, size:'float'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__cell_size = size






    self._ptr.call_with_return(268,tuple([size]))

  @functools.native_method
  def get_cell_size(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(269,tuple([]))

    return _ret


  @functools.native_method
  def set_radius(self, size:'float'   ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__radius = size






    self._ptr.call_with_return(270,tuple([size]))

  @functools.native_method
  def get_radius(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(271,tuple([]))

    return _ret


  @functools.native_method
  def set_zero_y(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__zero_y = enable






    self._ptr.call_with_return(272,tuple([enable]))

  @functools.native_method
  def get_zero_y(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(273,tuple([]))

    return _ret



register_cast_function('RootMotionView', RootMotionView.cast)
register_class('RootMotionView', RootMotionView)
