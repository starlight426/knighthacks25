# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectChorusWrapper


class AudioEffectChorus(py4godot_audioeffect.AudioEffect):
  r'''
		Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectChorus.construct_without_init()
    class_._ptr = constructor(110,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectChorus.construct_without_init()
    class_._ptr = constructor(110,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectChorusWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(110,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectChorusWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectChorus.__new__(AudioEffectChorus)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectChorus'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectChorus.construct_without_init()
    cls._ptr = CPPAudioEffectChorusWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectChorus.construct_without_init()
    cls._ptr = CPPAudioEffectChorusWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def voice_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_voice_count()
    return _ret
  @voice_count.setter
  def voice_count(self,  value:'int'):
    self.set_voice_count(value)
  @property
  def dry(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_dry()
    return _ret
  @dry.setter
  def dry(self,  value:'float'):
    self.set_dry(value)
  @property
  def wet(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_wet()
    return _ret
  @wet.setter
  def wet(self,  value:'float'):
    self.set_wet(value)
  @functools.native_method
  def set_voice_count(self, voices:'int'   ) -> None:
    r''''''

    assert isinstance(voices, (int, float)), 'voices must be int or float'

    self.py__voice_count = voices






    self._ptr.call_with_return(78,tuple([voices]))

  @functools.native_method
  def get_voice_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_voice_delay_ms(self, voice_idx:'int'   , delay_ms:'float'   ) -> None:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'
    assert isinstance(delay_ms, (int, float)), 'delay_ms must be int or float'







    self._ptr.call_with_return(80,tuple([voice_idx, delay_ms]))

  @functools.native_method
  def get_voice_delay_ms(self, voice_idx:'int'   ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([voice_idx]))
    return _ret


  @functools.native_method
  def set_voice_rate_hz(self, voice_idx:'int'   , rate_hz:'float'   ) -> None:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'
    assert isinstance(rate_hz, (int, float)), 'rate_hz must be int or float'







    self._ptr.call_with_return(82,tuple([voice_idx, rate_hz]))

  @functools.native_method
  def get_voice_rate_hz(self, voice_idx:'int'   ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([voice_idx]))
    return _ret


  @functools.native_method
  def set_voice_depth_ms(self, voice_idx:'int'   , depth_ms:'float'   ) -> None:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'
    assert isinstance(depth_ms, (int, float)), 'depth_ms must be int or float'







    self._ptr.call_with_return(84,tuple([voice_idx, depth_ms]))

  @functools.native_method
  def get_voice_depth_ms(self, voice_idx:'int'   ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([voice_idx]))
    return _ret


  @functools.native_method
  def set_voice_level_db(self, voice_idx:'int'   , level_db:'float'   ) -> None:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'
    assert isinstance(level_db, (int, float)), 'level_db must be int or float'







    self._ptr.call_with_return(86,tuple([voice_idx, level_db]))

  @functools.native_method
  def get_voice_level_db(self, voice_idx:'int'   ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([voice_idx]))
    return _ret


  @functools.native_method
  def set_voice_cutoff_hz(self, voice_idx:'int'   , cutoff_hz:'float'   ) -> None:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'
    assert isinstance(cutoff_hz, (int, float)), 'cutoff_hz must be int or float'







    self._ptr.call_with_return(88,tuple([voice_idx, cutoff_hz]))

  @functools.native_method
  def get_voice_cutoff_hz(self, voice_idx:'int'   ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([voice_idx]))
    return _ret


  @functools.native_method
  def set_voice_pan(self, voice_idx:'int'   , pan:'float'   ) -> None:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'
    assert isinstance(pan, (int, float)), 'pan must be int or float'







    self._ptr.call_with_return(90,tuple([voice_idx, pan]))

  @functools.native_method
  def get_voice_pan(self, voice_idx:'int'   ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(voice_idx, (int, float)), 'voice_idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([voice_idx]))
    return _ret


  @functools.native_method
  def set_wet(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__wet = amount






    self._ptr.call_with_return(92,tuple([amount]))

  @functools.native_method
  def get_wet(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_dry(self, amount:'float'   ) -> None:
    r''''''

    assert isinstance(amount, (int, float)), 'amount must be int or float'

    self.py__dry = amount






    self._ptr.call_with_return(94,tuple([amount]))

  @functools.native_method
  def get_dry(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret



register_cast_function('AudioEffectChorus', AudioEffectChorus.cast)
register_class('AudioEffectChorus', AudioEffectChorus)
