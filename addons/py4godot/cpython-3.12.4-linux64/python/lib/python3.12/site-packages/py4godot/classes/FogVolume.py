# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Material as py4godot_material 
  import py4godot.classes.PanoramaSkyMaterial as py4godot_panoramaskymaterial 
  import py4godot.classes.FogMaterial as py4godot_fogmaterial 
  import py4godot.classes.RenderingServer as py4godot_renderingserver 
  import py4godot.classes.ORMMaterial3D as py4godot_ormmaterial3d 
  import py4godot.classes.PhysicalSkyMaterial as py4godot_physicalskymaterial 
  import py4godot.classes.PlaceholderMaterial as py4godot_placeholdermaterial 
  import py4godot.classes.CanvasItemMaterial as py4godot_canvasitemmaterial 
  import py4godot.classes.ParticleProcessMaterial as py4godot_particleprocessmaterial 
  import py4godot.classes.ProceduralSkyMaterial as py4godot_proceduralskymaterial 
  import py4godot.classes.BaseMaterial3D as py4godot_basematerial3d 
  import py4godot.classes.ShaderMaterial as py4godot_shadermaterial 
  import py4godot.classes.StandardMaterial3D as py4godot_standardmaterial3d 
import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
from py4godot.wrappers.wrappers import CPPFogVolumeWrapper


class FogVolume(py4godot_visualinstance3d.VisualInstance3D):
  r'''
		`FogVolume`s are used to add localized fog into the global volumetric fog effect. `FogVolume`s can also remove volumetric fog from specific areas if using a `FogMaterial` with a negative `FogMaterial.density`.
		Performance of `FogVolume`s is directly related to their relative size on the screen and the complexity of their attached `FogMaterial`. It is best to keep `FogVolume`s relatively small and simple where possible.
		**Note:** `FogVolume`s only have a visible effect if `Environment.volumetric_fog_enabled` is `true`. If you don't want fog to be globally visible (but only within `FogVolume` nodes), set `Environment.volumetric_fog_density` to `0.0`.
	'''

  @staticmethod
  def constructor():
    class_ = FogVolume.construct_without_init()
    class_._ptr = constructor(334,0, ())
    return class_
  @staticmethod
  def new():
    class_ = FogVolume.construct_without_init()
    class_._ptr = constructor(334,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPFogVolumeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(334,0, ())


  def generate_wrapper(self):
    return CPPFogVolumeWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = FogVolume.__new__(FogVolume)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'FogVolume'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = FogVolume.construct_without_init()
    cls._ptr = CPPFogVolumeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = FogVolume.construct_without_init()
    cls._ptr = CPPFogVolumeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def size(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector3'):
    self.set_size(value)
  @property
  def shape(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_shape()
    return _ret
  @shape.setter
  def shape(self,  value:'int'):
    self.set_shape(value)
  @property
  def material(self) -> typing.Union['py4godot_fogmaterial.FogMaterial']:
    r''''''
    _ret = self. get_material()
    return _ret
  @material.setter
  def material(self,  value:'py4godot_object.Object'):
    self.set_material(value)
  @functools.native_method
  def set_size(self, size:'Vector3'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector3), 'size must be Vector3'

    self.py__size = size






    self._ptr.call_with_return(264,tuple([size._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(265,tuple([]))

    return _ret


  @functools.native_method
  def set_shape(self, shape:'int'  ) -> None:
    r''''''

    assert isinstance(shape, (int, float)), 'shape must be int or float'

    self.py__shape = shape






    self._ptr.call_with_return(266,tuple([shape]))

  @functools.native_method
  def get_shape(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(267,tuple([]))

    return _ret


  @functools.native_method
  def set_material(self, material:'py4godot_material.Material'   ) -> None:
    r''''''

    assert(not material is None)
    assert isinstance(material, get_class('Material')), 'material must be Material'

    self.py__material = material






    self._ptr.call_with_return(268,tuple([material._ptr]))

  @functools.native_method
  def get_material(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Material
    _ret._ptr = self._ptr.call_with_return(269,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('FogVolume', FogVolume.cast)
register_class('FogVolume', FogVolume)
