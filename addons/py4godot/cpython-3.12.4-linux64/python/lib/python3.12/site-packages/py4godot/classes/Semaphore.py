# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPSemaphoreWrapper


class Semaphore(py4godot_refcounted.RefCounted):
  r'''
		A synchronization semaphore that can be used to synchronize multiple `Thread`s. Initialized to zero on creation. For a binary version, see `Mutex`.
		**Warning:** Semaphores must be used carefully to avoid deadlocks.
		**Warning:** To guarantee that the operating system is able to perform proper cleanup (no crashes, no deadlocks), these conditions must be met:
		- When a `Semaphore`'s reference count reaches zero and it is therefore destroyed, no threads must be waiting on it.
		- When a `Thread`'s reference count reaches zero and it is therefore destroyed, it must not be waiting on any semaphore.
	'''

  @staticmethod
  def constructor():
    class_ = Semaphore.construct_without_init()
    class_._ptr = constructor(732,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Semaphore.construct_without_init()
    class_._ptr = constructor(732,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSemaphoreWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(732,0, ())


  def generate_wrapper(self):
    return CPPSemaphoreWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Semaphore.__new__(Semaphore)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Semaphore'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Semaphore.construct_without_init()
    cls._ptr = CPPSemaphoreWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Semaphore.construct_without_init()
    cls._ptr = CPPSemaphoreWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def wait(self) -> None:
    r'''
				Waits for the `Semaphore`, if its value is zero, blocks until non-zero.
			'''




    self._ptr.call_with_return(53,tuple([]))

  @functools.native_method
  def try_wait(self) -> typing.Union[bool]:
    r'''
				Like `wait`, but won't block, so if the value is zero, fails immediately and returns `false`. If non-zero, it returns `true` to report success.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def post(self, count:'int' =1  ) -> None:
    r'''
				Lowers the `Semaphore`, allowing one thread in, or more if `count` is specified.
			'''

    assert isinstance(count, (int, float)), 'count must be int or float'






    self._ptr.call_with_return(55,tuple([count]))


register_cast_function('Semaphore', Semaphore.cast)
register_class('Semaphore', Semaphore)
