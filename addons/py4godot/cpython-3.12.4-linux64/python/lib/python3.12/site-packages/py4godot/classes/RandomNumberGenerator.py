# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRandomNumberGeneratorWrapper


class RandomNumberGenerator(py4godot_refcounted.RefCounted):
  r'''
		RandomNumberGenerator is a class for generating pseudo-random numbers. It currently uses `url=https://www.pcg-random.org/`PCG32`/url`.
		**Note:** The underlying algorithm is an implementation detail and should not be depended upon.
		To generate a random float number (within a given range) based on a time-dependent seed:
		```gdscript
		var rng = RandomNumberGenerator.new()
		func _ready():
			var my_random_number = rng.randf_range(-10.0, 10.0)
		```
	'''

  @staticmethod
  def constructor():
    class_ = RandomNumberGenerator.construct_without_init()
    class_._ptr = constructor(661,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RandomNumberGenerator.construct_without_init()
    class_._ptr = constructor(661,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRandomNumberGeneratorWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(661,0, ())


  def generate_wrapper(self):
    return CPPRandomNumberGeneratorWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RandomNumberGenerator.__new__(RandomNumberGenerator)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RandomNumberGenerator'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RandomNumberGenerator.construct_without_init()
    cls._ptr = CPPRandomNumberGeneratorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RandomNumberGenerator.construct_without_init()
    cls._ptr = CPPRandomNumberGeneratorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def seed(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_seed()
    return _ret
  @seed.setter
  def seed(self,  value:'int'):
    self.set_seed(value)
  @property
  def state(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_state()
    return _ret
  @state.setter
  def state(self,  value:'int'):
    self.set_state(value)
  @functools.native_method
  def set_seed(self, seed:'int'   ) -> None:
    r''''''

    assert isinstance(seed, (int, float)), 'seed must be int or float'

    self.py__seed = seed






    self._ptr.call_with_return(53,tuple([seed]))

  @functools.native_method
  def get_seed(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_state(self, state:'int'   ) -> None:
    r''''''

    assert isinstance(state, (int, float)), 'state must be int or float'

    self.py__state = state






    self._ptr.call_with_return(55,tuple([state]))

  @functools.native_method
  def get_state(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def randi(self) -> typing.Union[int]:
    r'''
				Returns a pseudo-random 32-bit unsigned integer between `0` and `4294967295` (inclusive).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))
    return _ret


  @functools.native_method
  def randf(self) -> typing.Union[float]:
    r'''
				Returns a pseudo-random float between `0.0` and `1.0` (inclusive).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))
    return _ret


  @functools.native_method
  def randfn(self, mean:'float' =0.0  , deviation:'float' =1.0  ) -> typing.Union[float]:
    r'''
				Returns a `url=https://en.wikipedia.org/wiki/Normal_distribution`normally-distributed`/url`, pseudo-random floating-point number from the specified `mean` and a standard `deviation`. This is also known as a Gaussian distribution.
				**Note:** This method uses the `url=https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform`Box-Muller transform`/url` algorithm.
			'''

    assert isinstance(mean, (int, float)), 'mean must be int or float'
    assert isinstance(deviation, (int, float)), 'deviation must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([mean, deviation]))
    return _ret


  @functools.native_method
  def randf_range(self, from_:'float'   , to:'float'   ) -> typing.Union[float]:
    r'''
				Returns a pseudo-random float between `from` and `to` (inclusive).
			'''

    assert isinstance(from_, (int, float)), 'from_ must be int or float'
    assert isinstance(to, (int, float)), 'to must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(60,tuple([from_, to]))
    return _ret


  @functools.native_method
  def randi_range(self, from_:'int'   , to:'int'   ) -> typing.Union[int]:
    r'''
				Returns a pseudo-random 32-bit signed integer between `from` and `to` (inclusive).
			'''

    assert isinstance(from_, (int, float)), 'from_ must be int or float'
    assert isinstance(to, (int, float)), 'to must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(61,tuple([from_, to]))
    return _ret


  @functools.native_method
  def rand_weighted(self, weights:'PackedFloat32Array'   ) -> typing.Union[int]:
    r'''
				Returns a random index with non-uniform weights. Prints an error and returns `-1` if the array is empty.
				
				```gdscript
				var rng = RandomNumberGenerator.new()

				var my_array = `"one", "two", "three", "four"`
				var weights = PackedFloat32Array(`0.5, 1, 1, 2`)

				# Prints one of the four elements in `my_array`.
				# It is more likely to print "four", and less likely to print "one".
				print(my_array`rng.rand_weighted(weights)`)
				```
				
			'''

    assert(not weights is None)
    assert isinstance(weights, PackedFloat32Array), 'weights must be PackedFloat32Array'






    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([weights._ptr]))
    return _ret


  @functools.native_method
  def randomize(self) -> None:
    r'''
				Sets up a time-based seed for this `RandomNumberGenerator` instance. Unlike the `@GlobalScope` random number generation functions, different `RandomNumberGenerator` instances can use different seeds.
			'''




    self._ptr.call_with_return(63,tuple([]))


register_cast_function('RandomNumberGenerator', RandomNumberGenerator.cast)
register_class('RandomNumberGenerator', RandomNumberGenerator)
