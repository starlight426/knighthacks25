# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPCanvasGroupWrapper


class CanvasGroup(py4godot_node2d.Node2D):
  r'''
		Child `CanvasItem` nodes of a `CanvasGroup` are drawn as a single object. It allows to e.g. draw overlapping translucent 2D nodes without blending (set `CanvasItem.self_modulate` property of `CanvasGroup` to achieve this effect).
		**Note:** The `CanvasGroup` uses a custom shader to read from the backbuffer to draw its children. Assigning a `Material` to the `CanvasGroup` overrides the builtin shader. To duplicate the behavior of the builtin shader in a custom `Shader` use the following:
		```gdscript
		shader_type canvas_item;
		render_mode unshaded;

		uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;

		void fragment() {
			vec4 c = textureLod(screen_texture, SCREEN_UV, 0.0);

			if (c.a > 0.0001) {
				c.rgb /= c.a;
			}

			COLOR *= c;
		}
		```
		**Note:** Since `CanvasGroup` and `CanvasItem.clip_children` both utilize the backbuffer, children of a `CanvasGroup` who have their `CanvasItem.clip_children` set to anything other than `constant CanvasItem.CLIP_CHILDREN_DISABLED` will not function correctly.
	'''

  @staticmethod
  def constructor():
    class_ = CanvasGroup.construct_without_init()
    class_._ptr = constructor(196,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CanvasGroup.construct_without_init()
    class_._ptr = constructor(196,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCanvasGroupWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(196,0, ())


  def generate_wrapper(self):
    return CPPCanvasGroupWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CanvasGroup.__new__(CanvasGroup)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CanvasGroup'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CanvasGroup.construct_without_init()
    cls._ptr = CPPCanvasGroupWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CanvasGroup.construct_without_init()
    cls._ptr = CPPCanvasGroupWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def fit_margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_fit_margin()
    return _ret
  @fit_margin.setter
  def fit_margin(self,  value:'float'):
    self.set_fit_margin(value)
  @property
  def clear_margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_clear_margin()
    return _ret
  @clear_margin.setter
  def clear_margin(self,  value:'float'):
    self.set_clear_margin(value)
  @property
  def use_mipmaps(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_mipmaps()
    return _ret
  @use_mipmaps.setter
  def use_mipmaps(self,  value:'bool'):
    self.set_use_mipmaps(value)
  @functools.native_method
  def set_fit_margin(self, fit_margin:'float'   ) -> None:
    r''''''

    assert isinstance(fit_margin, (int, float)), 'fit_margin must be int or float'

    self.py__fit_margin = fit_margin






    self._ptr.call_with_return(303,tuple([fit_margin]))

  @functools.native_method
  def get_fit_margin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def set_clear_margin(self, clear_margin:'float'   ) -> None:
    r''''''

    assert isinstance(clear_margin, (int, float)), 'clear_margin must be int or float'

    self.py__clear_margin = clear_margin






    self._ptr.call_with_return(305,tuple([clear_margin]))

  @functools.native_method
  def get_clear_margin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_use_mipmaps(self, use_mipmaps:'bool'   ) -> None:
    r''''''

    assert isinstance(use_mipmaps, bool), 'use_mipmaps must be bool'

    self.py__use_mipmaps = use_mipmaps






    self._ptr.call_with_return(307,tuple([use_mipmaps]))

  @functools.native_method
  def is_using_mipmaps(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(308,tuple([]))

    return _ret



register_cast_function('CanvasGroup', CanvasGroup.cast)
register_class('CanvasGroup', CanvasGroup)
