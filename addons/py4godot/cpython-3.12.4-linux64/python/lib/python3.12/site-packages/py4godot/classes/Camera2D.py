# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.MissingNode as py4godot_missingnode 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.DampedSpringJoint2D as py4godot_dampedspringjoint2d 
  import py4godot.classes.XRAnchor3D as py4godot_xranchor3d 
  import py4godot.classes.Light2D as py4godot_light2d 
  import py4godot.classes.Area3D as py4godot_area3d 
  import py4godot.classes.CollisionShape3D as py4godot_collisionshape3d 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.CSGPolygon3D as py4godot_csgpolygon3d 
  import py4godot.classes.PathFollow3D as py4godot_pathfollow3d 
  import py4godot.classes.CanvasGroup as py4godot_canvasgroup 
  import py4godot.classes.SpringBoneCollision3D as py4godot_springbonecollision3d 
  import py4godot.classes.AnimationTree as py4godot_animationtree 
  import py4godot.classes.ImporterMeshInstance3D as py4godot_importermeshinstance3d 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.EditorResourcePreview as py4godot_editorresourcepreview 
  import py4godot.classes.SpringBoneCollisionPlane3D as py4godot_springbonecollisionplane3d 
  import py4godot.classes.RemoteTransform2D as py4godot_remotetransform2d 
  import py4godot.classes.MultiMeshInstance2D as py4godot_multimeshinstance2d 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CollisionPolygon2D as py4godot_collisionpolygon2d 
  import py4godot.classes.SoftBody3D as py4godot_softbody3d 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.CanvasItem as py4godot_canvasitem 
  import py4godot.classes.SpringBoneCollisionCapsule3D as py4godot_springbonecollisioncapsule3d 
  import py4godot.classes.GPUParticlesCollisionHeightField3D as py4godot_gpuparticlescollisionheightfield3d 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.Marker2D as py4godot_marker2d 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.SpotLight3D as py4godot_spotlight3d 
  import py4godot.classes.CSGTorus3D as py4godot_csgtorus3d 
  import py4godot.classes.MeshInstance3D as py4godot_meshinstance3d 
  import py4godot.classes.RayCast3D as py4godot_raycast3d 
  import py4godot.classes.GeometryInstance3D as py4godot_geometryinstance3d 
  import py4godot.classes.EditorCommandPalette as py4godot_editorcommandpalette 
  import py4godot.classes.CollisionPolygon3D as py4godot_collisionpolygon3d 
  import py4godot.classes.Line2D as py4godot_line2d 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.ResourcePreloader as py4godot_resourcepreloader 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.GPUParticlesCollisionSphere3D as py4godot_gpuparticlescollisionsphere3d 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.HingeJoint3D as py4godot_hingejoint3d 
  import py4godot.classes.OpenXRCompositionLayerEquirect as py4godot_openxrcompositionlayerequirect 
  import py4godot.classes.SpringBoneCollisionSphere3D as py4godot_springbonecollisionsphere3d 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.OpenXRCompositionLayerQuad as py4godot_openxrcompositionlayerquad 
  import py4godot.classes.EditorFileDialog as py4godot_editorfiledialog 
  import py4godot.classes.Popup as py4godot_popup 
  import py4godot.classes.DirectionalLight3D as py4godot_directionallight3d 
  import py4godot.classes.Parallax2D as py4godot_parallax2d 
  import py4godot.classes.PhysicsBody2D as py4godot_physicsbody2d 
  import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
  import py4godot.classes.ShaderGlobalsOverride as py4godot_shaderglobalsoverride 
  import py4godot.classes.FileDialog as py4godot_filedialog 
  import py4godot.classes.MultiplayerSpawner as py4godot_multiplayerspawner 
  import py4godot.classes.CPUParticles3D as py4godot_cpuparticles3d 
  import py4godot.classes.LightmapProbe as py4godot_lightmapprobe 
  import py4godot.classes.CPUParticles2D as py4godot_cpuparticles2d 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.Camera3D as py4godot_camera3d 
  import py4godot.classes.SpriteBase3D as py4godot_spritebase3d 
  import py4godot.classes.XRNode3D as py4godot_xrnode3d 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.MultiplayerSynchronizer as py4godot_multiplayersynchronizer 
  import py4godot.classes.PhysicalBoneSimulator3D as py4godot_physicalbonesimulator3d 
  import py4godot.classes.AimModifier3D as py4godot_aimmodifier3d 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.ScriptCreateDialog as py4godot_scriptcreatedialog 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.XRController3D as py4godot_xrcontroller3d 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.OpenXRVisibilityMask as py4godot_openxrvisibilitymask 
  import py4godot.classes.AudioListener3D as py4godot_audiolistener3d 
  import py4godot.classes.VehicleBody3D as py4godot_vehiclebody3d 
  import py4godot.classes.VisibleOnScreenEnabler2D as py4godot_visibleonscreenenabler2d 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ShapeCast3D as py4godot_shapecast3d 
  import py4godot.classes.XRCamera3D as py4godot_xrcamera3d 
  import py4godot.classes.CSGShape3D as py4godot_csgshape3d 
  import py4godot.classes.LightmapGI as py4godot_lightmapgi 
  import py4godot.classes.VoxelGI as py4godot_voxelgi 
  import py4godot.classes.XRFaceModifier3D as py4godot_xrfacemodifier3d 
  import py4godot.classes.ConfirmationDialog as py4godot_confirmationdialog 
  import py4godot.classes.PhysicalBone3D as py4godot_physicalbone3d 
  import py4godot.classes.ConeTwistJoint3D as py4godot_conetwistjoint3d 
  import py4godot.classes.CollisionObject2D as py4godot_collisionobject2d 
  import py4godot.classes.Timer as py4godot_timer 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.Polygon2D as py4godot_polygon2d 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.VisibleOnScreenNotifier3D as py4godot_visibleonscreennotifier3d 
  import py4godot.classes.RigidBody2D as py4godot_rigidbody2d 
  import py4godot.classes.Marker3D as py4godot_marker3d 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.AnimatedSprite3D as py4godot_animatedsprite3d 
  import py4godot.classes.LightOccluder2D as py4godot_lightoccluder2d 
  import py4godot.classes.TouchScreenButton as py4godot_touchscreenbutton 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.TileMap as py4godot_tilemap 
  import py4godot.classes.Joint3D as py4godot_joint3d 
  import py4godot.classes.Viewport as py4godot_viewport 
  import py4godot.classes.XRBodyModifier3D as py4godot_xrbodymodifier3d 
  import py4godot.classes.ParallaxLayer as py4godot_parallaxlayer 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.NavigationRegion2D as py4godot_navigationregion2d 
  import py4godot.classes.AnimatableBody2D as py4godot_animatablebody2d 
  import py4godot.classes.CSGCylinder3D as py4godot_csgcylinder3d 
  import py4godot.classes.LookAtModifier3D as py4godot_lookatmodifier3d 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.NavigationRegion3D as py4godot_navigationregion3d 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.NavigationObstacle3D as py4godot_navigationobstacle3d 
  import py4godot.classes.GridMapEditorPlugin as py4godot_gridmapeditorplugin 
  import py4godot.classes.ConvertTransformModifier3D as py4godot_converttransformmodifier3d 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.Area2D as py4godot_area2d 
  import py4godot.classes.Decal as py4godot_decal 
  import py4godot.classes.Path3D as py4godot_path3d 
  import py4godot.classes.AudioStreamPlayer as py4godot_audiostreamplayer 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.XROrigin3D as py4godot_xrorigin3d 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.RemoteTransform3D as py4godot_remotetransform3d 
  import py4godot.classes.GPUParticles2D as py4godot_gpuparticles2d 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
  import py4godot.classes.DirectionalLight2D as py4godot_directionallight2d 
  import py4godot.classes.EditorPlugin as py4godot_editorplugin 
  import py4godot.classes.VisibleOnScreenEnabler3D as py4godot_visibleonscreenenabler3d 
  import py4godot.classes.BackBufferCopy as py4godot_backbuffercopy 
  import py4godot.classes.NavigationAgent3D as py4godot_navigationagent3d 
  import py4godot.classes.PhysicsBody3D as py4godot_physicsbody3d 
  import py4godot.classes.MultiMeshInstance3D as py4godot_multimeshinstance3d 
  import py4godot.classes.CanvasLayer as py4godot_canvaslayer 
  import py4godot.classes.PhysicalBone2D as py4godot_physicalbone2d 
  import py4godot.classes.SkeletonIK3D as py4godot_skeletonik3d 
  import py4godot.classes.CopyTransformModifier3D as py4godot_copytransformmodifier3d 
  import py4godot.classes.GPUParticlesCollisionSDF3D as py4godot_gpuparticlescollisionsdf3d 
  import py4godot.classes.RetargetModifier3D as py4godot_retargetmodifier3d 
  import py4godot.classes.GPUParticlesCollision3D as py4godot_gpuparticlescollision3d 
  import py4godot.classes.Path2D as py4godot_path2d 
  import py4godot.classes.GPUParticles3D as py4godot_gpuparticles3d 
  import py4godot.classes.SpringArm3D as py4godot_springarm3d 
  import py4godot.classes.SpringBoneSimulator3D as py4godot_springbonesimulator3d 
  import py4godot.classes.PopupMenu as py4godot_popupmenu 
  import py4godot.classes.CSGBox3D as py4godot_csgbox3d 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.ParallaxBackground as py4godot_parallaxbackground 
  import py4godot.classes.PathFollow2D as py4godot_pathfollow2d 
  import py4godot.classes.CollisionObject3D as py4godot_collisionobject3d 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.StatusIndicator as py4godot_statusindicator 
  import py4godot.classes.Label3D as py4godot_label3d 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
  import py4godot.classes.CSGSphere3D as py4godot_csgsphere3d 
  import py4godot.classes.PinJoint3D as py4godot_pinjoint3d 
  import py4godot.classes.GridMap as py4godot_gridmap 
  import py4godot.classes.ModifierBoneTarget3D as py4godot_modifierbonetarget3d 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.CharacterBody2D as py4godot_characterbody2d 
  import py4godot.classes.WorldEnvironment as py4godot_worldenvironment 
  import py4godot.classes.VisibleOnScreenNotifier2D as py4godot_visibleonscreennotifier2d 
  import py4godot.classes.StaticBody3D as py4godot_staticbody3d 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.SliderJoint3D as py4godot_sliderjoint3d 
  import py4godot.classes.NavigationAgent2D as py4godot_navigationagent2d 
  import py4godot.classes.AnimatableBody3D as py4godot_animatablebody3d 
  import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.ReflectionProbe as py4godot_reflectionprobe 
  import py4godot.classes.NavigationLink3D as py4godot_navigationlink3d 
  import py4godot.classes.NavigationLink2D as py4godot_navigationlink2d 
  import py4godot.classes.GPUParticlesAttractorBox3D as py4godot_gpuparticlesattractorbox3d 
  import py4godot.classes.RootMotionView as py4godot_rootmotionview 
  import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
  import py4godot.classes.Skeleton2D as py4godot_skeleton2d 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.CSGCombiner3D as py4godot_csgcombiner3d 
  import py4godot.classes.OccluderInstance3D as py4godot_occluderinstance3d 
  import py4godot.classes.FogVolume as py4godot_fogvolume 
  import py4godot.classes.Bone2D as py4godot_bone2d 
  import py4godot.classes.AudioStreamPlayer3D as py4godot_audiostreamplayer3d 
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.Sprite3D as py4godot_sprite3d 
  import py4godot.classes.MeshInstance2D as py4godot_meshinstance2d 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.GPUParticlesCollisionBox3D as py4godot_gpuparticlescollisionbox3d 
  import py4godot.classes.GPUParticlesAttractor3D as py4godot_gpuparticlesattractor3d 
  import py4godot.classes.XRHandModifier3D as py4godot_xrhandmodifier3d 
  import py4godot.classes.SubViewport as py4godot_subviewport 
  import py4godot.classes.Window as py4godot_window 
  import py4godot.classes.StaticBody2D as py4godot_staticbody2d 
  import py4godot.classes.ShapeCast2D as py4godot_shapecast2d 
  import py4godot.classes.Sprite2D as py4godot_sprite2d 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.Node3D as py4godot_node3d 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.HTTPRequest as py4godot_httprequest 
  import py4godot.classes.VehicleWheel3D as py4godot_vehiclewheel3d 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.Node as py4godot_node 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.AnimationMixer as py4godot_animationmixer 
  import py4godot.classes.GPUParticlesAttractorVectorField3D as py4godot_gpuparticlesattractorvectorfield3d 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.OpenXRCompositionLayerCylinder as py4godot_openxrcompositionlayercylinder 
  import py4godot.classes.CharacterBody3D as py4godot_characterbody3d 
  import py4godot.classes.AudioStreamPlayer2D as py4godot_audiostreamplayer2d 
  import py4godot.classes.TileMapLayer as py4godot_tilemaplayer 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.AudioListener2D as py4godot_audiolistener2d 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.RayCast2D as py4godot_raycast2d 
  import py4godot.classes.CanvasModulate as py4godot_canvasmodulate 
  import py4godot.classes.CollisionShape2D as py4godot_collisionshape2d 
  import py4godot.classes.NavigationObstacle2D as py4godot_navigationobstacle2d 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.InstancePlaceholder as py4godot_instanceplaceholder 
  import py4godot.classes.OpenXRHand as py4godot_openxrhand 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.Generic6DOFJoint3D as py4godot_generic6dofjoint3d 
  import py4godot.classes.RigidBody3D as py4godot_rigidbody3d 
  import py4godot.classes.Light3D as py4godot_light3d 
  import py4godot.classes.AcceptDialog as py4godot_acceptdialog 
  import py4godot.classes.OpenXRRenderModel as py4godot_openxrrendermodel 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.PinJoint2D as py4godot_pinjoint2d 
  import py4godot.classes.EditorFileSystem as py4godot_editorfilesystem 
  import py4godot.classes.OpenXRCompositionLayer as py4godot_openxrcompositionlayer 
  import py4godot.classes.AnimationPlayer as py4godot_animationplayer 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.OpenXRRenderModelManager as py4godot_openxrrendermodelmanager 
  import py4godot.classes.PointLight2D as py4godot_pointlight2d 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.AnimatedSprite2D as py4godot_animatedsprite2d 
  import py4godot.classes.OmniLight3D as py4godot_omnilight3d 
  import py4godot.classes.CSGMesh3D as py4godot_csgmesh3d 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.BoneAttachment3D as py4godot_boneattachment3d 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.PopupPanel as py4godot_popuppanel 
  import py4godot.classes.Joint2D as py4godot_joint2d 
  import py4godot.classes.GrooveJoint2D as py4godot_groovejoint2d 
  import py4godot.classes.GPUParticlesAttractorSphere3D as py4godot_gpuparticlesattractorsphere3d 
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPCamera2DWrapper

class AnchorMode:
  ANCHOR_MODE_FIXED_TOP_LEFT = 0
  ANCHOR_MODE_DRAG_CENTER = 1
class Camera2DProcessCallback:
  CAMERA2D_PROCESS_PHYSICS = 0
  CAMERA2D_PROCESS_IDLE = 1


class Camera2D(py4godot_node2d.Node2D):
  r'''
		Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of `CanvasItem`-based nodes.
		Cameras register themselves in the nearest `Viewport` node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport.
		This node is intended to be a simple helper to get things going quickly, but more functionality may be desired to change how the camera works. To make your own custom camera node, inherit it from `Node2D` and change the transform of the canvas by setting `Viewport.canvas_transform` in `Viewport` (you can obtain the current `Viewport` by using `Node.get_viewport`).
		Note that the `Camera2D` node's `Node2D.global_position` doesn't represent the actual position of the screen, which may differ due to applied smoothing or limits. You can use `get_screen_center_position` to get the real position. Same for the node's `Node2D.global_rotation` which may be different due to applied rotation smoothing. You can use `get_screen_rotation` to get the current rotation of the screen.
	'''

  @staticmethod
  def constructor():
    class_ = Camera2D.construct_without_init()
    class_._ptr = constructor(188,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Camera2D.construct_without_init()
    class_._ptr = constructor(188,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCamera2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(188,0, ())


  def generate_wrapper(self):
    return CPPCamera2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Camera2D.__new__(Camera2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Camera2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Camera2D.construct_without_init()
    cls._ptr = CPPCamera2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Camera2D.construct_without_init()
    cls._ptr = CPPCamera2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_offset()
    return _ret
  @offset.setter
  def offset(self,  value:'Vector2'):
    self.set_offset(value)
  @property
  def anchor_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_anchor_mode()
    return _ret
  @anchor_mode.setter
  def anchor_mode(self,  value:'int'):
    self.set_anchor_mode(value)
  @property
  def ignore_rotation(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_ignoring_rotation()
    return _ret
  @ignore_rotation.setter
  def ignore_rotation(self,  value:'bool'):
    self.set_ignore_rotation(value)
  @property
  def enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_enabled()
    return _ret
  @enabled.setter
  def enabled(self,  value:'bool'):
    self.set_enabled(value)
  @property
  def zoom(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_zoom()
    return _ret
  @zoom.setter
  def zoom(self,  value:'Vector2'):
    self.set_zoom(value)
  @property
  def custom_viewport(self) -> typing.Any:
    r''''''
    _ret = self. get_custom_viewport()
    return _ret
  @custom_viewport.setter
  def custom_viewport(self,  value:'py4godot_object.Object'):
    self.set_custom_viewport(value)
  @property
  def process_callback(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_process_callback()
    return _ret
  @process_callback.setter
  def process_callback(self,  value:'int'):
    self.set_process_callback(value)
  @property
  def limit_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_limit_enabled()
    return _ret
  @limit_enabled.setter
  def limit_enabled(self,  value:'bool'):
    self.set_limit_enabled(value)
  @property
  def limit_left(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_limit(0)
    return _ret
  @limit_left.setter
  def limit_left(self,  value:'int'):
    self.set_limit(value)
  @property
  def limit_top(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_limit(1)
    return _ret
  @limit_top.setter
  def limit_top(self,  value:'int'):
    self.set_limit(value)
  @property
  def limit_right(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_limit(2)
    return _ret
  @limit_right.setter
  def limit_right(self,  value:'int'):
    self.set_limit(value)
  @property
  def limit_bottom(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_limit(3)
    return _ret
  @limit_bottom.setter
  def limit_bottom(self,  value:'int'):
    self.set_limit(value)
  @property
  def limit_smoothed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_limit_smoothing_enabled()
    return _ret
  @limit_smoothed.setter
  def limit_smoothed(self,  value:'bool'):
    self.set_limit_smoothing_enabled(value)
  @property
  def position_smoothing_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_position_smoothing_enabled()
    return _ret
  @position_smoothing_enabled.setter
  def position_smoothing_enabled(self,  value:'bool'):
    self.set_position_smoothing_enabled(value)
  @property
  def position_smoothing_speed(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_position_smoothing_speed()
    return _ret
  @position_smoothing_speed.setter
  def position_smoothing_speed(self,  value:'float'):
    self.set_position_smoothing_speed(value)
  @property
  def rotation_smoothing_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_rotation_smoothing_enabled()
    return _ret
  @rotation_smoothing_enabled.setter
  def rotation_smoothing_enabled(self,  value:'bool'):
    self.set_rotation_smoothing_enabled(value)
  @property
  def rotation_smoothing_speed(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_rotation_smoothing_speed()
    return _ret
  @rotation_smoothing_speed.setter
  def rotation_smoothing_speed(self,  value:'float'):
    self.set_rotation_smoothing_speed(value)
  @property
  def drag_horizontal_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_drag_horizontal_enabled()
    return _ret
  @drag_horizontal_enabled.setter
  def drag_horizontal_enabled(self,  value:'bool'):
    self.set_drag_horizontal_enabled(value)
  @property
  def drag_vertical_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_drag_vertical_enabled()
    return _ret
  @drag_vertical_enabled.setter
  def drag_vertical_enabled(self,  value:'bool'):
    self.set_drag_vertical_enabled(value)
  @property
  def drag_horizontal_offset(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_drag_horizontal_offset()
    return _ret
  @drag_horizontal_offset.setter
  def drag_horizontal_offset(self,  value:'float'):
    self.set_drag_horizontal_offset(value)
  @property
  def drag_vertical_offset(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_drag_vertical_offset()
    return _ret
  @drag_vertical_offset.setter
  def drag_vertical_offset(self,  value:'float'):
    self.set_drag_vertical_offset(value)
  @property
  def drag_left_margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_drag_margin(0)
    return _ret
  @drag_left_margin.setter
  def drag_left_margin(self,  value:'float'):
    self.set_drag_margin(value)
  @property
  def drag_top_margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_drag_margin(1)
    return _ret
  @drag_top_margin.setter
  def drag_top_margin(self,  value:'float'):
    self.set_drag_margin(value)
  @property
  def drag_right_margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_drag_margin(2)
    return _ret
  @drag_right_margin.setter
  def drag_right_margin(self,  value:'float'):
    self.set_drag_margin(value)
  @property
  def drag_bottom_margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_drag_margin(3)
    return _ret
  @drag_bottom_margin.setter
  def drag_bottom_margin(self,  value:'float'):
    self.set_drag_margin(value)
  @property
  def editor_draw_screen(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_screen_drawing_enabled()
    return _ret
  @editor_draw_screen.setter
  def editor_draw_screen(self,  value:'bool'):
    self.set_screen_drawing_enabled(value)
  @property
  def editor_draw_limits(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_limit_drawing_enabled()
    return _ret
  @editor_draw_limits.setter
  def editor_draw_limits(self,  value:'bool'):
    self.set_limit_drawing_enabled(value)
  @property
  def editor_draw_drag_margin(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_margin_drawing_enabled()
    return _ret
  @editor_draw_drag_margin.setter
  def editor_draw_drag_margin(self,  value:'bool'):
    self.set_margin_drawing_enabled(value)
  @functools.native_method
  def set_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__offset = offset






    self._ptr.call_with_return(303,tuple([offset._ptr]))

  @functools.native_method
  def get_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def set_anchor_mode(self, anchor_mode:'int'  ) -> None:
    r''''''

    assert isinstance(anchor_mode, (int, float)), 'anchor_mode must be int or float'

    self.py__anchor_mode = anchor_mode






    self._ptr.call_with_return(305,tuple([anchor_mode]))

  @functools.native_method
  def get_anchor_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_ignore_rotation(self, ignore:'bool'   ) -> None:
    r''''''

    assert isinstance(ignore, bool), 'ignore must be bool'

    self.py__ignore_rotation = ignore






    self._ptr.call_with_return(307,tuple([ignore]))

  @functools.native_method
  def is_ignoring_rotation(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(308,tuple([]))

    return _ret


  @functools.native_method
  def set_process_callback(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__process_callback = mode






    self._ptr.call_with_return(309,tuple([mode]))

  @functools.native_method
  def get_process_callback(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(310,tuple([]))

    return _ret


  @functools.native_method
  def set_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__enabled = enabled






    self._ptr.call_with_return(311,tuple([enabled]))

  @functools.native_method
  def is_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(312,tuple([]))

    return _ret


  @functools.native_method
  def make_current(self) -> None:
    r'''
				Forces this `Camera2D` to become the current active one. `enabled` must be `true`.
			'''




    self._ptr.call_with_return(313,tuple([]))

  @functools.native_method
  def is_current(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this `Camera2D` is the active camera (see `Viewport.get_camera_2d`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(314,tuple([]))
    return _ret


  @functools.native_method
  def set_limit_enabled(self, limit_enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(limit_enabled, bool), 'limit_enabled must be bool'

    self.py__limit_enabled = limit_enabled






    self._ptr.call_with_return(315,tuple([limit_enabled]))

  @functools.native_method
  def is_limit_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(316,tuple([]))

    return _ret


  @functools.native_method
  def set_limit(self, margin:'int'  , limit:'int'   ) -> None:
    r'''
				Sets the camera limit for the specified `enum Side`. See also `limit_bottom`, `limit_top`, `limit_left`, and `limit_right`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'
    assert isinstance(limit, (int, float)), 'limit must be int or float'

    self.py__limit_left = margin







    self._ptr.call_with_return(317,tuple([margin, limit]))

  @functools.native_method
  def get_limit(self, margin:'int'  ) -> typing.Union[int]:
    r'''
				Returns the camera limit for the specified `enum Side`. See also `limit_bottom`, `limit_top`, `limit_left`, and `limit_right`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(318,tuple([margin]))

    return _ret


  @functools.native_method
  def set_limit_smoothing_enabled(self, limit_smoothing_enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(limit_smoothing_enabled, bool), 'limit_smoothing_enabled must be bool'

    self.py__limit_smoothed = limit_smoothing_enabled






    self._ptr.call_with_return(319,tuple([limit_smoothing_enabled]))

  @functools.native_method
  def is_limit_smoothing_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(320,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_vertical_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__drag_vertical_enabled = enabled






    self._ptr.call_with_return(321,tuple([enabled]))

  @functools.native_method
  def is_drag_vertical_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(322,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_horizontal_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__drag_horizontal_enabled = enabled






    self._ptr.call_with_return(323,tuple([enabled]))

  @functools.native_method
  def is_drag_horizontal_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(324,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_vertical_offset(self, offset:'float'   ) -> None:
    r''''''

    assert isinstance(offset, (int, float)), 'offset must be int or float'

    self.py__drag_vertical_offset = offset






    self._ptr.call_with_return(325,tuple([offset]))

  @functools.native_method
  def get_drag_vertical_offset(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(326,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_horizontal_offset(self, offset:'float'   ) -> None:
    r''''''

    assert isinstance(offset, (int, float)), 'offset must be int or float'

    self.py__drag_horizontal_offset = offset






    self._ptr.call_with_return(327,tuple([offset]))

  @functools.native_method
  def get_drag_horizontal_offset(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(328,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_margin(self, margin:'int'  , drag_margin:'float'   ) -> None:
    r'''
				Sets the specified `enum Side`'s margin. See also `drag_bottom_margin`, `drag_top_margin`, `drag_left_margin`, and `drag_right_margin`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'
    assert isinstance(drag_margin, (int, float)), 'drag_margin must be int or float'

    self.py__drag_left_margin = margin







    self._ptr.call_with_return(329,tuple([margin, drag_margin]))

  @functools.native_method
  def get_drag_margin(self, margin:'int'  ) -> typing.Union[float]:
    r'''
				Returns the specified `enum Side`'s margin. See also `drag_bottom_margin`, `drag_top_margin`, `drag_left_margin`, and `drag_right_margin`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(330,tuple([margin]))

    return _ret


  @functools.native_method
  def get_target_position(self) -> typing.Union['Vector2']:
    r'''
				Returns this camera's target position, in global coordinates.
				**Note:** The returned value is not the same as `Node2D.global_position`, as it is affected by the drag properties. It is also not the same as the current position if `position_smoothing_enabled` is `true` (see `get_screen_center_position`).
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(331,tuple([]))
    return _ret


  @functools.native_method
  def get_screen_center_position(self) -> typing.Union['Vector2']:
    r'''
				Returns the center of the screen from this camera's point of view, in global coordinates.
				**Note:** The exact targeted position of the camera may be different. See `get_target_position`.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(332,tuple([]))
    return _ret


  @functools.native_method
  def get_screen_rotation(self) -> typing.Union[float]:
    r'''
				Returns the current screen rotation from this camera's point of view.
				**Note:** The screen rotation can be different from `Node2D.global_rotation` if the camera is rotating smoothly due to `rotation_smoothing_enabled`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(333,tuple([]))
    return _ret


  @functools.native_method
  def set_zoom(self, zoom:'Vector2'   ) -> None:
    r''''''

    assert(not zoom is None)
    assert isinstance(zoom, Vector2), 'zoom must be Vector2'

    self.py__zoom = zoom






    self._ptr.call_with_return(334,tuple([zoom._ptr]))

  @functools.native_method
  def get_zoom(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(335,tuple([]))

    return _ret


  @functools.native_method
  def set_custom_viewport(self, viewport:'py4godot_node.Node'   ) -> None:
    r''''''

    assert(not viewport is None)
    assert isinstance(viewport, get_class('Node')), 'viewport must be Node'

    self.py__custom_viewport = viewport






    self._ptr.call_with_return(336,tuple([viewport._ptr]))

  @functools.native_method
  def get_custom_viewport(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Node
    _ret._ptr = self._ptr.call_with_return(337,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_position_smoothing_speed(self, position_smoothing_speed:'float'   ) -> None:
    r''''''

    assert isinstance(position_smoothing_speed, (int, float)), 'position_smoothing_speed must be int or float'

    self.py__position_smoothing_speed = position_smoothing_speed






    self._ptr.call_with_return(338,tuple([position_smoothing_speed]))

  @functools.native_method
  def get_position_smoothing_speed(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(339,tuple([]))

    return _ret


  @functools.native_method
  def set_position_smoothing_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__position_smoothing_enabled = enabled






    self._ptr.call_with_return(340,tuple([enabled]))

  @functools.native_method
  def is_position_smoothing_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(341,tuple([]))

    return _ret


  @functools.native_method
  def set_rotation_smoothing_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__rotation_smoothing_enabled = enabled






    self._ptr.call_with_return(342,tuple([enabled]))

  @functools.native_method
  def is_rotation_smoothing_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(343,tuple([]))

    return _ret


  @functools.native_method
  def set_rotation_smoothing_speed(self, speed:'float'   ) -> None:
    r''''''

    assert isinstance(speed, (int, float)), 'speed must be int or float'

    self.py__rotation_smoothing_speed = speed






    self._ptr.call_with_return(344,tuple([speed]))

  @functools.native_method
  def get_rotation_smoothing_speed(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(345,tuple([]))

    return _ret


  @functools.native_method
  def force_update_scroll(self) -> None:
    r'''
				Forces the camera to update scroll immediately.
			'''




    self._ptr.call_with_return(346,tuple([]))

  @functools.native_method
  def reset_smoothing(self) -> None:
    r'''
				Sets the camera's position immediately to its current smoothing destination.
				This method has no effect if `position_smoothing_enabled` is `false`.
			'''




    self._ptr.call_with_return(347,tuple([]))

  @functools.native_method
  def align(self) -> None:
    r'''
				Aligns the camera to the tracked node.
			'''




    self._ptr.call_with_return(348,tuple([]))

  @functools.native_method
  def set_screen_drawing_enabled(self, screen_drawing_enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(screen_drawing_enabled, bool), 'screen_drawing_enabled must be bool'

    self.py__editor_draw_screen = screen_drawing_enabled






    self._ptr.call_with_return(349,tuple([screen_drawing_enabled]))

  @functools.native_method
  def is_screen_drawing_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(350,tuple([]))

    return _ret


  @functools.native_method
  def set_limit_drawing_enabled(self, limit_drawing_enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(limit_drawing_enabled, bool), 'limit_drawing_enabled must be bool'

    self.py__editor_draw_limits = limit_drawing_enabled






    self._ptr.call_with_return(351,tuple([limit_drawing_enabled]))

  @functools.native_method
  def is_limit_drawing_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(352,tuple([]))

    return _ret


  @functools.native_method
  def set_margin_drawing_enabled(self, margin_drawing_enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(margin_drawing_enabled, bool), 'margin_drawing_enabled must be bool'

    self.py__editor_draw_drag_margin = margin_drawing_enabled






    self._ptr.call_with_return(353,tuple([margin_drawing_enabled]))

  @functools.native_method
  def is_margin_drawing_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(354,tuple([]))

    return _ret



register_cast_function('Camera2D', Camera2D.cast)
register_class('Camera2D', Camera2D)
