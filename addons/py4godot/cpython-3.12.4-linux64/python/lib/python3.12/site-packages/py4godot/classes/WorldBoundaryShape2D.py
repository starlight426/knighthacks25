# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Shape2D as py4godot_shape2d 
from py4godot.wrappers.wrappers import CPPWorldBoundaryShape2DWrapper


class WorldBoundaryShape2D(py4godot_shape2d.Shape2D):
  r'''
		A 2D world boundary shape, intended for use in physics. `WorldBoundaryShape2D` works like an infinite straight line that forces all physics bodies to stay above it. The line's normal determines which direction is considered as "above" and in the editor, the smaller line over it represents this direction. It can for example be used for endless flat floors.
	'''

  @staticmethod
  def constructor():
    class_ = WorldBoundaryShape2D.construct_without_init()
    class_._ptr = constructor(1006,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WorldBoundaryShape2D.construct_without_init()
    class_._ptr = constructor(1006,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWorldBoundaryShape2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1006,0, ())


  def generate_wrapper(self):
    return CPPWorldBoundaryShape2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WorldBoundaryShape2D.__new__(WorldBoundaryShape2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WorldBoundaryShape2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WorldBoundaryShape2D.construct_without_init()
    cls._ptr = CPPWorldBoundaryShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WorldBoundaryShape2D.construct_without_init()
    cls._ptr = CPPWorldBoundaryShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def normal(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_normal()
    return _ret
  @normal.setter
  def normal(self,  value:'Vector2'):
    self.set_normal(value)
  @property
  def distance(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_distance()
    return _ret
  @distance.setter
  def distance(self,  value:'float'):
    self.set_distance(value)
  @functools.native_method
  def set_normal(self, normal:'Vector2'   ) -> None:
    r''''''

    assert(not normal is None)
    assert isinstance(normal, Vector2), 'normal must be Vector2'

    self.py__normal = normal






    self._ptr.call_with_return(85,tuple([normal._ptr]))

  @functools.native_method
  def get_normal(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_distance(self, distance:'float'   ) -> None:
    r''''''

    assert isinstance(distance, (int, float)), 'distance must be int or float'

    self.py__distance = distance






    self._ptr.call_with_return(87,tuple([distance]))

  @functools.native_method
  def get_distance(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret



register_cast_function('WorldBoundaryShape2D', WorldBoundaryShape2D.cast)
register_class('WorldBoundaryShape2D', WorldBoundaryShape2D)
