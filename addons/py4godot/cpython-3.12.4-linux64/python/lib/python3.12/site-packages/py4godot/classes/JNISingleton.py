# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPJNISingletonWrapper


class JNISingleton(py4godot_object.Object):
  r'''
		The JNISingleton is implemented only in the Android export. It's used to call methods and connect signals from an Android plugin written in Java or Kotlin. Methods and signals can be called and connected to the JNISingleton as if it is a Node. See `url=https://en.wikipedia.org/wiki/Java_Native_Interface`Java Native Interface - Wikipedia`/url` for more information.
	'''

  @staticmethod
  def constructor():
    class_ = JNISingleton.construct_without_init()
    class_._ptr = constructor(434,0, ())
    return class_
  @staticmethod
  def new():
    class_ = JNISingleton.construct_without_init()
    class_._ptr = constructor(434,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPJNISingletonWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(434,0, ())


  def generate_wrapper(self):
    return CPPJNISingletonWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = JNISingleton.__new__(JNISingleton)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'JNISingleton'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = JNISingleton.construct_without_init()
    cls._ptr = CPPJNISingletonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = JNISingleton.construct_without_init()
    cls._ptr = CPPJNISingletonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('JNISingleton', JNISingleton.cast)
register_class('JNISingleton', JNISingleton)
