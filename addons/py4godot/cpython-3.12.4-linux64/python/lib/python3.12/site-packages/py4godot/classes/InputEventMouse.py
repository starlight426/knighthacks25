# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.InputEventWithModifiers as py4godot_inputeventwithmodifiers 
from py4godot.wrappers.wrappers import CPPInputEventMouseWrapper


class InputEventMouse(py4godot_inputeventwithmodifiers.InputEventWithModifiers):
  r'''
		Stores general information about mouse events.
	'''

  @staticmethod
  def constructor():
    class_ = InputEventMouse.construct_without_init()
    class_._ptr = constructor(422,0, ())
    return class_
  @staticmethod
  def new():
    class_ = InputEventMouse.construct_without_init()
    class_._ptr = constructor(422,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPInputEventMouseWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(422,0, ())


  def generate_wrapper(self):
    return CPPInputEventMouseWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = InputEventMouse.__new__(InputEventMouse)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'InputEventMouse'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventMouse.construct_without_init()
    cls._ptr = CPPInputEventMouseWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventMouse.construct_without_init()
    cls._ptr = CPPInputEventMouseWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def button_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_button_mask()
    return _ret
  @button_mask.setter
  def button_mask(self,  value:'int'):
    self.set_button_mask(value)
  @property
  def position(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_position()
    return _ret
  @position.setter
  def position(self,  value:'Vector2'):
    self.set_position(value)
  @property
  def global_position(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_global_position()
    return _ret
  @global_position.setter
  def global_position(self,  value:'Vector2'):
    self.set_global_position(value)
  @functools.native_method
  def set_button_mask(self, button_mask:'int'   ) -> None:
    r''''''

    assert isinstance(button_mask, get_class('bitfield::MouseButtonMask')), 'button_mask must be bitfield::MouseButtonMask'

    self.py__button_mask = button_mask






    self._ptr.call_with_return(106,tuple([button_mask]))

  @functools.native_method
  def get_button_mask(self) -> typing.Union[int]:
    r''''''




    _ret
    _ret = self._ptr.call_with_return(107,tuple([]))

    return _ret


  @functools.native_method
  def set_position(self, position:'Vector2'   ) -> None:
    r''''''

    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'

    self.py__position = position






    self._ptr.call_with_return(108,tuple([position._ptr]))

  @functools.native_method
  def get_position(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(109,tuple([]))

    return _ret


  @functools.native_method
  def set_global_position(self, global_position:'Vector2'   ) -> None:
    r''''''

    assert(not global_position is None)
    assert isinstance(global_position, Vector2), 'global_position must be Vector2'

    self.py__global_position = global_position






    self._ptr.call_with_return(110,tuple([global_position._ptr]))

  @functools.native_method
  def get_global_position(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(111,tuple([]))

    return _ret



register_cast_function('InputEventMouse', InputEventMouse.cast)
register_class('InputEventMouse', InputEventMouse)
