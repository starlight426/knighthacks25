# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioStreamPlayback as py4godot_audiostreamplayback 
from py4godot.wrappers.wrappers import CPPAudioStreamPlaybackInteractiveWrapper


class AudioStreamPlaybackInteractive(py4godot_audiostreamplayback.AudioStreamPlayback):
  r''''''

  @staticmethod
  def constructor():
    class_ = AudioStreamPlaybackInteractive.construct_without_init()
    class_._ptr = constructor(148,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamPlaybackInteractive.construct_without_init()
    class_._ptr = constructor(148,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamPlaybackInteractiveWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(148,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamPlaybackInteractiveWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamPlaybackInteractive.__new__(AudioStreamPlaybackInteractive)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamPlaybackInteractive'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamPlaybackInteractive.construct_without_init()
    cls._ptr = CPPAudioStreamPlaybackInteractiveWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamPlaybackInteractive.construct_without_init()
    cls._ptr = CPPAudioStreamPlaybackInteractiveWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def switch_to_clip_by_name(self, clip_name:'object'   ) -> None:
    r''''''

    assert(not clip_name is None)
    assert isinstance(clip_name, (str, StringName)), 'clip_name must be str or StringName'




    assert(isinstance(clip_name, (str, StringName)))
    py_stringname_clip_name = clip_name if isinstance(clip_name, StringName) else c_utils.py_string_to_string_name(clip_name)

    self._ptr.call_with_return(71,tuple([py_stringname_clip_name._ptr]))

  @functools.native_method
  def switch_to_clip(self, clip_index:'int'   ) -> None:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'






    self._ptr.call_with_return(72,tuple([clip_index]))

  @functools.native_method
  def get_current_clip_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([]))
    return _ret



register_cast_function('AudioStreamPlaybackInteractive', AudioStreamPlaybackInteractive.cast)
register_class('AudioStreamPlaybackInteractive', AudioStreamPlaybackInteractive)
