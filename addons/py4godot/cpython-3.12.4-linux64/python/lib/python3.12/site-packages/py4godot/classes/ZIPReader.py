# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPZIPReaderWrapper


class ZIPReader(py4godot_refcounted.RefCounted):
  r''''''

  @staticmethod
  def constructor():
    class_ = ZIPReader.construct_without_init()
    class_._ptr = constructor(1031,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ZIPReader.construct_without_init()
    class_._ptr = constructor(1031,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPZIPReaderWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1031,0, ())


  def generate_wrapper(self):
    return CPPZIPReaderWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ZIPReader.__new__(ZIPReader)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ZIPReader'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ZIPReader.construct_without_init()
    cls._ptr = CPPZIPReaderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ZIPReader.construct_without_init()
    cls._ptr = CPPZIPReaderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def open(self, path:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def close(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def get_files(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def read_file(self, path:'str'   , case_sensitive:'bool' =True  ) -> typing.Union['PackedByteArray']:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(case_sensitive, bool), 'case_sensitive must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([py_string_path._ptr, case_sensitive]))
    return _ret


  @functools.native_method
  def file_exists(self, path:'str'   , case_sensitive:'bool' =True  ) -> typing.Union[bool]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(case_sensitive, bool), 'case_sensitive must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([py_string_path._ptr, case_sensitive]))
    return _ret


  @functools.native_method
  def get_compression_level(self, path:'str'   , case_sensitive:'bool' =True  ) -> typing.Union[int]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(case_sensitive, bool), 'case_sensitive must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([py_string_path._ptr, case_sensitive]))
    return _ret



register_cast_function('ZIPReader', ZIPReader.cast)
register_class('ZIPReader', ZIPReader)
