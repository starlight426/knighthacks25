# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Control as py4godot_control 
from py4godot.wrappers.wrappers import CPPNinePatchRectWrapper

class AxisStretchMode:
  AXIS_STRETCH_MODE_STRETCH = 0
  AXIS_STRETCH_MODE_TILE = 1
  AXIS_STRETCH_MODE_TILE_FIT = 2


class NinePatchRect(py4godot_control.Control):
  r'''
		Also known as 9-slice panels, `NinePatchRect` produces clean panels of any size based on a small texture. To do so, it splits the texture in a 3Ã—3 grid. When you scale the node, it tiles the texture's edges horizontally or vertically, tiles the center on both axes, and leaves the corners unchanged.
	'''

  @staticmethod
  def constructor():
    class_ = NinePatchRect.construct_without_init()
    class_._ptr = constructor(513,0, ())
    return class_
  @staticmethod
  def new():
    class_ = NinePatchRect.construct_without_init()
    class_._ptr = constructor(513,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPNinePatchRectWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(513,0, ())


  def generate_wrapper(self):
    return CPPNinePatchRectWrapper()
  def init_signals(self):
    super().init_signals()
    texture_changed_name = utils.py_string_to_string_name("texture_changed")
    self.texture_changed = signals.BuiltinSignal(self, texture_changed_name)

  @staticmethod
  def construct_without_init():
    cls = NinePatchRect.__new__(NinePatchRect)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'NinePatchRect'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = NinePatchRect.construct_without_init()
    cls._ptr = CPPNinePatchRectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = NinePatchRect.construct_without_init()
    cls._ptr = CPPNinePatchRectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @property
  def draw_center(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_draw_center_enabled()
    return _ret
  @draw_center.setter
  def draw_center(self,  value:'bool'):
    self.set_draw_center(value)
  @property
  def region_rect(self) -> typing.Union['Rect2']:
    r''''''
    _ret = self. get_region_rect()
    return _ret
  @region_rect.setter
  def region_rect(self,  value:'Rect2'):
    self.set_region_rect(value)
  @property
  def patch_margin_left(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_patch_margin(0)
    return _ret
  @patch_margin_left.setter
  def patch_margin_left(self,  value:'int'):
    self.set_patch_margin(value)
  @property
  def patch_margin_top(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_patch_margin(1)
    return _ret
  @patch_margin_top.setter
  def patch_margin_top(self,  value:'int'):
    self.set_patch_margin(value)
  @property
  def patch_margin_right(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_patch_margin(2)
    return _ret
  @patch_margin_right.setter
  def patch_margin_right(self,  value:'int'):
    self.set_patch_margin(value)
  @property
  def patch_margin_bottom(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_patch_margin(3)
    return _ret
  @patch_margin_bottom.setter
  def patch_margin_bottom(self,  value:'int'):
    self.set_patch_margin(value)
  @property
  def axis_stretch_horizontal(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_h_axis_stretch_mode()
    return _ret
  @axis_stretch_horizontal.setter
  def axis_stretch_horizontal(self,  value:'int'):
    self.set_h_axis_stretch_mode(value)
  @property
  def axis_stretch_vertical(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_v_axis_stretch_mode()
    return _ret
  @axis_stretch_vertical.setter
  def axis_stretch_vertical(self,  value:'int'):
    self.set_v_axis_stretch_mode(value)
  @functools.native_method
  def set_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture = texture






    self._ptr.call_with_return(433,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(434,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_patch_margin(self, margin:'int'  , value:'int'   ) -> None:
    r'''
				Sets the size of the margin on the specified `enum Side` to `value` pixels.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__patch_margin_left = margin







    self._ptr.call_with_return(435,tuple([margin, value]))

  @functools.native_method
  def get_patch_margin(self, margin:'int'  ) -> typing.Union[int]:
    r'''
				Returns the size of the margin on the specified `enum Side`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(436,tuple([margin]))

    return _ret


  @functools.native_method
  def set_region_rect(self, rect:'Rect2'   ) -> None:
    r''''''

    assert(not rect is None)
    assert isinstance(rect, Rect2), 'rect must be Rect2'

    self.py__region_rect = rect






    self._ptr.call_with_return(437,tuple([rect._ptr]))

  @functools.native_method
  def get_region_rect(self) -> typing.Union['Rect2']:
    r''''''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(438,tuple([]))

    return _ret


  @functools.native_method
  def set_draw_center(self, draw_center:'bool'   ) -> None:
    r''''''

    assert isinstance(draw_center, bool), 'draw_center must be bool'

    self.py__draw_center = draw_center






    self._ptr.call_with_return(439,tuple([draw_center]))

  @functools.native_method
  def is_draw_center_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(440,tuple([]))

    return _ret


  @functools.native_method
  def set_h_axis_stretch_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__axis_stretch_horizontal = mode






    self._ptr.call_with_return(441,tuple([mode]))

  @functools.native_method
  def get_h_axis_stretch_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(442,tuple([]))

    return _ret


  @functools.native_method
  def set_v_axis_stretch_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__axis_stretch_vertical = mode






    self._ptr.call_with_return(443,tuple([mode]))

  @functools.native_method
  def get_v_axis_stretch_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(444,tuple([]))

    return _ret



register_cast_function('NinePatchRect', NinePatchRect.cast)
register_class('NinePatchRect', NinePatchRect)
