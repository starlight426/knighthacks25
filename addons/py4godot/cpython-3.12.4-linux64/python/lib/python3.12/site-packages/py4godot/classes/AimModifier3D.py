# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.XRHandModifier3D as py4godot_xrhandmodifier3d 
  import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
  import py4godot.classes.XRBodyModifier3D as py4godot_xrbodymodifier3d 
  import py4godot.classes.SkeletonIK3D as py4godot_skeletonik3d 
  import py4godot.classes.ConvertTransformModifier3D as py4godot_converttransformmodifier3d 
  import py4godot.classes.PhysicalBoneSimulator3D as py4godot_physicalbonesimulator3d 
  import py4godot.classes.ModifierBoneTarget3D as py4godot_modifierbonetarget3d 
  import py4godot.classes.CopyTransformModifier3D as py4godot_copytransformmodifier3d 
  import py4godot.classes.LookAtModifier3D as py4godot_lookatmodifier3d 
  import py4godot.classes.SpringBoneSimulator3D as py4godot_springbonesimulator3d 
  import py4godot.classes.RetargetModifier3D as py4godot_retargetmodifier3d 
import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
from py4godot.wrappers.wrappers import CPPAimModifier3DWrapper


class AimModifier3D(py4godot_boneconstraint3d.BoneConstraint3D):
  r'''
		This is a simple version of `LookAtModifier3D` that only allows bone to the reference without advanced options such as angle limitation or time-based interpolation.
		The feature is simplified, but instead it is implemented with smooth tracking without euler, see `set_use_euler`.
	'''

  @staticmethod
  def constructor():
    class_ = AimModifier3D.construct_without_init()
    class_._ptr = constructor(66,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AimModifier3D.construct_without_init()
    class_._ptr = constructor(66,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAimModifier3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(66,0, ())


  def generate_wrapper(self):
    return CPPAimModifier3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AimModifier3D.__new__(AimModifier3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AimModifier3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AimModifier3D.construct_without_init()
    cls._ptr = CPPAimModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AimModifier3D.construct_without_init()
    cls._ptr = CPPAimModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def setting_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_setting_count()
    return _ret
  @setting_count.setter
  def setting_count(self,  value:'int'):
    self.set_setting_count(value)
  @functools.native_method
  def set_forward_axis(self, index:'int'   , axis:'int'  ) -> None:
    r'''
				Sets the forward axis of the bone.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(axis, (int, float)), 'axis must be int or float'







    self._ptr.call_with_return(273,tuple([index, axis]))

  @functools.native_method
  def get_forward_axis(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the forward axis of the bone.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(274,tuple([index]))
    return _ret


  @functools.native_method
  def set_use_euler(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, it provides rotation with using euler.
				If sets `enabled` to `false`, it provides rotation with using rotation by arc generated from the forward axis vector and the vector toward the reference.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(275,tuple([index, enabled]))

  @functools.native_method
  def is_using_euler(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if it provides rotation with using euler.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(276,tuple([index]))
    return _ret


  @functools.native_method
  def set_primary_rotation_axis(self, index:'int'   , axis:'int'  ) -> None:
    r'''
				Sets the axis of the first rotation. It is enabled only if `is_using_euler` is `true`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(axis, (int, float)), 'axis must be int or float'







    self._ptr.call_with_return(277,tuple([index, axis]))

  @functools.native_method
  def get_primary_rotation_axis(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the axis of the first rotation. It is enabled only if `is_using_euler` is `true`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(278,tuple([index]))
    return _ret


  @functools.native_method
  def set_use_secondary_rotation(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, it provides rotation by two axes. It is enabled only if `is_using_euler` is `true`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(279,tuple([index, enabled]))

  @functools.native_method
  def is_using_secondary_rotation(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if it provides rotation by two axes. It is enabled only if `is_using_euler` is `true`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(280,tuple([index]))
    return _ret



register_cast_function('AimModifier3D', AimModifier3D.cast)
register_class('AimModifier3D', AimModifier3D)
