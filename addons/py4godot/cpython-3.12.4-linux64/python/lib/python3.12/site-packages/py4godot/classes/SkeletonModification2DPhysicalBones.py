# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
import py4godot.classes.SkeletonModification2D as py4godot_skeletonmodification2d 
import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
from py4godot.wrappers.wrappers import CPPSkeletonModification2DPhysicalBonesWrapper


class SkeletonModification2DPhysicalBones(py4godot_skeletonmodification2d.SkeletonModification2D):
  r'''
		This modification takes the transforms of `PhysicalBone2D` nodes and applies them to `Bone2D` nodes. This allows the `Bone2D` nodes to react to physics thanks to the linked `PhysicalBone2D` nodes.
	'''

  @staticmethod
  def constructor():
    class_ = SkeletonModification2DPhysicalBones.construct_without_init()
    class_._ptr = constructor(754,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SkeletonModification2DPhysicalBones.construct_without_init()
    class_._ptr = constructor(754,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkeletonModification2DPhysicalBonesWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(754,0, ())


  def generate_wrapper(self):
    return CPPSkeletonModification2DPhysicalBonesWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SkeletonModification2DPhysicalBones.__new__(SkeletonModification2DPhysicalBones)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SkeletonModification2DPhysicalBones'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonModification2DPhysicalBones.construct_without_init()
    cls._ptr = CPPSkeletonModification2DPhysicalBonesWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonModification2DPhysicalBones.construct_without_init()
    cls._ptr = CPPSkeletonModification2DPhysicalBonesWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def physical_bone_chain_length(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_physical_bone_chain_length()
    return _ret
  @physical_bone_chain_length.setter
  def physical_bone_chain_length(self,  value:'int'):
    self.set_physical_bone_chain_length(value)
  @functools.native_method
  def set_physical_bone_chain_length(self, length:'int'   ) -> None:
    r''''''

    assert isinstance(length, (int, float)), 'length must be int or float'

    self.py__physical_bone_chain_length = length






    self._ptr.call_with_return(90,tuple([length]))

  @functools.native_method
  def get_physical_bone_chain_length(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([]))

    return _ret


  @functools.native_method
  def set_physical_bone_node(self, joint_idx:'int'   , physicalbone2d_node:'object'   ) -> None:
    r'''
				Sets the `PhysicalBone2D` node at `joint_idx`.
				**Note:** This is just the index used for this modification, not the bone index used in the `Skeleton2D`.
			'''

    assert isinstance(joint_idx, (int, float)), 'joint_idx must be int or float'
    assert(not physicalbone2d_node is None)
    assert isinstance(physicalbone2d_node, (str, NodePath)), 'physicalbone2d_node must be str or NodePath'





    assert(isinstance(physicalbone2d_node, (str, NodePath)))
    py_nodepath_physicalbone2d_node = physicalbone2d_node if isinstance(physicalbone2d_node,NodePath) else NodePath.new2(physicalbone2d_node)

    self._ptr.call_with_return(92,tuple([joint_idx, py_nodepath_physicalbone2d_node._ptr]))

  @functools.native_method
  def get_physical_bone_node(self, joint_idx:'int'   ) -> typing.Union['NodePath']:
    r'''
				Returns the `PhysicalBone2D` node at `joint_idx`.
			'''

    assert isinstance(joint_idx, (int, float)), 'joint_idx must be int or float'






    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(93,tuple([joint_idx]))
    return _ret


  @functools.native_method
  def fetch_physical_bones(self) -> None:
    r'''
				Empties the list of `PhysicalBone2D` nodes and populates it with all `PhysicalBone2D` nodes that are children of the `Skeleton2D`.
			'''




    self._ptr.call_with_return(94,tuple([]))

  @functools.native_method
  def start_simulation(self, bones:'py4godot_stringnametypedarray.StringNameTypedArray' = None  ) -> None:
    r'''
				Tell the `PhysicalBone2D` nodes to start simulating and interacting with the physics world.
				Optionally, an array of bone names can be passed to this function, and that will cause only `PhysicalBone2D` nodes with those names to start simulating.
			'''



    assert isinstance(bones, get_class('StringNameTypedArray')), 'bones must be StringNameTypedArray'






    self._ptr.call_with_return(95,tuple([bones._ptr]))

  @functools.native_method
  def stop_simulation(self, bones:'py4godot_stringnametypedarray.StringNameTypedArray' = None  ) -> None:
    r'''
				Tell the `PhysicalBone2D` nodes to stop simulating and interacting with the physics world.
				Optionally, an array of bone names can be passed to this function, and that will cause only `PhysicalBone2D` nodes with those names to stop simulating.
			'''



    assert isinstance(bones, get_class('StringNameTypedArray')), 'bones must be StringNameTypedArray'






    self._ptr.call_with_return(96,tuple([bones._ptr]))


register_cast_function('SkeletonModification2DPhysicalBones', SkeletonModification2DPhysicalBones.cast)
register_class('SkeletonModification2DPhysicalBones', SkeletonModification2DPhysicalBones)
