# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImmediateMesh as py4godot_immediatemesh 
  import py4godot.classes.Mesh as py4godot_mesh 
  import py4godot.classes.CapsuleMesh as py4godot_capsulemesh 
  import py4godot.classes.ArrayMesh as py4godot_arraymesh 
  import py4godot.classes.PointMesh as py4godot_pointmesh 
  import py4godot.classes.RibbonTrailMesh as py4godot_ribbontrailmesh 
  import py4godot.classes.PlaceholderMesh as py4godot_placeholdermesh 
  import py4godot.classes.BoxMesh as py4godot_boxmesh 
  import py4godot.classes.CylinderMesh as py4godot_cylindermesh 
  import py4godot.classes.PlaneMesh as py4godot_planemesh 
  import py4godot.classes.TubeTrailMesh as py4godot_tubetrailmesh 
  import py4godot.classes.TextMesh as py4godot_textmesh 
  import py4godot.classes.TorusMesh as py4godot_torusmesh 
  import py4godot.classes.SphereMesh as py4godot_spheremesh 
  import py4godot.classes.PrimitiveMesh as py4godot_primitivemesh 
  import py4godot.classes.QuadMesh as py4godot_quadmesh 
  import py4godot.classes.PrismMesh as py4godot_prismmesh 
import py4godot.classes.VisualShaderNodeParticleEmitter as py4godot_visualshadernodeparticleemitter 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeParticleMeshEmitterWrapper


class VisualShaderNodeParticleMeshEmitter(py4godot_visualshadernodeparticleemitter.VisualShaderNodeParticleEmitter):
  r'''
		`VisualShaderNodeParticleEmitter` that makes the particles emitted in a shape of the assigned `mesh`. It will emit from the mesh's surfaces, either all or only the specified one.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeParticleMeshEmitter.construct_without_init()
    class_._ptr = constructor(930,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeParticleMeshEmitter.construct_without_init()
    class_._ptr = constructor(930,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeParticleMeshEmitterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(930,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeParticleMeshEmitterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeParticleMeshEmitter.__new__(VisualShaderNodeParticleMeshEmitter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeParticleMeshEmitter'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeParticleMeshEmitter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeParticleMeshEmitterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeParticleMeshEmitter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeParticleMeshEmitterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def mesh(self) -> typing.Any:
    r''''''
    _ret = self. get_mesh()
    return _ret
  @mesh.setter
  def mesh(self,  value:'py4godot_object.Object'):
    self.set_mesh(value)
  @property
  def use_all_surfaces(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_use_all_surfaces()
    return _ret
  @use_all_surfaces.setter
  def use_all_surfaces(self,  value:'bool'):
    self.set_use_all_surfaces(value)
  @property
  def surface_index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_surface_index()
    return _ret
  @surface_index.setter
  def surface_index(self,  value:'int'):
    self.set_surface_index(value)
  @functools.native_method
  def set_mesh(self, mesh:'py4godot_mesh.Mesh'   ) -> None:
    r''''''

    assert(not mesh is None)
    assert isinstance(mesh, get_class('Mesh')), 'mesh must be Mesh'

    self.py__mesh = mesh






    self._ptr.call_with_return(90,tuple([mesh._ptr]))

  @functools.native_method
  def get_mesh(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Mesh
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_use_all_surfaces(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__use_all_surfaces = enabled






    self._ptr.call_with_return(92,tuple([enabled]))

  @functools.native_method
  def is_use_all_surfaces(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_surface_index(self, surface_index:'int'   ) -> None:
    r''''''

    assert isinstance(surface_index, (int, float)), 'surface_index must be int or float'

    self.py__surface_index = surface_index






    self._ptr.call_with_return(94,tuple([surface_index]))

  @functools.native_method
  def get_surface_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeParticleMeshEmitter', VisualShaderNodeParticleMeshEmitter.cast)
register_class('VisualShaderNodeParticleMeshEmitter', VisualShaderNodeParticleMeshEmitter)
