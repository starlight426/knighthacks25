# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.StreamPeer as py4godot_streampeer 
from py4godot.wrappers.wrappers import CPPStreamPeerTCPWrapper

class Status:
  STATUS_NONE = 0
  STATUS_CONNECTING = 1
  STATUS_CONNECTED = 2
  STATUS_ERROR = 3


class StreamPeerTCP(py4godot_streampeer.StreamPeer):
  r'''
		A stream peer that handles TCP connections. This object can be used to connect to TCP servers, or also is returned by a TCP server.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	'''

  @staticmethod
  def constructor():
    class_ = StreamPeerTCP.construct_without_init()
    class_._ptr = constructor(791,0, ())
    return class_
  @staticmethod
  def new():
    class_ = StreamPeerTCP.construct_without_init()
    class_._ptr = constructor(791,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPStreamPeerTCPWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(791,0, ())


  def generate_wrapper(self):
    return CPPStreamPeerTCPWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = StreamPeerTCP.__new__(StreamPeerTCP)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'StreamPeerTCP'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = StreamPeerTCP.construct_without_init()
    cls._ptr = CPPStreamPeerTCPWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = StreamPeerTCP.construct_without_init()
    cls._ptr = CPPStreamPeerTCPWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def bind(self, port:'int'   , host:'str' ="*"  ) -> typing.Union[int]:
    r'''
				Opens the TCP socket, and binds it to the specified local address.
				This method is generally not needed, and only used to force the subsequent call to `connect_to_host` to use the specified `host` and `port` as source address. This can be desired in some NAT punchthrough techniques, or when forcing the source network interface.
			'''
    if host is None:
      host = String.new0()
    if host is None:
      host = String.new0()

    assert isinstance(port, (int, float)), 'port must be int or float'





    assert(isinstance(host, (str, String)))
    py_string_host = host if isinstance(host, StringName) else c_utils.py_string_to_string(host)

    _ret:int
    _ret = self._ptr.call_with_return(88,tuple([port, py_string_host._ptr]))
    return _ret


  @functools.native_method
  def connect_to_host(self, host:'str'   , port:'int'   ) -> typing.Union[int]:
    r'''
				Connects to the specified `host:port` pair. A hostname will be resolved if valid. Returns `constant OK` on success.
			'''

    assert(not host is None)
    assert isinstance(host, (str, String)), 'host must be str or String'
    assert isinstance(port, (int, float)), 'port must be int or float'




    assert(isinstance(host, (str, String)))
    py_string_host = host if isinstance(host, StringName) else c_utils.py_string_to_string(host)


    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([py_string_host._ptr, port]))
    return _ret


  @functools.native_method
  def poll(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(90,tuple([]))
    return _ret


  @functools.native_method
  def get_status(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(91,tuple([]))
    return _ret


  @functools.native_method
  def get_connected_host(self) -> typing.Union[str]:
    r'''
				Returns the IP of this peer.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(92,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_connected_port(self) -> typing.Union[int]:
    r'''
				Returns the port of this peer.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))
    return _ret


  @functools.native_method
  def get_local_port(self) -> typing.Union[int]:
    r'''
				Returns the local port to which this peer is bound.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))
    return _ret


  @functools.native_method
  def disconnect_from_host(self) -> None:
    r''''''




    self._ptr.call_with_return(95,tuple([]))

  @functools.native_method
  def set_no_delay(self, enabled:'bool'   ) -> None:
    r'''
				If `enabled` is `true`, packets will be sent immediately. If `enabled` is `false` (the default), packet transfers will be delayed and combined using `url=https://en.wikipedia.org/wiki/Nagle%27s_algorithm`Nagle's algorithm`/url`.
				**Note:** It's recommended to leave this disabled for applications that send large packets or need to transfer a lot of data, as enabling this can decrease the total available bandwidth.
			'''

    assert isinstance(enabled, bool), 'enabled must be bool'






    self._ptr.call_with_return(96,tuple([enabled]))


register_cast_function('StreamPeerTCP', StreamPeerTCP.cast)
register_class('StreamPeerTCP', StreamPeerTCP)
