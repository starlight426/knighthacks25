# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CharFXTransform as py4godot_charfxtransform 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPRichTextEffectWrapper


class RichTextEffect(py4godot_resource.Resource):
  r'''
		A custom effect for a `RichTextLabel`, which can be loaded in the `RichTextLabel` inspector or using `RichTextLabel.install_effect`.
		**Note:** For a `RichTextEffect` to be usable, a BBCode tag must be defined as a member variable called `bbcode` in the script.
		
		`gdscript skip-lint`
		# The RichTextEffect will be usable like this: ``example`Some text`/example``
		var bbcode = "example"
		```
		`csharp skip-lint`
		// The RichTextEffect will be usable like this: ``example`Some text`/example``
		string bbcode = "example";
		`/csharp`
		
		**Note:** As soon as a `RichTextLabel` contains at least one `RichTextEffect`, it will continuously process the effect unless the project is paused. This may impact battery life negatively.
	'''

  @staticmethod
  def constructor():
    class_ = RichTextEffect.construct_without_init()
    class_._ptr = constructor(711,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RichTextEffect.construct_without_init()
    class_._ptr = constructor(711,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRichTextEffectWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(711,0, ())


  def generate_wrapper(self):
    return CPPRichTextEffectWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RichTextEffect.__new__(RichTextEffect)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RichTextEffect'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RichTextEffect.construct_without_init()
    cls._ptr = CPPRichTextEffectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RichTextEffect.construct_without_init()
    cls._ptr = CPPRichTextEffectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _process_custom_fx(self, char_fx:'py4godot_charfxtransform.CharFXTransform'   ) -> typing.Union[bool]:
    r'''
				Override this method to modify properties in `char_fx`. The method must return `true` if the character could be transformed successfully. If the method returns `false`, it will skip transformation to avoid displaying broken text.
			'''

    assert(not char_fx is None)
    assert isinstance(char_fx, get_class('CharFXTransform')), 'char_fx must be CharFXTransform'






    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([char_fx._ptr]))
    return _ret



register_cast_function('RichTextEffect', RichTextEffect.cast)
register_class('RichTextEffect', RichTextEffect)
