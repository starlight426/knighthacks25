# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPSkeletonModifier3DWrapper

class BoneAxis:
  BONE_AXIS_PLUS_X = 0
  BONE_AXIS_MINUS_X = 1
  BONE_AXIS_PLUS_Y = 2
  BONE_AXIS_MINUS_Y = 3
  BONE_AXIS_PLUS_Z = 4
  BONE_AXIS_MINUS_Z = 5


class SkeletonModifier3D(py4godot_node3d.Node3D):
  r'''
		`SkeletonModifier3D` retrieves a target `Skeleton3D` by having a `Skeleton3D` parent.
		If there is an `AnimationMixer`, a modification always performs after playback process of the `AnimationMixer`.
		This node should be used to implement custom IK solvers, constraints, or skeleton physics.
	'''

  @staticmethod
  def constructor():
    class_ = SkeletonModifier3D.construct_without_init()
    class_._ptr = constructor(758,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SkeletonModifier3D.construct_without_init()
    class_._ptr = constructor(758,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkeletonModifier3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(758,0, ())


  def generate_wrapper(self):
    return CPPSkeletonModifier3DWrapper()
  def init_signals(self):
    super().init_signals()
    modification_processed_name = utils.py_string_to_string_name("modification_processed")
    self.modification_processed = signals.BuiltinSignal(self, modification_processed_name)

  @staticmethod
  def construct_without_init():
    cls = SkeletonModifier3D.__new__(SkeletonModifier3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SkeletonModifier3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonModifier3D.construct_without_init()
    cls._ptr = CPPSkeletonModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonModifier3D.construct_without_init()
    cls._ptr = CPPSkeletonModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def active(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_active()
    return _ret
  @active.setter
  def active(self,  value:'bool'):
    self.set_active(value)
  @property
  def influence(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_influence()
    return _ret
  @influence.setter
  def influence(self,  value:'float'):
    self.set_influence(value)
  @functools.native_method
  def _process_modification_with_delta(self, delta:'float'   ) -> None:
    r'''
				Override this virtual method to implement a custom skeleton modifier. You should do things like get the `Skeleton3D`'s current pose and apply the pose here.
				`_process_modification_with_delta` must not apply `influence` to bone poses because the `Skeleton3D` automatically applies influence to all bone poses set by the modifier.
				`delta` is passed from parent `Skeleton3D`. See also `Skeleton3D.advance`.
			'''

    assert isinstance(delta, (int, float)), 'delta must be int or float'






    self._ptr.call_with_return(251,tuple([delta]))

  @functools.native_method
  def _process_modification(self) -> None:
    r'''
				Override this virtual method to implement a custom skeleton modifier. You should do things like get the `Skeleton3D`'s current pose and apply the pose here.
				`_process_modification` must not apply `influence` to bone poses because the `Skeleton3D` automatically applies influence to all bone poses set by the modifier.
			'''




    self._ptr.call_with_return(252,tuple([]))

  @functools.native_method
  def _skeleton_changed(self, old_skeleton:'py4godot_skeleton3d.Skeleton3D'   , new_skeleton:'py4godot_skeleton3d.Skeleton3D'   ) -> None:
    r'''
				Called when the skeleton is changed.
			'''

    assert(not old_skeleton is None)
    assert isinstance(old_skeleton, get_class('Skeleton3D')), 'old_skeleton must be Skeleton3D'
    assert(not new_skeleton is None)
    assert isinstance(new_skeleton, get_class('Skeleton3D')), 'new_skeleton must be Skeleton3D'







    self._ptr.call_with_return(253,tuple([old_skeleton._ptr, new_skeleton._ptr]))

  @functools.native_method
  def _validate_bone_names(self) -> None:
    r'''
				Called when bone name and index need to be validated such as the timing of the entering tree or changing skeleton.
			'''




    self._ptr.call_with_return(254,tuple([]))

  @functools.native_method
  def get_skeleton(self) -> typing.Union['py4godot_skeleton3d.Skeleton3D']:
    r'''
				Get parent `Skeleton3D` node if found.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Skeleton3D
    _ret._ptr = self._ptr.call_with_return(255,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_active(self, active:'bool'   ) -> None:
    r''''''

    assert isinstance(active, bool), 'active must be bool'

    self.py__active = active






    self._ptr.call_with_return(256,tuple([active]))

  @functools.native_method
  def is_active(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(257,tuple([]))

    return _ret


  @functools.native_method
  def set_influence(self, influence:'float'   ) -> None:
    r''''''

    assert isinstance(influence, (int, float)), 'influence must be int or float'

    self.py__influence = influence






    self._ptr.call_with_return(258,tuple([influence]))

  @functools.native_method
  def get_influence(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(259,tuple([]))

    return _ret



register_cast_function('SkeletonModifier3D', SkeletonModifier3D.cast)
register_class('SkeletonModifier3D', SkeletonModifier3D)
