# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Shape2D as py4godot_shape2d 
from py4godot.wrappers.wrappers import CPPConvexPolygonShape2DWrapper


class ConvexPolygonShape2D(py4godot_shape2d.Shape2D):
  r'''
		A 2D convex polygon shape, intended for use in physics. Used internally in `CollisionPolygon2D` when it's in `constant CollisionPolygon2D.BUILD_SOLIDS` mode.
		`ConvexPolygonShape2D` is _solid_, which means it detects collisions from objects that are fully inside it, unlike `ConcavePolygonShape2D` which is hollow. This makes it more suitable for both detection and physics.
		**Convex decomposition:** A concave polygon can be split up into several convex polygons. This allows dynamic physics bodies to have complex concave collisions (at a performance cost) and can be achieved by using several `ConvexPolygonShape2D` nodes or by using the `CollisionPolygon2D` node in `constant CollisionPolygon2D.BUILD_SOLIDS` mode. To generate a collision polygon from a sprite, select the `Sprite2D` node, go to the **Sprite2D** menu that appears above the viewport, and choose **Create Polygon2D Sibling**.
		**Performance:** `ConvexPolygonShape2D` is faster to check collisions against compared to `ConcavePolygonShape2D`, but it is slower than primitive collision shapes such as `CircleShape2D` and `RectangleShape2D`. Its use should generally be limited to medium-sized objects that cannot have their collision accurately represented by primitive shapes.
	'''

  @staticmethod
  def constructor():
    class_ = ConvexPolygonShape2D.construct_without_init()
    class_._ptr = constructor(241,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ConvexPolygonShape2D.construct_without_init()
    class_._ptr = constructor(241,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPConvexPolygonShape2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(241,0, ())


  def generate_wrapper(self):
    return CPPConvexPolygonShape2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ConvexPolygonShape2D.__new__(ConvexPolygonShape2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ConvexPolygonShape2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConvexPolygonShape2D.construct_without_init()
    cls._ptr = CPPConvexPolygonShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConvexPolygonShape2D.construct_without_init()
    cls._ptr = CPPConvexPolygonShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def points(self) -> typing.Union['PackedVector2Array']:
    r''''''
    _ret = self. get_points()
    return _ret
  @points.setter
  def points(self,  value:'PackedVector2Array'):
    self.set_points(value)
  @functools.native_method
  def set_point_cloud(self, point_cloud:'PackedVector2Array'   ) -> None:
    r'''
				Based on the set of points provided, this assigns the `points` property using the convex hull algorithm, removing all unneeded points. See `Geometry2D.convex_hull` for details.
			'''

    assert(not point_cloud is None)
    assert isinstance(point_cloud, PackedVector2Array), 'point_cloud must be PackedVector2Array'






    self._ptr.call_with_return(85,tuple([point_cloud._ptr]))

  @functools.native_method
  def set_points(self, points:'PackedVector2Array'   ) -> None:
    r''''''

    assert(not points is None)
    assert isinstance(points, PackedVector2Array), 'points must be PackedVector2Array'

    self.py__points = points






    self._ptr.call_with_return(86,tuple([points._ptr]))

  @functools.native_method
  def get_points(self) -> typing.Union['PackedVector2Array']:
    r''''''




    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(87,tuple([]))

    return _ret



register_cast_function('ConvexPolygonShape2D', ConvexPolygonShape2D.cast)
register_class('ConvexPolygonShape2D', ConvexPolygonShape2D)
