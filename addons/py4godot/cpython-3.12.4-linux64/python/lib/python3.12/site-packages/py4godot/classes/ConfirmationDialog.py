# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
import py4godot.classes.AcceptDialog as py4godot_acceptdialog 
from py4godot.wrappers.wrappers import CPPConfirmationDialogWrapper


class ConfirmationDialog(py4godot_acceptdialog.AcceptDialog):
  r'''
		A dialog used for confirmation of actions. This window is similar to `AcceptDialog`, but pressing its Cancel button can have a different outcome from pressing the OK button. The order of the two buttons varies depending on the host OS.
		To get cancel action, you can use:
		
		```gdscript
		get_cancel_button().pressed.connect(_on_canceled)
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = ConfirmationDialog.construct_without_init()
    class_._ptr = constructor(237,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ConfirmationDialog.construct_without_init()
    class_._ptr = constructor(237,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPConfirmationDialogWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(237,0, ())


  def generate_wrapper(self):
    return CPPConfirmationDialogWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ConfirmationDialog.__new__(ConfirmationDialog)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ConfirmationDialog'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConfirmationDialog.construct_without_init()
    cls._ptr = CPPConfirmationDialogWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConfirmationDialog.construct_without_init()
    cls._ptr = CPPConfirmationDialogWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def cancel_button_text(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_cancel_button_text()
    return _ret
  @cancel_button_text.setter
  def cancel_button_text(self,  value:'str'):
    self.set_cancel_button_text(value)
  @functools.native_method
  def get_cancel_button(self) -> typing.Any:
    r'''
				Returns the cancel button.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `CanvasItem.visible` property.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Button
    _ret._ptr = self._ptr.call_with_return(450,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_cancel_button_text(self, text:'str'   ) -> None:
    r''''''

    assert(not text is None)
    assert isinstance(text, (str, String)), 'text must be str or String'

    self.py__cancel_button_text = text



    assert(isinstance(text, (str, String)))
    py_string_text = text if isinstance(text, StringName) else c_utils.py_string_to_string(text)

    py__string_text = utils.py_string_to_string(text)
    py__string_text.shouldBeDeleted = False


    self._ptr.call_with_return(451,tuple([py__string_text._ptr]))

  @functools.native_method
  def get_cancel_button_text(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(452,tuple([]))

    return utils.gd_string_to_py_string(_ret)



register_cast_function('ConfirmationDialog', ConfirmationDialog.cast)
register_class('ConfirmationDialog', ConfirmationDialog)
