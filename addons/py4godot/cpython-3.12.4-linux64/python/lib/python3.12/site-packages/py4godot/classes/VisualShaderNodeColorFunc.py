# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeColorFuncWrapper

class Function:
  FUNC_GRAYSCALE = 0
  FUNC_HSV2RGB = 1
  FUNC_RGB2HSV = 2
  FUNC_SEPIA = 3
  FUNC_LINEAR_TO_SRGB = 4
  FUNC_SRGB_TO_LINEAR = 5
  FUNC_MAX = 6


class VisualShaderNodeColorFunc(py4godot_visualshadernode.VisualShaderNode):
  r'''
		Accept a `Color` to the input port and transform it according to `function`.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeColorFunc.construct_without_init()
    class_._ptr = constructor(886,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeColorFunc.construct_without_init()
    class_._ptr = constructor(886,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeColorFuncWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(886,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeColorFuncWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeColorFunc.__new__(VisualShaderNodeColorFunc)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeColorFunc'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeColorFunc.construct_without_init()
    cls._ptr = CPPVisualShaderNodeColorFuncWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeColorFunc.construct_without_init()
    cls._ptr = CPPVisualShaderNodeColorFuncWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def function(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_function()
    return _ret
  @function.setter
  def function(self,  value:'int'):
    self.set_function(value)
  @functools.native_method
  def set_function(self, func:'int'  ) -> None:
    r''''''

    assert isinstance(func, (int, float)), 'func must be int or float'

    self.py__function = func






    self._ptr.call_with_return(88,tuple([func]))

  @functools.native_method
  def get_function(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeColorFunc', VisualShaderNodeColorFunc.cast)
register_class('VisualShaderNodeColorFunc', VisualShaderNodeColorFunc)
