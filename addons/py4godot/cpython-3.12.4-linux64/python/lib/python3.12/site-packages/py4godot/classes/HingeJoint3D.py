# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Joint3D as py4godot_joint3d 
from py4godot.wrappers.wrappers import CPPHingeJoint3DWrapper

class Param:
  PARAM_BIAS = 0
  PARAM_LIMIT_UPPER = 1
  PARAM_LIMIT_LOWER = 2
  PARAM_LIMIT_BIAS = 3
  PARAM_LIMIT_SOFTNESS = 4
  PARAM_LIMIT_RELAXATION = 5
  PARAM_MOTOR_TARGET_VELOCITY = 6
  PARAM_MOTOR_MAX_IMPULSE = 7
  PARAM_MAX = 8
class Flag:
  FLAG_USE_LIMIT = 0
  FLAG_ENABLE_MOTOR = 1
  FLAG_MAX = 2


class HingeJoint3D(py4godot_joint3d.Joint3D):
  r'''
		A physics joint that restricts the rotation of a 3D physics body around an axis relative to another physics body. For example, Body A can be a `StaticBody3D` representing a door hinge that a `RigidBody3D` rotates around.
	'''

  @staticmethod
  def constructor():
    class_ = HingeJoint3D.construct_without_init()
    class_._ptr = constructor(401,0, ())
    return class_
  @staticmethod
  def new():
    class_ = HingeJoint3D.construct_without_init()
    class_._ptr = constructor(401,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPHingeJoint3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(401,0, ())


  def generate_wrapper(self):
    return CPPHingeJoint3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = HingeJoint3D.__new__(HingeJoint3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'HingeJoint3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = HingeJoint3D.construct_without_init()
    cls._ptr = CPPHingeJoint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = HingeJoint3D.construct_without_init()
    cls._ptr = CPPHingeJoint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_param(self, param:'int'  , value:'float'   ) -> None:
    r'''
				Sets the value of the specified parameter.
			'''

    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'







    self._ptr.call_with_return(260,tuple([param, value]))

  @functools.native_method
  def get_param(self, param:'int'  ) -> typing.Union[float]:
    r'''
				Returns the value of the specified parameter.
			'''

    assert isinstance(param, (int, float)), 'param must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(261,tuple([param]))
    return _ret


  @functools.native_method
  def set_flag(self, flag:'int'  , enabled:'bool'   ) -> None:
    r'''
				If `true`, enables the specified flag.
			'''

    assert isinstance(flag, (int, float)), 'flag must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(262,tuple([flag, enabled]))

  @functools.native_method
  def get_flag(self, flag:'int'  ) -> typing.Union[bool]:
    r'''
				Returns the value of the specified flag.
			'''

    assert isinstance(flag, (int, float)), 'flag must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(263,tuple([flag]))
    return _ret



register_cast_function('HingeJoint3D', HingeJoint3D.cast)
register_class('HingeJoint3D', HingeJoint3D)
