# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.WebRTCDataChannel as py4godot_webrtcdatachannel 
from py4godot.wrappers.wrappers import CPPWebRTCDataChannelExtensionWrapper


class WebRTCDataChannelExtension(py4godot_webrtcdatachannel.WebRTCDataChannel):
  r''''''

  @staticmethod
  def constructor():
    class_ = WebRTCDataChannelExtension.construct_without_init()
    class_._ptr = constructor(995,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WebRTCDataChannelExtension.construct_without_init()
    class_._ptr = constructor(995,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWebRTCDataChannelExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(995,0, ())


  def generate_wrapper(self):
    return CPPWebRTCDataChannelExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WebRTCDataChannelExtension.__new__(WebRTCDataChannelExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WebRTCDataChannelExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCDataChannelExtension.construct_without_init()
    cls._ptr = CPPWebRTCDataChannelExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebRTCDataChannelExtension.construct_without_init()
    cls._ptr = CPPWebRTCDataChannelExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_available_packet_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(75,tuple([]))
    return _ret


  @functools.native_method
  def _get_max_packet_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(76,tuple([]))
    return _ret


  @functools.native_method
  def _poll(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(77,tuple([]))
    return _ret


  @functools.native_method
  def _close(self) -> None:
    r''''''




    self._ptr.call_with_return(78,tuple([]))

  @functools.native_method
  def _set_write_mode(self, p_write_mode:'int'  ) -> None:
    r''''''

    assert isinstance(p_write_mode, (int, float)), 'p_write_mode must be int or float'






    self._ptr.call_with_return(79,tuple([p_write_mode]))

  @functools.native_method
  def _get_write_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([]))
    return _ret


  @functools.native_method
  def _was_string_packet(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))
    return _ret


  @functools.native_method
  def _get_ready_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(82,tuple([]))
    return _ret


  @functools.native_method
  def _get_label(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _is_ordered(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))
    return _ret


  @functools.native_method
  def _get_id(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))
    return _ret


  @functools.native_method
  def _get_max_packet_life_time(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))
    return _ret


  @functools.native_method
  def _get_max_retransmits(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))
    return _ret


  @functools.native_method
  def _get_protocol(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(88,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _is_negotiated(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))
    return _ret


  @functools.native_method
  def _get_buffered_amount(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([]))
    return _ret



register_cast_function('WebRTCDataChannelExtension', WebRTCDataChannelExtension.cast)
register_class('WebRTCDataChannelExtension', WebRTCDataChannelExtension)
