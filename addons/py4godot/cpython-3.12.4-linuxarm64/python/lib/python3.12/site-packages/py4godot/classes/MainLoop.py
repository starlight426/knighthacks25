# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPMainLoopWrapper


class MainLoop(py4godot_object.Object):
  r'''
		`MainLoop` is the abstract base class for a Godot project's game loop. It is inherited by `SceneTree`, which is the default game loop implementation used in Godot projects, though it is also possible to write and use one's own `MainLoop` subclass instead of the scene tree.
		Upon the application start, a `MainLoop` implementation must be provided to the OS; otherwise, the application will exit. This happens automatically (and a `SceneTree` is created) unless a `MainLoop` `Script` is provided from the command line (with e.g. `godot -s my_loop.gd`) or the `ProjectSettings.application/run/main_loop_type` project setting is overwritten.
		Here is an example script implementing a simple `MainLoop`:
		
		```gdscript
		class_name CustomMainLoop
		extends MainLoop

		var time_elapsed = 0

		func _initialize():
			print("Initialized:")
			print("  Starting time: %s" % str(time_elapsed))

		func _process(delta):
			time_elapsed += delta
			# Return true to end the main loop.
			return Input.get_mouse_button_mask() != 0 || Input.is_key_pressed(KEY_ESCAPE)

		func _finalize():
			print("Finalized:")
			print("  End time: %s" % str(time_elapsed))
		```
		
		
	'''
  NOTIFICATION_OS_MEMORY_WARNING:typing.ClassVar[int]

  NOTIFICATION_TRANSLATION_CHANGED:typing.ClassVar[int]

  NOTIFICATION_WM_ABOUT:typing.ClassVar[int]

  NOTIFICATION_CRASH:typing.ClassVar[int]

  NOTIFICATION_OS_IME_UPDATE:typing.ClassVar[int]

  NOTIFICATION_APPLICATION_RESUMED:typing.ClassVar[int]

  NOTIFICATION_APPLICATION_PAUSED:typing.ClassVar[int]

  NOTIFICATION_APPLICATION_FOCUS_IN:typing.ClassVar[int]

  NOTIFICATION_APPLICATION_FOCUS_OUT:typing.ClassVar[int]

  NOTIFICATION_TEXT_SERVER_CHANGED:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = MainLoop.construct_without_init()
    class_._ptr = constructor(462,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MainLoop.construct_without_init()
    class_._ptr = constructor(462,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMainLoopWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(462,0, ())


  def generate_wrapper(self):
    return CPPMainLoopWrapper()
  def init_signals(self):
    super().init_signals()
    on_request_permissions_result_name = utils.py_string_to_string_name("on_request_permissions_result")
    self.on_request_permissions_result = signals.BuiltinSignal(self, on_request_permissions_result_name)

  @staticmethod
  def construct_without_init():
    cls = MainLoop.__new__(MainLoop)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MainLoop'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MainLoop.construct_without_init()
    cls._ptr = CPPMainLoopWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MainLoop.construct_without_init()
    cls._ptr = CPPMainLoopWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _initialize(self) -> None:
    r'''
				Called once during initialization.
			'''




    self._ptr.call_with_return(49,tuple([]))

  @functools.native_method
  def _physics_process(self, delta:'float'   ) -> typing.Union[bool]:
    r'''
				Called each physics tick. `delta` is the logical time between physics ticks in seconds and is equal to `Engine.time_scale` / `Engine.physics_ticks_per_second`. Equivalent to `Node._physics_process`.
				If implemented, the method must return a boolean value. `true` ends the main loop, while `false` lets it proceed to the next step.
				**Note:** `_physics_process` may be called up to `Engine.max_physics_steps_per_frame` times per (idle) frame. This step limit may be reached when the engine is suffering performance issues.
				**Note:** Accumulated `delta` may diverge from real world seconds.
			'''

    assert isinstance(delta, (int, float)), 'delta must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(50,tuple([delta]))
    return _ret


  @functools.native_method
  def _process(self, delta:'float'   ) -> typing.Union[bool]:
    r'''
				Called on each idle frame, prior to rendering, and after physics ticks have been processed. `delta` is the time between frames in seconds. Equivalent to `Node._process`.
				If implemented, the method must return a boolean value. `true` ends the main loop, while `false` lets it proceed to the next frame.
				**Note:** When the engine is struggling and the frame rate is lowered, `delta` will increase. When `delta` is increased, it's capped at a maximum of `Engine.time_scale` * `Engine.max_physics_steps_per_frame` / `Engine.physics_ticks_per_second`. As a result, accumulated `delta` may not represent real world time.
				**Note:** When `--fixed-fps` is enabled or the engine is running in Movie Maker mode (see `MovieWriter`), process `delta` will always be the same for every frame, regardless of how much time the frame took to render.
				**Note:** Frame delta may be post-processed by `OS.delta_smoothing` if this is enabled for the project.
			'''

    assert isinstance(delta, (int, float)), 'delta must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(51,tuple([delta]))
    return _ret


  @functools.native_method
  def _finalize(self) -> None:
    r'''
				Called before the program exits.
			'''




    self._ptr.call_with_return(52,tuple([]))


register_cast_function('MainLoop', MainLoop.cast)
register_class('MainLoop', MainLoop)
