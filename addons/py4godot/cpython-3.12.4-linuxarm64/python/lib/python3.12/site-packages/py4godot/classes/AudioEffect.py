# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AudioEffectInstance as py4godot_audioeffectinstance 
  import py4godot.classes.AudioEffectSpectrumAnalyzerInstance as py4godot_audioeffectspectrumanalyzerinstance 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPAudioEffectWrapper


class AudioEffect(py4godot_resource.Resource):
  r'''
		The base `Resource` for every audio effect. In the editor, an audio effect can be added to the current bus layout through the Audio panel. At run-time, it is also possible to manipulate audio effects through `AudioServer.add_bus_effect`, `AudioServer.remove_bus_effect`, and `AudioServer.get_bus_effect`.
		When applied on a bus, an audio effect creates a corresponding `AudioEffectInstance`. The instance is directly responsible for manipulating the sound, based on the original audio effect's properties.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffect.construct_without_init()
    class_._ptr = constructor(105,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffect.construct_without_init()
    class_._ptr = constructor(105,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(105,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffect.__new__(AudioEffect)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffect'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffect.construct_without_init()
    cls._ptr = CPPAudioEffectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffect.construct_without_init()
    cls._ptr = CPPAudioEffectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _instantiate(self) -> typing.Union['py4godot_audioeffectinstance.AudioEffectInstance','py4godot_audioeffectspectrumanalyzerinstance.AudioEffectSpectrumAnalyzerInstance']:
    r'''
				Override this method to customize the `AudioEffectInstance` created when this effect is applied on a bus in the editor's Audio panel, or through `AudioServer.add_bus_effect`.
				```gdscript
				extends AudioEffect

				@export var strength = 4.0

				func _instantiate():
					var effect = CustomAudioEffectInstance.new()
					effect.base = self

					return effect
				```
				**Note:** It is recommended to keep a reference to the original `AudioEffect` in the new instance. Depending on the implementation this allows the effect instance to listen for changes at run-time and be modified accordingly.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AudioEffectInstance
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('AudioEffect', AudioEffect.cast)
register_class('AudioEffect', AudioEffect)
