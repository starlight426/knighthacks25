# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.Object as py4godot_object 
  import py4godot.classes.EditorExportPlatform as py4godot_editorexportplatform 
  import py4godot.classes.EditorInspectorPlugin as py4godot_editorinspectorplugin 
  import py4godot.classes.Camera3D as py4godot_camera3d 
  import py4godot.classes.InputEvent as py4godot_inputevent 
  import py4godot.classes.EditorImportPlugin as py4godot_editorimportplugin 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.EditorScenePostImportPlugin as py4godot_editorscenepostimportplugin 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.ScriptCreateDialog as py4godot_scriptcreatedialog 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.EditorResourceConversionPlugin as py4godot_editorresourceconversionplugin 
  import py4godot.classes.ConfigFile as py4godot_configfile 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.PopupMenu as py4godot_popupmenu 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.EditorInterface as py4godot_editorinterface 
  import py4godot.classes.EditorDebuggerPlugin as py4godot_editordebuggerplugin 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.EditorUndoRedoManager as py4godot_editorundoredomanager 
  import py4godot.classes.EditorSceneFormatImporter as py4godot_editorsceneformatimporter 
  import py4godot.classes.Script as py4godot_script 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.EditorTranslationParserPlugin as py4godot_editortranslationparserplugin 
  import py4godot.classes.EditorNode3DGizmoPlugin as py4godot_editornode3dgizmoplugin 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.EditorExportPlugin as py4godot_editorexportplugin 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.EditorContextMenuPlugin as py4godot_editorcontextmenuplugin 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
  import py4godot.classes.Shortcut as py4godot_shortcut 
import py4godot.classes.Node as py4godot_node 
from py4godot.wrappers.wrappers import CPPEditorPluginWrapper

class CustomControlContainer:
  CONTAINER_TOOLBAR = 0
  CONTAINER_SPATIAL_EDITOR_MENU = 1
  CONTAINER_SPATIAL_EDITOR_SIDE_LEFT = 2
  CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT = 3
  CONTAINER_SPATIAL_EDITOR_BOTTOM = 4
  CONTAINER_CANVAS_EDITOR_MENU = 5
  CONTAINER_CANVAS_EDITOR_SIDE_LEFT = 6
  CONTAINER_CANVAS_EDITOR_SIDE_RIGHT = 7
  CONTAINER_CANVAS_EDITOR_BOTTOM = 8
  CONTAINER_INSPECTOR_BOTTOM = 9
  CONTAINER_PROJECT_SETTING_TAB_LEFT = 10
  CONTAINER_PROJECT_SETTING_TAB_RIGHT = 11
class DockSlot:
  DOCK_SLOT_LEFT_UL = 0
  DOCK_SLOT_LEFT_BL = 1
  DOCK_SLOT_LEFT_UR = 2
  DOCK_SLOT_LEFT_BR = 3
  DOCK_SLOT_RIGHT_UL = 4
  DOCK_SLOT_RIGHT_BL = 5
  DOCK_SLOT_RIGHT_UR = 6
  DOCK_SLOT_RIGHT_BR = 7
  DOCK_SLOT_MAX = 8
class AfterGUIInput:
  AFTER_GUI_INPUT_PASS = 0
  AFTER_GUI_INPUT_STOP = 1
  AFTER_GUI_INPUT_CUSTOM = 2


class EditorPlugin(py4godot_node.Node):
  r'''
		Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins. See also `EditorScript` to add functions to the editor.
		**Note:** Some names in this class contain "left" or "right" (e.g. `constant DOCK_SLOT_LEFT_UL`). These APIs assume left-to-right layout, and would be backwards when using right-to-left layout. These names are kept for compatibility reasons.
	'''

  @staticmethod
  def constructor():
    class_ = EditorPlugin.construct_without_init()
    class_._ptr = constructor(295,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorPlugin.construct_without_init()
    class_._ptr = constructor(295,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorPluginWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(295,0, ())


  def generate_wrapper(self):
    return CPPEditorPluginWrapper()
  def init_signals(self):
    super().init_signals()
    scene_changed_name = utils.py_string_to_string_name("scene_changed")
    self.scene_changed = signals.BuiltinSignal(self, scene_changed_name)
    scene_closed_name = utils.py_string_to_string_name("scene_closed")
    self.scene_closed = signals.BuiltinSignal(self, scene_closed_name)
    main_screen_changed_name = utils.py_string_to_string_name("main_screen_changed")
    self.main_screen_changed = signals.BuiltinSignal(self, main_screen_changed_name)
    resource_saved_name = utils.py_string_to_string_name("resource_saved")
    self.resource_saved = signals.BuiltinSignal(self, resource_saved_name)
    scene_saved_name = utils.py_string_to_string_name("scene_saved")
    self.scene_saved = signals.BuiltinSignal(self, scene_saved_name)
    project_settings_changed_name = utils.py_string_to_string_name("project_settings_changed")
    self.project_settings_changed = signals.BuiltinSignal(self, project_settings_changed_name)

  @staticmethod
  def construct_without_init():
    cls = EditorPlugin.__new__(EditorPlugin)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorPlugin'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorPlugin.construct_without_init()
    cls._ptr = CPPEditorPluginWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorPlugin.construct_without_init()
    cls._ptr = CPPEditorPluginWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _forward_canvas_gui_input(self, event:'py4godot_inputevent.InputEvent'   ) -> typing.Union[bool]:
    r'''
				Called when there is a root node in the current edited scene, `_handles` is implemented, and an `InputEvent` happens in the 2D viewport. If this method returns `true`, `event` is intercepted by this `EditorPlugin`, otherwise `event` is forwarded to other Editor classes.
				
				```gdscript
				# Prevents the InputEvent from reaching other Editor classes.
				func _forward_canvas_gui_input(event):
					return true
				```
				
				
				This method must return `false` in order to forward the `InputEvent` to other Editor classes.
				
				```gdscript
				# Consumes InputEventMouseMotion and forwards other InputEvent types.
				func _forward_canvas_gui_input(event):
					if (event is InputEventMouseMotion):
						return true
					return false
				```
				
				
			'''

    assert(not event is None)
    assert isinstance(event, get_class('InputEvent')), 'event must be InputEvent'






    _ret = 0
    _ret = self._ptr.call_with_return(180,tuple([event._ptr]))
    return _ret


  @functools.native_method
  def _forward_canvas_draw_over_viewport(self, viewport_control:'py4godot_control.Control'   ) -> None:
    r'''
				Called by the engine when the 2D editor's viewport is updated. `viewport_control` is an overlay on top of the viewport and it can be used for drawing. You can update the viewport manually by calling `update_overlays`.
				
				```gdscript
				func _forward_canvas_draw_over_viewport(overlay):
					# Draw a circle at the cursor's position.
					overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.WHITE)

				func _forward_canvas_gui_input(event):
					if event is InputEventMouseMotion:
						# Redraw the viewport when the cursor is moved.
						update_overlays()
						return true
					return false
				```
				
				
			'''

    assert(not viewport_control is None)
    assert isinstance(viewport_control, get_class('Control')), 'viewport_control must be Control'






    self._ptr.call_with_return(181,tuple([viewport_control._ptr]))

  @functools.native_method
  def _forward_canvas_force_draw_over_viewport(self, viewport_control:'py4godot_control.Control'   ) -> None:
    r'''
				This method is the same as `_forward_canvas_draw_over_viewport`, except it draws on top of everything. Useful when you need an extra layer that shows over anything else.
				You need to enable calling of this method by using `set_force_draw_over_forwarding_enabled`.
			'''

    assert(not viewport_control is None)
    assert isinstance(viewport_control, get_class('Control')), 'viewport_control must be Control'






    self._ptr.call_with_return(182,tuple([viewport_control._ptr]))

  @functools.native_method
  def _forward_3d_gui_input(self, viewport_camera:'py4godot_camera3d.Camera3D'   , event:'py4godot_inputevent.InputEvent'   ) -> typing.Union[int]:
    r'''
				Called when there is a root node in the current edited scene, `_handles` is implemented, and an `InputEvent` happens in the 3D viewport. The return value decides whether the `InputEvent` is consumed or forwarded to other `EditorPlugin`s. See `enum AfterGUIInput` for options.
				
				```gdscript
				# Prevents the InputEvent from reaching other Editor classes.
				func _forward_3d_gui_input(camera, event):
					return EditorPlugin.AFTER_GUI_INPUT_STOP
				```
				
				
				This method must return `constant AFTER_GUI_INPUT_PASS` in order to forward the `InputEvent` to other Editor classes.
				
				```gdscript
				# Consumes InputEventMouseMotion and forwards other InputEvent types.
				func _forward_3d_gui_input(camera, event):
					return EditorPlugin.AFTER_GUI_INPUT_STOP if event is InputEventMouseMotion else EditorPlugin.AFTER_GUI_INPUT_PASS
				```
				
				
			'''

    assert(not viewport_camera is None)
    assert isinstance(viewport_camera, get_class('Camera3D')), 'viewport_camera must be Camera3D'
    assert(not event is None)
    assert isinstance(event, get_class('InputEvent')), 'event must be InputEvent'







    _ret = 0
    _ret = self._ptr.call_with_return(183,tuple([viewport_camera._ptr, event._ptr]))
    return _ret


  @functools.native_method
  def _forward_3d_draw_over_viewport(self, viewport_control:'py4godot_control.Control'   ) -> None:
    r'''
				Called by the engine when the 3D editor's viewport is updated. `viewport_control` is an overlay on top of the viewport and it can be used for drawing. You can update the viewport manually by calling `update_overlays`.
				
				```gdscript
				func _forward_3d_draw_over_viewport(overlay):
					# Draw a circle at the cursor's position.
					overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.WHITE)

				func _forward_3d_gui_input(camera, event):
					if event is InputEventMouseMotion:
						# Redraw the viewport when the cursor is moved.
						update_overlays()
						return EditorPlugin.AFTER_GUI_INPUT_STOP
					return EditorPlugin.AFTER_GUI_INPUT_PASS
				```
				
				
			'''

    assert(not viewport_control is None)
    assert isinstance(viewport_control, get_class('Control')), 'viewport_control must be Control'






    self._ptr.call_with_return(184,tuple([viewport_control._ptr]))

  @functools.native_method
  def _forward_3d_force_draw_over_viewport(self, viewport_control:'py4godot_control.Control'   ) -> None:
    r'''
				This method is the same as `_forward_3d_draw_over_viewport`, except it draws on top of everything. Useful when you need an extra layer that shows over anything else.
				You need to enable calling of this method by using `set_force_draw_over_forwarding_enabled`.
			'''

    assert(not viewport_control is None)
    assert isinstance(viewport_control, get_class('Control')), 'viewport_control must be Control'






    self._ptr.call_with_return(185,tuple([viewport_control._ptr]))

  @functools.native_method
  def _get_plugin_name(self) -> typing.Union[str]:
    r'''
				Override this method in your plugin to provide the name of the plugin when displayed in the Godot editor.
				For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", "Game", and "AssetLib" buttons.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(186,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _get_plugin_icon(self) -> typing.Any:
    r'''
				Override this method in your plugin to return a `Texture2D` in order to give it an icon.
				For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", "Game", and "AssetLib" buttons.
				Ideally, the plugin icon should be white with a transparent background and 16×16 pixels in size.
				
				```gdscript
				func _get_plugin_icon():
					# You can use a custom icon:
					return preload("res://addons/my_plugin/my_plugin_icon.svg")
					# Or use a built-in icon:
					return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")
				```
				
				
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(187,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def _has_main_screen(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this is a main screen editor plugin (it goes in the workspace selector together with **2D**, **3D**, **Script**, **Game**, and **AssetLib**).
				When the plugin's workspace is selected, other main screen plugins will be hidden, but your plugin will not appear automatically. It needs to be added as a child of `EditorInterface.get_editor_main_screen` and made visible inside `_make_visible`.
				Use `_get_plugin_name` and `_get_plugin_icon` to customize the plugin button's appearance.
				```gdscript
				var plugin_control

				func _enter_tree():
					plugin_control = preload("my_plugin_control.tscn").instantiate()
					EditorInterface.get_editor_main_screen().add_child(plugin_control)
					plugin_control.hide()

				func _has_main_screen():
					return true

				func _make_visible(visible):
					plugin_control.visible = visible

				func _get_plugin_name():
					return "My Super Cool Plugin 3000"

				func _get_plugin_icon():
					return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")
				```
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(188,tuple([]))
    return _ret


  @functools.native_method
  def _make_visible(self, visible:'bool'   ) -> None:
    r'''
				This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.
				Remember that you have to manage the visibility of all your editor controls manually.
			'''

    assert isinstance(visible, bool), 'visible must be bool'






    self._ptr.call_with_return(189,tuple([visible]))

  @functools.native_method
  def _edit(self, object_:'py4godot_object.Object'   ) -> None:
    r'''
				This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.
				`object` can be `null` if the plugin was editing an object, but there is no longer any selected object handled by this plugin. It can be used to cleanup editing state.
			'''

    assert(not object_ is None)
    assert isinstance(object_, get_class('Object')), 'object_ must be Object'






    self._ptr.call_with_return(190,tuple([object_._ptr]))

  @functools.native_method
  def _handles(self, object_:'py4godot_object.Object'   ) -> typing.Union[bool]:
    r'''
				Implement this function if your plugin edits a specific type of object (Resource or Node). If you return `true`, then you will get the functions `_edit` and `_make_visible` called when the editor requests them. If you have declared the methods `_forward_canvas_gui_input` and `_forward_3d_gui_input` these will be called too.
				**Note:** Each plugin should handle only one type of objects at a time. If a plugin handles more types of objects and they are edited at the same time, it will result in errors.
			'''

    assert(not object_ is None)
    assert isinstance(object_, get_class('Object')), 'object_ must be Object'






    _ret = 0
    _ret = self._ptr.call_with_return(191,tuple([object_._ptr]))
    return _ret


  @functools.native_method
  def _get_state(self) -> typing.Union['Dictionary']:
    r'''
				Override this method to provide a state data you want to be saved, like view position, grid settings, folding, etc. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns). This data is automatically saved for each scene in an `editstate` file in the editor metadata folder. If you want to store global (scene-independent) editor data for your plugin, you can use `_get_window_layout` instead.
				Use `_set_state` to restore your saved state.
				**Note:** This method should not be used to save important settings that should persist with the project.
				**Note:** You must implement `_get_plugin_name` for the state to be stored and restored correctly.
				```gdscript
				func _get_state():
					var state = { "zoom": zoom, "preferred_color": my_color }
					return state
				```
			'''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(192,tuple([]))
    return _ret


  @functools.native_method
  def _set_state(self, state:'Dictionary'   ) -> None:
    r'''
				Restore the state saved by `_get_state`. This method is called when the current scene tab is changed in the editor.
				**Note:** Your plugin must implement `_get_plugin_name`, otherwise it will not be recognized and this method will not be called.
				```gdscript
				func _set_state(data):
					zoom = data.get("zoom", 1.0)
					preferred_color = data.get("my_color", Color.WHITE)
				```
			'''

    assert(not state is None)
    assert isinstance(state, Dictionary), 'state must be Dictionary'






    self._ptr.call_with_return(193,tuple([state._ptr]))

  @functools.native_method
  def _clear(self) -> None:
    r'''
				Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.
			'''




    self._ptr.call_with_return(194,tuple([]))

  @functools.native_method
  def _get_unsaved_status(self, for_scene:'str'   ) -> typing.Union[str]:
    r'''
				Override this method to provide a custom message that lists unsaved changes. The editor will call this method when exiting or when closing a scene, and display the returned string in a confirmation dialog. Return empty string if the plugin has no unsaved changes.
				When closing a scene, `for_scene` is the path to the scene being closed. You can use it to handle built-in resources in that scene.
				If the user confirms saving, `_save_external_data` will be called, before closing the editor.
				```gdscript
				func _get_unsaved_status(for_scene):
					if not unsaved:
						return ""

					if for_scene.is_empty():
						return "Save changes in MyCustomPlugin before closing?"
					else:
						return "Scene %s has changes from MyCustomPlugin. Save before closing?" % for_scene.get_file()

				func _save_external_data():
					unsaved = false
				```
				If the plugin has no scene-specific changes, you can ignore the calls when closing scenes:
				```gdscript
				func _get_unsaved_status(for_scene):
					if not for_scene.is_empty():
						return ""
				```
			'''

    assert(not for_scene is None)
    assert isinstance(for_scene, (str, String)), 'for_scene must be str or String'




    assert(isinstance(for_scene, (str, String)))
    py_string_for_scene = for_scene if isinstance(for_scene, StringName) else c_utils.py_string_to_string(for_scene)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(195,tuple([py_string_for_scene._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _save_external_data(self) -> None:
    r'''
				This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.
			'''




    self._ptr.call_with_return(196,tuple([]))

  @functools.native_method
  def _apply_changes(self) -> None:
    r'''
				This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.
				This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.
			'''




    self._ptr.call_with_return(197,tuple([]))

  @functools.native_method
  def _get_breakpoints(self) -> typing.Union['PackedStringArray']:
    r'''
				This is for editors that edit script-based objects. You can return a list of breakpoints in the format (`script:line`), for example: `res://path_to_script.gd:25`.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(198,tuple([]))
    return _ret


  @functools.native_method
  def _set_window_layout(self, configuration:'py4godot_configfile.ConfigFile'   ) -> None:
    r'''
				Restore the plugin GUI layout and data saved by `_get_window_layout`. This method is called for every plugin on editor startup. Use the provided `configuration` file to read your saved data.
				```gdscript
				func _set_window_layout(configuration):
					$Window.position = configuration.get_value("MyPlugin", "window_position", Vector2())
					$Icon.modulate = configuration.get_value("MyPlugin", "icon_color", Color.WHITE)
				```
			'''

    assert(not configuration is None)
    assert isinstance(configuration, get_class('ConfigFile')), 'configuration must be ConfigFile'






    self._ptr.call_with_return(199,tuple([configuration._ptr]))

  @functools.native_method
  def _get_window_layout(self, configuration:'py4godot_configfile.ConfigFile'   ) -> None:
    r'''
				Override this method to provide the GUI layout of the plugin or any other data you want to be stored. This is used to save the project's editor layout when `queue_save_layout` is called or the editor layout was changed (for example changing the position of a dock). The data is stored in the `editor_layout.cfg` file in the editor metadata directory.
				Use `_set_window_layout` to restore your saved layout.
				```gdscript
				func _get_window_layout(configuration):
					configuration.set_value("MyPlugin", "window_position", $Window.position)
					configuration.set_value("MyPlugin", "icon_color", $Icon.modulate)
				```
			'''

    assert(not configuration is None)
    assert isinstance(configuration, get_class('ConfigFile')), 'configuration must be ConfigFile'






    self._ptr.call_with_return(200,tuple([configuration._ptr]))

  @functools.native_method
  def _build(self) -> typing.Union[bool]:
    r'''
				This method is called when the editor is about to run the project. The plugin can then perform required operations before the project runs.
				This method must return a boolean. If this method returns `false`, the project will not run. The run is aborted immediately, so this also prevents all other plugins' `_build` methods from running.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(201,tuple([]))
    return _ret


  @functools.native_method
  def _enable_plugin(self) -> None:
    r'''
				Called by the engine when the user enables the `EditorPlugin` in the Plugin tab of the project settings window.
			'''




    self._ptr.call_with_return(202,tuple([]))

  @functools.native_method
  def _disable_plugin(self) -> None:
    r'''
				Called by the engine when the user disables the `EditorPlugin` in the Plugin tab of the project settings window.
			'''




    self._ptr.call_with_return(203,tuple([]))

  @functools.native_method
  def add_control_to_container(self, container:'int'  , control:'py4godot_control.Control'   ) -> None:
    r'''
				Adds a custom control to a container in the editor UI.
				Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).
				When your plugin is deactivated, make sure to remove your custom control with `remove_control_from_container` and free it with `Node.queue_free`.
			'''

    assert isinstance(container, (int, float)), 'container must be int or float'
    assert(not control is None)
    assert isinstance(control, get_class('Control')), 'control must be Control'







    self._ptr.call_with_return(204,tuple([container, control._ptr]))

  @functools.native_method
  def add_control_to_bottom_panel(self, control:'py4godot_control.Control'   , title:'str'   , shortcut:'py4godot_shortcut.Shortcut' = None  ) -> typing.Any:
    r'''
				Adds a control to the bottom panel (together with Output, Debug, Animation, etc.). Returns a reference to the button added. It's up to you to hide/show the button when needed. When your plugin is deactivated, make sure to remove your custom control with `remove_control_from_bottom_panel` and free it with `Node.queue_free`.
				Optionally, you can specify a shortcut parameter. When pressed, this shortcut will toggle the bottom panel's visibility. See the default editor bottom panel shortcuts in the Editor Settings for inspiration. Per convention, they all use `kbd`Alt`/kbd` modifier.
			'''
    if shortcut is None:
      shortcut = c_utils.empty_object
    if shortcut is None:
      shortcut = c_utils.empty_object

    assert(not control is None)
    assert isinstance(control, get_class('Control')), 'control must be Control'
    assert(not title is None)
    assert isinstance(title, (str, String)), 'title must be str or String'





    assert(isinstance(title, (str, String)))
    py_string_title = title if isinstance(title, StringName) else c_utils.py_string_to_string(title)


    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Button
    _ret._ptr = self._ptr.call_with_return(205,tuple([control._ptr, py_string_title._ptr, shortcut._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def add_control_to_dock(self, slot:'int'  , control:'py4godot_control.Control'   , shortcut:'py4godot_shortcut.Shortcut' = None  ) -> None:
    r'''
				Adds the control to a specific dock slot.
				If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.
				When your plugin is deactivated, make sure to remove your custom control with `remove_control_from_docks` and free it with `Node.queue_free`.
				Optionally, you can specify a shortcut parameter. When pressed, this shortcut will open and focus the dock.
			'''
    if shortcut is None:
      shortcut = c_utils.empty_object
    if shortcut is None:
      shortcut = c_utils.empty_object

    assert isinstance(slot, (int, float)), 'slot must be int or float'
    assert(not control is None)
    assert isinstance(control, get_class('Control')), 'control must be Control'








    self._ptr.call_with_return(206,tuple([slot, control._ptr, shortcut._ptr]))

  @functools.native_method
  def remove_control_from_docks(self, control:'py4godot_control.Control'   ) -> None:
    r'''
				Removes the control from the dock. You have to manually `Node.queue_free` the control.
			'''

    assert(not control is None)
    assert isinstance(control, get_class('Control')), 'control must be Control'






    self._ptr.call_with_return(207,tuple([control._ptr]))

  @functools.native_method
  def remove_control_from_bottom_panel(self, control:'py4godot_control.Control'   ) -> None:
    r'''
				Removes the control from the bottom panel. You have to manually `Node.queue_free` the control.
			'''

    assert(not control is None)
    assert isinstance(control, get_class('Control')), 'control must be Control'






    self._ptr.call_with_return(208,tuple([control._ptr]))

  @functools.native_method
  def remove_control_from_container(self, container:'int'  , control:'py4godot_control.Control'   ) -> None:
    r'''
				Removes the control from the specified container. You have to manually `Node.queue_free` the control.
			'''

    assert isinstance(container, (int, float)), 'container must be int or float'
    assert(not control is None)
    assert isinstance(control, get_class('Control')), 'control must be Control'







    self._ptr.call_with_return(209,tuple([container, control._ptr]))

  @functools.native_method
  def set_dock_tab_icon(self, control:'py4godot_control.Control'   , icon:'py4godot_texture2d.Texture2D'   ) -> None:
    r'''
				Sets the tab icon for the given control in a dock slot. Setting to `null` removes the icon.
			'''

    assert(not control is None)
    assert isinstance(control, get_class('Control')), 'control must be Control'
    assert(not icon is None)
    assert isinstance(icon, get_class('Texture2D')), 'icon must be Texture2D'







    self._ptr.call_with_return(210,tuple([control._ptr, icon._ptr]))

  @functools.native_method
  def add_tool_menu_item(self, name:'str'   , callable:'Callable'   ) -> None:
    r'''
				Adds a custom menu item to **Project > Tools** named `name`. When clicked, the provided `callable` will be called.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert(not callable is None)
    assert isinstance(callable, Callable), 'callable must be Callable'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)


    self._ptr.call_with_return(211,tuple([py_string_name._ptr, callable._ptr]))

  @functools.native_method
  def add_tool_submenu_item(self, name:'str'   , submenu:'py4godot_popupmenu.PopupMenu'   ) -> None:
    r'''
				Adds a custom `PopupMenu` submenu under **Project > Tools >** `name`. Use `remove_tool_menu_item` on plugin clean up to remove the menu.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert(not submenu is None)
    assert isinstance(submenu, get_class('PopupMenu')), 'submenu must be PopupMenu'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)


    self._ptr.call_with_return(212,tuple([py_string_name._ptr, submenu._ptr]))

  @functools.native_method
  def remove_tool_menu_item(self, name:'str'   ) -> None:
    r'''
				Removes a menu `name` from **Project > Tools**.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    self._ptr.call_with_return(213,tuple([py_string_name._ptr]))

  @functools.native_method
  def get_export_as_menu(self) -> typing.Union['py4godot_popupmenu.PopupMenu']:
    r'''
				Returns the `PopupMenu` under **Scene > Export As...**.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PopupMenu
    _ret._ptr = self._ptr.call_with_return(214,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def add_custom_type(self, type:'str'   , base:'str'   , script:'py4godot_script.Script'   , icon:'py4godot_texture2d.Texture2D'   ) -> None:
    r'''
				Adds a custom type, which will appear in the list of nodes or resources.
				When a given node or resource is selected, the base type will be instantiated (e.g. "Node3D", "Control", "Resource"), then the script will be loaded and set to this object.
				**Note:** The base type is the base engine class which this type's class hierarchy inherits, not any custom type parent classes.
				You can use the virtual method `_handles` to check if your custom object is being edited by checking the script or using the `is` keyword.
				During run-time, this will be a simple object with a script so this function does not need to be called then.
				**Note:** Custom types added this way are not true classes. They are just a helper to create a node with specific script.
			'''

    assert(not type is None)
    assert isinstance(type, (str, String)), 'type must be str or String'
    assert(not base is None)
    assert isinstance(base, (str, String)), 'base must be str or String'
    assert(not script is None)
    assert isinstance(script, get_class('Script')), 'script must be Script'
    assert(not icon is None)
    assert isinstance(icon, get_class('Texture2D')), 'icon must be Texture2D'




    assert(isinstance(type, (str, String)))
    py_string_type = type if isinstance(type, StringName) else c_utils.py_string_to_string(type)
    assert(isinstance(base, (str, String)))
    py_string_base = base if isinstance(base, StringName) else c_utils.py_string_to_string(base)



    self._ptr.call_with_return(215,tuple([py_string_type._ptr, py_string_base._ptr, script._ptr, icon._ptr]))

  @functools.native_method
  def remove_custom_type(self, type:'str'   ) -> None:
    r'''
				Removes a custom type added by `add_custom_type`.
			'''

    assert(not type is None)
    assert isinstance(type, (str, String)), 'type must be str or String'




    assert(isinstance(type, (str, String)))
    py_string_type = type if isinstance(type, StringName) else c_utils.py_string_to_string(type)

    self._ptr.call_with_return(216,tuple([py_string_type._ptr]))

  @functools.native_method
  def add_autoload_singleton(self, name:'str'   , path:'str'   ) -> None:
    r'''
				Adds a script at `path` to the Autoload list as `name`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'
    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)
    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(217,tuple([py_string_name._ptr, py_string_path._ptr]))

  @functools.native_method
  def remove_autoload_singleton(self, name:'str'   ) -> None:
    r'''
				Removes an Autoload `name` from the list.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    self._ptr.call_with_return(218,tuple([py_string_name._ptr]))

  @functools.native_method
  def update_overlays(self) -> typing.Union[int]:
    r'''
				Updates the overlays of the 2D and 3D editor viewport. Causes methods `_forward_canvas_draw_over_viewport`, `_forward_canvas_force_draw_over_viewport`, `_forward_3d_draw_over_viewport` and `_forward_3d_force_draw_over_viewport` to be called.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(219,tuple([]))
    return _ret


  @functools.native_method
  def make_bottom_panel_item_visible(self, item:'py4godot_control.Control'   ) -> None:
    r'''
				Makes a specific item in the bottom panel visible.
			'''

    assert(not item is None)
    assert isinstance(item, get_class('Control')), 'item must be Control'






    self._ptr.call_with_return(220,tuple([item._ptr]))

  @functools.native_method
  def hide_bottom_panel(self) -> None:
    r'''
				Minimizes the bottom panel.
			'''




    self._ptr.call_with_return(221,tuple([]))

  @functools.native_method
  def get_undo_redo(self) -> typing.Union['py4godot_editorundoredomanager.EditorUndoRedoManager']:
    r'''
				Gets the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: EditorUndoRedoManager
    _ret._ptr = self._ptr.call_with_return(222,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def add_undo_redo_inspector_hook_callback(self, callable:'Callable'   ) -> None:
    r'''
				Hooks a callback into the undo/redo action creation when a property is modified in the inspector. This allows, for example, to save other properties that may be lost when a given property is modified.
				The callback should have 4 arguments: `Object` `undo_redo`, `Object` `modified_object`, `String` `property` and `Variant` `new_value`. They are, respectively, the `UndoRedo` object used by the inspector, the currently modified object, the name of the modified property and the new value the property is about to take.
			'''

    assert(not callable is None)
    assert isinstance(callable, Callable), 'callable must be Callable'






    self._ptr.call_with_return(223,tuple([callable._ptr]))

  @functools.native_method
  def remove_undo_redo_inspector_hook_callback(self, callable:'Callable'   ) -> None:
    r'''
				Removes a callback previously added by `add_undo_redo_inspector_hook_callback`.
			'''

    assert(not callable is None)
    assert isinstance(callable, Callable), 'callable must be Callable'






    self._ptr.call_with_return(224,tuple([callable._ptr]))

  @functools.native_method
  def queue_save_layout(self) -> None:
    r'''
				Queue save the project's editor layout.
			'''




    self._ptr.call_with_return(225,tuple([]))

  @functools.native_method
  def add_translation_parser_plugin(self, parser:'py4godot_editortranslationparserplugin.EditorTranslationParserPlugin'   ) -> None:
    r'''
				Registers a custom translation parser plugin for extracting translatable strings from custom files.
			'''

    assert(not parser is None)
    assert isinstance(parser, get_class('EditorTranslationParserPlugin')), 'parser must be EditorTranslationParserPlugin'






    self._ptr.call_with_return(226,tuple([parser._ptr]))

  @functools.native_method
  def remove_translation_parser_plugin(self, parser:'py4godot_editortranslationparserplugin.EditorTranslationParserPlugin'   ) -> None:
    r'''
				Removes a custom translation parser plugin registered by `add_translation_parser_plugin`.
			'''

    assert(not parser is None)
    assert isinstance(parser, get_class('EditorTranslationParserPlugin')), 'parser must be EditorTranslationParserPlugin'






    self._ptr.call_with_return(227,tuple([parser._ptr]))

  @functools.native_method
  def add_import_plugin(self, importer:'py4godot_editorimportplugin.EditorImportPlugin'   , first_priority:'bool' =False  ) -> None:
    r'''
				Registers a new `EditorImportPlugin`. Import plugins are used to import custom and unsupported assets as a custom `Resource` type.
				If `first_priority` is `true`, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins.
				**Note:** If you want to import custom 3D asset formats use `add_scene_format_importer_plugin` instead.
				See `add_inspector_plugin` for an example of how to register a plugin.
			'''

    assert(not importer is None)
    assert isinstance(importer, get_class('EditorImportPlugin')), 'importer must be EditorImportPlugin'
    assert isinstance(first_priority, bool), 'first_priority must be bool'







    self._ptr.call_with_return(228,tuple([importer._ptr, first_priority]))

  @functools.native_method
  def remove_import_plugin(self, importer:'py4godot_editorimportplugin.EditorImportPlugin'   ) -> None:
    r'''
				Removes an import plugin registered by `add_import_plugin`.
			'''

    assert(not importer is None)
    assert isinstance(importer, get_class('EditorImportPlugin')), 'importer must be EditorImportPlugin'






    self._ptr.call_with_return(229,tuple([importer._ptr]))

  @functools.native_method
  def add_scene_format_importer_plugin(self, scene_format_importer:'py4godot_editorsceneformatimporter.EditorSceneFormatImporter'   , first_priority:'bool' =False  ) -> None:
    r'''
				Registers a new `EditorSceneFormatImporter`. Scene importers are used to import custom 3D asset formats as scenes.
				If `first_priority` is `true`, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins.
			'''

    assert(not scene_format_importer is None)
    assert isinstance(scene_format_importer, get_class('EditorSceneFormatImporter')), 'scene_format_importer must be EditorSceneFormatImporter'
    assert isinstance(first_priority, bool), 'first_priority must be bool'







    self._ptr.call_with_return(230,tuple([scene_format_importer._ptr, first_priority]))

  @functools.native_method
  def remove_scene_format_importer_plugin(self, scene_format_importer:'py4godot_editorsceneformatimporter.EditorSceneFormatImporter'   ) -> None:
    r'''
				Removes a scene format importer registered by `add_scene_format_importer_plugin`.
			'''

    assert(not scene_format_importer is None)
    assert isinstance(scene_format_importer, get_class('EditorSceneFormatImporter')), 'scene_format_importer must be EditorSceneFormatImporter'






    self._ptr.call_with_return(231,tuple([scene_format_importer._ptr]))

  @functools.native_method
  def add_scene_post_import_plugin(self, scene_import_plugin:'py4godot_editorscenepostimportplugin.EditorScenePostImportPlugin'   , first_priority:'bool' =False  ) -> None:
    r'''
				Add an `EditorScenePostImportPlugin`. These plugins allow customizing the import process of 3D assets by adding new options to the import dialogs.
				If `first_priority` is `true`, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins.
			'''

    assert(not scene_import_plugin is None)
    assert isinstance(scene_import_plugin, get_class('EditorScenePostImportPlugin')), 'scene_import_plugin must be EditorScenePostImportPlugin'
    assert isinstance(first_priority, bool), 'first_priority must be bool'







    self._ptr.call_with_return(232,tuple([scene_import_plugin._ptr, first_priority]))

  @functools.native_method
  def remove_scene_post_import_plugin(self, scene_import_plugin:'py4godot_editorscenepostimportplugin.EditorScenePostImportPlugin'   ) -> None:
    r'''
				Remove the `EditorScenePostImportPlugin`, added with `add_scene_post_import_plugin`.
			'''

    assert(not scene_import_plugin is None)
    assert isinstance(scene_import_plugin, get_class('EditorScenePostImportPlugin')), 'scene_import_plugin must be EditorScenePostImportPlugin'






    self._ptr.call_with_return(233,tuple([scene_import_plugin._ptr]))

  @functools.native_method
  def add_export_plugin(self, plugin:'py4godot_editorexportplugin.EditorExportPlugin'   ) -> None:
    r'''
				Registers a new `EditorExportPlugin`. Export plugins are used to perform tasks when the project is being exported.
				See `add_inspector_plugin` for an example of how to register a plugin.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorExportPlugin')), 'plugin must be EditorExportPlugin'






    self._ptr.call_with_return(234,tuple([plugin._ptr]))

  @functools.native_method
  def remove_export_plugin(self, plugin:'py4godot_editorexportplugin.EditorExportPlugin'   ) -> None:
    r'''
				Removes an export plugin registered by `add_export_plugin`.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorExportPlugin')), 'plugin must be EditorExportPlugin'






    self._ptr.call_with_return(235,tuple([plugin._ptr]))

  @functools.native_method
  def add_export_platform(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   ) -> None:
    r'''
				Registers a new `EditorExportPlatform`. Export platforms provides functionality of exporting to the specific platform.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'






    self._ptr.call_with_return(236,tuple([platform._ptr]))

  @functools.native_method
  def remove_export_platform(self, platform:'py4godot_editorexportplatform.EditorExportPlatform'   ) -> None:
    r'''
				Removes an export platform registered by `add_export_platform`.
			'''

    assert(not platform is None)
    assert isinstance(platform, get_class('EditorExportPlatform')), 'platform must be EditorExportPlatform'






    self._ptr.call_with_return(237,tuple([platform._ptr]))

  @functools.native_method
  def add_node_3d_gizmo_plugin(self, plugin:'py4godot_editornode3dgizmoplugin.EditorNode3DGizmoPlugin'   ) -> None:
    r'''
				Registers a new `EditorNode3DGizmoPlugin`. Gizmo plugins are used to add custom gizmos to the 3D preview viewport for a `Node3D`.
				See `add_inspector_plugin` for an example of how to register a plugin.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorNode3DGizmoPlugin')), 'plugin must be EditorNode3DGizmoPlugin'






    self._ptr.call_with_return(238,tuple([plugin._ptr]))

  @functools.native_method
  def remove_node_3d_gizmo_plugin(self, plugin:'py4godot_editornode3dgizmoplugin.EditorNode3DGizmoPlugin'   ) -> None:
    r'''
				Removes a gizmo plugin registered by `add_node_3d_gizmo_plugin`.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorNode3DGizmoPlugin')), 'plugin must be EditorNode3DGizmoPlugin'






    self._ptr.call_with_return(239,tuple([plugin._ptr]))

  @functools.native_method
  def add_inspector_plugin(self, plugin:'py4godot_editorinspectorplugin.EditorInspectorPlugin'   ) -> None:
    r'''
				Registers a new `EditorInspectorPlugin`. Inspector plugins are used to extend `EditorInspector` and provide custom configuration tools for your object's properties.
				**Note:** Always use `remove_inspector_plugin` to remove the registered `EditorInspectorPlugin` when your `EditorPlugin` is disabled to prevent leaks and an unexpected behavior.
				
				```gdscript
				const MyInspectorPlugin = preload("res://addons/your_addon/path/to/your/script.gd")
				var inspector_plugin = MyInspectorPlugin.new()

				func _enter_tree():
					add_inspector_plugin(inspector_plugin)

				func _exit_tree():
					remove_inspector_plugin(inspector_plugin)
				```
				
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorInspectorPlugin')), 'plugin must be EditorInspectorPlugin'






    self._ptr.call_with_return(240,tuple([plugin._ptr]))

  @functools.native_method
  def remove_inspector_plugin(self, plugin:'py4godot_editorinspectorplugin.EditorInspectorPlugin'   ) -> None:
    r'''
				Removes an inspector plugin registered by `add_inspector_plugin`.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorInspectorPlugin')), 'plugin must be EditorInspectorPlugin'






    self._ptr.call_with_return(241,tuple([plugin._ptr]))

  @functools.native_method
  def add_resource_conversion_plugin(self, plugin:'py4godot_editorresourceconversionplugin.EditorResourceConversionPlugin'   ) -> None:
    r'''
				Registers a new `EditorResourceConversionPlugin`. Resource conversion plugins are used to add custom resource converters to the editor inspector.
				See `EditorResourceConversionPlugin` for an example of how to create a resource conversion plugin.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorResourceConversionPlugin')), 'plugin must be EditorResourceConversionPlugin'






    self._ptr.call_with_return(242,tuple([plugin._ptr]))

  @functools.native_method
  def remove_resource_conversion_plugin(self, plugin:'py4godot_editorresourceconversionplugin.EditorResourceConversionPlugin'   ) -> None:
    r'''
				Removes a resource conversion plugin registered by `add_resource_conversion_plugin`.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorResourceConversionPlugin')), 'plugin must be EditorResourceConversionPlugin'






    self._ptr.call_with_return(243,tuple([plugin._ptr]))

  @functools.native_method
  def set_input_event_forwarding_always_enabled(self) -> None:
    r'''
				Use this method if you always want to receive inputs from 3D view screen inside `_forward_3d_gui_input`. It might be especially usable if your plugin will want to use raycast in the scene.
			'''




    self._ptr.call_with_return(244,tuple([]))

  @functools.native_method
  def set_force_draw_over_forwarding_enabled(self) -> None:
    r'''
				Enables calling of `_forward_canvas_force_draw_over_viewport` for the 2D editor and `_forward_3d_force_draw_over_viewport` for the 3D editor when their viewports are updated. You need to call this method only once and it will work permanently for this plugin.
			'''




    self._ptr.call_with_return(245,tuple([]))

  @functools.native_method
  def add_context_menu_plugin(self, slot:'int'  , plugin:'py4godot_editorcontextmenuplugin.EditorContextMenuPlugin'   ) -> None:
    r'''
				Adds a plugin to the context menu. `slot` is the context menu where the plugin will be added.
				**Note:** A plugin instance can belong only to a single context menu slot.
			'''

    assert isinstance(slot, (int, float)), 'slot must be int or float'
    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorContextMenuPlugin')), 'plugin must be EditorContextMenuPlugin'







    self._ptr.call_with_return(246,tuple([slot, plugin._ptr]))

  @functools.native_method
  def remove_context_menu_plugin(self, plugin:'py4godot_editorcontextmenuplugin.EditorContextMenuPlugin'   ) -> None:
    r'''
				Removes the specified context menu plugin.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorContextMenuPlugin')), 'plugin must be EditorContextMenuPlugin'






    self._ptr.call_with_return(247,tuple([plugin._ptr]))

  @functools.native_method
  def get_editor_interface(self) -> typing.Union['py4godot_editorinterface.EditorInterface']:
    r'''
				Returns the `EditorInterface` singleton instance.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: EditorInterface
    _ret._ptr = self._ptr.call_with_return(248,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_script_create_dialog(self) -> typing.Union['py4godot_scriptcreatedialog.ScriptCreateDialog']:
    r'''
				Gets the Editor's dialog used for making scripts.
				**Note:** Users can configure it before use.
				**Warning:** Removing and freeing this node will render a part of the editor useless and may cause a crash.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ScriptCreateDialog
    _ret._ptr = self._ptr.call_with_return(249,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def add_debugger_plugin(self, script:'py4godot_editordebuggerplugin.EditorDebuggerPlugin'   ) -> None:
    r'''
				Adds a `Script` as debugger plugin to the Debugger. The script must extend `EditorDebuggerPlugin`.
			'''

    assert(not script is None)
    assert isinstance(script, get_class('EditorDebuggerPlugin')), 'script must be EditorDebuggerPlugin'






    self._ptr.call_with_return(250,tuple([script._ptr]))

  @functools.native_method
  def remove_debugger_plugin(self, script:'py4godot_editordebuggerplugin.EditorDebuggerPlugin'   ) -> None:
    r'''
				Removes the debugger plugin with given script from the Debugger.
			'''

    assert(not script is None)
    assert isinstance(script, get_class('EditorDebuggerPlugin')), 'script must be EditorDebuggerPlugin'






    self._ptr.call_with_return(251,tuple([script._ptr]))

  @functools.native_method
  def get_plugin_version(self) -> typing.Union[str]:
    r'''
				Provide the version of the plugin declared in the `plugin.cfg` config file.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(252,tuple([]))
    return utils.gd_string_to_py_string(_ret)



register_cast_function('EditorPlugin', EditorPlugin.cast)
register_class('EditorPlugin', EditorPlugin)
