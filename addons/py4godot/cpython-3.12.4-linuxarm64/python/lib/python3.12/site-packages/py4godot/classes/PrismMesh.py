# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.PrimitiveMesh as py4godot_primitivemesh 
from py4godot.wrappers.wrappers import CPPPrismMeshWrapper


class PrismMesh(py4godot_primitivemesh.PrimitiveMesh):
  r'''
		Class representing a prism-shaped `PrimitiveMesh`.
	'''

  @staticmethod
  def constructor():
    class_ = PrismMesh.construct_without_init()
    class_._ptr = constructor(638,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PrismMesh.construct_without_init()
    class_._ptr = constructor(638,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPrismMeshWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(638,0, ())


  def generate_wrapper(self):
    return CPPPrismMeshWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PrismMesh.__new__(PrismMesh)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PrismMesh'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PrismMesh.construct_without_init()
    cls._ptr = CPPPrismMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PrismMesh.construct_without_init()
    cls._ptr = CPPPrismMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def left_to_right(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_left_to_right()
    return _ret
  @left_to_right.setter
  def left_to_right(self,  value:'float'):
    self.set_left_to_right(value)
  @property
  def size(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector3'):
    self.set_size(value)
  @property
  def subdivide_width(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_subdivide_width()
    return _ret
  @subdivide_width.setter
  def subdivide_width(self,  value:'int'):
    self.set_subdivide_width(value)
  @property
  def subdivide_height(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_subdivide_height()
    return _ret
  @subdivide_height.setter
  def subdivide_height(self,  value:'int'):
    self.set_subdivide_height(value)
  @property
  def subdivide_depth(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_subdivide_depth()
    return _ret
  @subdivide_depth.setter
  def subdivide_depth(self,  value:'int'):
    self.set_subdivide_depth(value)
  @functools.native_method
  def set_left_to_right(self, left_to_right:'float'   ) -> None:
    r''''''

    assert isinstance(left_to_right, (int, float)), 'left_to_right must be int or float'

    self.py__left_to_right = left_to_right






    self._ptr.call_with_return(118,tuple([left_to_right]))

  @functools.native_method
  def get_left_to_right(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(119,tuple([]))

    return _ret


  @functools.native_method
  def set_size(self, size:'Vector3'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector3), 'size must be Vector3'

    self.py__size = size






    self._ptr.call_with_return(120,tuple([size._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(121,tuple([]))

    return _ret


  @functools.native_method
  def set_subdivide_width(self, segments:'int'   ) -> None:
    r''''''

    assert isinstance(segments, (int, float)), 'segments must be int or float'

    self.py__subdivide_width = segments






    self._ptr.call_with_return(122,tuple([segments]))

  @functools.native_method
  def get_subdivide_width(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(123,tuple([]))

    return _ret


  @functools.native_method
  def set_subdivide_height(self, segments:'int'   ) -> None:
    r''''''

    assert isinstance(segments, (int, float)), 'segments must be int or float'

    self.py__subdivide_height = segments






    self._ptr.call_with_return(124,tuple([segments]))

  @functools.native_method
  def get_subdivide_height(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(125,tuple([]))

    return _ret


  @functools.native_method
  def set_subdivide_depth(self, segments:'int'   ) -> None:
    r''''''

    assert isinstance(segments, (int, float)), 'segments must be int or float'

    self.py__subdivide_depth = segments






    self._ptr.call_with_return(126,tuple([segments]))

  @functools.native_method
  def get_subdivide_depth(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(127,tuple([]))

    return _ret



register_cast_function('PrismMesh', PrismMesh.cast)
register_class('PrismMesh', PrismMesh)
