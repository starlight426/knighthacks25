# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPAStar2DWrapper


class AStar2D(py4godot_refcounted.RefCounted):
  r'''
		An implementation of the A* algorithm, used to find the shortest path between two vertices on a connected graph in 2D space.
		See `AStar3D` for a more thorough explanation on how to use this class. `AStar2D` is a wrapper for `AStar3D` that enforces 2D coordinates.
	'''

  @staticmethod
  def constructor():
    class_ = AStar2D.construct_without_init()
    class_._ptr = constructor(62,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AStar2D.construct_without_init()
    class_._ptr = constructor(62,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAStar2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(62,0, ())


  def generate_wrapper(self):
    return CPPAStar2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AStar2D.__new__(AStar2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AStar2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AStar2D.construct_without_init()
    cls._ptr = CPPAStar2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AStar2D.construct_without_init()
    cls._ptr = CPPAStar2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def neighbor_filter_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_neighbor_filter_enabled()
    return _ret
  @neighbor_filter_enabled.setter
  def neighbor_filter_enabled(self,  value:'bool'):
    self.set_neighbor_filter_enabled(value)
  @functools.native_method
  def _filter_neighbor(self, from_id:'int'   , neighbor_id:'int'   ) -> typing.Union[bool]:
    r'''
				Called when neighboring enters processing and if `neighbor_filter_enabled` is `true`. If `true` is returned the point will not be processed.
				Note that this function is hidden in the default `AStar2D` class.
			'''

    assert isinstance(from_id, (int, float)), 'from_id must be int or float'
    assert isinstance(neighbor_id, (int, float)), 'neighbor_id must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(53,tuple([from_id, neighbor_id]))
    return _ret


  @functools.native_method
  def _estimate_cost(self, from_id:'int'   , end_id:'int'   ) -> typing.Union[float]:
    r'''
				Called when estimating the cost between a point and the path's ending point.
				Note that this function is hidden in the default `AStar2D` class.
			'''

    assert isinstance(from_id, (int, float)), 'from_id must be int or float'
    assert isinstance(end_id, (int, float)), 'end_id must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([from_id, end_id]))
    return _ret


  @functools.native_method
  def _compute_cost(self, from_id:'int'   , to_id:'int'   ) -> typing.Union[float]:
    r'''
				Called when computing the cost between two connected points.
				Note that this function is hidden in the default `AStar2D` class.
			'''

    assert isinstance(from_id, (int, float)), 'from_id must be int or float'
    assert isinstance(to_id, (int, float)), 'to_id must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([from_id, to_id]))
    return _ret


  @functools.native_method
  def get_available_point_id(self) -> typing.Union[int]:
    r'''
				Returns the next available point ID with no point associated to it.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))
    return _ret


  @functools.native_method
  def add_point(self, id:'int'   , position:'Vector2'   , weight_scale:'float' =1.0  ) -> None:
    r'''
				Adds a new point at the given position with the given identifier. The `id` must be 0 or larger, and the `weight_scale` must be 0.0 or greater.
				The `weight_scale` is multiplied by the result of `_compute_cost` when determining the overall cost of traveling across a segment from a neighboring point to this point. Thus, all else being equal, the algorithm prefers points with lower `weight_scale`s to form a path.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(1, 0), 4) # Adds the point (1, 0) with weight_scale 4 and id 1
				```
				
				
				If there already exists a point for the given `id`, its position and weight scale are updated to the given values.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'
    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'
    assert isinstance(weight_scale, (int, float)), 'weight_scale must be int or float'








    self._ptr.call_with_return(57,tuple([id, position._ptr, weight_scale]))

  @functools.native_method
  def get_point_position(self, id:'int'   ) -> typing.Union['Vector2']:
    r'''
				Returns the position of the point associated with the given `id`.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([id]))
    return _ret


  @functools.native_method
  def set_point_position(self, id:'int'   , position:'Vector2'   ) -> None:
    r'''
				Sets the `position` for the point with the given `id`.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'
    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'







    self._ptr.call_with_return(59,tuple([id, position._ptr]))

  @functools.native_method
  def get_point_weight_scale(self, id:'int'   ) -> typing.Union[float]:
    r'''
				Returns the weight scale of the point associated with the given `id`.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(60,tuple([id]))
    return _ret


  @functools.native_method
  def set_point_weight_scale(self, id:'int'   , weight_scale:'float'   ) -> None:
    r'''
				Sets the `weight_scale` for the point with the given `id`. The `weight_scale` is multiplied by the result of `_compute_cost` when determining the overall cost of traveling across a segment from a neighboring point to this point.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(weight_scale, (int, float)), 'weight_scale must be int or float'







    self._ptr.call_with_return(61,tuple([id, weight_scale]))

  @functools.native_method
  def remove_point(self, id:'int'   ) -> None:
    r'''
				Removes the point associated with the given `id` from the points pool.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'






    self._ptr.call_with_return(62,tuple([id]))

  @functools.native_method
  def has_point(self, id:'int'   ) -> typing.Union[bool]:
    r'''
				Returns whether a point associated with the given `id` exists.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(63,tuple([id]))
    return _ret


  @functools.native_method
  def get_point_connections(self, id:'int'   ) -> typing.Union['PackedInt64Array']:
    r'''
				Returns an array with the IDs of the points that form the connection with the given point.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(0, 0))
				astar.add_point(2, Vector2(0, 1))
				astar.add_point(3, Vector2(1, 1))
				astar.add_point(4, Vector2(2, 0))

				astar.connect_points(1, 2, true)
				astar.connect_points(1, 3, true)

				var neighbors = astar.get_point_connections(1) # Returns `2, 3`
				```
				
				
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret = PackedInt64Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(64,tuple([id]))
    return _ret


  @functools.native_method
  def get_point_ids(self) -> typing.Union['PackedInt64Array']:
    r'''
				Returns an array of all point IDs.
			'''




    _ret = PackedInt64Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(65,tuple([]))
    return _ret


  @functools.native_method
  def set_neighbor_filter_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__neighbor_filter_enabled = enabled






    self._ptr.call_with_return(66,tuple([enabled]))

  @functools.native_method
  def is_neighbor_filter_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(67,tuple([]))

    return _ret


  @functools.native_method
  def set_point_disabled(self, id:'int'   , disabled:'bool' =True  ) -> None:
    r'''
				Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(disabled, bool), 'disabled must be bool'







    self._ptr.call_with_return(68,tuple([id, disabled]))

  @functools.native_method
  def is_point_disabled(self, id:'int'   ) -> typing.Union[bool]:
    r'''
				Returns whether a point is disabled or not for pathfinding. By default, all points are enabled.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(69,tuple([id]))
    return _ret


  @functools.native_method
  def connect_points(self, id:'int'   , to_id:'int'   , bidirectional:'bool' =True  ) -> None:
    r'''
				Creates a segment between the given points. If `bidirectional` is `false`, only movement from `id` to `to_id` is allowed, not the reverse direction.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(1, 1))
				astar.add_point(2, Vector2(0, 5))
				astar.connect_points(1, 2, false)
				```
				
				
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(to_id, (int, float)), 'to_id must be int or float'
    assert isinstance(bidirectional, bool), 'bidirectional must be bool'








    self._ptr.call_with_return(70,tuple([id, to_id, bidirectional]))

  @functools.native_method
  def disconnect_points(self, id:'int'   , to_id:'int'   , bidirectional:'bool' =True  ) -> None:
    r'''
				Deletes the segment between the given points. If `bidirectional` is `false`, only movement from `id` to `to_id` is prevented, and a unidirectional segment possibly remains.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(to_id, (int, float)), 'to_id must be int or float'
    assert isinstance(bidirectional, bool), 'bidirectional must be bool'








    self._ptr.call_with_return(71,tuple([id, to_id, bidirectional]))

  @functools.native_method
  def are_points_connected(self, id:'int'   , to_id:'int'   , bidirectional:'bool' =True  ) -> typing.Union[bool]:
    r'''
				Returns whether there is a connection/segment between the given points. If `bidirectional` is `false`, returns whether movement from `id` to `to_id` is possible through this segment.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(to_id, (int, float)), 'to_id must be int or float'
    assert isinstance(bidirectional, bool), 'bidirectional must be bool'








    _ret = 0
    _ret = self._ptr.call_with_return(72,tuple([id, to_id, bidirectional]))
    return _ret


  @functools.native_method
  def get_point_count(self) -> typing.Union[int]:
    r'''
				Returns the number of points currently in the points pool.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([]))
    return _ret


  @functools.native_method
  def get_point_capacity(self) -> typing.Union[int]:
    r'''
				Returns the capacity of the structure backing the points, useful in conjunction with `reserve_space`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(74,tuple([]))
    return _ret


  @functools.native_method
  def reserve_space(self, num_nodes:'int'   ) -> None:
    r'''
				Reserves space internally for `num_nodes` points. Useful if you're adding a known large number of points at once, such as points on a grid.
			'''

    assert isinstance(num_nodes, (int, float)), 'num_nodes must be int or float'






    self._ptr.call_with_return(75,tuple([num_nodes]))

  @functools.native_method
  def clear(self) -> None:
    r'''
				Clears all the points and segments.
			'''




    self._ptr.call_with_return(76,tuple([]))

  @functools.native_method
  def get_closest_point(self, to_position:'Vector2'   , include_disabled:'bool' =False  ) -> typing.Union[int]:
    r'''
				Returns the ID of the closest point to `to_position`, optionally taking disabled points into account. Returns `-1` if there are no points in the points pool.
				**Note:** If several points are the closest to `to_position`, the one with the smallest ID will be returned, ensuring a deterministic result.
			'''

    assert(not to_position is None)
    assert isinstance(to_position, Vector2), 'to_position must be Vector2'
    assert isinstance(include_disabled, bool), 'include_disabled must be bool'







    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([to_position._ptr, include_disabled]))
    return _ret


  @functools.native_method
  def get_closest_position_in_segment(self, to_position:'Vector2'   ) -> typing.Union['Vector2']:
    r'''
				Returns the closest position to `to_position` that resides inside a segment between two connected points.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(0, 0))
				astar.add_point(2, Vector2(0, 5))
				astar.connect_points(1, 2)
				var res = astar.get_closest_position_in_segment(Vector2(3, 3)) # Returns (0, 3)
				```
				
				
				The result is in the segment that goes from `y = 0` to `y = 5`. It's the closest position in the segment to the given point.
			'''

    assert(not to_position is None)
    assert isinstance(to_position, Vector2), 'to_position must be Vector2'






    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([to_position._ptr]))
    return _ret


  @functools.native_method
  def get_point_path(self, from_id:'int'   , to_id:'int'   , allow_partial_path:'bool' =False  ) -> typing.Union['PackedVector2Array']:
    r'''
				Returns an array with the points that are in the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.
				If there is no valid path to the target, and `allow_partial_path` is `true`, returns a path to the point closest to the target that can be reached.
				**Note:** This method is not thread-safe; it can only be used from a single `Thread` at a given time. Consider using `Mutex` to ensure exclusive access to one thread to avoid race conditions.
				Additionally, when `allow_partial_path` is `true` and `to_id` is disabled the search may take an unusually long time to finish.
			'''

    assert isinstance(from_id, (int, float)), 'from_id must be int or float'
    assert isinstance(to_id, (int, float)), 'to_id must be int or float'
    assert isinstance(allow_partial_path, bool), 'allow_partial_path must be bool'








    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([from_id, to_id, allow_partial_path]))
    return _ret


  @functools.native_method
  def get_id_path(self, from_id:'int'   , to_id:'int'   , allow_partial_path:'bool' =False  ) -> typing.Union['PackedInt64Array']:
    r'''
				Returns an array with the IDs of the points that form the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.
				If there is no valid path to the target, and `allow_partial_path` is `true`, returns a path to the point closest to the target that can be reached.
				**Note:** When `allow_partial_path` is `true` and `to_id` is disabled the search may take an unusually long time to finish.
				
				```gdscript
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(0, 0))
				astar.add_point(2, Vector2(0, 1), 1) # Default weight is 1
				astar.add_point(3, Vector2(1, 1))
				astar.add_point(4, Vector2(2, 0))

				astar.connect_points(1, 2, false)
				astar.connect_points(2, 3, false)
				astar.connect_points(4, 3, false)
				astar.connect_points(1, 4, false)

				var res = astar.get_id_path(1, 3) # Returns `1, 2, 3`
				```
				
				
				If you change the 2nd point's weight to 3, then the result will be ``1, 4, 3`` instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.
			'''

    assert isinstance(from_id, (int, float)), 'from_id must be int or float'
    assert isinstance(to_id, (int, float)), 'to_id must be int or float'
    assert isinstance(allow_partial_path, bool), 'allow_partial_path must be bool'








    _ret = PackedInt64Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([from_id, to_id, allow_partial_path]))
    return _ret



register_cast_function('AStar2D', AStar2D.cast)
register_class('AStar2D', AStar2D)
