# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.StringTypedArray as py4godot_stringtypedarray 
  import py4godot.classes.BoneAttachment3D as py4godot_boneattachment3d 
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
import py4godot.classes.StringTypedArray as py4godot_stringtypedarray 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFSkeletonWrapper


class GLTFSkeleton(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFSkeleton.construct_without_init()
    class_._ptr = constructor(358,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFSkeleton.construct_without_init()
    class_._ptr = constructor(358,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFSkeletonWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(358,0, ())


  def generate_wrapper(self):
    return CPPGLTFSkeletonWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFSkeleton.__new__(GLTFSkeleton)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFSkeleton'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFSkeleton.construct_without_init()
    cls._ptr = CPPGLTFSkeletonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFSkeleton.construct_without_init()
    cls._ptr = CPPGLTFSkeletonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def joints(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_joints()
    return _ret
  @joints.setter
  def joints(self,  value:'PackedInt32Array'):
    self.set_joints(value)
  @property
  def roots(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_roots()
    return _ret
  @roots.setter
  def roots(self,  value:'PackedInt32Array'):
    self.set_roots(value)
  @property
  def unique_names(self) -> typing.Union['Array']:
    r''''''
    _ret = self. get_unique_names()
    return _ret
  @unique_names.setter
  def unique_names(self,  value:'Array'):
    self.set_unique_names(value)
  @property
  def godot_bone_node(self) -> typing.Union['Dictionary']:
    r''''''
    _ret = self. get_godot_bone_node()
    return _ret
  @godot_bone_node.setter
  def godot_bone_node(self,  value:'Dictionary'):
    self.set_godot_bone_node(value)
  @functools.native_method
  def get_joints(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return _ret


  @functools.native_method
  def set_joints(self, joints:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not joints is None)
    assert isinstance(joints, PackedInt32Array), 'joints must be PackedInt32Array'

    self.py__joints = joints






    self._ptr.call_with_return(78,tuple([joints._ptr]))

  @functools.native_method
  def get_roots(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_roots(self, roots:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not roots is None)
    assert isinstance(roots, PackedInt32Array), 'roots must be PackedInt32Array'

    self.py__roots = roots






    self._ptr.call_with_return(80,tuple([roots._ptr]))

  @functools.native_method
  def get_godot_skeleton(self) -> typing.Union['py4godot_skeleton3d.Skeleton3D']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Skeleton3D
    _ret._ptr = self._ptr.call_with_return(81,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_unique_names(self) -> typing.Union['py4godot_stringtypedarray.StringTypedArray']:
    r''''''




    _ret = py4godot_stringtypedarray.StringTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_unique_names(self, unique_names:'py4godot_stringtypedarray.StringTypedArray'   ) -> None:
    r''''''

    assert isinstance(unique_names, get_class('StringTypedArray')), 'unique_names must be StringTypedArray'

    self.py__unique_names = unique_names






    self._ptr.call_with_return(83,tuple([unique_names._ptr]))

  @functools.native_method
  def get_godot_bone_node(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_godot_bone_node(self, godot_bone_node:'Dictionary'   ) -> None:
    r''''''

    assert(not godot_bone_node is None)
    assert isinstance(godot_bone_node, Dictionary), 'godot_bone_node must be Dictionary'

    self.py__godot_bone_node = godot_bone_node






    self._ptr.call_with_return(85,tuple([godot_bone_node._ptr]))

  @functools.native_method
  def get_bone_attachment_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))
    return _ret


  @functools.native_method
  def get_bone_attachment(self, idx:'int'   ) -> typing.Union['py4godot_boneattachment3d.BoneAttachment3D']:
    r''''''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: BoneAttachment3D
    _ret._ptr = self._ptr.call_with_return(87,tuple([idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('GLTFSkeleton', GLTFSkeleton.cast)
register_class('GLTFSkeleton', GLTFSkeleton)
