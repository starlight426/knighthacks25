# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.TextServerDummy as py4godot_textserverdummy 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.TextServer as py4godot_textserver 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.TextServerAdvanced as py4godot_textserveradvanced 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.TextServerExtension as py4godot_textserverextension 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
import py4godot.classes.BaseButton as py4godot_basebutton 
from py4godot.wrappers.wrappers import CPPLinkButtonWrapper

class UnderlineMode:
  UNDERLINE_MODE_ALWAYS = 0
  UNDERLINE_MODE_ON_HOVER = 1
  UNDERLINE_MODE_NEVER = 2


class LinkButton(py4godot_basebutton.BaseButton):
  r'''
		A button that represents a link. This type of button is primarily used for interactions that cause a context change (like linking to a web page).
		See also `BaseButton` which contains common properties and methods associated with this node.
	'''

  @staticmethod
  def constructor():
    class_ = LinkButton.construct_without_init()
    class_._ptr = constructor(459,0, ())
    return class_
  @staticmethod
  def new():
    class_ = LinkButton.construct_without_init()
    class_._ptr = constructor(459,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPLinkButtonWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(459,0, ())


  def generate_wrapper(self):
    return CPPLinkButtonWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = LinkButton.__new__(LinkButton)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'LinkButton'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = LinkButton.construct_without_init()
    cls._ptr = CPPLinkButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = LinkButton.construct_without_init()
    cls._ptr = CPPLinkButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def text(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_text()
    return _ret
  @text.setter
  def text(self,  value:'str'):
    self.set_text(value)
  @property
  def underline(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_underline_mode()
    return _ret
  @underline.setter
  def underline(self,  value:'int'):
    self.set_underline_mode(value)
  @property
  def uri(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_uri()
    return _ret
  @uri.setter
  def uri(self,  value:'str'):
    self.set_uri(value)
  @property
  def text_direction(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_text_direction()
    return _ret
  @text_direction.setter
  def text_direction(self,  value:'int'):
    self.set_text_direction(value)
  @property
  def language(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_language()
    return _ret
  @language.setter
  def language(self,  value:'str'):
    self.set_language(value)
  @property
  def structured_text_bidi_override(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_structured_text_bidi_override()
    return _ret
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:'int'):
    self.set_structured_text_bidi_override(value)
  @property
  def structured_text_bidi_override_options(self) -> typing.Union['Array']:
    r''''''
    _ret = self. get_structured_text_bidi_override_options()
    return _ret
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:'Array'):
    self.set_structured_text_bidi_override_options(value)
  @functools.native_method
  def set_text(self, text:'str'   ) -> None:
    r''''''

    assert(not text is None)
    assert isinstance(text, (str, String)), 'text must be str or String'

    self.py__text = text



    assert(isinstance(text, (str, String)))
    py_string_text = text if isinstance(text, StringName) else c_utils.py_string_to_string(text)

    py__string_text = utils.py_string_to_string(text)
    py__string_text.shouldBeDeleted = False


    self._ptr.call_with_return(458,tuple([py__string_text._ptr]))

  @functools.native_method
  def get_text(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(459,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_text_direction(self, direction:'int'  ) -> None:
    r''''''

    assert isinstance(direction, (int, float)), 'direction must be int or float'

    self.py__text_direction = direction






    self._ptr.call_with_return(460,tuple([direction]))

  @functools.native_method
  def get_text_direction(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(461,tuple([]))

    return _ret


  @functools.native_method
  def set_language(self, language:'str'   ) -> None:
    r''''''

    assert(not language is None)
    assert isinstance(language, (str, String)), 'language must be str or String'

    self.py__language = language



    assert(isinstance(language, (str, String)))
    py_string_language = language if isinstance(language, StringName) else c_utils.py_string_to_string(language)

    py__string_language = utils.py_string_to_string(language)
    py__string_language.shouldBeDeleted = False


    self._ptr.call_with_return(462,tuple([py__string_language._ptr]))

  @functools.native_method
  def get_language(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(463,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_uri(self, uri:'str'   ) -> None:
    r''''''

    assert(not uri is None)
    assert isinstance(uri, (str, String)), 'uri must be str or String'

    self.py__uri = uri



    assert(isinstance(uri, (str, String)))
    py_string_uri = uri if isinstance(uri, StringName) else c_utils.py_string_to_string(uri)

    py__string_uri = utils.py_string_to_string(uri)
    py__string_uri.shouldBeDeleted = False


    self._ptr.call_with_return(464,tuple([py__string_uri._ptr]))

  @functools.native_method
  def get_uri(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(465,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_underline_mode(self, underline_mode:'int'  ) -> None:
    r''''''

    assert isinstance(underline_mode, (int, float)), 'underline_mode must be int or float'

    self.py__underline = underline_mode






    self._ptr.call_with_return(466,tuple([underline_mode]))

  @functools.native_method
  def get_underline_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(467,tuple([]))

    return _ret


  @functools.native_method
  def set_structured_text_bidi_override(self, parser:'int'  ) -> None:
    r''''''

    assert isinstance(parser, (int, float)), 'parser must be int or float'

    self.py__structured_text_bidi_override = parser






    self._ptr.call_with_return(468,tuple([parser]))

  @functools.native_method
  def get_structured_text_bidi_override(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(469,tuple([]))

    return _ret


  @functools.native_method
  def set_structured_text_bidi_override_options(self, args:'Array'   ) -> None:
    r''''''

    assert(not args is None)
    assert isinstance(args, Array), 'args must be Array'

    self.py__structured_text_bidi_override_options = args






    self._ptr.call_with_return(470,tuple([args._ptr]))

  @functools.native_method
  def get_structured_text_bidi_override_options(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(471,tuple([]))

    return _ret



register_cast_function('LinkButton', LinkButton.cast)
register_class('LinkButton', LinkButton)
