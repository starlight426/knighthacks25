# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.XRTracker as py4godot_xrtracker 
from py4godot.wrappers.wrappers import CPPXRFaceTrackerWrapper

class BlendShapeEntry:
  FT_EYE_LOOK_OUT_RIGHT = 0
  FT_EYE_LOOK_IN_RIGHT = 1
  FT_EYE_LOOK_UP_RIGHT = 2
  FT_EYE_LOOK_DOWN_RIGHT = 3
  FT_EYE_LOOK_OUT_LEFT = 4
  FT_EYE_LOOK_IN_LEFT = 5
  FT_EYE_LOOK_UP_LEFT = 6
  FT_EYE_LOOK_DOWN_LEFT = 7
  FT_EYE_CLOSED_RIGHT = 8
  FT_EYE_CLOSED_LEFT = 9
  FT_EYE_SQUINT_RIGHT = 10
  FT_EYE_SQUINT_LEFT = 11
  FT_EYE_WIDE_RIGHT = 12
  FT_EYE_WIDE_LEFT = 13
  FT_EYE_DILATION_RIGHT = 14
  FT_EYE_DILATION_LEFT = 15
  FT_EYE_CONSTRICT_RIGHT = 16
  FT_EYE_CONSTRICT_LEFT = 17
  FT_BROW_PINCH_RIGHT = 18
  FT_BROW_PINCH_LEFT = 19
  FT_BROW_LOWERER_RIGHT = 20
  FT_BROW_LOWERER_LEFT = 21
  FT_BROW_INNER_UP_RIGHT = 22
  FT_BROW_INNER_UP_LEFT = 23
  FT_BROW_OUTER_UP_RIGHT = 24
  FT_BROW_OUTER_UP_LEFT = 25
  FT_NOSE_SNEER_RIGHT = 26
  FT_NOSE_SNEER_LEFT = 27
  FT_NASAL_DILATION_RIGHT = 28
  FT_NASAL_DILATION_LEFT = 29
  FT_NASAL_CONSTRICT_RIGHT = 30
  FT_NASAL_CONSTRICT_LEFT = 31
  FT_CHEEK_SQUINT_RIGHT = 32
  FT_CHEEK_SQUINT_LEFT = 33
  FT_CHEEK_PUFF_RIGHT = 34
  FT_CHEEK_PUFF_LEFT = 35
  FT_CHEEK_SUCK_RIGHT = 36
  FT_CHEEK_SUCK_LEFT = 37
  FT_JAW_OPEN = 38
  FT_MOUTH_CLOSED = 39
  FT_JAW_RIGHT = 40
  FT_JAW_LEFT = 41
  FT_JAW_FORWARD = 42
  FT_JAW_BACKWARD = 43
  FT_JAW_CLENCH = 44
  FT_JAW_MANDIBLE_RAISE = 45
  FT_LIP_SUCK_UPPER_RIGHT = 46
  FT_LIP_SUCK_UPPER_LEFT = 47
  FT_LIP_SUCK_LOWER_RIGHT = 48
  FT_LIP_SUCK_LOWER_LEFT = 49
  FT_LIP_SUCK_CORNER_RIGHT = 50
  FT_LIP_SUCK_CORNER_LEFT = 51
  FT_LIP_FUNNEL_UPPER_RIGHT = 52
  FT_LIP_FUNNEL_UPPER_LEFT = 53
  FT_LIP_FUNNEL_LOWER_RIGHT = 54
  FT_LIP_FUNNEL_LOWER_LEFT = 55
  FT_LIP_PUCKER_UPPER_RIGHT = 56
  FT_LIP_PUCKER_UPPER_LEFT = 57
  FT_LIP_PUCKER_LOWER_RIGHT = 58
  FT_LIP_PUCKER_LOWER_LEFT = 59
  FT_MOUTH_UPPER_UP_RIGHT = 60
  FT_MOUTH_UPPER_UP_LEFT = 61
  FT_MOUTH_LOWER_DOWN_RIGHT = 62
  FT_MOUTH_LOWER_DOWN_LEFT = 63
  FT_MOUTH_UPPER_DEEPEN_RIGHT = 64
  FT_MOUTH_UPPER_DEEPEN_LEFT = 65
  FT_MOUTH_UPPER_RIGHT = 66
  FT_MOUTH_UPPER_LEFT = 67
  FT_MOUTH_LOWER_RIGHT = 68
  FT_MOUTH_LOWER_LEFT = 69
  FT_MOUTH_CORNER_PULL_RIGHT = 70
  FT_MOUTH_CORNER_PULL_LEFT = 71
  FT_MOUTH_CORNER_SLANT_RIGHT = 72
  FT_MOUTH_CORNER_SLANT_LEFT = 73
  FT_MOUTH_FROWN_RIGHT = 74
  FT_MOUTH_FROWN_LEFT = 75
  FT_MOUTH_STRETCH_RIGHT = 76
  FT_MOUTH_STRETCH_LEFT = 77
  FT_MOUTH_DIMPLE_RIGHT = 78
  FT_MOUTH_DIMPLE_LEFT = 79
  FT_MOUTH_RAISER_UPPER = 80
  FT_MOUTH_RAISER_LOWER = 81
  FT_MOUTH_PRESS_RIGHT = 82
  FT_MOUTH_PRESS_LEFT = 83
  FT_MOUTH_TIGHTENER_RIGHT = 84
  FT_MOUTH_TIGHTENER_LEFT = 85
  FT_TONGUE_OUT = 86
  FT_TONGUE_UP = 87
  FT_TONGUE_DOWN = 88
  FT_TONGUE_RIGHT = 89
  FT_TONGUE_LEFT = 90
  FT_TONGUE_ROLL = 91
  FT_TONGUE_BLEND_DOWN = 92
  FT_TONGUE_CURL_UP = 93
  FT_TONGUE_SQUISH = 94
  FT_TONGUE_FLAT = 95
  FT_TONGUE_TWIST_RIGHT = 96
  FT_TONGUE_TWIST_LEFT = 97
  FT_SOFT_PALATE_CLOSE = 98
  FT_THROAT_SWALLOW = 99
  FT_NECK_FLEX_RIGHT = 100
  FT_NECK_FLEX_LEFT = 101
  FT_EYE_CLOSED = 102
  FT_EYE_WIDE = 103
  FT_EYE_SQUINT = 104
  FT_EYE_DILATION = 105
  FT_EYE_CONSTRICT = 106
  FT_BROW_DOWN_RIGHT = 107
  FT_BROW_DOWN_LEFT = 108
  FT_BROW_DOWN = 109
  FT_BROW_UP_RIGHT = 110
  FT_BROW_UP_LEFT = 111
  FT_BROW_UP = 112
  FT_NOSE_SNEER = 113
  FT_NASAL_DILATION = 114
  FT_NASAL_CONSTRICT = 115
  FT_CHEEK_PUFF = 116
  FT_CHEEK_SUCK = 117
  FT_CHEEK_SQUINT = 118
  FT_LIP_SUCK_UPPER = 119
  FT_LIP_SUCK_LOWER = 120
  FT_LIP_SUCK = 121
  FT_LIP_FUNNEL_UPPER = 122
  FT_LIP_FUNNEL_LOWER = 123
  FT_LIP_FUNNEL = 124
  FT_LIP_PUCKER_UPPER = 125
  FT_LIP_PUCKER_LOWER = 126
  FT_LIP_PUCKER = 127
  FT_MOUTH_UPPER_UP = 128
  FT_MOUTH_LOWER_DOWN = 129
  FT_MOUTH_OPEN = 130
  FT_MOUTH_RIGHT = 131
  FT_MOUTH_LEFT = 132
  FT_MOUTH_SMILE_RIGHT = 133
  FT_MOUTH_SMILE_LEFT = 134
  FT_MOUTH_SMILE = 135
  FT_MOUTH_SAD_RIGHT = 136
  FT_MOUTH_SAD_LEFT = 137
  FT_MOUTH_SAD = 138
  FT_MOUTH_STRETCH = 139
  FT_MOUTH_DIMPLE = 140
  FT_MOUTH_TIGHTENER = 141
  FT_MOUTH_PRESS = 142
  FT_MAX = 143


class XRFaceTracker(py4godot_xrtracker.XRTracker):
  r'''
		An instance of this object represents a tracked face and its corresponding blend shapes. The blend shapes come from the `url=https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/unified-blendshapes`Unified Expressions`/url` standard, and contain extended details and visuals for each blend shape. Additionally the `url=https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/compatibility/overview`Tracking Standard Comparison`/url` page documents the relationship between Unified Expressions and other standards.
		As face trackers are turned on they are registered with the `XRServer`.
	'''

  @staticmethod
  def constructor():
    class_ = XRFaceTracker.construct_without_init()
    class_._ptr = constructor(1018,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRFaceTracker.construct_without_init()
    class_._ptr = constructor(1018,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRFaceTrackerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1018,0, ())


  def generate_wrapper(self):
    return CPPXRFaceTrackerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XRFaceTracker.__new__(XRFaceTracker)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRFaceTracker'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRFaceTracker.construct_without_init()
    cls._ptr = CPPXRFaceTrackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRFaceTracker.construct_without_init()
    cls._ptr = CPPXRFaceTrackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def blend_shapes(self) -> typing.Union['PackedFloat32Array']:
    r''''''
    _ret = self. get_blend_shapes()
    return _ret
  @blend_shapes.setter
  def blend_shapes(self,  value:'PackedFloat32Array'):
    self.set_blend_shapes(value)
  @functools.native_method
  def get_blend_shape(self, blend_shape:'int'  ) -> typing.Union[float]:
    r'''
				Returns the requested face blend shape weight.
			'''

    assert isinstance(blend_shape, (int, float)), 'blend_shape must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([blend_shape]))
    return _ret


  @functools.native_method
  def set_blend_shape(self, blend_shape:'int'  , weight:'float'   ) -> None:
    r'''
				Sets a face blend shape weight.
			'''

    assert isinstance(blend_shape, (int, float)), 'blend_shape must be int or float'
    assert isinstance(weight, (int, float)), 'weight must be int or float'







    self._ptr.call_with_return(60,tuple([blend_shape, weight]))

  @functools.native_method
  def get_blend_shapes(self) -> typing.Union['PackedFloat32Array']:
    r''''''




    _ret = PackedFloat32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(61,tuple([]))

    return _ret


  @functools.native_method
  def set_blend_shapes(self, weights:'PackedFloat32Array'   ) -> None:
    r''''''

    assert(not weights is None)
    assert isinstance(weights, PackedFloat32Array), 'weights must be PackedFloat32Array'

    self.py__blend_shapes = weights






    self._ptr.call_with_return(62,tuple([weights._ptr]))


register_cast_function('XRFaceTracker', XRFaceTracker.cast)
register_class('XRFaceTracker', XRFaceTracker)
