# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPJavaScriptObjectWrapper


class JavaScriptObject(py4godot_refcounted.RefCounted):
  r'''
		JavaScriptObject is used to interact with JavaScript objects retrieved or created via `JavaScriptBridge.get_interface`, `JavaScriptBridge.create_object`, or `JavaScriptBridge.create_callback`.
		```gdscript
		extends Node

		var _my_js_callback = JavaScriptBridge.create_callback(myCallback) # This reference must be kept
		var console = JavaScriptBridge.get_interface("console")

		func _init():
			var buf = JavaScriptBridge.create_object("ArrayBuffer", 10) # new ArrayBuffer(10)
			print(buf) # Prints `JavaScriptObject:OBJECT_ID`
			var uint8arr = JavaScriptBridge.create_object("Uint8Array", buf) # new Uint8Array(buf)
			uint8arr`1` = 255
			prints(uint8arr`1`, uint8arr.byteLength) # Prints "255 10"

			# Prints "Uint8Array(10) ` 0, 255, 0, 0, 0, 0, 0, 0, 0, 0 `" in the browser's console.
			console.log(uint8arr)

			# Equivalent of JavaScriptBridge: Array.from(uint8arr).forEach(myCallback)
			JavaScriptBridge.get_interface("Array").from(uint8arr).forEach(_my_js_callback)

		func myCallback(args):
			# Will be called with the parameters passed to the "forEach" callback
			# `0, 0, `JavaScriptObject:1173``
			# `255, 1, `JavaScriptObject:1173``
			# ...
			# `0, 9, `JavaScriptObject:1180``
			print(args)
		```
		**Note:** Only available in the Web platform.
	'''

  @staticmethod
  def constructor():
    class_ = JavaScriptObject.construct_without_init()
    class_._ptr = constructor(441,0, ())
    return class_
  @staticmethod
  def new():
    class_ = JavaScriptObject.construct_without_init()
    class_._ptr = constructor(441,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPJavaScriptObjectWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(441,0, ())


  def generate_wrapper(self):
    return CPPJavaScriptObjectWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = JavaScriptObject.__new__(JavaScriptObject)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'JavaScriptObject'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = JavaScriptObject.construct_without_init()
    cls._ptr = CPPJavaScriptObjectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = JavaScriptObject.construct_without_init()
    cls._ptr = CPPJavaScriptObjectWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('JavaScriptObject', JavaScriptObject.cast)
register_class('JavaScriptObject', JavaScriptObject)
