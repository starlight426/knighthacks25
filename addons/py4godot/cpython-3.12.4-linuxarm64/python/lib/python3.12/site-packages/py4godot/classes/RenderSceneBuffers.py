# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderSceneBuffersConfiguration as py4godot_renderscenebuffersconfiguration 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRenderSceneBuffersWrapper


class RenderSceneBuffers(py4godot_refcounted.RefCounted):
  r'''
		Abstract scene buffers object, created for each viewport for which 3D rendering is done. It manages any additional buffers used during rendering and will discard buffers when the viewport is resized.
		**Note:** This is an internal rendering server object, do not instantiate this from script.
	'''

  @staticmethod
  def constructor():
    class_ = RenderSceneBuffers.construct_without_init()
    class_._ptr = constructor(676,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RenderSceneBuffers.construct_without_init()
    class_._ptr = constructor(676,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRenderSceneBuffersWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(676,0, ())


  def generate_wrapper(self):
    return CPPRenderSceneBuffersWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RenderSceneBuffers.__new__(RenderSceneBuffers)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RenderSceneBuffers'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderSceneBuffers.construct_without_init()
    cls._ptr = CPPRenderSceneBuffersWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderSceneBuffers.construct_without_init()
    cls._ptr = CPPRenderSceneBuffersWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def configure(self, config:'py4godot_renderscenebuffersconfiguration.RenderSceneBuffersConfiguration'   ) -> None:
    r'''
				This method is called by the rendering server when the associated viewport's configuration is changed. It will discard the old buffers and recreate the internal buffers used.
			'''

    assert(not config is None)
    assert isinstance(config, get_class('RenderSceneBuffersConfiguration')), 'config must be RenderSceneBuffersConfiguration'






    self._ptr.call_with_return(53,tuple([config._ptr]))


register_cast_function('RenderSceneBuffers', RenderSceneBuffers.cast)
register_class('RenderSceneBuffers', RenderSceneBuffers)
