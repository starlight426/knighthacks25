# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.PhysicsDirectSpaceState3D as py4godot_physicsdirectspacestate3d 
from py4godot.wrappers.wrappers import CPPPhysicsDirectSpaceState3DExtensionWrapper


class PhysicsDirectSpaceState3DExtension(py4godot_physicsdirectspacestate3d.PhysicsDirectSpaceState3D):
  r'''
		This class extends `PhysicsDirectSpaceState3D` by providing additional virtual methods that can be overridden. When these methods are overridden, they will be called instead of the internal methods of the physics server.
		Intended for use with GDExtension to create custom implementations of `PhysicsDirectSpaceState3D`.
	'''

  @staticmethod
  def constructor():
    class_ = PhysicsDirectSpaceState3DExtension.construct_without_init()
    class_._ptr = constructor(598,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PhysicsDirectSpaceState3DExtension.construct_without_init()
    class_._ptr = constructor(598,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPhysicsDirectSpaceState3DExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(598,0, ())


  def generate_wrapper(self):
    return CPPPhysicsDirectSpaceState3DExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsDirectSpaceState3DExtension.__new__(PhysicsDirectSpaceState3DExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsDirectSpaceState3DExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsDirectSpaceState3DExtension.construct_without_init()
    cls._ptr = CPPPhysicsDirectSpaceState3DExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsDirectSpaceState3DExtension.construct_without_init()
    cls._ptr = CPPPhysicsDirectSpaceState3DExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_closest_point_to_object_volume(self, object_:'RID'   , point:'Vector3'   ) -> typing.Union['Vector3']:
    r'''
'''

    assert(not object_ is None)
    assert isinstance(object_, RID), 'object_ must be RID'
    assert(not point is None)
    assert isinstance(point, Vector3), 'point must be Vector3'







    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([object_._ptr, point._ptr]))
    return _ret


  @functools.native_method
  def is_body_excluded_from_query(self, body:'RID'   ) -> typing.Union[bool]:
    r'''
'''

    assert(not body is None)
    assert isinstance(body, RID), 'body must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([body._ptr]))
    return _ret



register_cast_function('PhysicsDirectSpaceState3DExtension', PhysicsDirectSpaceState3DExtension.cast)
register_class('PhysicsDirectSpaceState3DExtension', PhysicsDirectSpaceState3DExtension)
