# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Range as py4godot_range 
from py4godot.wrappers.wrappers import CPPScrollBarWrapper


class ScrollBar(py4godot_range.Range):
  r'''
		Abstract base class for scrollbars, typically used to navigate through content that extends beyond the visible area of a control. Scrollbars are `Range`-based controls.
	'''

  @staticmethod
  def constructor():
    class_ = ScrollBar.construct_without_init()
    class_._ptr = constructor(729,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ScrollBar.construct_without_init()
    class_._ptr = constructor(729,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPScrollBarWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(729,0, ())


  def generate_wrapper(self):
    return CPPScrollBarWrapper()
  def init_signals(self):
    super().init_signals()
    scrolling_name = utils.py_string_to_string_name("scrolling")
    self.scrolling = signals.BuiltinSignal(self, scrolling_name)

  @staticmethod
  def construct_without_init():
    cls = ScrollBar.__new__(ScrollBar)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ScrollBar'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ScrollBar.construct_without_init()
    cls._ptr = CPPScrollBarWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ScrollBar.construct_without_init()
    cls._ptr = CPPScrollBarWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def custom_step(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_custom_step()
    return _ret
  @custom_step.setter
  def custom_step(self,  value:'float'):
    self.set_custom_step(value)
  @functools.native_method
  def set_custom_step(self, step:'float'   ) -> None:
    r''''''

    assert isinstance(step, (int, float)), 'step must be int or float'

    self.py__custom_step = step






    self._ptr.call_with_return(457,tuple([step]))

  @functools.native_method
  def get_custom_step(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(458,tuple([]))

    return _ret



register_cast_function('ScrollBar', ScrollBar.cast)
register_class('ScrollBar', ScrollBar)
