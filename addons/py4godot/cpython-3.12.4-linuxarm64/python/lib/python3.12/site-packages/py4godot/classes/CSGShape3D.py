# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CSGTorus3D as py4godot_csgtorus3d 
  import py4godot.classes.ConcavePolygonShape3D as py4godot_concavepolygonshape3d 
  import py4godot.classes.CSGBox3D as py4godot_csgbox3d 
  import py4godot.classes.CSGPolygon3D as py4godot_csgpolygon3d 
  import py4godot.classes.CSGMesh3D as py4godot_csgmesh3d 
  import py4godot.classes.ArrayMesh as py4godot_arraymesh 
  import py4godot.classes.CSGSphere3D as py4godot_csgsphere3d 
  import py4godot.classes.CSGCylinder3D as py4godot_csgcylinder3d 
  import py4godot.classes.CSGCombiner3D as py4godot_csgcombiner3d 
  import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
import py4godot.classes.GeometryInstance3D as py4godot_geometryinstance3d 
from py4godot.wrappers.wrappers import CPPCSGShape3DWrapper

class Operation:
  OPERATION_UNION = 0
  OPERATION_INTERSECTION = 1
  OPERATION_SUBTRACTION = 2


class CSGShape3D(py4godot_geometryinstance3d.GeometryInstance3D):
  r''''''

  @staticmethod
  def constructor():
    class_ = CSGShape3D.construct_without_init()
    class_._ptr = constructor(184,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CSGShape3D.construct_without_init()
    class_._ptr = constructor(184,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCSGShape3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(184,0, ())


  def generate_wrapper(self):
    return CPPCSGShape3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CSGShape3D.__new__(CSGShape3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CSGShape3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CSGShape3D.construct_without_init()
    cls._ptr = CPPCSGShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CSGShape3D.construct_without_init()
    cls._ptr = CPPCSGShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def operation(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_operation()
    return _ret
  @operation.setter
  def operation(self,  value:'int'):
    self.set_operation(value)
  @property
  def snap(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_snap()
    return _ret
  @snap.setter
  def snap(self,  value:'float'):
    self.set_snap(value)
  @property
  def calculate_tangents(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_calculating_tangents()
    return _ret
  @calculate_tangents.setter
  def calculate_tangents(self,  value:'bool'):
    self.set_calculate_tangents(value)
  @property
  def use_collision(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_collision()
    return _ret
  @use_collision.setter
  def use_collision(self,  value:'bool'):
    self.set_use_collision(value)
  @property
  def collision_layer(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_collision_layer()
    return _ret
  @collision_layer.setter
  def collision_layer(self,  value:'int'):
    self.set_collision_layer(value)
  @property
  def collision_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_collision_mask()
    return _ret
  @collision_mask.setter
  def collision_mask(self,  value:'int'):
    self.set_collision_mask(value)
  @property
  def collision_priority(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_collision_priority()
    return _ret
  @collision_priority.setter
  def collision_priority(self,  value:'float'):
    self.set_collision_priority(value)
  @functools.native_method
  def is_root_shape(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(298,tuple([]))
    return _ret


  @functools.native_method
  def set_operation(self, operation:'int'  ) -> None:
    r''''''

    assert isinstance(operation, (int, float)), 'operation must be int or float'

    self.py__operation = operation






    self._ptr.call_with_return(299,tuple([operation]))

  @functools.native_method
  def get_operation(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(300,tuple([]))

    return _ret


  @functools.native_method
  def set_snap(self, snap:'float'   ) -> None:
    r''''''

    assert isinstance(snap, (int, float)), 'snap must be int or float'

    self.py__snap = snap






    self._ptr.call_with_return(301,tuple([snap]))

  @functools.native_method
  def get_snap(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(302,tuple([]))

    return _ret


  @functools.native_method
  def set_use_collision(self, operation:'bool'   ) -> None:
    r''''''

    assert isinstance(operation, bool), 'operation must be bool'

    self.py__use_collision = operation






    self._ptr.call_with_return(303,tuple([operation]))

  @functools.native_method
  def is_using_collision(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def set_collision_layer(self, layer:'int'   ) -> None:
    r''''''

    assert isinstance(layer, (int, float)), 'layer must be int or float'

    self.py__collision_layer = layer






    self._ptr.call_with_return(305,tuple([layer]))

  @functools.native_method
  def get_collision_layer(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_collision_mask(self, mask:'int'   ) -> None:
    r''''''

    assert isinstance(mask, (int, float)), 'mask must be int or float'

    self.py__collision_mask = mask






    self._ptr.call_with_return(307,tuple([mask]))

  @functools.native_method
  def get_collision_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(308,tuple([]))

    return _ret


  @functools.native_method
  def set_collision_mask_value(self, layer_number:'int'   , value:'bool'   ) -> None:
    r''''''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'
    assert isinstance(value, bool), 'value must be bool'







    self._ptr.call_with_return(309,tuple([layer_number, value]))

  @functools.native_method
  def get_collision_mask_value(self, layer_number:'int'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(310,tuple([layer_number]))
    return _ret


  @functools.native_method
  def set_collision_layer_value(self, layer_number:'int'   , value:'bool'   ) -> None:
    r''''''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'
    assert isinstance(value, bool), 'value must be bool'







    self._ptr.call_with_return(311,tuple([layer_number, value]))

  @functools.native_method
  def get_collision_layer_value(self, layer_number:'int'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(layer_number, (int, float)), 'layer_number must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(312,tuple([layer_number]))
    return _ret


  @functools.native_method
  def set_collision_priority(self, priority:'float'   ) -> None:
    r''''''

    assert isinstance(priority, (int, float)), 'priority must be int or float'

    self.py__collision_priority = priority






    self._ptr.call_with_return(313,tuple([priority]))

  @functools.native_method
  def get_collision_priority(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(314,tuple([]))

    return _ret


  @functools.native_method
  def bake_collision_shape(self) -> typing.Union['py4godot_concavepolygonshape3d.ConcavePolygonShape3D']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ConcavePolygonShape3D
    _ret._ptr = self._ptr.call_with_return(315,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_calculate_tangents(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__calculate_tangents = enabled






    self._ptr.call_with_return(316,tuple([enabled]))

  @functools.native_method
  def is_calculating_tangents(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(317,tuple([]))

    return _ret


  @functools.native_method
  def get_meshes(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(318,tuple([]))
    return _ret


  @functools.native_method
  def bake_static_mesh(self) -> typing.Union['py4godot_arraymesh.ArrayMesh']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: ArrayMesh
    _ret._ptr = self._ptr.call_with_return(319,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('CSGShape3D', CSGShape3D.cast)
register_class('CSGShape3D', CSGShape3D)
