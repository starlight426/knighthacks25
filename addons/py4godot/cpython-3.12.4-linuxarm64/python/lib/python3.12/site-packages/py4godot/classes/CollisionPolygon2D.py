# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node2D as py4godot_node2d 
from py4godot.wrappers.wrappers import CPPCollisionPolygon2DWrapper

class BuildMode:
  BUILD_SOLIDS = 0
  BUILD_SEGMENTS = 1


class CollisionPolygon2D(py4godot_node2d.Node2D):
  r'''
		A node that provides a polygon shape to a `CollisionObject2D` parent and allows it to be edited. The polygon can be concave or convex. This can give a detection shape to an `Area2D`, turn a `PhysicsBody2D` into a solid object, or give a hollow shape to a `StaticBody2D`.
		**Warning:** A non-uniformly scaled `CollisionPolygon2D` will likely not behave as expected. Make sure to keep its scale the same on all axes and adjust its polygon instead.
	'''

  @staticmethod
  def constructor():
    class_ = CollisionPolygon2D.construct_without_init()
    class_._ptr = constructor(217,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CollisionPolygon2D.construct_without_init()
    class_._ptr = constructor(217,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCollisionPolygon2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(217,0, ())


  def generate_wrapper(self):
    return CPPCollisionPolygon2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CollisionPolygon2D.__new__(CollisionPolygon2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CollisionPolygon2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CollisionPolygon2D.construct_without_init()
    cls._ptr = CPPCollisionPolygon2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CollisionPolygon2D.construct_without_init()
    cls._ptr = CPPCollisionPolygon2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def build_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_build_mode()
    return _ret
  @build_mode.setter
  def build_mode(self,  value:'int'):
    self.set_build_mode(value)
  @property
  def polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''
    _ret = self. get_polygon()
    return _ret
  @polygon.setter
  def polygon(self,  value:'PackedVector2Array'):
    self.set_polygon(value)
  @property
  def disabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_disabled()
    return _ret
  @disabled.setter
  def disabled(self,  value:'bool'):
    self.set_disabled(value)
  @property
  def one_way_collision(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_one_way_collision_enabled()
    return _ret
  @one_way_collision.setter
  def one_way_collision(self,  value:'bool'):
    self.set_one_way_collision(value)
  @property
  def one_way_collision_margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_one_way_collision_margin()
    return _ret
  @one_way_collision_margin.setter
  def one_way_collision_margin(self,  value:'float'):
    self.set_one_way_collision_margin(value)
  @functools.native_method
  def set_polygon(self, polygon:'PackedVector2Array'   ) -> None:
    r''''''

    assert(not polygon is None)
    assert isinstance(polygon, PackedVector2Array), 'polygon must be PackedVector2Array'

    self.py__polygon = polygon






    self._ptr.call_with_return(303,tuple([polygon._ptr]))

  @functools.native_method
  def get_polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''




    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(304,tuple([]))

    return _ret


  @functools.native_method
  def set_build_mode(self, build_mode:'int'  ) -> None:
    r''''''

    assert isinstance(build_mode, (int, float)), 'build_mode must be int or float'

    self.py__build_mode = build_mode






    self._ptr.call_with_return(305,tuple([build_mode]))

  @functools.native_method
  def get_build_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(306,tuple([]))

    return _ret


  @functools.native_method
  def set_disabled(self, disabled:'bool'   ) -> None:
    r''''''

    assert isinstance(disabled, bool), 'disabled must be bool'

    self.py__disabled = disabled






    self._ptr.call_with_return(307,tuple([disabled]))

  @functools.native_method
  def is_disabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(308,tuple([]))

    return _ret


  @functools.native_method
  def set_one_way_collision(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__one_way_collision = enabled






    self._ptr.call_with_return(309,tuple([enabled]))

  @functools.native_method
  def is_one_way_collision_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(310,tuple([]))

    return _ret


  @functools.native_method
  def set_one_way_collision_margin(self, margin:'float'   ) -> None:
    r''''''

    assert isinstance(margin, (int, float)), 'margin must be int or float'

    self.py__one_way_collision_margin = margin






    self._ptr.call_with_return(311,tuple([margin]))

  @functools.native_method
  def get_one_way_collision_margin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(312,tuple([]))

    return _ret



register_cast_function('CollisionPolygon2D', CollisionPolygon2D.cast)
register_class('CollisionPolygon2D', CollisionPolygon2D)
