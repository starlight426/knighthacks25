# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RDUniformTypedArray as py4godot_rduniformtypedarray 
import py4godot.classes.Object as py4godot_object 
import py4godot.classes.RDUniformTypedArray as py4godot_rduniformtypedarray 
from py4godot.wrappers.wrappers import CPPUniformSetCacheRDWrapper


class UniformSetCacheRD(py4godot_object.Object):
  r'''
		Uniform set cache manager for Rendering Device based renderers. Provides a way to create a uniform set and reuse it in subsequent calls for as long as the uniform set exists. Uniform set will automatically be cleaned up when dependent objects are freed.
	'''

  @staticmethod
  def constructor():
    class_ = UniformSetCacheRD.construct_without_init()
    class_._ptr = constructor(859,0, ())
    return class_
  @staticmethod
  def new():
    class_ = UniformSetCacheRD.construct_without_init()
    class_._ptr = constructor(859,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPUniformSetCacheRDWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(859,0, ())


  def generate_wrapper(self):
    return CPPUniformSetCacheRDWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = UniformSetCacheRD.__new__(UniformSetCacheRD)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'UniformSetCacheRD'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = UniformSetCacheRD.construct_without_init()
    cls._ptr = CPPUniformSetCacheRDWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = UniformSetCacheRD.construct_without_init()
    cls._ptr = CPPUniformSetCacheRDWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @staticmethod
  def get_cache(shader:'RID'   , set:'int'   , uniforms:'py4godot_rduniformtypedarray.RDUniformTypedArray'   ) -> typing.Union['RID']:
    r'''
				Creates/returns a cached uniform set based on the provided uniforms for a given shader.
			'''

    assert(not shader is None)
    assert isinstance(shader, RID), 'shader must be RID'
    assert isinstance(set, (int, float)), 'set must be int or float'
    assert isinstance(uniforms, get_class('RDUniformTypedArray')), 'uniforms must be RDUniformTypedArray'








    _ret = RID.construct_without_init()
    _ret._ptr = static_method(859,0,tuple([shader._ptr, set, uniforms._ptr]))
    return _ret



register_cast_function('UniformSetCacheRD', UniformSetCacheRD.cast)
register_class('UniformSetCacheRD', UniformSetCacheRD)
