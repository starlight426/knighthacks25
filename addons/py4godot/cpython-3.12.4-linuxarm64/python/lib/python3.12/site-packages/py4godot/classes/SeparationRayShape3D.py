# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Shape3D as py4godot_shape3d 
from py4godot.wrappers.wrappers import CPPSeparationRayShape3DWrapper


class SeparationRayShape3D(py4godot_shape3d.Shape3D):
  r'''
		A 3D ray shape, intended for use in physics. Usually used to provide a shape for a `CollisionShape3D`. When a `SeparationRayShape3D` collides with an object, it tries to separate itself from it by moving its endpoint to the collision point. For example, a `SeparationRayShape3D` next to a character can allow it to instantly move up when touching stairs.
	'''

  @staticmethod
  def constructor():
    class_ = SeparationRayShape3D.construct_without_init()
    class_._ptr = constructor(734,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SeparationRayShape3D.construct_without_init()
    class_._ptr = constructor(734,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSeparationRayShape3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(734,0, ())


  def generate_wrapper(self):
    return CPPSeparationRayShape3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SeparationRayShape3D.__new__(SeparationRayShape3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SeparationRayShape3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SeparationRayShape3D.construct_without_init()
    cls._ptr = CPPSeparationRayShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SeparationRayShape3D.construct_without_init()
    cls._ptr = CPPSeparationRayShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_length()
    return _ret
  @length.setter
  def length(self,  value:'float'):
    self.set_length(value)
  @property
  def slide_on_slope(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_slide_on_slope()
    return _ret
  @slide_on_slope.setter
  def slide_on_slope(self,  value:'bool'):
    self.set_slide_on_slope(value)
  @functools.native_method
  def set_length(self, length:'float'   ) -> None:
    r''''''

    assert isinstance(length, (int, float)), 'length must be int or float'

    self.py__length = length






    self._ptr.call_with_return(82,tuple([length]))

  @functools.native_method
  def get_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_slide_on_slope(self, active:'bool'   ) -> None:
    r''''''

    assert isinstance(active, bool), 'active must be bool'

    self.py__slide_on_slope = active






    self._ptr.call_with_return(84,tuple([active]))

  @functools.native_method
  def get_slide_on_slope(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret



register_cast_function('SeparationRayShape3D', SeparationRayShape3D.cast)
register_class('SeparationRayShape3D', SeparationRayShape3D)
