# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AnimationNodeExtension as py4godot_animationnodeextension 
  import py4godot.classes.AnimationNodeSub2 as py4godot_animationnodesub2 
  import py4godot.classes.AnimationNodeAdd3 as py4godot_animationnodeadd3 
  import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
  import py4godot.classes.AnimationNodeBlend2 as py4godot_animationnodeblend2 
  import py4godot.classes.AnimationNodeTimeScale as py4godot_animationnodetimescale 
  import py4godot.classes.AnimationNodeOneShot as py4godot_animationnodeoneshot 
  import py4godot.classes.AnimationNodeStateMachine as py4godot_animationnodestatemachine 
  import py4godot.classes.AnimationNodeBlend3 as py4godot_animationnodeblend3 
  import py4godot.classes.AnimationNodeOutput as py4godot_animationnodeoutput 
  import py4godot.classes.AnimationNodeTimeSeek as py4godot_animationnodetimeseek 
  import py4godot.classes.AnimationNodeBlendSpace2D as py4godot_animationnodeblendspace2d 
  import py4godot.classes.AnimationNodeAnimation as py4godot_animationnodeanimation 
  import py4godot.classes.AnimationNodeBlendSpace1D as py4godot_animationnodeblendspace1d 
  import py4godot.classes.AnimationNodeTransition as py4godot_animationnodetransition 
  import py4godot.classes.AnimationNode as py4godot_animationnode 
  import py4godot.classes.AnimationNodeAdd2 as py4godot_animationnodeadd2 
  import py4godot.classes.AnimationNodeSync as py4godot_animationnodesync 
import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
import py4godot.classes.AnimationRootNode as py4godot_animationrootnode 
from py4godot.wrappers.wrappers import CPPAnimationNodeBlendTreeWrapper


class AnimationNodeBlendTree(py4godot_animationrootnode.AnimationRootNode):
  r'''
		This animation node may contain a sub-tree of any other type animation nodes, such as `AnimationNodeTransition`, `AnimationNodeBlend2`, `AnimationNodeBlend3`, `AnimationNodeOneShot`, etc. This is one of the most commonly used animation node roots.
		An `AnimationNodeOutput` node named `output` is created by default.
	'''
  CONNECTION_OK:typing.ClassVar[int]

  CONNECTION_ERROR_NO_INPUT:typing.ClassVar[int]

  CONNECTION_ERROR_NO_INPUT_INDEX:typing.ClassVar[int]

  CONNECTION_ERROR_NO_OUTPUT:typing.ClassVar[int]

  CONNECTION_ERROR_SAME_NODE:typing.ClassVar[int]

  CONNECTION_ERROR_CONNECTION_EXISTS:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = AnimationNodeBlendTree.construct_without_init()
    class_._ptr = constructor(83,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationNodeBlendTree.construct_without_init()
    class_._ptr = constructor(83,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationNodeBlendTreeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(83,0, ())


  def generate_wrapper(self):
    return CPPAnimationNodeBlendTreeWrapper()
  def init_signals(self):
    super().init_signals()
    node_changed_name = utils.py_string_to_string_name("node_changed")
    self.node_changed = signals.BuiltinSignal(self, node_changed_name)

  @staticmethod
  def construct_without_init():
    cls = AnimationNodeBlendTree.__new__(AnimationNodeBlendTree)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationNodeBlendTree'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeBlendTree.construct_without_init()
    cls._ptr = CPPAnimationNodeBlendTreeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationNodeBlendTree.construct_without_init()
    cls._ptr = CPPAnimationNodeBlendTreeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def graph_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_graph_offset()
    return _ret
  @graph_offset.setter
  def graph_offset(self,  value:'Vector2'):
    self.set_graph_offset(value)
  @functools.native_method
  def add_node(self, name:'object'   , node:'py4godot_animationnode.AnimationNode'   , position:'Vector2' = None  ) -> None:
    r'''
				Adds an `AnimationNode` at the given `position`. The `name` is used to identify the created sub animation node later.
			'''
    if position is None:
      position = Vector2.new0()
    if position is None:
      position = Vector2.new0()

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not node is None)
    assert isinstance(node, get_class('AnimationNode')), 'node must be AnimationNode'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)



    self._ptr.call_with_return(102,tuple([py_stringname_name._ptr, node._ptr, position._ptr]))

  @functools.native_method
  def get_node(self, name:'object'   ) -> typing.Any:
    r'''
				Returns the sub animation node with the specified `name`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AnimationNode
    _ret._ptr = self._ptr.call_with_return(103,tuple([py_stringname_name._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def remove_node(self, name:'object'   ) -> None:
    r'''
				Removes a sub animation node.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    self._ptr.call_with_return(104,tuple([py_stringname_name._ptr]))

  @functools.native_method
  def rename_node(self, name:'object'   , new_name:'object'   ) -> None:
    r'''
				Changes the name of a sub animation node.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not new_name is None)
    assert isinstance(new_name, (str, StringName)), 'new_name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)
    assert(isinstance(new_name, (str, StringName)))
    py_stringname_new_name = new_name if isinstance(new_name, StringName) else c_utils.py_string_to_string_name(new_name)

    self._ptr.call_with_return(105,tuple([py_stringname_name._ptr, py_stringname_new_name._ptr]))

  @functools.native_method
  def has_node(self, name:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if a sub animation node with specified `name` exists.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = 0
    _ret = self._ptr.call_with_return(106,tuple([py_stringname_name._ptr]))
    return _ret


  @functools.native_method
  def connect_node(self, input_node:'object'   , input_index:'int'   , output_node:'object'   ) -> None:
    r'''
				Connects the output of an `AnimationNode` as input for another `AnimationNode`, at the input port specified by `input_index`.
			'''

    assert(not input_node is None)
    assert isinstance(input_node, (str, StringName)), 'input_node must be str or StringName'
    assert isinstance(input_index, (int, float)), 'input_index must be int or float'
    assert(not output_node is None)
    assert isinstance(output_node, (str, StringName)), 'output_node must be str or StringName'




    assert(isinstance(input_node, (str, StringName)))
    py_stringname_input_node = input_node if isinstance(input_node, StringName) else c_utils.py_string_to_string_name(input_node)

    assert(isinstance(output_node, (str, StringName)))
    py_stringname_output_node = output_node if isinstance(output_node, StringName) else c_utils.py_string_to_string_name(output_node)

    self._ptr.call_with_return(107,tuple([py_stringname_input_node._ptr, input_index, py_stringname_output_node._ptr]))

  @functools.native_method
  def disconnect_node(self, input_node:'object'   , input_index:'int'   ) -> None:
    r'''
				Disconnects the animation node connected to the specified input.
			'''

    assert(not input_node is None)
    assert isinstance(input_node, (str, StringName)), 'input_node must be str or StringName'
    assert isinstance(input_index, (int, float)), 'input_index must be int or float'




    assert(isinstance(input_node, (str, StringName)))
    py_stringname_input_node = input_node if isinstance(input_node, StringName) else c_utils.py_string_to_string_name(input_node)


    self._ptr.call_with_return(108,tuple([py_stringname_input_node._ptr, input_index]))

  @functools.native_method
  def get_node_list(self) -> typing.Union['py4godot_stringnametypedarray.StringNameTypedArray']:
    r'''
				Returns a list containing the names of all sub animation nodes in this blend tree.
			'''




    _ret = py4godot_stringnametypedarray.StringNameTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(109,tuple([]))
    return _ret


  @functools.native_method
  def set_node_position(self, name:'object'   , position:'Vector2'   ) -> None:
    r'''
				Modifies the position of a sub animation node.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'
    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)


    self._ptr.call_with_return(110,tuple([py_stringname_name._ptr, position._ptr]))

  @functools.native_method
  def get_node_position(self, name:'object'   ) -> typing.Union['Vector2']:
    r'''
				Returns the position of the sub animation node with the specified `name`.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(111,tuple([py_stringname_name._ptr]))
    return _ret


  @functools.native_method
  def set_graph_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__graph_offset = offset






    self._ptr.call_with_return(112,tuple([offset._ptr]))

  @functools.native_method
  def get_graph_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(113,tuple([]))

    return _ret



register_cast_function('AnimationNodeBlendTree', AnimationNodeBlendTree.cast)
register_class('AnimationNodeBlendTree', AnimationNodeBlendTree)
