# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.StreamPeer as py4godot_streampeer 
  import py4godot.classes.TLSOptions as py4godot_tlsoptions 
import py4godot.classes.PacketPeer as py4godot_packetpeer 
from py4godot.wrappers.wrappers import CPPWebSocketPeerWrapper

class WriteMode:
  WRITE_MODE_TEXT = 0
  WRITE_MODE_BINARY = 1
class State:
  STATE_CONNECTING = 0
  STATE_OPEN = 1
  STATE_CLOSING = 2
  STATE_CLOSED = 3


class WebSocketPeer(py4godot_packetpeer.PacketPeer):
  r''''''

  @staticmethod
  def constructor():
    class_ = WebSocketPeer.construct_without_init()
    class_._ptr = constructor(1000,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WebSocketPeer.construct_without_init()
    class_._ptr = constructor(1000,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWebSocketPeerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1000,0, ())


  def generate_wrapper(self):
    return CPPWebSocketPeerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = WebSocketPeer.__new__(WebSocketPeer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WebSocketPeer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebSocketPeer.construct_without_init()
    cls._ptr = CPPWebSocketPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebSocketPeer.construct_without_init()
    cls._ptr = CPPWebSocketPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def supported_protocols(self) -> typing.Union['PackedStringArray']:
    r''''''
    _ret = self. get_supported_protocols()
    return _ret
  @supported_protocols.setter
  def supported_protocols(self,  value:'PackedStringArray'):
    self.set_supported_protocols(value)
  @property
  def handshake_headers(self) -> typing.Union['PackedStringArray']:
    r''''''
    _ret = self. get_handshake_headers()
    return _ret
  @handshake_headers.setter
  def handshake_headers(self,  value:'PackedStringArray'):
    self.set_handshake_headers(value)
  @property
  def inbound_buffer_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_inbound_buffer_size()
    return _ret
  @inbound_buffer_size.setter
  def inbound_buffer_size(self,  value:'int'):
    self.set_inbound_buffer_size(value)
  @property
  def outbound_buffer_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_outbound_buffer_size()
    return _ret
  @outbound_buffer_size.setter
  def outbound_buffer_size(self,  value:'int'):
    self.set_outbound_buffer_size(value)
  @property
  def max_queued_packets(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_max_queued_packets()
    return _ret
  @max_queued_packets.setter
  def max_queued_packets(self,  value:'int'):
    self.set_max_queued_packets(value)
  @property
  def heartbeat_interval(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_heartbeat_interval()
    return _ret
  @heartbeat_interval.setter
  def heartbeat_interval(self,  value:'int'):
    self.set_heartbeat_interval(value)
  @functools.native_method
  def connect_to_url(self, url:'str'   , tls_client_options:'py4godot_tlsoptions.TLSOptions' = None  ) -> typing.Union[int]:
    r''''''
    if tls_client_options is None:
      tls_client_options = c_utils.empty_object
    if tls_client_options is None:
      tls_client_options = c_utils.empty_object

    assert(not url is None)
    assert isinstance(url, (str, String)), 'url must be str or String'




    assert(isinstance(url, (str, String)))
    py_string_url = url if isinstance(url, StringName) else c_utils.py_string_to_string(url)


    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([py_string_url._ptr, tls_client_options._ptr]))
    return _ret


  @functools.native_method
  def accept_stream(self, stream:'py4godot_streampeer.StreamPeer'   ) -> typing.Union[int]:
    r''''''

    assert(not stream is None)
    assert isinstance(stream, get_class('StreamPeer')), 'stream must be StreamPeer'






    _ret:int
    _ret = self._ptr.call_with_return(62,tuple([stream._ptr]))
    return _ret


  @functools.native_method
  def send(self, message:'PackedByteArray'   , write_mode:'int'  =1) -> typing.Union[int]:
    r''''''



    assert(not message is None)
    assert isinstance(message, PackedByteArray), 'message must be PackedByteArray'
    assert isinstance(write_mode, (int, float)), 'write_mode must be int or float'







    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([message._ptr, write_mode]))
    return _ret


  @functools.native_method
  def send_text(self, message:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not message is None)
    assert isinstance(message, (str, String)), 'message must be str or String'




    assert(isinstance(message, (str, String)))
    py_string_message = message if isinstance(message, StringName) else c_utils.py_string_to_string(message)

    _ret:int
    _ret = self._ptr.call_with_return(64,tuple([py_string_message._ptr]))
    return _ret


  @functools.native_method
  def was_string_packet(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(65,tuple([]))
    return _ret


  @functools.native_method
  def poll(self) -> None:
    r''''''




    self._ptr.call_with_return(66,tuple([]))

  @functools.native_method
  def close(self, code:'int' =1000  , reason:'str' =""  ) -> None:
    r''''''
    if reason is None:
      reason = String.new0()
    if reason is None:
      reason = String.new0()

    assert isinstance(code, (int, float)), 'code must be int or float'





    assert(isinstance(reason, (str, String)))
    py_string_reason = reason if isinstance(reason, StringName) else c_utils.py_string_to_string(reason)

    self._ptr.call_with_return(67,tuple([code, py_string_reason._ptr]))

  @functools.native_method
  def get_connected_host(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(68,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_connected_port(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(69,tuple([]))
    return _ret


  @functools.native_method
  def get_selected_protocol(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(70,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_requested_url(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(71,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_no_delay(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'






    self._ptr.call_with_return(72,tuple([enabled]))

  @functools.native_method
  def get_current_outbound_buffered_amount(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([]))
    return _ret


  @functools.native_method
  def get_ready_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(74,tuple([]))
    return _ret


  @functools.native_method
  def get_close_code(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(75,tuple([]))
    return _ret


  @functools.native_method
  def get_close_reason(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(76,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_supported_protocols(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return _ret


  @functools.native_method
  def set_supported_protocols(self, protocols:'PackedStringArray'   ) -> None:
    r''''''

    assert(not protocols is None)
    assert isinstance(protocols, PackedStringArray), 'protocols must be PackedStringArray'

    self.py__supported_protocols = protocols






    self._ptr.call_with_return(78,tuple([protocols._ptr]))

  @functools.native_method
  def get_handshake_headers(self) -> typing.Union['PackedStringArray']:
    r''''''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_handshake_headers(self, protocols:'PackedStringArray'   ) -> None:
    r''''''

    assert(not protocols is None)
    assert isinstance(protocols, PackedStringArray), 'protocols must be PackedStringArray'

    self.py__handshake_headers = protocols






    self._ptr.call_with_return(80,tuple([protocols._ptr]))

  @functools.native_method
  def get_inbound_buffer_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_inbound_buffer_size(self, buffer_size:'int'   ) -> None:
    r''''''

    assert isinstance(buffer_size, (int, float)), 'buffer_size must be int or float'

    self.py__inbound_buffer_size = buffer_size






    self._ptr.call_with_return(82,tuple([buffer_size]))

  @functools.native_method
  def get_outbound_buffer_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_outbound_buffer_size(self, buffer_size:'int'   ) -> None:
    r''''''

    assert isinstance(buffer_size, (int, float)), 'buffer_size must be int or float'

    self.py__outbound_buffer_size = buffer_size






    self._ptr.call_with_return(84,tuple([buffer_size]))

  @functools.native_method
  def set_max_queued_packets(self, buffer_size:'int'   ) -> None:
    r''''''

    assert isinstance(buffer_size, (int, float)), 'buffer_size must be int or float'

    self.py__max_queued_packets = buffer_size






    self._ptr.call_with_return(85,tuple([buffer_size]))

  @functools.native_method
  def get_max_queued_packets(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_heartbeat_interval(self, interval:'float'   ) -> None:
    r''''''

    assert isinstance(interval, (int, float)), 'interval must be int or float'

    self.py__heartbeat_interval = interval






    self._ptr.call_with_return(87,tuple([interval]))

  @functools.native_method
  def get_heartbeat_interval(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret



register_cast_function('WebSocketPeer', WebSocketPeer.cast)
register_class('WebSocketPeer', WebSocketPeer)
