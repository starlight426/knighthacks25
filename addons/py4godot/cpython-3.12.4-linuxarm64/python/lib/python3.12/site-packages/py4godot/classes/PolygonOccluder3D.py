# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Occluder3D as py4godot_occluder3d 
from py4godot.wrappers.wrappers import CPPPolygonOccluder3DWrapper


class PolygonOccluder3D(py4godot_occluder3d.Occluder3D):
  r'''
		`PolygonOccluder3D` stores a polygon shape that can be used by the engine's occlusion culling system. When an `OccluderInstance3D` with a `PolygonOccluder3D` is selected in the editor, an editor will appear at the top of the 3D viewport so you can add/remove points. All points must be placed on the same 2D plane, which means it is not possible to create arbitrary 3D shapes with a single `PolygonOccluder3D`. To use arbitrary 3D shapes as occluders, use `ArrayOccluder3D` or `OccluderInstance3D`'s baking feature instead.
		See `OccluderInstance3D`'s documentation for instructions on setting up occlusion culling.
	'''

  @staticmethod
  def constructor():
    class_ = PolygonOccluder3D.construct_without_init()
    class_._ptr = constructor(631,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PolygonOccluder3D.construct_without_init()
    class_._ptr = constructor(631,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPolygonOccluder3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(631,0, ())


  def generate_wrapper(self):
    return CPPPolygonOccluder3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PolygonOccluder3D.__new__(PolygonOccluder3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PolygonOccluder3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PolygonOccluder3D.construct_without_init()
    cls._ptr = CPPPolygonOccluder3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PolygonOccluder3D.construct_without_init()
    cls._ptr = CPPPolygonOccluder3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''
    _ret = self. get_polygon()
    return _ret
  @polygon.setter
  def polygon(self,  value:'PackedVector2Array'):
    self.set_polygon(value)
  @functools.native_method
  def set_polygon(self, polygon:'PackedVector2Array'   ) -> None:
    r''''''

    assert(not polygon is None)
    assert isinstance(polygon, PackedVector2Array), 'polygon must be PackedVector2Array'

    self.py__polygon = polygon






    self._ptr.call_with_return(79,tuple([polygon._ptr]))

  @functools.native_method
  def get_polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''




    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([]))

    return _ret



register_cast_function('PolygonOccluder3D', PolygonOccluder3D.cast)
register_class('PolygonOccluder3D', PolygonOccluder3D)
