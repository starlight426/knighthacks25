# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.SystemFont as py4godot_systemfont 
  import py4godot.classes.FontFile as py4godot_fontfile 
  import py4godot.classes.TextServer as py4godot_textserver 
import py4godot.classes.Font as py4godot_font 
from py4godot.wrappers.wrappers import CPPFontVariationWrapper


class FontVariation(py4godot_font.Font):
  r'''
		Provides OpenType variations, simulated bold / slant, and additional font settings like OpenType features and extra spacing.
		To use simulated bold font variant:
		
		```gdscript
		var fv = FontVariation.new()
		fv.base_font = load("res://BarlowCondensed-Regular.ttf")
		fv.variation_embolden = 1.2
		$Label.add_theme_font_override("font", fv)
		$Label.add_theme_font_size_override("font_size", 64)
		```
		
		
		To set the coordinate of multiple variation axes:
		```gdscript
		var fv = FontVariation.new();
		var ts = TextServerManager.get_primary_interface()
		fv.base_font = load("res://BarlowCondensed-Regular.ttf")
		fv.variation_opentype = { ts.name_to_tag("wght"): 900, ts.name_to_tag("custom_hght"): 900 }
		```
	'''

  @staticmethod
  def constructor():
    class_ = FontVariation.construct_without_init()
    class_._ptr = constructor(339,0, ())
    return class_
  @staticmethod
  def new():
    class_ = FontVariation.construct_without_init()
    class_._ptr = constructor(339,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPFontVariationWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(339,0, ())


  def generate_wrapper(self):
    return CPPFontVariationWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = FontVariation.__new__(FontVariation)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'FontVariation'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = FontVariation.construct_without_init()
    cls._ptr = CPPFontVariationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = FontVariation.construct_without_init()
    cls._ptr = CPPFontVariationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def base_font(self) -> typing.Union['py4godot_font.Font','py4godot_systemfont.SystemFont','py4godot_fontfile.FontFile','typing.Self']:
    r''''''
    _ret = self. get_base_font()
    return _ret
  @base_font.setter
  def base_font(self,  value:'py4godot_object.Object'):
    self.set_base_font(value)
  @property
  def variation_opentype(self) -> typing.Union['Dictionary']:
    r''''''
    _ret = self. get_variation_opentype()
    return _ret
  @variation_opentype.setter
  def variation_opentype(self,  value:'Dictionary'):
    self.set_variation_opentype(value)
  @property
  def variation_face_index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_variation_face_index()
    return _ret
  @variation_face_index.setter
  def variation_face_index(self,  value:'int'):
    self.set_variation_face_index(value)
  @property
  def variation_embolden(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_variation_embolden()
    return _ret
  @variation_embolden.setter
  def variation_embolden(self,  value:'float'):
    self.set_variation_embolden(value)
  @property
  def variation_transform(self) -> typing.Union['Transform2D']:
    r''''''
    _ret = self. get_variation_transform()
    return _ret
  @variation_transform.setter
  def variation_transform(self,  value:'Transform2D'):
    self.set_variation_transform(value)
  @property
  def opentype_features(self) -> typing.Union['Dictionary']:
    r''''''
    _ret = self. get_opentype_features()
    return _ret
  @opentype_features.setter
  def opentype_features(self,  value:'Dictionary'):
    self.set_opentype_features(value)
  @property
  def spacing_glyph(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_spacing(0)
    return _ret
  @spacing_glyph.setter
  def spacing_glyph(self,  value:'int'):
    self.set_spacing(value)
  @property
  def spacing_space(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_spacing(1)
    return _ret
  @spacing_space.setter
  def spacing_space(self,  value:'int'):
    self.set_spacing(value)
  @property
  def spacing_top(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_spacing(2)
    return _ret
  @spacing_top.setter
  def spacing_top(self,  value:'int'):
    self.set_spacing(value)
  @property
  def spacing_bottom(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_spacing(3)
    return _ret
  @spacing_bottom.setter
  def spacing_bottom(self,  value:'int'):
    self.set_spacing(value)
  @property
  def baseline_offset(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_baseline_offset()
    return _ret
  @baseline_offset.setter
  def baseline_offset(self,  value:'float'):
    self.set_baseline_offset(value)
  @functools.native_method
  def set_base_font(self, font:'py4godot_font.Font'   ) -> None:
    r''''''

    assert(not font is None)
    assert isinstance(font, get_class('Font')), 'font must be Font'

    self.py__base_font = font






    self._ptr.call_with_return(111,tuple([font._ptr]))

  @functools.native_method
  def get_base_font(self) -> typing.Union['py4godot_font.Font','py4godot_systemfont.SystemFont','py4godot_fontfile.FontFile','typing.Self']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Font
    _ret._ptr = self._ptr.call_with_return(112,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_variation_opentype(self, coords:'Dictionary'   ) -> None:
    r''''''

    assert(not coords is None)
    assert isinstance(coords, Dictionary), 'coords must be Dictionary'

    self.py__variation_opentype = coords






    self._ptr.call_with_return(113,tuple([coords._ptr]))

  @functools.native_method
  def get_variation_opentype(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(114,tuple([]))

    return _ret


  @functools.native_method
  def set_variation_embolden(self, strength:'float'   ) -> None:
    r''''''

    assert isinstance(strength, (int, float)), 'strength must be int or float'

    self.py__variation_embolden = strength






    self._ptr.call_with_return(115,tuple([strength]))

  @functools.native_method
  def get_variation_embolden(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(116,tuple([]))

    return _ret


  @functools.native_method
  def set_variation_face_index(self, face_index:'int'   ) -> None:
    r''''''

    assert isinstance(face_index, (int, float)), 'face_index must be int or float'

    self.py__variation_face_index = face_index






    self._ptr.call_with_return(117,tuple([face_index]))

  @functools.native_method
  def get_variation_face_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(118,tuple([]))

    return _ret


  @functools.native_method
  def set_variation_transform(self, transform:'Transform2D'   ) -> None:
    r''''''

    assert(not transform is None)
    assert isinstance(transform, Transform2D), 'transform must be Transform2D'

    self.py__variation_transform = transform






    self._ptr.call_with_return(119,tuple([transform._ptr]))

  @functools.native_method
  def get_variation_transform(self) -> typing.Union['Transform2D']:
    r''''''




    _ret = Transform2D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(120,tuple([]))

    return _ret


  @functools.native_method
  def set_opentype_features(self, features:'Dictionary'   ) -> None:
    r''''''

    assert(not features is None)
    assert isinstance(features, Dictionary), 'features must be Dictionary'

    self.py__opentype_features = features






    self._ptr.call_with_return(121,tuple([features._ptr]))

  @functools.native_method
  def set_spacing(self, spacing:'int'  , value:'int'   ) -> None:
    r'''
				Sets the spacing for `spacing` to `value` in pixels (not relative to the font size).
			'''

    assert isinstance(spacing, (int, float)), 'spacing must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__spacing_glyph = spacing







    self._ptr.call_with_return(122,tuple([spacing, value]))

  @functools.native_method
  def set_baseline_offset(self, baseline_offset:'float'   ) -> None:
    r''''''

    assert isinstance(baseline_offset, (int, float)), 'baseline_offset must be int or float'

    self.py__baseline_offset = baseline_offset






    self._ptr.call_with_return(123,tuple([baseline_offset]))

  @functools.native_method
  def get_baseline_offset(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(124,tuple([]))

    return _ret



register_cast_function('FontVariation', FontVariation.cast)
register_class('FontVariation', FontVariation)
