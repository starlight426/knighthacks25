# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.MultiMesh as py4godot_multimesh 
import py4godot.classes.GeometryInstance3D as py4godot_geometryinstance3d 
from py4godot.wrappers.wrappers import CPPMultiMeshInstance3DWrapper


class MultiMeshInstance3D(py4godot_geometryinstance3d.GeometryInstance3D):
  r'''
		`MultiMeshInstance3D` is a specialized node to instance `GeometryInstance3D`s based on a `MultiMesh` resource.
		This is useful to optimize the rendering of a high number of instances of a given mesh (for example trees in a forest or grass strands).
	'''

  @staticmethod
  def constructor():
    class_ = MultiMeshInstance3D.construct_without_init()
    class_._ptr = constructor(485,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MultiMeshInstance3D.construct_without_init()
    class_._ptr = constructor(485,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMultiMeshInstance3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(485,0, ())


  def generate_wrapper(self):
    return CPPMultiMeshInstance3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = MultiMeshInstance3D.__new__(MultiMeshInstance3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MultiMeshInstance3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiMeshInstance3D.construct_without_init()
    cls._ptr = CPPMultiMeshInstance3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiMeshInstance3D.construct_without_init()
    cls._ptr = CPPMultiMeshInstance3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def multimesh(self) -> typing.Union['py4godot_multimesh.MultiMesh']:
    r''''''
    _ret = self. get_multimesh()
    return _ret
  @multimesh.setter
  def multimesh(self,  value:'py4godot_object.Object'):
    self.set_multimesh(value)
  @functools.native_method
  def set_multimesh(self, multimesh:'py4godot_multimesh.MultiMesh'   ) -> None:
    r''''''

    assert(not multimesh is None)
    assert isinstance(multimesh, get_class('MultiMesh')), 'multimesh must be MultiMesh'

    self.py__multimesh = multimesh






    self._ptr.call_with_return(298,tuple([multimesh._ptr]))

  @functools.native_method
  def get_multimesh(self) -> typing.Union['py4godot_multimesh.MultiMesh']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: MultiMesh
    _ret._ptr = self._ptr.call_with_return(299,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('MultiMeshInstance3D', MultiMeshInstance3D.cast)
register_class('MultiMeshInstance3D', MultiMeshInstance3D)
