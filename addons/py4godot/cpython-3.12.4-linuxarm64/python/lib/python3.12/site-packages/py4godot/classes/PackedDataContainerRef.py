# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPPackedDataContainerRefWrapper


class PackedDataContainerRef(py4godot_refcounted.RefCounted):
  r'''
		When packing nested containers using `PackedDataContainer`, they are recursively packed into `PackedDataContainerRef` (only applies to `Array` and `Dictionary`). Their data can be retrieved the same way as from `PackedDataContainer`.
		```gdscript
		var packed = PackedDataContainer.new()
		packed.pack(`1, 2, 3, `"nested1", "nested2"`, 4, 5, 6`)

		for element in packed:
			if element is PackedDataContainerRef:
				for subelement in element:
					print("::", subelement)
			else:
				print(element)
		```
		Prints:
		`codeblock lang=text`
		1
		2
		3
		::nested1
		::nested2
		4
		5
		6
		```
	'''

  @staticmethod
  def constructor():
    class_ = PackedDataContainerRef.construct_without_init()
    class_._ptr = constructor(566,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PackedDataContainerRef.construct_without_init()
    class_._ptr = constructor(566,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPackedDataContainerRefWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(566,0, ())


  def generate_wrapper(self):
    return CPPPackedDataContainerRefWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PackedDataContainerRef.__new__(PackedDataContainerRef)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PackedDataContainerRef'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PackedDataContainerRef.construct_without_init()
    cls._ptr = CPPPackedDataContainerRefWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PackedDataContainerRef.construct_without_init()
    cls._ptr = CPPPackedDataContainerRefWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def size(self) -> typing.Union[int]:
    r'''
				Returns the size of the packed container (see `Array.size` and `Dictionary.size`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(53,tuple([]))
    return _ret



register_cast_function('PackedDataContainerRef', PackedDataContainerRef.cast)
register_class('PackedDataContainerRef', PackedDataContainerRef)
