# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Gradient as py4godot_gradient 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPGradientTexture2DWrapper

class Fill:
  FILL_LINEAR = 0
  FILL_RADIAL = 1
  FILL_SQUARE = 2
class Repeat:
  REPEAT_NONE = 0
  REPEAT = 1
  REPEAT_MIRROR = 2


class GradientTexture2D(py4godot_texture2d.Texture2D):
  r'''
		A 2D texture that obtains colors from a `Gradient` to fill the texture data. This texture is able to transform a color transition into different patterns such as a linear or a radial gradient. The texture is filled by interpolating colors starting from `fill_from` to `fill_to` offsets by default, but the gradient fill can be repeated to cover the entire texture.
		The gradient is sampled individually for each pixel so it does not necessarily represent an exact copy of the gradient (see `width` and `height`). See also `GradientTexture1D`, `CurveTexture` and `CurveXYZTexture`.
	'''

  @staticmethod
  def constructor():
    class_ = GradientTexture2D.construct_without_init()
    class_._ptr = constructor(381,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GradientTexture2D.construct_without_init()
    class_._ptr = constructor(381,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGradientTexture2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(381,0, ())


  def generate_wrapper(self):
    return CPPGradientTexture2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GradientTexture2D.__new__(GradientTexture2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GradientTexture2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GradientTexture2D.construct_without_init()
    cls._ptr = CPPGradientTexture2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GradientTexture2D.construct_without_init()
    cls._ptr = CPPGradientTexture2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def gradient(self) -> typing.Union['py4godot_gradient.Gradient']:
    r''''''
    _ret = self. get_gradient()
    return _ret
  @gradient.setter
  def gradient(self,  value:'py4godot_object.Object'):
    self.set_gradient(value)
  @property
  def width(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_width()
    return _ret
  @width.setter
  def width(self,  value:'int'):
    self.set_width(value)
  @property
  def height(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'int'):
    self.set_height(value)
  @property
  def use_hdr(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_using_hdr()
    return _ret
  @use_hdr.setter
  def use_hdr(self,  value:'bool'):
    self.set_use_hdr(value)
  @property
  def fill(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_fill()
    return _ret
  @fill.setter
  def fill(self,  value:'int'):
    self.set_fill(value)
  @property
  def fill_from(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_fill_from()
    return _ret
  @fill_from.setter
  def fill_from(self,  value:'Vector2'):
    self.set_fill_from(value)
  @property
  def fill_to(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_fill_to()
    return _ret
  @fill_to.setter
  def fill_to(self,  value:'Vector2'):
    self.set_fill_to(value)
  @property
  def repeat(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_repeat()
    return _ret
  @repeat.setter
  def repeat(self,  value:'int'):
    self.set_repeat(value)
  @functools.native_method
  def set_gradient(self, gradient:'py4godot_gradient.Gradient'   ) -> None:
    r''''''

    assert(not gradient is None)
    assert isinstance(gradient, get_class('Gradient')), 'gradient must be Gradient'

    self.py__gradient = gradient






    self._ptr.call_with_return(93,tuple([gradient._ptr]))

  @functools.native_method
  def get_gradient(self) -> typing.Union['py4godot_gradient.Gradient']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Gradient
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_width(self, width:'int'   ) -> None:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'

    self.py__width = width






    self._ptr.call_with_return(95,tuple([width]))

  @functools.native_method
  def set_height(self, height:'int'   ) -> None:
    r''''''

    assert isinstance(height, (int, float)), 'height must be int or float'

    self.py__height = height






    self._ptr.call_with_return(96,tuple([height]))

  @functools.native_method
  def set_use_hdr(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__use_hdr = enabled






    self._ptr.call_with_return(97,tuple([enabled]))

  @functools.native_method
  def is_using_hdr(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([]))

    return _ret


  @functools.native_method
  def set_fill(self, fill:'int'  ) -> None:
    r''''''

    assert isinstance(fill, (int, float)), 'fill must be int or float'

    self.py__fill = fill






    self._ptr.call_with_return(99,tuple([fill]))

  @functools.native_method
  def get_fill(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(100,tuple([]))

    return _ret


  @functools.native_method
  def set_fill_from(self, fill_from:'Vector2'   ) -> None:
    r''''''

    assert(not fill_from is None)
    assert isinstance(fill_from, Vector2), 'fill_from must be Vector2'

    self.py__fill_from = fill_from






    self._ptr.call_with_return(101,tuple([fill_from._ptr]))

  @functools.native_method
  def get_fill_from(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(102,tuple([]))

    return _ret


  @functools.native_method
  def set_fill_to(self, fill_to:'Vector2'   ) -> None:
    r''''''

    assert(not fill_to is None)
    assert isinstance(fill_to, Vector2), 'fill_to must be Vector2'

    self.py__fill_to = fill_to






    self._ptr.call_with_return(103,tuple([fill_to._ptr]))

  @functools.native_method
  def get_fill_to(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(104,tuple([]))

    return _ret


  @functools.native_method
  def set_repeat(self, repeat:'int'  ) -> None:
    r''''''

    assert isinstance(repeat, (int, float)), 'repeat must be int or float'

    self.py__repeat = repeat






    self._ptr.call_with_return(105,tuple([repeat]))

  @functools.native_method
  def get_repeat(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(106,tuple([]))

    return _ret



register_cast_function('GradientTexture2D', GradientTexture2D.cast)
register_class('GradientTexture2D', GradientTexture2D)
