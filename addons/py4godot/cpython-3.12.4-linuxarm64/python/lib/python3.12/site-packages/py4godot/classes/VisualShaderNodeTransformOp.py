# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeTransformOpWrapper

class Operator:
  OP_AxB = 0
  OP_BxA = 1
  OP_AxB_COMP = 2
  OP_BxA_COMP = 3
  OP_ADD = 4
  OP_A_MINUS_B = 5
  OP_B_MINUS_A = 6
  OP_A_DIV_B = 7
  OP_B_DIV_A = 8
  OP_MAX = 9


class VisualShaderNodeTransformOp(py4godot_visualshadernode.VisualShaderNode):
  r'''
		Applies `operator` to two transform (4Ã—4 matrices) inputs.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeTransformOp.construct_without_init()
    class_._ptr = constructor(964,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeTransformOp.construct_without_init()
    class_._ptr = constructor(964,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeTransformOpWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(964,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeTransformOpWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeTransformOp.__new__(VisualShaderNodeTransformOp)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeTransformOp'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTransformOp.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTransformOpWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTransformOp.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTransformOpWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def operator(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_operator()
    return _ret
  @operator.setter
  def operator(self,  value:'int'):
    self.set_operator(value)
  @functools.native_method
  def set_operator(self, op:'int'  ) -> None:
    r''''''

    assert isinstance(op, (int, float)), 'op must be int or float'

    self.py__operator = op






    self._ptr.call_with_return(88,tuple([op]))

  @functools.native_method
  def get_operator(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeTransformOp', VisualShaderNodeTransformOp.cast)
register_class('VisualShaderNodeTransformOp', VisualShaderNodeTransformOp)
