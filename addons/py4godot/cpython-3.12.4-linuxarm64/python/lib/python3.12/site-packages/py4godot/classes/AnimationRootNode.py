# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AnimationNode as py4godot_animationnode 
from py4godot.wrappers.wrappers import CPPAnimationRootNodeWrapper


class AnimationRootNode(py4godot_animationnode.AnimationNode):
  r'''
		`AnimationRootNode` is a base class for `AnimationNode`s that hold a complete animation. A complete animation refers to the output of an `AnimationNodeOutput` in an `AnimationNodeBlendTree` or the output of another `AnimationRootNode`. Used for `AnimationTree.tree_root` or in other `AnimationRootNode`s.
		Examples of built-in root nodes include `AnimationNodeBlendTree` (allows blending nodes between each other using various modes), `AnimationNodeStateMachine` (allows to configure blending and transitions between nodes using a state machine pattern), `AnimationNodeBlendSpace2D` (allows linear blending between **three** `AnimationNode`s), `AnimationNodeBlendSpace1D` (allows linear blending only between **two** `AnimationNode`s).
	'''

  @staticmethod
  def constructor():
    class_ = AnimationRootNode.construct_without_init()
    class_._ptr = constructor(96,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationRootNode.construct_without_init()
    class_._ptr = constructor(96,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationRootNodeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(96,0, ())


  def generate_wrapper(self):
    return CPPAnimationRootNodeWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AnimationRootNode.__new__(AnimationRootNode)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationRootNode'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationRootNode.construct_without_init()
    cls._ptr = CPPAnimationRootNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationRootNode.construct_without_init()
    cls._ptr = CPPAnimationRootNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('AnimationRootNode', AnimationRootNode.cast)
register_class('AnimationRootNode', AnimationRootNode)
