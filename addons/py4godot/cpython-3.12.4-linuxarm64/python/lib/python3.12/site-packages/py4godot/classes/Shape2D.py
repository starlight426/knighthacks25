# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPShape2DWrapper


class Shape2D(py4godot_resource.Resource):
  r'''
		Abstract base class for all 2D shapes, intended for use in physics.
		**Performance:** Primitive shapes, especially `CircleShape2D`, are fast to check collisions against. `ConvexPolygonShape2D` is slower, and `ConcavePolygonShape2D` is the slowest.
	'''

  @staticmethod
  def constructor():
    class_ = Shape2D.construct_without_init()
    class_._ptr = constructor(741,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Shape2D.construct_without_init()
    class_._ptr = constructor(741,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPShape2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(741,0, ())


  def generate_wrapper(self):
    return CPPShape2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Shape2D.__new__(Shape2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Shape2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Shape2D.construct_without_init()
    cls._ptr = CPPShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Shape2D.construct_without_init()
    cls._ptr = CPPShape2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def custom_solver_bias(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_custom_solver_bias()
    return _ret
  @custom_solver_bias.setter
  def custom_solver_bias(self,  value:'float'):
    self.set_custom_solver_bias(value)
  @functools.native_method
  def set_custom_solver_bias(self, bias:'float'   ) -> None:
    r''''''

    assert isinstance(bias, (int, float)), 'bias must be int or float'

    self.py__custom_solver_bias = bias






    self._ptr.call_with_return(77,tuple([bias]))

  @functools.native_method
  def get_custom_solver_bias(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def collide(self, local_xform:'Transform2D'   , with_shape:'Shape2D'   , shape_xform:'Transform2D'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if this shape is colliding with another.
				This method needs the transformation matrix for this shape (`local_xform`), the shape to check collisions with (`with_shape`), and the transformation matrix of that shape (`shape_xform`).
			'''

    assert(not local_xform is None)
    assert isinstance(local_xform, Transform2D), 'local_xform must be Transform2D'
    assert(not with_shape is None)
    assert isinstance(with_shape, get_class('Shape2D')), 'with_shape must be Shape2D'
    assert(not shape_xform is None)
    assert isinstance(shape_xform, Transform2D), 'shape_xform must be Transform2D'








    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([local_xform._ptr, with_shape._ptr, shape_xform._ptr]))
    return _ret


  @functools.native_method
  def collide_with_motion(self, local_xform:'Transform2D'   , local_motion:'Vector2'   , with_shape:'Shape2D'   , shape_xform:'Transform2D'   , shape_motion:'Vector2'   ) -> typing.Union[bool]:
    r'''
				Returns whether this shape would collide with another, if a given movement was applied.
				This method needs the transformation matrix for this shape (`local_xform`), the movement to test on this shape (`local_motion`), the shape to check collisions with (`with_shape`), the transformation matrix of that shape (`shape_xform`), and the movement to test onto the other object (`shape_motion`).
			'''

    assert(not local_xform is None)
    assert isinstance(local_xform, Transform2D), 'local_xform must be Transform2D'
    assert(not local_motion is None)
    assert isinstance(local_motion, Vector2), 'local_motion must be Vector2'
    assert(not with_shape is None)
    assert isinstance(with_shape, get_class('Shape2D')), 'with_shape must be Shape2D'
    assert(not shape_xform is None)
    assert isinstance(shape_xform, Transform2D), 'shape_xform must be Transform2D'
    assert(not shape_motion is None)
    assert isinstance(shape_motion, Vector2), 'shape_motion must be Vector2'










    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([local_xform._ptr, local_motion._ptr, with_shape._ptr, shape_xform._ptr, shape_motion._ptr]))
    return _ret


  @functools.native_method
  def collide_and_get_contacts(self, local_xform:'Transform2D'   , with_shape:'Shape2D'   , shape_xform:'Transform2D'   ) -> typing.Union['PackedVector2Array']:
    r'''
				Returns a list of contact point pairs where this shape touches another.
				If there are no collisions, the returned list is empty. Otherwise, the returned list contains contact points arranged in pairs, with entries alternating between points on the boundary of this shape and points on the boundary of `with_shape`.
				A collision pair A, B can be used to calculate the collision normal with `(B - A).normalized()`, and the collision depth with `(B - A).length()`. This information is typically used to separate shapes, particularly in collision solvers.
				This method needs the transformation matrix for this shape (`local_xform`), the shape to check collisions with (`with_shape`), and the transformation matrix of that shape (`shape_xform`).
			'''

    assert(not local_xform is None)
    assert isinstance(local_xform, Transform2D), 'local_xform must be Transform2D'
    assert(not with_shape is None)
    assert isinstance(with_shape, get_class('Shape2D')), 'with_shape must be Shape2D'
    assert(not shape_xform is None)
    assert isinstance(shape_xform, Transform2D), 'shape_xform must be Transform2D'








    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([local_xform._ptr, with_shape._ptr, shape_xform._ptr]))
    return _ret


  @functools.native_method
  def collide_with_motion_and_get_contacts(self, local_xform:'Transform2D'   , local_motion:'Vector2'   , with_shape:'Shape2D'   , shape_xform:'Transform2D'   , shape_motion:'Vector2'   ) -> typing.Union['PackedVector2Array']:
    r'''
				Returns a list of contact point pairs where this shape would touch another, if a given movement was applied.
				If there would be no collisions, the returned list is empty. Otherwise, the returned list contains contact points arranged in pairs, with entries alternating between points on the boundary of this shape and points on the boundary of `with_shape`.
				A collision pair A, B can be used to calculate the collision normal with `(B - A).normalized()`, and the collision depth with `(B - A).length()`. This information is typically used to separate shapes, particularly in collision solvers.
				This method needs the transformation matrix for this shape (`local_xform`), the movement to test on this shape (`local_motion`), the shape to check collisions with (`with_shape`), the transformation matrix of that shape (`shape_xform`), and the movement to test onto the other object (`shape_motion`).
			'''

    assert(not local_xform is None)
    assert isinstance(local_xform, Transform2D), 'local_xform must be Transform2D'
    assert(not local_motion is None)
    assert isinstance(local_motion, Vector2), 'local_motion must be Vector2'
    assert(not with_shape is None)
    assert isinstance(with_shape, get_class('Shape2D')), 'with_shape must be Shape2D'
    assert(not shape_xform is None)
    assert isinstance(shape_xform, Transform2D), 'shape_xform must be Transform2D'
    assert(not shape_motion is None)
    assert isinstance(shape_motion, Vector2), 'shape_motion must be Vector2'










    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([local_xform._ptr, local_motion._ptr, with_shape._ptr, shape_xform._ptr, shape_motion._ptr]))
    return _ret


  @functools.native_method
  def draw(self, canvas_item:'RID'   , color:'Color'   ) -> None:
    r'''
				Draws a solid shape onto a `CanvasItem` with the `RenderingServer` API filled with the specified `color`. The exact drawing method is specific for each shape and cannot be configured.
			'''

    assert(not canvas_item is None)
    assert isinstance(canvas_item, RID), 'canvas_item must be RID'
    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'







    self._ptr.call_with_return(83,tuple([canvas_item._ptr, color._ptr]))

  @functools.native_method
  def get_rect(self) -> typing.Union['Rect2']:
    r'''
				Returns a `Rect2` representing the shapes boundary.
			'''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([]))
    return _ret



register_cast_function('Shape2D', Shape2D.cast)
register_class('Shape2D', Shape2D)
