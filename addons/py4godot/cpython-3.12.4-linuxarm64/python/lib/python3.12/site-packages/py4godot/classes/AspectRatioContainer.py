# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Container as py4godot_container 
from py4godot.wrappers.wrappers import CPPAspectRatioContainerWrapper

class StretchMode:
  STRETCH_WIDTH_CONTROLS_HEIGHT = 0
  STRETCH_HEIGHT_CONTROLS_WIDTH = 1
  STRETCH_FIT = 2
  STRETCH_COVER = 3
class AlignmentMode:
  ALIGNMENT_BEGIN = 0
  ALIGNMENT_CENTER = 1
  ALIGNMENT_END = 2


class AspectRatioContainer(py4godot_container.Container):
  r'''
		A container type that arranges its child controls in a way that preserves their proportions automatically when the container is resized. Useful when a container has a dynamic size and the child nodes must adjust their sizes accordingly without losing their aspect ratios.
	'''

  @staticmethod
  def constructor():
    class_ = AspectRatioContainer.construct_without_init()
    class_._ptr = constructor(102,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AspectRatioContainer.construct_without_init()
    class_._ptr = constructor(102,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAspectRatioContainerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(102,0, ())


  def generate_wrapper(self):
    return CPPAspectRatioContainerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AspectRatioContainer.__new__(AspectRatioContainer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AspectRatioContainer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AspectRatioContainer.construct_without_init()
    cls._ptr = CPPAspectRatioContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AspectRatioContainer.construct_without_init()
    cls._ptr = CPPAspectRatioContainerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def ratio(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_ratio()
    return _ret
  @ratio.setter
  def ratio(self,  value:'float'):
    self.set_ratio(value)
  @property
  def stretch_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stretch_mode()
    return _ret
  @stretch_mode.setter
  def stretch_mode(self,  value:'int'):
    self.set_stretch_mode(value)
  @property
  def alignment_horizontal(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_alignment_horizontal()
    return _ret
  @alignment_horizontal.setter
  def alignment_horizontal(self,  value:'int'):
    self.set_alignment_horizontal(value)
  @property
  def alignment_vertical(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_alignment_vertical()
    return _ret
  @alignment_vertical.setter
  def alignment_vertical(self,  value:'int'):
    self.set_alignment_vertical(value)
  @functools.native_method
  def set_ratio(self, ratio:'float'   ) -> None:
    r''''''

    assert isinstance(ratio, (int, float)), 'ratio must be int or float'

    self.py__ratio = ratio






    self._ptr.call_with_return(437,tuple([ratio]))

  @functools.native_method
  def get_ratio(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(438,tuple([]))

    return _ret


  @functools.native_method
  def set_stretch_mode(self, stretch_mode:'int'  ) -> None:
    r''''''

    assert isinstance(stretch_mode, (int, float)), 'stretch_mode must be int or float'

    self.py__stretch_mode = stretch_mode






    self._ptr.call_with_return(439,tuple([stretch_mode]))

  @functools.native_method
  def get_stretch_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(440,tuple([]))

    return _ret


  @functools.native_method
  def set_alignment_horizontal(self, alignment_horizontal:'int'  ) -> None:
    r''''''

    assert isinstance(alignment_horizontal, (int, float)), 'alignment_horizontal must be int or float'

    self.py__alignment_horizontal = alignment_horizontal






    self._ptr.call_with_return(441,tuple([alignment_horizontal]))

  @functools.native_method
  def get_alignment_horizontal(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(442,tuple([]))

    return _ret


  @functools.native_method
  def set_alignment_vertical(self, alignment_vertical:'int'  ) -> None:
    r''''''

    assert isinstance(alignment_vertical, (int, float)), 'alignment_vertical must be int or float'

    self.py__alignment_vertical = alignment_vertical






    self._ptr.call_with_return(443,tuple([alignment_vertical]))

  @functools.native_method
  def get_alignment_vertical(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(444,tuple([]))

    return _ret



register_cast_function('AspectRatioContainer', AspectRatioContainer.cast)
register_class('AspectRatioContainer', AspectRatioContainer)
