# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.PrimitiveMesh as py4godot_primitivemesh 
from py4godot.wrappers.wrappers import CPPBoxMeshWrapper


class BoxMesh(py4godot_primitivemesh.PrimitiveMesh):
  r'''
		Generate an axis-aligned box `PrimitiveMesh`.
		The box's UV layout is arranged in a 3Ã—2 layout that allows texturing each face individually. To apply the same texture on all faces, change the material's UV property to `Vector3(3, 2, 1)`. This is equivalent to adding `UV *= vec2(3.0, 2.0)` in a vertex shader.
		**Note:** When using a large textured `BoxMesh` (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase `subdivide_depth`, `subdivide_height` and `subdivide_width` until you no longer notice UV jittering.
	'''

  @staticmethod
  def constructor():
    class_ = BoxMesh.construct_without_init()
    class_._ptr = constructor(171,0, ())
    return class_
  @staticmethod
  def new():
    class_ = BoxMesh.construct_without_init()
    class_._ptr = constructor(171,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPBoxMeshWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(171,0, ())


  def generate_wrapper(self):
    return CPPBoxMeshWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = BoxMesh.__new__(BoxMesh)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'BoxMesh'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoxMesh.construct_without_init()
    cls._ptr = CPPBoxMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoxMesh.construct_without_init()
    cls._ptr = CPPBoxMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def size(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_size()
    return _ret
  @size.setter
  def size(self,  value:'Vector3'):
    self.set_size(value)
  @property
  def subdivide_width(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_subdivide_width()
    return _ret
  @subdivide_width.setter
  def subdivide_width(self,  value:'int'):
    self.set_subdivide_width(value)
  @property
  def subdivide_height(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_subdivide_height()
    return _ret
  @subdivide_height.setter
  def subdivide_height(self,  value:'int'):
    self.set_subdivide_height(value)
  @property
  def subdivide_depth(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_subdivide_depth()
    return _ret
  @subdivide_depth.setter
  def subdivide_depth(self,  value:'int'):
    self.set_subdivide_depth(value)
  @functools.native_method
  def set_size(self, size:'Vector3'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector3), 'size must be Vector3'

    self.py__size = size






    self._ptr.call_with_return(118,tuple([size._ptr]))

  @functools.native_method
  def get_size(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(119,tuple([]))

    return _ret


  @functools.native_method
  def set_subdivide_width(self, subdivide:'int'   ) -> None:
    r''''''

    assert isinstance(subdivide, (int, float)), 'subdivide must be int or float'

    self.py__subdivide_width = subdivide






    self._ptr.call_with_return(120,tuple([subdivide]))

  @functools.native_method
  def get_subdivide_width(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(121,tuple([]))

    return _ret


  @functools.native_method
  def set_subdivide_height(self, divisions:'int'   ) -> None:
    r''''''

    assert isinstance(divisions, (int, float)), 'divisions must be int or float'

    self.py__subdivide_height = divisions






    self._ptr.call_with_return(122,tuple([divisions]))

  @functools.native_method
  def get_subdivide_height(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(123,tuple([]))

    return _ret


  @functools.native_method
  def set_subdivide_depth(self, divisions:'int'   ) -> None:
    r''''''

    assert isinstance(divisions, (int, float)), 'divisions must be int or float'

    self.py__subdivide_depth = divisions






    self._ptr.call_with_return(124,tuple([divisions]))

  @functools.native_method
  def get_subdivide_depth(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(125,tuple([]))

    return _ret



register_cast_function('BoxMesh', BoxMesh.cast)
register_class('BoxMesh', BoxMesh)
