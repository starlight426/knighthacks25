# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CompressedTexture2DArray as py4godot_compressedtexture2darray 
  import py4godot.classes.ImageTextureLayered as py4godot_imagetexturelayered 
  import py4godot.classes.Cubemap as py4godot_cubemap 
  import py4godot.classes.CubemapArray as py4godot_cubemaparray 
  import py4godot.classes.TextureLayered as py4godot_texturelayered 
  import py4godot.classes.PlaceholderTextureLayered as py4godot_placeholdertexturelayered 
  import py4godot.classes.TextureLayeredRD as py4godot_texturelayeredrd 
  import py4godot.classes.Texture2DArrayRD as py4godot_texture2darrayrd 
  import py4godot.classes.CompressedCubemapArray as py4godot_compressedcubemaparray 
  import py4godot.classes.PlaceholderTexture2DArray as py4godot_placeholdertexture2darray 
  import py4godot.classes.PlaceholderCubemap as py4godot_placeholdercubemap 
  import py4godot.classes.Texture2DArray as py4godot_texture2darray 
  import py4godot.classes.CompressedCubemap as py4godot_compressedcubemap 
  import py4godot.classes.TextureCubemapArrayRD as py4godot_texturecubemaparrayrd 
  import py4godot.classes.PlaceholderCubemapArray as py4godot_placeholdercubemaparray 
  import py4godot.classes.CompressedTextureLayered as py4godot_compressedtexturelayered 
  import py4godot.classes.TextureCubemapRD as py4godot_texturecubemaprd 
import py4godot.classes.VisualShaderNodeSample3D as py4godot_visualshadernodesample3d 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeTexture2DArrayWrapper


class VisualShaderNodeTexture2DArray(py4godot_visualshadernodesample3d.VisualShaderNodeSample3D):
  r'''
		Translated to `uniform sampler2DArray` in the shader language.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeTexture2DArray.construct_without_init()
    class_._ptr = constructor(951,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeTexture2DArray.construct_without_init()
    class_._ptr = constructor(951,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeTexture2DArrayWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(951,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeTexture2DArrayWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeTexture2DArray.__new__(VisualShaderNodeTexture2DArray)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeTexture2DArray'

  def __del__(self):
    pass
  def __setitem__(self,  index, value):
    self._ptr.call_with_return(93, (index, value))

  def __getitem__(self,  index):

    if index < 0:
      raise KeyError(f"Index '{index}' invalid")
    pyobject = self._ptr.call_with_return(92, (index,))
    return pyobject
  def __iter__(self):
    self._index = 0
    return self
  def __next__(self):
    if self._index >= self.size():
      raise StopIteration()
    val = self[self._index]
    self._index += 1
    return val

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTexture2DArray.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTexture2DArrayWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTexture2DArray.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTexture2DArrayWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def from_list(values):
    result = VisualShaderNodeTexture2DArray.new0()
    for value in values:
      result.push_back(value)
    return result

  def to_list(self):
    return [value for value in self]


  @property
  def texture_array(self) -> typing.Union['py4godot_texture2darray.Texture2DArray']:
    r''''''
    _ret = self. get_texture_array()
    return _ret
  @texture_array.setter
  def texture_array(self,  value:'py4godot_object.Object'):
    self.set_texture_array(value)
  @functools.native_method
  def set_texture_array(self, value:'py4godot_texturelayered.TextureLayered'   ) -> None:
    r''''''

    assert(not value is None)
    assert isinstance(value, get_class('TextureLayered')), 'value must be TextureLayered'

    self.py__texture_array = value






    self._ptr.call_with_return(90,tuple([value._ptr]))

  @functools.native_method
  def get_texture_array(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: TextureLayered
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('VisualShaderNodeTexture2DArray', VisualShaderNodeTexture2DArray.cast)
register_class('VisualShaderNodeTexture2DArray', VisualShaderNodeTexture2DArray)
