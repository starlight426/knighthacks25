# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.ImmediateMesh as py4godot_immediatemesh 
  import py4godot.classes.Mesh as py4godot_mesh 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CapsuleMesh as py4godot_capsulemesh 
  import py4godot.classes.ArrayMesh as py4godot_arraymesh 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.PointMesh as py4godot_pointmesh 
  import py4godot.classes.RibbonTrailMesh as py4godot_ribbontrailmesh 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.PlaceholderMesh as py4godot_placeholdermesh 
  import py4godot.classes.BoxMesh as py4godot_boxmesh 
  import py4godot.classes.CylinderMesh as py4godot_cylindermesh 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PlaneMesh as py4godot_planemesh 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.TubeTrailMesh as py4godot_tubetrailmesh 
  import py4godot.classes.TextMesh as py4godot_textmesh 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.TorusMesh as py4godot_torusmesh 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.SphereMesh as py4godot_spheremesh 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.PrimitiveMesh as py4godot_primitivemesh 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.QuadMesh as py4godot_quadmesh 
  import py4godot.classes.PrismMesh as py4godot_prismmesh 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPMeshTextureWrapper


class MeshTexture(py4godot_texture2d.Texture2D):
  r'''
		Simple texture that uses a mesh to draw itself. It's limited because flags can't be changed and region drawing is not supported.
	'''

  @staticmethod
  def constructor():
    class_ = MeshTexture.construct_without_init()
    class_._ptr = constructor(476,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MeshTexture.construct_without_init()
    class_._ptr = constructor(476,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMeshTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(476,0, ())


  def generate_wrapper(self):
    return CPPMeshTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = MeshTexture.__new__(MeshTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MeshTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MeshTexture.construct_without_init()
    cls._ptr = CPPMeshTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MeshTexture.construct_without_init()
    cls._ptr = CPPMeshTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def mesh(self) -> typing.Any:
    r''''''
    _ret = self. get_mesh()
    return _ret
  @mesh.setter
  def mesh(self,  value:'py4godot_object.Object'):
    self.set_mesh(value)
  @property
  def base_texture(self) -> typing.Any:
    r''''''
    _ret = self. get_base_texture()
    return _ret
  @base_texture.setter
  def base_texture(self,  value:'py4godot_object.Object'):
    self.set_base_texture(value)
  @property
  def image_size(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_image_size()
    return _ret
  @image_size.setter
  def image_size(self,  value:'Vector2'):
    self.set_image_size(value)
  @functools.native_method
  def set_mesh(self, mesh:'py4godot_mesh.Mesh'   ) -> None:
    r''''''

    assert(not mesh is None)
    assert isinstance(mesh, get_class('Mesh')), 'mesh must be Mesh'

    self.py__mesh = mesh






    self._ptr.call_with_return(93,tuple([mesh._ptr]))

  @functools.native_method
  def get_mesh(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Mesh
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_image_size(self, size:'Vector2'   ) -> None:
    r''''''

    assert(not size is None)
    assert isinstance(size, Vector2), 'size must be Vector2'

    self.py__image_size = size






    self._ptr.call_with_return(95,tuple([size._ptr]))

  @functools.native_method
  def get_image_size(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_base_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__base_texture = texture






    self._ptr.call_with_return(97,tuple([texture._ptr]))

  @functools.native_method
  def get_base_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(98,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('MeshTexture', MeshTexture.cast)
register_class('MeshTexture', MeshTexture)
