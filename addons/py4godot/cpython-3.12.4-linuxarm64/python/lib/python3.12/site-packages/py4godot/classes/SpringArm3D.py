# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ConcavePolygonShape3D as py4godot_concavepolygonshape3d 
  import py4godot.classes.CapsuleShape3D as py4godot_capsuleshape3d 
  import py4godot.classes.WorldBoundaryShape3D as py4godot_worldboundaryshape3d 
  import py4godot.classes.BoxShape3D as py4godot_boxshape3d 
  import py4godot.classes.SphereShape3D as py4godot_sphereshape3d 
  import py4godot.classes.Shape3D as py4godot_shape3d 
  import py4godot.classes.HeightMapShape3D as py4godot_heightmapshape3d 
  import py4godot.classes.CylinderShape3D as py4godot_cylindershape3d 
  import py4godot.classes.ConvexPolygonShape3D as py4godot_convexpolygonshape3d 
  import py4godot.classes.SeparationRayShape3D as py4godot_separationrayshape3d 
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPSpringArm3DWrapper


class SpringArm3D(py4godot_node3d.Node3D):
  r'''
		`SpringArm3D` casts a ray or a shape along its Z axis and moves all its direct children to the collision point, with an optional margin. This is useful for 3rd person cameras that move closer to the player when inside a tight space (you may need to exclude the player's collider from the `SpringArm3D`'s collision check).
	'''

  @staticmethod
  def constructor():
    class_ = SpringArm3D.construct_without_init()
    class_._ptr = constructor(773,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SpringArm3D.construct_without_init()
    class_._ptr = constructor(773,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSpringArm3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(773,0, ())


  def generate_wrapper(self):
    return CPPSpringArm3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SpringArm3D.__new__(SpringArm3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SpringArm3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SpringArm3D.construct_without_init()
    cls._ptr = CPPSpringArm3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SpringArm3D.construct_without_init()
    cls._ptr = CPPSpringArm3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def collision_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_collision_mask()
    return _ret
  @collision_mask.setter
  def collision_mask(self,  value:'int'):
    self.set_collision_mask(value)
  @property
  def shape(self) -> typing.Any:
    r''''''
    _ret = self. get_shape()
    return _ret
  @shape.setter
  def shape(self,  value:'py4godot_object.Object'):
    self.set_shape(value)
  @property
  def spring_length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_length()
    return _ret
  @spring_length.setter
  def spring_length(self,  value:'float'):
    self.set_length(value)
  @property
  def margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_margin()
    return _ret
  @margin.setter
  def margin(self,  value:'float'):
    self.set_margin(value)
  @functools.native_method
  def get_hit_length(self) -> typing.Union[float]:
    r'''
				Returns the spring arm's current length.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(251,tuple([]))
    return _ret


  @functools.native_method
  def set_length(self, length:'float'   ) -> None:
    r''''''

    assert isinstance(length, (int, float)), 'length must be int or float'

    self.py__spring_length = length






    self._ptr.call_with_return(252,tuple([length]))

  @functools.native_method
  def get_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(253,tuple([]))

    return _ret


  @functools.native_method
  def set_shape(self, shape:'py4godot_shape3d.Shape3D'   ) -> None:
    r''''''

    assert(not shape is None)
    assert isinstance(shape, get_class('Shape3D')), 'shape must be Shape3D'

    self.py__shape = shape






    self._ptr.call_with_return(254,tuple([shape._ptr]))

  @functools.native_method
  def get_shape(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Shape3D
    _ret._ptr = self._ptr.call_with_return(255,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def add_excluded_object(self, RID:'RID'   ) -> None:
    r'''
				Adds the `PhysicsBody3D` object with the given `RID` to the list of `PhysicsBody3D` objects excluded from the collision check.
			'''

    assert(not RID is None)
    assert isinstance(RID, RID), 'RID must be RID'






    self._ptr.call_with_return(256,tuple([RID._ptr]))

  @functools.native_method
  def remove_excluded_object(self, RID:'RID'   ) -> typing.Union[bool]:
    r'''
				Removes the given `RID` from the list of `PhysicsBody3D` objects excluded from the collision check.
			'''

    assert(not RID is None)
    assert isinstance(RID, RID), 'RID must be RID'






    _ret = 0
    _ret = self._ptr.call_with_return(257,tuple([RID._ptr]))
    return _ret


  @functools.native_method
  def clear_excluded_objects(self) -> None:
    r'''
				Clears the list of `PhysicsBody3D` objects excluded from the collision check.
			'''




    self._ptr.call_with_return(258,tuple([]))

  @functools.native_method
  def set_collision_mask(self, mask:'int'   ) -> None:
    r''''''

    assert isinstance(mask, (int, float)), 'mask must be int or float'

    self.py__collision_mask = mask






    self._ptr.call_with_return(259,tuple([mask]))

  @functools.native_method
  def get_collision_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(260,tuple([]))

    return _ret


  @functools.native_method
  def set_margin(self, margin:'float'   ) -> None:
    r''''''

    assert isinstance(margin, (int, float)), 'margin must be int or float'

    self.py__margin = margin






    self._ptr.call_with_return(261,tuple([margin]))

  @functools.native_method
  def get_margin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(262,tuple([]))

    return _ret



register_cast_function('SpringArm3D', SpringArm3D.cast)
register_class('SpringArm3D', SpringArm3D)
