# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
from py4godot.wrappers.wrappers import CPPCopyTransformModifier3DWrapper

class TransformFlag:
  TRANSFORM_FLAG_POSITION = 1
  TRANSFORM_FLAG_ROTATION = 2
  TRANSFORM_FLAG_SCALE = 4
  TRANSFORM_FLAG_ALL = 7
class AxisFlag:
  AXIS_FLAG_X = 1
  AXIS_FLAG_Y = 2
  AXIS_FLAG_Z = 4
  AXIS_FLAG_ALL = 7


class CopyTransformModifier3D(py4godot_boneconstraint3d.BoneConstraint3D):
  r'''
		Apply the copied transform of the bone set by `BoneConstraint3D.set_reference_bone` to the bone set by `BoneConstraint3D.set_apply_bone` with processing it with some masks and options.
		There are 4 ways to apply the transform, depending on the combination of `set_relative` and `set_additive`.
		**Relative + Additive:**
		- Extract reference pose relative to the rest and add it to the apply bone's pose.
		**Relative + Not Additive:**
		- Extract reference pose relative to the rest and add it to the apply bone's rest.
		**Not Relative + Additive:**
		- Extract reference pose absolutely and add it to the apply bone's pose.
		**Not Relative + Not Additive:**
		- Extract reference pose absolutely and the apply bone's pose is replaced with it.
	'''

  @staticmethod
  def constructor():
    class_ = CopyTransformModifier3D.construct_without_init()
    class_._ptr = constructor(243,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CopyTransformModifier3D.construct_without_init()
    class_._ptr = constructor(243,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCopyTransformModifier3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(243,0, ())


  def generate_wrapper(self):
    return CPPCopyTransformModifier3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CopyTransformModifier3D.__new__(CopyTransformModifier3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CopyTransformModifier3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CopyTransformModifier3D.construct_without_init()
    cls._ptr = CPPCopyTransformModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CopyTransformModifier3D.construct_without_init()
    cls._ptr = CPPCopyTransformModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def setting_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_setting_count()
    return _ret
  @setting_count.setter
  def setting_count(self,  value:'int'):
    self.set_setting_count(value)
  @functools.native_method
  def set_copy_flags(self, index:'int'   , copy_flags:'int'   ) -> None:
    r'''
				Sets the flags to process the transform operations. If the flag is valid, the transform operation is processed.
				**Note:** If the rotation is valid for only one axis, it respects the roll of the valid axis. If the rotation is valid for two axes, it discards the roll of the invalid axis.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(copy_flags, (int, float)), 'copy_flags must be int or float'







    self._ptr.call_with_return(273,tuple([index, copy_flags]))

  @functools.native_method
  def get_copy_flags(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the copy flags of the setting at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret
    _ret = self._ptr.call_with_return(274,tuple([index]))
    return _ret


  @functools.native_method
  def set_axis_flags(self, index:'int'   , axis_flags:'int'   ) -> None:
    r'''
				Sets the flags to copy axes. If the flag is valid, the axis is copied.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(axis_flags, (int, float)), 'axis_flags must be int or float'







    self._ptr.call_with_return(275,tuple([index, axis_flags]))

  @functools.native_method
  def get_axis_flags(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the axis flags of the setting at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret
    _ret = self._ptr.call_with_return(276,tuple([index]))
    return _ret


  @functools.native_method
  def set_invert_flags(self, index:'int'   , axis_flags:'int'   ) -> None:
    r'''
				Sets the flags to inverte axes. If the flag is valid, the axis is copied.
				**Note:** An inverted scale means an inverse number, not a negative scale. For example, inverting `2.0` means `0.5`.
				**Note:** An inverted rotation flips the elements of the quaternion. For example, a two-axis inversion will flip the roll of each axis, and a three-axis inversion will flip the final orientation. However, be aware that flipping only one axis may cause unintended rotation by the unflipped axes, due to the characteristics of the quaternion.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(axis_flags, (int, float)), 'axis_flags must be int or float'







    self._ptr.call_with_return(277,tuple([index, axis_flags]))

  @functools.native_method
  def get_invert_flags(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the invert flags of the setting at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret
    _ret = self._ptr.call_with_return(278,tuple([index]))
    return _ret


  @functools.native_method
  def set_copy_position(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, the position will be copied.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(279,tuple([index, enabled]))

  @functools.native_method
  def is_position_copying(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the copy flags has the flag for the position in the setting at `index`. See also `set_copy_flags`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(280,tuple([index]))
    return _ret


  @functools.native_method
  def set_copy_rotation(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, the rotation will be copied.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(281,tuple([index, enabled]))

  @functools.native_method
  def is_rotation_copying(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the copy flags has the flag for the rotation in the setting at `index`. See also `set_copy_flags`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(282,tuple([index]))
    return _ret


  @functools.native_method
  def set_copy_scale(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, the scale will be copied.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(283,tuple([index, enabled]))

  @functools.native_method
  def is_scale_copying(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the copy flags has the flag for the scale in the setting at `index`. See also `set_copy_flags`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(284,tuple([index]))
    return _ret


  @functools.native_method
  def set_axis_x_enabled(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, the X-axis will be copied.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(285,tuple([index, enabled]))

  @functools.native_method
  def is_axis_x_enabled(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the enable flags has the flag for the X-axis in the setting at `index`. See also `set_axis_flags`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(286,tuple([index]))
    return _ret


  @functools.native_method
  def set_axis_y_enabled(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, the Y-axis will be copied.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(287,tuple([index, enabled]))

  @functools.native_method
  def is_axis_y_enabled(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the enable flags has the flag for the Y-axis in the setting at `index`. See also `set_axis_flags`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(288,tuple([index]))
    return _ret


  @functools.native_method
  def set_axis_z_enabled(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, the Z-axis will be copied.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(289,tuple([index, enabled]))

  @functools.native_method
  def is_axis_z_enabled(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the enable flags has the flag for the Z-axis in the setting at `index`. See also `set_axis_flags`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(290,tuple([index]))
    return _ret


  @functools.native_method
  def set_axis_x_inverted(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, the X-axis will be inverted.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(291,tuple([index, enabled]))

  @functools.native_method
  def is_axis_x_inverted(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the invert flags has the flag for the X-axis in the setting at `index`. See also `set_invert_flags`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(292,tuple([index]))
    return _ret


  @functools.native_method
  def set_axis_y_inverted(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, the Y-axis will be inverted.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(293,tuple([index, enabled]))

  @functools.native_method
  def is_axis_y_inverted(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the invert flags has the flag for the Y-axis in the setting at `index`. See also `set_invert_flags`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(294,tuple([index]))
    return _ret


  @functools.native_method
  def set_axis_z_inverted(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				If sets `enabled` to `true`, the Z-axis will be inverted.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(295,tuple([index, enabled]))

  @functools.native_method
  def is_axis_z_inverted(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the invert flags has the flag for the Z-axis in the setting at `index`. See also `set_invert_flags`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(296,tuple([index]))
    return _ret


  @functools.native_method
  def set_relative(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				Sets relative option in the setting at `index` to `enabled`.
				If sets `enabled` to `true`, the extracted and applying transform is relative to the rest.
				If sets `enabled` to `false`, the extracted transform is absolute.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(297,tuple([index, enabled]))

  @functools.native_method
  def is_relative(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the relative option is enabled in the setting at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(298,tuple([index]))
    return _ret


  @functools.native_method
  def set_additive(self, index:'int'   , enabled:'bool'   ) -> None:
    r'''
				Sets additive option in the setting at `index` to `enabled`. This mainly affects the process of applying transform to the `BoneConstraint3D.set_apply_bone`.
				If sets `enabled` to `true`, the processed transform is added to the pose of the current apply bone.
				If sets `enabled` to `false`, the pose of the current apply bone is replaced with the processed transform. However, if set `set_relative` to `true`, the transform is relative to rest.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(enabled, bool), 'enabled must be bool'







    self._ptr.call_with_return(299,tuple([index, enabled]))

  @functools.native_method
  def is_additive(self, index:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the additive option is enabled in the setting at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(300,tuple([index]))
    return _ret



register_cast_function('CopyTransformModifier3D', CopyTransformModifier3D.cast)
register_class('CopyTransformModifier3D', CopyTransformModifier3D)
