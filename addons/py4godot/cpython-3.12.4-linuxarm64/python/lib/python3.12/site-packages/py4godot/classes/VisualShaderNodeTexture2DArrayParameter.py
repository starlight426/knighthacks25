# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNodeTextureParameter as py4godot_visualshadernodetextureparameter 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeTexture2DArrayParameterWrapper


class VisualShaderNodeTexture2DArrayParameter(py4godot_visualshadernodetextureparameter.VisualShaderNodeTextureParameter):
  r'''
		This parameter allows to provide a collection of textures for the shader. You can use `VisualShaderNodeTexture2DArray` to extract the textures from array.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeTexture2DArrayParameter.construct_without_init()
    class_._ptr = constructor(952,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeTexture2DArrayParameter.construct_without_init()
    class_._ptr = constructor(952,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeTexture2DArrayParameterWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(952,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeTexture2DArrayParameterWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeTexture2DArrayParameter.__new__(VisualShaderNodeTexture2DArrayParameter)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeTexture2DArrayParameter'

  def __del__(self):
    pass
  def __setitem__(self,  index, value):
    self._ptr.call_with_return(103, (index, value))

  def __getitem__(self,  index):

    if index < 0:
      raise KeyError(f"Index '{index}' invalid")
    pyobject = self._ptr.call_with_return(102, (index,))
    return pyobject
  def __iter__(self):
    self._index = 0
    return self
  def __next__(self):
    if self._index >= self.size():
      raise StopIteration()
    val = self[self._index]
    self._index += 1
    return val

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTexture2DArrayParameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTexture2DArrayParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTexture2DArrayParameter.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTexture2DArrayParameterWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def from_list(values):
    result = VisualShaderNodeTexture2DArrayParameter.new0()
    for value in values:
      result.push_back(value)
    return result

  def to_list(self):
    return [value for value in self]



register_cast_function('VisualShaderNodeTexture2DArrayParameter', VisualShaderNodeTexture2DArrayParameter.cast)
register_class('VisualShaderNodeTexture2DArrayParameter', VisualShaderNodeTexture2DArrayParameter)
