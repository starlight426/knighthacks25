# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Tween as py4godot_tween 
import py4godot.classes.AnimationMixer as py4godot_animationmixer 
from py4godot.wrappers.wrappers import CPPAnimationPlayerWrapper

class AnimationProcessCallback:
  ANIMATION_PROCESS_PHYSICS = 0
  ANIMATION_PROCESS_IDLE = 1
  ANIMATION_PROCESS_MANUAL = 2
class AnimationMethodCallMode:
  ANIMATION_METHOD_CALL_DEFERRED = 0
  ANIMATION_METHOD_CALL_IMMEDIATE = 1


class AnimationPlayer(py4godot_animationmixer.AnimationMixer):
  r'''
		An animation player is used for general-purpose playback of animations. It contains a dictionary of `AnimationLibrary` resources and custom blend times between animation transitions.
		Some methods and properties use a single key to reference an animation directly. These keys are formatted as the key for the library, followed by a forward slash, then the key for the animation within the library, for example `"movement/run"`. If the library's key is an empty string (known as the default library), the forward slash is omitted, being the same key used by the library.
		`AnimationPlayer` is better-suited than `Tween` for more complex animations, for example ones with non-trivial timings. It can also be used over `Tween` if the animation track editor is more convenient than doing it in code.
		Updating the target properties of animations occurs at the process frame.
	'''

  @staticmethod
  def constructor():
    class_ = AnimationPlayer.construct_without_init()
    class_._ptr = constructor(95,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AnimationPlayer.construct_without_init()
    class_._ptr = constructor(95,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAnimationPlayerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(95,0, ())


  def generate_wrapper(self):
    return CPPAnimationPlayerWrapper()
  def init_signals(self):
    super().init_signals()
    current_animation_changed_name = utils.py_string_to_string_name("current_animation_changed")
    self.current_animation_changed = signals.BuiltinSignal(self, current_animation_changed_name)
    animation_changed_name = utils.py_string_to_string_name("animation_changed")
    self.animation_changed = signals.BuiltinSignal(self, animation_changed_name)

  @staticmethod
  def construct_without_init():
    cls = AnimationPlayer.__new__(AnimationPlayer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AnimationPlayer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationPlayer.construct_without_init()
    cls._ptr = CPPAnimationPlayerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AnimationPlayer.construct_without_init()
    cls._ptr = CPPAnimationPlayerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def current_animation(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_current_animation()
    return _ret
  @current_animation.setter
  def current_animation(self,  value:'object'):
    self.set_current_animation(value)
  @property
  def assigned_animation(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_assigned_animation()
    return _ret
  @assigned_animation.setter
  def assigned_animation(self,  value:'object'):
    self.set_assigned_animation(value)
  @property
  def autoplay(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_autoplay()
    return _ret
  @autoplay.setter
  def autoplay(self,  value:'object'):
    self.set_autoplay(value)
  @property
  def current_animation_length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_current_animation_length()
    return _ret
  @property
  def current_animation_position(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_current_animation_position()
    return _ret
  @property
  def playback_auto_capture(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_auto_capture()
    return _ret
  @playback_auto_capture.setter
  def playback_auto_capture(self,  value:'bool'):
    self.set_auto_capture(value)
  @property
  def playback_auto_capture_duration(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_auto_capture_duration()
    return _ret
  @playback_auto_capture_duration.setter
  def playback_auto_capture_duration(self,  value:'float'):
    self.set_auto_capture_duration(value)
  @property
  def playback_auto_capture_transition_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_auto_capture_transition_type()
    return _ret
  @playback_auto_capture_transition_type.setter
  def playback_auto_capture_transition_type(self,  value:'int'):
    self.set_auto_capture_transition_type(value)
  @property
  def playback_auto_capture_ease_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_auto_capture_ease_type()
    return _ret
  @playback_auto_capture_ease_type.setter
  def playback_auto_capture_ease_type(self,  value:'int'):
    self.set_auto_capture_ease_type(value)
  @property
  def playback_default_blend_time(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_default_blend_time()
    return _ret
  @playback_default_blend_time.setter
  def playback_default_blend_time(self,  value:'float'):
    self.set_default_blend_time(value)
  @property
  def speed_scale(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_speed_scale()
    return _ret
  @speed_scale.setter
  def speed_scale(self,  value:'float'):
    self.set_speed_scale(value)
  @property
  def movie_quit_on_finish(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_movie_quit_on_finish_enabled()
    return _ret
  @movie_quit_on_finish.setter
  def movie_quit_on_finish(self,  value:'bool'):
    self.set_movie_quit_on_finish_enabled(value)
  @functools.native_method
  def animation_set_next(self, animation_from:'object'   , animation_to:'object'   ) -> None:
    r'''
				Triggers the `animation_to` animation when the `animation_from` animation completes.
			'''

    assert(not animation_from is None)
    assert isinstance(animation_from, (str, StringName)), 'animation_from must be str or StringName'
    assert(not animation_to is None)
    assert isinstance(animation_to, (str, StringName)), 'animation_to must be str or StringName'




    assert(isinstance(animation_from, (str, StringName)))
    py_stringname_animation_from = animation_from if isinstance(animation_from, StringName) else c_utils.py_string_to_string_name(animation_from)
    assert(isinstance(animation_to, (str, StringName)))
    py_stringname_animation_to = animation_to if isinstance(animation_to, StringName) else c_utils.py_string_to_string_name(animation_to)

    self._ptr.call_with_return(221,tuple([py_stringname_animation_from._ptr, py_stringname_animation_to._ptr]))

  @functools.native_method
  def animation_get_next(self, animation_from:'object'   ) -> typing.Union['StringName']:
    r'''
				Returns the key of the animation which is queued to play after the `animation_from` animation.
			'''

    assert(not animation_from is None)
    assert isinstance(animation_from, (str, StringName)), 'animation_from must be str or StringName'




    assert(isinstance(animation_from, (str, StringName)))
    py_stringname_animation_from = animation_from if isinstance(animation_from, StringName) else c_utils.py_string_to_string_name(animation_from)

    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(222,tuple([py_stringname_animation_from._ptr]))
    return _ret


  @functools.native_method
  def set_blend_time(self, animation_from:'object'   , animation_to:'object'   , sec:'float'   ) -> None:
    r'''
				Specifies a blend time (in seconds) between two animations, referenced by their keys.
			'''

    assert(not animation_from is None)
    assert isinstance(animation_from, (str, StringName)), 'animation_from must be str or StringName'
    assert(not animation_to is None)
    assert isinstance(animation_to, (str, StringName)), 'animation_to must be str or StringName'
    assert isinstance(sec, (int, float)), 'sec must be int or float'




    assert(isinstance(animation_from, (str, StringName)))
    py_stringname_animation_from = animation_from if isinstance(animation_from, StringName) else c_utils.py_string_to_string_name(animation_from)
    assert(isinstance(animation_to, (str, StringName)))
    py_stringname_animation_to = animation_to if isinstance(animation_to, StringName) else c_utils.py_string_to_string_name(animation_to)


    self._ptr.call_with_return(223,tuple([py_stringname_animation_from._ptr, py_stringname_animation_to._ptr, sec]))

  @functools.native_method
  def get_blend_time(self, animation_from:'object'   , animation_to:'object'   ) -> typing.Union[float]:
    r'''
				Returns the blend time (in seconds) between two animations, referenced by their keys.
			'''

    assert(not animation_from is None)
    assert isinstance(animation_from, (str, StringName)), 'animation_from must be str or StringName'
    assert(not animation_to is None)
    assert isinstance(animation_to, (str, StringName)), 'animation_to must be str or StringName'




    assert(isinstance(animation_from, (str, StringName)))
    py_stringname_animation_from = animation_from if isinstance(animation_from, StringName) else c_utils.py_string_to_string_name(animation_from)
    assert(isinstance(animation_to, (str, StringName)))
    py_stringname_animation_to = animation_to if isinstance(animation_to, StringName) else c_utils.py_string_to_string_name(animation_to)

    _ret = 0
    _ret = self._ptr.call_with_return(224,tuple([py_stringname_animation_from._ptr, py_stringname_animation_to._ptr]))
    return _ret


  @functools.native_method
  def set_default_blend_time(self, sec:'float'   ) -> None:
    r''''''

    assert isinstance(sec, (int, float)), 'sec must be int or float'

    self.py__playback_default_blend_time = sec






    self._ptr.call_with_return(225,tuple([sec]))

  @functools.native_method
  def get_default_blend_time(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(226,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_capture(self, auto_capture:'bool'   ) -> None:
    r''''''

    assert isinstance(auto_capture, bool), 'auto_capture must be bool'

    self.py__playback_auto_capture = auto_capture






    self._ptr.call_with_return(227,tuple([auto_capture]))

  @functools.native_method
  def is_auto_capture(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(228,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_capture_duration(self, auto_capture_duration:'float'   ) -> None:
    r''''''

    assert isinstance(auto_capture_duration, (int, float)), 'auto_capture_duration must be int or float'

    self.py__playback_auto_capture_duration = auto_capture_duration






    self._ptr.call_with_return(229,tuple([auto_capture_duration]))

  @functools.native_method
  def get_auto_capture_duration(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(230,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_capture_transition_type(self, auto_capture_transition_type:'int'  ) -> None:
    r''''''

    assert isinstance(auto_capture_transition_type, (int, float)), 'auto_capture_transition_type must be int or float'

    self.py__playback_auto_capture_transition_type = auto_capture_transition_type






    self._ptr.call_with_return(231,tuple([auto_capture_transition_type]))

  @functools.native_method
  def get_auto_capture_transition_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(232,tuple([]))

    return _ret


  @functools.native_method
  def set_auto_capture_ease_type(self, auto_capture_ease_type:'int'  ) -> None:
    r''''''

    assert isinstance(auto_capture_ease_type, (int, float)), 'auto_capture_ease_type must be int or float'

    self.py__playback_auto_capture_ease_type = auto_capture_ease_type






    self._ptr.call_with_return(233,tuple([auto_capture_ease_type]))

  @functools.native_method
  def get_auto_capture_ease_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(234,tuple([]))

    return _ret


  @functools.native_method
  def play(self, name:'object' = None  , custom_blend:'float' =-1  , custom_speed:'float' =1.0  , from_end:'bool' =False  ) -> None:
    r'''
				Plays the animation with key `name`. Custom blend times and speed can be set.
				The `from_end` option only affects when switching to a new animation track, or if the same track but at the start or end. It does not affect resuming playback that was paused in the middle of an animation. If `custom_speed` is negative and `from_end` is `true`, the animation will play backwards (which is equivalent to calling `play_backwards`).
				The `AnimationPlayer` keeps track of its current or last played animation with `assigned_animation`. If this method is called with that same animation `name`, or with no `name` parameter, the assigned animation will resume playing if it was paused.
				**Note:** The animation will be updated the next time the `AnimationPlayer` is processed. If other variables are updated at the same time this is called, they may be updated too early. To perform the update immediately, call `advance(0)`.
			'''
    if name is None:
      name = StringName.new0()
    if name is None:
      name = StringName.new0()

    assert isinstance(custom_blend, (int, float)), 'custom_blend must be int or float'
    assert isinstance(custom_speed, (int, float)), 'custom_speed must be int or float'
    assert isinstance(from_end, bool), 'from_end must be bool'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)




    self._ptr.call_with_return(235,tuple([py_stringname_name._ptr, custom_blend, custom_speed, from_end]))

  @functools.native_method
  def play_section_with_markers(self, name:'object' = None  , start_marker:'object' = None  , end_marker:'object' = None  , custom_blend:'float' =-1  , custom_speed:'float' =1.0  , from_end:'bool' =False  ) -> None:
    r'''
				Plays the animation with key `name` and the section starting from `start_marker` and ending on `end_marker`.
				If the start marker is empty, the section starts from the beginning of the animation. If the end marker is empty, the section ends on the end of the animation. See also `play`.
			'''
    if name is None:
      name = StringName.new0()
    if start_marker is None:
      start_marker = StringName.new0()
    if end_marker is None:
      end_marker = StringName.new0()
    if name is None:
      name = StringName.new0()
    if start_marker is None:
      start_marker = StringName.new0()
    if end_marker is None:
      end_marker = StringName.new0()

    assert isinstance(custom_blend, (int, float)), 'custom_blend must be int or float'
    assert isinstance(custom_speed, (int, float)), 'custom_speed must be int or float'
    assert isinstance(from_end, bool), 'from_end must be bool'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)
    assert(isinstance(start_marker, (str, StringName)))
    py_stringname_start_marker = start_marker if isinstance(start_marker, StringName) else c_utils.py_string_to_string_name(start_marker)
    assert(isinstance(end_marker, (str, StringName)))
    py_stringname_end_marker = end_marker if isinstance(end_marker, StringName) else c_utils.py_string_to_string_name(end_marker)




    self._ptr.call_with_return(236,tuple([py_stringname_name._ptr, py_stringname_start_marker._ptr, py_stringname_end_marker._ptr, custom_blend, custom_speed, from_end]))

  @functools.native_method
  def play_section(self, name:'object' = None  , start_time:'float' =-1  , end_time:'float' =-1  , custom_blend:'float' =-1  , custom_speed:'float' =1.0  , from_end:'bool' =False  ) -> None:
    r'''
				Plays the animation with key `name` and the section starting from `start_time` and ending on `end_time`. See also `play`.
				Setting `start_time` to a value outside the range of the animation means the start of the animation will be used instead, and setting `end_time` to a value outside the range of the animation means the end of the animation will be used instead. `start_time` cannot be equal to `end_time`.
			'''
    if name is None:
      name = StringName.new0()
    if name is None:
      name = StringName.new0()

    assert isinstance(start_time, (int, float)), 'start_time must be int or float'
    assert isinstance(end_time, (int, float)), 'end_time must be int or float'
    assert isinstance(custom_blend, (int, float)), 'custom_blend must be int or float'
    assert isinstance(custom_speed, (int, float)), 'custom_speed must be int or float'
    assert isinstance(from_end, bool), 'from_end must be bool'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)






    self._ptr.call_with_return(237,tuple([py_stringname_name._ptr, start_time, end_time, custom_blend, custom_speed, from_end]))

  @functools.native_method
  def play_backwards(self, name:'object' = None  , custom_blend:'float' =-1  ) -> None:
    r'''
				Plays the animation with key `name` in reverse.
				This method is a shorthand for `play` with `custom_speed = -1.0` and `from_end = true`, so see its description for more information.
			'''
    if name is None:
      name = StringName.new0()
    if name is None:
      name = StringName.new0()

    assert isinstance(custom_blend, (int, float)), 'custom_blend must be int or float'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)


    self._ptr.call_with_return(238,tuple([py_stringname_name._ptr, custom_blend]))

  @functools.native_method
  def play_section_with_markers_backwards(self, name:'object' = None  , start_marker:'object' = None  , end_marker:'object' = None  , custom_blend:'float' =-1  ) -> None:
    r'''
				Plays the animation with key `name` and the section starting from `start_marker` and ending on `end_marker` in reverse.
				This method is a shorthand for `play_section_with_markers` with `custom_speed = -1.0` and `from_end = true`, see its description for more information.
			'''
    if name is None:
      name = StringName.new0()
    if start_marker is None:
      start_marker = StringName.new0()
    if end_marker is None:
      end_marker = StringName.new0()
    if name is None:
      name = StringName.new0()
    if start_marker is None:
      start_marker = StringName.new0()
    if end_marker is None:
      end_marker = StringName.new0()

    assert isinstance(custom_blend, (int, float)), 'custom_blend must be int or float'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)
    assert(isinstance(start_marker, (str, StringName)))
    py_stringname_start_marker = start_marker if isinstance(start_marker, StringName) else c_utils.py_string_to_string_name(start_marker)
    assert(isinstance(end_marker, (str, StringName)))
    py_stringname_end_marker = end_marker if isinstance(end_marker, StringName) else c_utils.py_string_to_string_name(end_marker)


    self._ptr.call_with_return(239,tuple([py_stringname_name._ptr, py_stringname_start_marker._ptr, py_stringname_end_marker._ptr, custom_blend]))

  @functools.native_method
  def play_section_backwards(self, name:'object' = None  , start_time:'float' =-1  , end_time:'float' =-1  , custom_blend:'float' =-1  ) -> None:
    r'''
				Plays the animation with key `name` and the section starting from `start_time` and ending on `end_time` in reverse.
				This method is a shorthand for `play_section` with `custom_speed = -1.0` and `from_end = true`, see its description for more information.
			'''
    if name is None:
      name = StringName.new0()
    if name is None:
      name = StringName.new0()

    assert isinstance(start_time, (int, float)), 'start_time must be int or float'
    assert isinstance(end_time, (int, float)), 'end_time must be int or float'
    assert isinstance(custom_blend, (int, float)), 'custom_blend must be int or float'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)




    self._ptr.call_with_return(240,tuple([py_stringname_name._ptr, start_time, end_time, custom_blend]))

  @functools.native_method
  def play_with_capture(self, name:'object' = None  , duration:'float' =-1.0  , custom_blend:'float' =-1  , custom_speed:'float' =1.0  , from_end:'bool' =False  , trans_type:'int'  =0, ease_type:'int'  =0) -> None:
    r'''
				See also `AnimationMixer.capture`.
				You can use this method to use more detailed options for capture than those performed by `playback_auto_capture`. When `playback_auto_capture` is `false`, this method is almost the same as the following:
				```gdscript
				capture(name, duration, trans_type, ease_type)
				play(name, custom_blend, custom_speed, from_end)
				```
				If `name` is blank, it specifies `assigned_animation`.
				If `duration` is a negative value, the duration is set to the interval between the current position and the first key, when `from_end` is `true`, uses the interval between the current position and the last key instead.
				**Note:** The `duration` takes `speed_scale` into account, but `custom_speed` does not, because the capture cache is interpolated with the blend result and the result may contain multiple animations.
			'''
    if name is None:
      name = StringName.new0()


    if name is None:
      name = StringName.new0()



    assert isinstance(duration, (int, float)), 'duration must be int or float'
    assert isinstance(custom_blend, (int, float)), 'custom_blend must be int or float'
    assert isinstance(custom_speed, (int, float)), 'custom_speed must be int or float'
    assert isinstance(from_end, bool), 'from_end must be bool'
    assert isinstance(trans_type, (int, float)), 'trans_type must be int or float'
    assert isinstance(ease_type, (int, float)), 'ease_type must be int or float'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)







    self._ptr.call_with_return(241,tuple([py_stringname_name._ptr, duration, custom_blend, custom_speed, from_end, trans_type, ease_type]))

  @functools.native_method
  def pause(self) -> None:
    r'''
				Pauses the currently playing animation. The `current_animation_position` will be kept and calling `play` or `play_backwards` without arguments or with the same animation name as `assigned_animation` will resume the animation.
				See also `stop`.
			'''




    self._ptr.call_with_return(242,tuple([]))

  @functools.native_method
  def stop(self, keep_state:'bool' =False  ) -> None:
    r'''
				Stops the currently playing animation. The animation position is reset to `0` and the `custom_speed` is reset to `1.0`. See also `pause`.
				If `keep_state` is `true`, the animation state is not updated visually.
				**Note:** The method / audio / animation playback tracks will not be processed by this method.
			'''

    assert isinstance(keep_state, bool), 'keep_state must be bool'






    self._ptr.call_with_return(243,tuple([keep_state]))

  @functools.native_method
  def is_playing(self) -> typing.Union[bool]:
    r'''
				Returns `true` if an animation is currently playing (even if `speed_scale` and/or `custom_speed` are `0`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(244,tuple([]))
    return _ret


  @functools.native_method
  def set_current_animation(self, animation:'str'   ) -> None:
    r''''''

    assert(not animation is None)
    assert isinstance(animation, (str, String)), 'animation must be str or String'

    self.py__current_animation = animation



    assert(isinstance(animation, (str, String)))
    py_string_animation = animation if isinstance(animation, StringName) else c_utils.py_string_to_string(animation)

    py__string_animation = utils.py_string_to_string(animation)
    py__string_animation.shouldBeDeleted = False


    self._ptr.call_with_return(245,tuple([py__string_animation._ptr]))

  @functools.native_method
  def get_current_animation(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(246,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_assigned_animation(self, animation:'str'   ) -> None:
    r''''''

    assert(not animation is None)
    assert isinstance(animation, (str, String)), 'animation must be str or String'

    self.py__assigned_animation = animation



    assert(isinstance(animation, (str, String)))
    py_string_animation = animation if isinstance(animation, StringName) else c_utils.py_string_to_string(animation)

    py__string_animation = utils.py_string_to_string(animation)
    py__string_animation.shouldBeDeleted = False


    self._ptr.call_with_return(247,tuple([py__string_animation._ptr]))

  @functools.native_method
  def get_assigned_animation(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(248,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def queue(self, name:'object'   ) -> None:
    r'''
				Queues an animation for playback once the current animation and all previously queued animations are done.
				**Note:** If a looped animation is currently playing, the queued animation will never play unless the looped animation is stopped somehow.
			'''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'




    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    self._ptr.call_with_return(249,tuple([py_stringname_name._ptr]))

  @functools.native_method
  def get_queue(self) -> typing.Union['PackedStringArray']:
    r'''
				Returns a list of the animation keys that are currently queued to play.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(250,tuple([]))
    return _ret


  @functools.native_method
  def clear_queue(self) -> None:
    r'''
				Clears all queued, unplayed animations.
			'''




    self._ptr.call_with_return(251,tuple([]))

  @functools.native_method
  def set_speed_scale(self, speed:'float'   ) -> None:
    r''''''

    assert isinstance(speed, (int, float)), 'speed must be int or float'

    self.py__speed_scale = speed






    self._ptr.call_with_return(252,tuple([speed]))

  @functools.native_method
  def get_speed_scale(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(253,tuple([]))

    return _ret


  @functools.native_method
  def get_playing_speed(self) -> typing.Union[float]:
    r'''
				Returns the actual playing speed of current animation or `0` if not playing. This speed is the `speed_scale` property multiplied by `custom_speed` argument specified when calling the `play` method.
				Returns a negative value if the current animation is playing backwards.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(254,tuple([]))
    return _ret


  @functools.native_method
  def set_autoplay(self, name:'str'   ) -> None:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'

    self.py__autoplay = name



    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    py__string_name = utils.py_string_to_string(name)
    py__string_name.shouldBeDeleted = False


    self._ptr.call_with_return(255,tuple([py__string_name._ptr]))

  @functools.native_method
  def get_autoplay(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(256,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_movie_quit_on_finish_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__movie_quit_on_finish = enabled






    self._ptr.call_with_return(257,tuple([enabled]))

  @functools.native_method
  def is_movie_quit_on_finish_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(258,tuple([]))

    return _ret


  @functools.native_method
  def get_current_animation_position(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(259,tuple([]))

    return _ret


  @functools.native_method
  def get_current_animation_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(260,tuple([]))

    return _ret


  @functools.native_method
  def set_section_with_markers(self, start_marker:'object' = None  , end_marker:'object' = None  ) -> None:
    r'''
				Changes the start and end markers of the section being played. The current playback position will be clamped within the new section. See also `play_section_with_markers`.
				If the argument is empty, the section uses the beginning or end of the animation. If both are empty, it means that the section is not set.
			'''
    if start_marker is None:
      start_marker = StringName.new0()
    if end_marker is None:
      end_marker = StringName.new0()
    if start_marker is None:
      start_marker = StringName.new0()
    if end_marker is None:
      end_marker = StringName.new0()





    assert(isinstance(start_marker, (str, StringName)))
    py_stringname_start_marker = start_marker if isinstance(start_marker, StringName) else c_utils.py_string_to_string_name(start_marker)
    assert(isinstance(end_marker, (str, StringName)))
    py_stringname_end_marker = end_marker if isinstance(end_marker, StringName) else c_utils.py_string_to_string_name(end_marker)

    self._ptr.call_with_return(261,tuple([py_stringname_start_marker._ptr, py_stringname_end_marker._ptr]))

  @functools.native_method
  def set_section(self, start_time:'float' =-1  , end_time:'float' =-1  ) -> None:
    r'''
				Changes the start and end times of the section being played. The current playback position will be clamped within the new section. See also `play_section`.
			'''

    assert isinstance(start_time, (int, float)), 'start_time must be int or float'
    assert isinstance(end_time, (int, float)), 'end_time must be int or float'







    self._ptr.call_with_return(262,tuple([start_time, end_time]))

  @functools.native_method
  def reset_section(self) -> None:
    r'''
				Resets the current section. Does nothing if a section has not been set.
			'''




    self._ptr.call_with_return(263,tuple([]))

  @functools.native_method
  def get_section_start_time(self) -> typing.Union[float]:
    r'''
				Returns the start time of the section currently being played.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(264,tuple([]))
    return _ret


  @functools.native_method
  def get_section_end_time(self) -> typing.Union[float]:
    r'''
				Returns the end time of the section currently being played.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(265,tuple([]))
    return _ret


  @functools.native_method
  def has_section(self) -> typing.Union[bool]:
    r'''
				Returns `true` if an animation is currently playing with a section.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(266,tuple([]))
    return _ret


  @functools.native_method
  def seek(self, seconds:'float'   , update:'bool' =False  , update_only:'bool' =False  ) -> None:
    r'''
				Seeks the animation to the `seconds` point in time (in seconds). If `update` is `true`, the animation updates too, otherwise it updates at process time. Events between the current frame and `seconds` are skipped.
				If `update_only` is `true`, the method / audio / animation playback tracks will not be processed.
				**Note:** Seeking to the end of the animation doesn't emit `signal AnimationMixer.animation_finished`. If you want to skip animation and emit the signal, use `AnimationMixer.advance`.
			'''

    assert isinstance(seconds, (int, float)), 'seconds must be int or float'
    assert isinstance(update, bool), 'update must be bool'
    assert isinstance(update_only, bool), 'update_only must be bool'








    self._ptr.call_with_return(267,tuple([seconds, update, update_only]))

  @functools.native_method
  def set_process_callback(self, mode:'int'  ) -> None:
    r'''
				Sets the process notification in which to update animations.
			'''

    assert isinstance(mode, (int, float)), 'mode must be int or float'






    self._ptr.call_with_return(268,tuple([mode]))

  @functools.native_method
  def get_process_callback(self) -> typing.Union[int]:
    r'''
				Returns the process notification in which to update animations.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(269,tuple([]))
    return _ret


  @functools.native_method
  def set_method_call_mode(self, mode:'int'  ) -> None:
    r'''
				Sets the call mode used for "Call Method" tracks.
			'''

    assert isinstance(mode, (int, float)), 'mode must be int or float'






    self._ptr.call_with_return(270,tuple([mode]))

  @functools.native_method
  def get_method_call_mode(self) -> typing.Union[int]:
    r'''
				Returns the call mode used for "Call Method" tracks.
			'''




    _ret:int
    _ret = self._ptr.call_with_return(271,tuple([]))
    return _ret


  @functools.native_method
  def set_root(self, path:'object'   ) -> None:
    r'''
				Sets the node which node path references will travel from.
			'''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    self._ptr.call_with_return(272,tuple([py_nodepath_path._ptr]))

  @functools.native_method
  def get_root(self) -> typing.Union['NodePath']:
    r'''
				Returns the node which node path references will travel from.
			'''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(273,tuple([]))
    return _ret



register_cast_function('AnimationPlayer', AnimationPlayer.cast)
register_class('AnimationPlayer', AnimationPlayer)
