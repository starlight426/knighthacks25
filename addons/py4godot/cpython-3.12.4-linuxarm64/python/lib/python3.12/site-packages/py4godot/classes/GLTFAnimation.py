# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFAnimationWrapper


class GLTFAnimation(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFAnimation.construct_without_init()
    class_._ptr = constructor(346,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFAnimation.construct_without_init()
    class_._ptr = constructor(346,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFAnimationWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(346,0, ())


  def generate_wrapper(self):
    return CPPGLTFAnimationWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFAnimation.__new__(GLTFAnimation)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFAnimation'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFAnimation.construct_without_init()
    cls._ptr = CPPGLTFAnimationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFAnimation.construct_without_init()
    cls._ptr = CPPGLTFAnimationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def original_name(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_original_name()
    return _ret
  @original_name.setter
  def original_name(self,  value:'str'):
    self.set_original_name(value)
  @property
  def loop(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_loop()
    return _ret
  @loop.setter
  def loop(self,  value:'bool'):
    self.set_loop(value)
  @functools.native_method
  def get_original_name(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_original_name(self, original_name:'str'   ) -> None:
    r''''''

    assert(not original_name is None)
    assert isinstance(original_name, (str, String)), 'original_name must be str or String'

    self.py__original_name = original_name



    assert(isinstance(original_name, (str, String)))
    py_string_original_name = original_name if isinstance(original_name, StringName) else c_utils.py_string_to_string(original_name)

    py__string_original_name = utils.py_string_to_string(original_name)
    py__string_original_name.shouldBeDeleted = False


    self._ptr.call_with_return(78,tuple([py__string_original_name._ptr]))

  @functools.native_method
  def get_loop(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_loop(self, loop:'bool'   ) -> None:
    r''''''

    assert isinstance(loop, bool), 'loop must be bool'

    self.py__loop = loop






    self._ptr.call_with_return(80,tuple([loop]))

  @functools.native_method
  def get_additional_data(self, extension_name:'object'   ) -> typing.Union[typing.Any]:
    r''''''

    assert(not extension_name is None)
    assert isinstance(extension_name, (str, StringName)), 'extension_name must be str or StringName'




    assert(isinstance(extension_name, (str, StringName)))
    py_stringname_extension_name = extension_name if isinstance(extension_name, StringName) else c_utils.py_string_to_string_name(extension_name)

    _ret = None
    _ret = self._ptr.call_with_return(81,tuple([py_stringname_extension_name._ptr]))
    return _ret


  @functools.native_method
  def set_additional_data(self, extension_name:'object'   , additional_data:'object'   ) -> None:
    r''''''

    assert(not extension_name is None)
    assert isinstance(extension_name, (str, StringName)), 'extension_name must be str or StringName'
    




    assert(isinstance(extension_name, (str, StringName)))
    py_stringname_extension_name = extension_name if isinstance(extension_name, StringName) else c_utils.py_string_to_string_name(extension_name)


    self._ptr.call_with_return(82,tuple([py_stringname_extension_name._ptr, additional_data]))


register_cast_function('GLTFAnimation', GLTFAnimation.cast)
register_class('GLTFAnimation', GLTFAnimation)
