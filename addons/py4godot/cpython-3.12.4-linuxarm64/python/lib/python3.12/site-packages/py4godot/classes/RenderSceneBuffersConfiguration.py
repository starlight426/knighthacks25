# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingServer as py4godot_renderingserver 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRenderSceneBuffersConfigurationWrapper


class RenderSceneBuffersConfiguration(py4godot_refcounted.RefCounted):
  r'''
		This configuration object is created and populated by the render engine on a viewport change and used to (re)configure a `RenderSceneBuffers` object.
	'''

  @staticmethod
  def constructor():
    class_ = RenderSceneBuffersConfiguration.construct_without_init()
    class_._ptr = constructor(677,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RenderSceneBuffersConfiguration.construct_without_init()
    class_._ptr = constructor(677,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRenderSceneBuffersConfigurationWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(677,0, ())


  def generate_wrapper(self):
    return CPPRenderSceneBuffersConfigurationWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RenderSceneBuffersConfiguration.__new__(RenderSceneBuffersConfiguration)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RenderSceneBuffersConfiguration'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderSceneBuffersConfiguration.construct_without_init()
    cls._ptr = CPPRenderSceneBuffersConfigurationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderSceneBuffersConfiguration.construct_without_init()
    cls._ptr = CPPRenderSceneBuffersConfigurationWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def render_target(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_render_target()
    return _ret
  @render_target.setter
  def render_target(self,  value:'RID'):
    self.set_render_target(value)
  @property
  def internal_size(self) -> typing.Union['Vector2i']:
    r''''''
    _ret = self. get_internal_size()
    return _ret
  @internal_size.setter
  def internal_size(self,  value:'Vector2i'):
    self.set_internal_size(value)
  @property
  def target_size(self) -> typing.Union['Vector2i']:
    r''''''
    _ret = self. get_target_size()
    return _ret
  @target_size.setter
  def target_size(self,  value:'Vector2i'):
    self.set_target_size(value)
  @property
  def view_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_view_count()
    return _ret
  @view_count.setter
  def view_count(self,  value:'int'):
    self.set_view_count(value)
  @property
  def scaling_3d_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_scaling_3d_mode()
    return _ret
  @scaling_3d_mode.setter
  def scaling_3d_mode(self,  value:'int'):
    self.set_scaling_3d_mode(value)
  @property
  def msaa_3d(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_msaa_3d()
    return _ret
  @msaa_3d.setter
  def msaa_3d(self,  value:'int'):
    self.set_msaa_3d(value)
  @property
  def screen_space_aa(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_screen_space_aa()
    return _ret
  @screen_space_aa.setter
  def screen_space_aa(self,  value:'int'):
    self.set_screen_space_aa(value)
  @property
  def fsr_sharpness(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_fsr_sharpness()
    return _ret
  @fsr_sharpness.setter
  def fsr_sharpness(self,  value:'bool'):
    self.set_fsr_sharpness(value)
  @property
  def texture_mipmap_bias(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_texture_mipmap_bias()
    return _ret
  @texture_mipmap_bias.setter
  def texture_mipmap_bias(self,  value:'bool'):
    self.set_texture_mipmap_bias(value)
  @property
  def anisotropic_filtering_level(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_anisotropic_filtering_level()
    return _ret
  @anisotropic_filtering_level.setter
  def anisotropic_filtering_level(self,  value:'int'):
    self.set_anisotropic_filtering_level(value)
  @functools.native_method
  def get_render_target(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))

    return _ret


  @functools.native_method
  def set_render_target(self, render_target:'RID'   ) -> None:
    r''''''

    assert(not render_target is None)
    assert isinstance(render_target, RID), 'render_target must be RID'

    self.py__render_target = render_target






    self._ptr.call_with_return(54,tuple([render_target._ptr]))

  @functools.native_method
  def get_internal_size(self) -> typing.Union['Vector2i']:
    r''''''




    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))

    return _ret


  @functools.native_method
  def set_internal_size(self, internal_size:'Vector2i'   ) -> None:
    r''''''

    assert(not internal_size is None)
    assert isinstance(internal_size, Vector2i), 'internal_size must be Vector2i'

    self.py__internal_size = internal_size






    self._ptr.call_with_return(56,tuple([internal_size._ptr]))

  @functools.native_method
  def get_target_size(self) -> typing.Union['Vector2i']:
    r''''''




    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(57,tuple([]))

    return _ret


  @functools.native_method
  def set_target_size(self, target_size:'Vector2i'   ) -> None:
    r''''''

    assert(not target_size is None)
    assert isinstance(target_size, Vector2i), 'target_size must be Vector2i'

    self.py__target_size = target_size






    self._ptr.call_with_return(58,tuple([target_size._ptr]))

  @functools.native_method
  def get_view_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([]))

    return _ret


  @functools.native_method
  def set_view_count(self, view_count:'int'   ) -> None:
    r''''''

    assert isinstance(view_count, (int, float)), 'view_count must be int or float'

    self.py__view_count = view_count






    self._ptr.call_with_return(60,tuple([view_count]))

  @functools.native_method
  def get_scaling_3d_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([]))

    return _ret


  @functools.native_method
  def set_scaling_3d_mode(self, scaling_3d_mode:'int'  ) -> None:
    r''''''

    assert isinstance(scaling_3d_mode, (int, float)), 'scaling_3d_mode must be int or float'

    self.py__scaling_3d_mode = scaling_3d_mode






    self._ptr.call_with_return(62,tuple([scaling_3d_mode]))

  @functools.native_method
  def get_msaa_3d(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(63,tuple([]))

    return _ret


  @functools.native_method
  def set_msaa_3d(self, msaa_3d:'int'  ) -> None:
    r''''''

    assert isinstance(msaa_3d, (int, float)), 'msaa_3d must be int or float'

    self.py__msaa_3d = msaa_3d






    self._ptr.call_with_return(64,tuple([msaa_3d]))

  @functools.native_method
  def get_screen_space_aa(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(65,tuple([]))

    return _ret


  @functools.native_method
  def set_screen_space_aa(self, screen_space_aa:'int'  ) -> None:
    r''''''

    assert isinstance(screen_space_aa, (int, float)), 'screen_space_aa must be int or float'

    self.py__screen_space_aa = screen_space_aa






    self._ptr.call_with_return(66,tuple([screen_space_aa]))

  @functools.native_method
  def get_fsr_sharpness(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(67,tuple([]))

    return _ret


  @functools.native_method
  def set_fsr_sharpness(self, fsr_sharpness:'float'   ) -> None:
    r''''''

    assert isinstance(fsr_sharpness, (int, float)), 'fsr_sharpness must be int or float'

    self.py__fsr_sharpness = fsr_sharpness






    self._ptr.call_with_return(68,tuple([fsr_sharpness]))

  @functools.native_method
  def get_texture_mipmap_bias(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(69,tuple([]))

    return _ret


  @functools.native_method
  def set_texture_mipmap_bias(self, texture_mipmap_bias:'float'   ) -> None:
    r''''''

    assert isinstance(texture_mipmap_bias, (int, float)), 'texture_mipmap_bias must be int or float'

    self.py__texture_mipmap_bias = texture_mipmap_bias






    self._ptr.call_with_return(70,tuple([texture_mipmap_bias]))

  @functools.native_method
  def get_anisotropic_filtering_level(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(71,tuple([]))

    return _ret


  @functools.native_method
  def set_anisotropic_filtering_level(self, anisotropic_filtering_level:'int'  ) -> None:
    r''''''

    assert isinstance(anisotropic_filtering_level, (int, float)), 'anisotropic_filtering_level must be int or float'

    self.py__anisotropic_filtering_level = anisotropic_filtering_level






    self._ptr.call_with_return(72,tuple([anisotropic_filtering_level]))


register_cast_function('RenderSceneBuffersConfiguration', RenderSceneBuffersConfiguration.cast)
register_class('RenderSceneBuffersConfiguration', RenderSceneBuffersConfiguration)
