# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPMarshallsWrapper

_Marshalls_singleton_instance = None

class Marshalls(py4godot_object.Object):
  r'''
		Provides data transformation and encoding utility functions.
	'''


  def generate_wrapper(self):
    return CPPMarshallsWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Marshalls.__new__(Marshalls)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Marshalls'

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Marshalls.construct_without_init()
    cls._ptr = CPPMarshallsWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Marshalls.construct_without_init()
    cls._ptr = CPPMarshallsWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def instance():
    global _Marshalls_singleton_instance
    if _Marshalls_singleton_instance is None:
      singleton = Marshalls()
      singleton._ptr = constructor(466,0, ())
      _Marshalls_singleton_instance = singleton
    return _Marshalls_singleton_instance

  @functools.native_method
  def variant_to_base64(self, variant:'object'   , full_objects:'bool' =False  ) -> typing.Union[str]:
    r'''
				Returns a Base64-encoded string of the `Variant` `variant`. If `full_objects` is `true`, encoding objects is allowed (and can potentially include code).
				Internally, this uses the same encoding mechanism as the `@GlobalScope.var_to_bytes` method.
			'''

    
    assert isinstance(full_objects, bool), 'full_objects must be bool'







    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(49,tuple([variant, full_objects]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def base64_to_variant(self, base64_str:'str'   , allow_objects:'bool' =False  ) -> typing.Union[typing.Any]:
    r'''
				Returns a decoded `Variant` corresponding to the Base64-encoded string `base64_str`. If `allow_objects` is `true`, decoding objects is allowed.
				Internally, this uses the same decoding mechanism as the `@GlobalScope.bytes_to_var` method.
				**Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
			'''

    assert(not base64_str is None)
    assert isinstance(base64_str, (str, String)), 'base64_str must be str or String'
    assert isinstance(allow_objects, bool), 'allow_objects must be bool'




    assert(isinstance(base64_str, (str, String)))
    py_string_base64_str = base64_str if isinstance(base64_str, StringName) else c_utils.py_string_to_string(base64_str)


    _ret = None
    _ret = self._ptr.call_with_return(50,tuple([py_string_base64_str._ptr, allow_objects]))
    return _ret


  @functools.native_method
  def raw_to_base64(self, array:'PackedByteArray'   ) -> typing.Union[str]:
    r'''
				Returns a Base64-encoded string of a given `PackedByteArray`.
			'''

    assert(not array is None)
    assert isinstance(array, PackedByteArray), 'array must be PackedByteArray'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(51,tuple([array._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def base64_to_raw(self, base64_str:'str'   ) -> typing.Union['PackedByteArray']:
    r'''
				Returns a decoded `PackedByteArray` corresponding to the Base64-encoded string `base64_str`.
			'''

    assert(not base64_str is None)
    assert isinstance(base64_str, (str, String)), 'base64_str must be str or String'




    assert(isinstance(base64_str, (str, String)))
    py_string_base64_str = base64_str if isinstance(base64_str, StringName) else c_utils.py_string_to_string(base64_str)

    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(52,tuple([py_string_base64_str._ptr]))
    return _ret


  @functools.native_method
  def utf8_to_base64(self, utf8_str:'str'   ) -> typing.Union[str]:
    r'''
				Returns a Base64-encoded string of the UTF-8 string `utf8_str`.
			'''

    assert(not utf8_str is None)
    assert isinstance(utf8_str, (str, String)), 'utf8_str must be str or String'




    assert(isinstance(utf8_str, (str, String)))
    py_string_utf8_str = utf8_str if isinstance(utf8_str, StringName) else c_utils.py_string_to_string(utf8_str)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([py_string_utf8_str._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def base64_to_utf8(self, base64_str:'str'   ) -> typing.Union[str]:
    r'''
				Returns a decoded string corresponding to the Base64-encoded string `base64_str`.
			'''

    assert(not base64_str is None)
    assert isinstance(base64_str, (str, String)), 'base64_str must be str or String'




    assert(isinstance(base64_str, (str, String)))
    py_string_base64_str = base64_str if isinstance(base64_str, StringName) else c_utils.py_string_to_string(base64_str)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([py_string_base64_str._ptr]))
    return utils.gd_string_to_py_string(_ret)



register_cast_function('Marshalls', Marshalls.cast)
register_class('Marshalls', Marshalls)
