# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.SkeletonProfile as py4godot_skeletonprofile 
from py4godot.wrappers.wrappers import CPPSkeletonProfileHumanoidWrapper


class SkeletonProfileHumanoid(py4godot_skeletonprofile.SkeletonProfile):
  r'''
		A `SkeletonProfile` as a preset that is optimized for the human form. This exists for standardization, so all parameters are read-only.
		A humanoid skeleton profile contains 54 bones divided in 4 groups: `"Body"`, `"Face"`, `"LeftHand"`, and `"RightHand"`. It is structured as follows:
		`codeblock lang=text`
		Root
		└─ Hips
		    ├─ LeftUpperLeg
		    │  └─ LeftLowerLeg
		    │     └─ LeftFoot
		    │        └─ LeftToes
		    ├─ RightUpperLeg
		    │  └─ RightLowerLeg
		    │     └─ RightFoot
		    │        └─ RightToes
		    └─ Spine
		        └─ Chest
		            └─ UpperChest
		                ├─ Neck
		                │   └─ Head
		                │       ├─ Jaw
		                │       ├─ LeftEye
		                │       └─ RightEye
		                ├─ LeftShoulder
		                │  └─ LeftUpperArm
		                │     └─ LeftLowerArm
		                │        └─ LeftHand
		                │           ├─ LeftThumbMetacarpal
		                │           │  └─ LeftThumbProximal
		                │           │    └─ LeftThumbDistal
		                │           ├─ LeftIndexProximal
		                │           │  └─ LeftIndexIntermediate
		                │           │    └─ LeftIndexDistal
		                │           ├─ LeftMiddleProximal
		                │           │  └─ LeftMiddleIntermediate
		                │           │    └─ LeftMiddleDistal
		                │           ├─ LeftRingProximal
		                │           │  └─ LeftRingIntermediate
		                │           │    └─ LeftRingDistal
		                │           └─ LeftLittleProximal
		                │              └─ LeftLittleIntermediate
		                │                └─ LeftLittleDistal
		                └─ RightShoulder
		                   └─ RightUpperArm
		                      └─ RightLowerArm
		                         └─ RightHand
		                            ├─ RightThumbMetacarpal
		                            │  └─ RightThumbProximal
		                            │     └─ RightThumbDistal
		                            ├─ RightIndexProximal
		                            │  └─ RightIndexIntermediate
		                            │     └─ RightIndexDistal
		                            ├─ RightMiddleProximal
		                            │  └─ RightMiddleIntermediate
		                            │     └─ RightMiddleDistal
		                            ├─ RightRingProximal
		                            │  └─ RightRingIntermediate
		                            │     └─ RightRingDistal
		                            └─ RightLittleProximal
		                               └─ RightLittleIntermediate
		                                 └─ RightLittleDistal
		```
	'''

  @staticmethod
  def constructor():
    class_ = SkeletonProfileHumanoid.construct_without_init()
    class_._ptr = constructor(760,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SkeletonProfileHumanoid.construct_without_init()
    class_._ptr = constructor(760,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkeletonProfileHumanoidWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(760,0, ())


  def generate_wrapper(self):
    return CPPSkeletonProfileHumanoidWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SkeletonProfileHumanoid.__new__(SkeletonProfileHumanoid)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SkeletonProfileHumanoid'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonProfileHumanoid.construct_without_init()
    cls._ptr = CPPSkeletonProfileHumanoidWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SkeletonProfileHumanoid.construct_without_init()
    cls._ptr = CPPSkeletonProfileHumanoidWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('SkeletonProfileHumanoid', SkeletonProfileHumanoid.cast)
register_class('SkeletonProfileHumanoid', SkeletonProfileHumanoid)
