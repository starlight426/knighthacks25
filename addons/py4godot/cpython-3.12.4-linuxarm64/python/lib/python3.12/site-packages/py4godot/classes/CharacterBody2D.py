# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.KinematicCollision2D as py4godot_kinematiccollision2d 
import py4godot.classes.PhysicsBody2D as py4godot_physicsbody2d 
from py4godot.wrappers.wrappers import CPPCharacterBody2DWrapper

class MotionMode:
  MOTION_MODE_GROUNDED = 0
  MOTION_MODE_FLOATING = 1
class PlatformOnLeave:
  PLATFORM_ON_LEAVE_ADD_VELOCITY = 0
  PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY = 1
  PLATFORM_ON_LEAVE_DO_NOTHING = 2


class CharacterBody2D(py4godot_physicsbody2d.PhysicsBody2D):
  r'''
		`CharacterBody2D` is a specialized class for physics bodies that are meant to be user-controlled. They are not affected by physics at all, but they affect other physics bodies in their path. They are mainly used to provide high-level API to move objects with wall and slope detection (`move_and_slide` method) in addition to the general collision detection provided by `PhysicsBody2D.move_and_collide`. This makes it useful for highly configurable physics bodies that must move in specific ways and collide with the world, as is often the case with user-controlled characters.
		For game objects that don't require complex movement or collision detection, such as moving platforms, `AnimatableBody2D` is simpler to configure.
	'''

  @staticmethod
  def constructor():
    class_ = CharacterBody2D.construct_without_init()
    class_._ptr = constructor(207,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CharacterBody2D.construct_without_init()
    class_._ptr = constructor(207,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCharacterBody2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(207,0, ())


  def generate_wrapper(self):
    return CPPCharacterBody2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CharacterBody2D.__new__(CharacterBody2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CharacterBody2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CharacterBody2D.construct_without_init()
    cls._ptr = CPPCharacterBody2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CharacterBody2D.construct_without_init()
    cls._ptr = CPPCharacterBody2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def motion_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_motion_mode()
    return _ret
  @motion_mode.setter
  def motion_mode(self,  value:'int'):
    self.set_motion_mode(value)
  @property
  def up_direction(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_up_direction()
    return _ret
  @up_direction.setter
  def up_direction(self,  value:'Vector2'):
    self.set_up_direction(value)
  @property
  def velocity(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_velocity()
    return _ret
  @velocity.setter
  def velocity(self,  value:'Vector2'):
    self.set_velocity(value)
  @property
  def slide_on_ceiling(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_slide_on_ceiling_enabled()
    return _ret
  @slide_on_ceiling.setter
  def slide_on_ceiling(self,  value:'bool'):
    self.set_slide_on_ceiling_enabled(value)
  @property
  def max_slides(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_max_slides()
    return _ret
  @max_slides.setter
  def max_slides(self,  value:'int'):
    self.set_max_slides(value)
  @property
  def wall_min_slide_angle(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_wall_min_slide_angle()
    return _ret
  @wall_min_slide_angle.setter
  def wall_min_slide_angle(self,  value:'float'):
    self.set_wall_min_slide_angle(value)
  @property
  def floor_stop_on_slope(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_floor_stop_on_slope_enabled()
    return _ret
  @floor_stop_on_slope.setter
  def floor_stop_on_slope(self,  value:'bool'):
    self.set_floor_stop_on_slope_enabled(value)
  @property
  def floor_constant_speed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_floor_constant_speed_enabled()
    return _ret
  @floor_constant_speed.setter
  def floor_constant_speed(self,  value:'bool'):
    self.set_floor_constant_speed_enabled(value)
  @property
  def floor_block_on_wall(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_floor_block_on_wall_enabled()
    return _ret
  @floor_block_on_wall.setter
  def floor_block_on_wall(self,  value:'bool'):
    self.set_floor_block_on_wall_enabled(value)
  @property
  def floor_max_angle(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_floor_max_angle()
    return _ret
  @floor_max_angle.setter
  def floor_max_angle(self,  value:'float'):
    self.set_floor_max_angle(value)
  @property
  def floor_snap_length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_floor_snap_length()
    return _ret
  @floor_snap_length.setter
  def floor_snap_length(self,  value:'float'):
    self.set_floor_snap_length(value)
  @property
  def platform_on_leave(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_platform_on_leave()
    return _ret
  @platform_on_leave.setter
  def platform_on_leave(self,  value:'int'):
    self.set_platform_on_leave(value)
  @property
  def platform_floor_layers(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_platform_floor_layers()
    return _ret
  @platform_floor_layers.setter
  def platform_floor_layers(self,  value:'int'):
    self.set_platform_floor_layers(value)
  @property
  def platform_wall_layers(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_platform_wall_layers()
    return _ret
  @platform_wall_layers.setter
  def platform_wall_layers(self,  value:'int'):
    self.set_platform_wall_layers(value)
  @property
  def safe_margin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_safe_margin()
    return _ret
  @safe_margin.setter
  def safe_margin(self,  value:'float'):
    self.set_safe_margin(value)
  @functools.native_method
  def move_and_slide(self) -> typing.Union[bool]:
    r'''
				Moves the body based on `velocity`. If the body collides with another, it will slide along the other body (by default only on floor) rather than stop immediately. If the other body is a `CharacterBody2D` or `RigidBody2D`, it will also be affected by the motion of the other body. You can use this to make moving and rotating platforms, or to make nodes push other nodes.
				This method should be used in `Node._physics_process` (or in a method called by `Node._physics_process`), as it uses the physics step's `delta` value automatically in calculations. Otherwise, the simulation will run at an incorrect speed.
				Modifies `velocity` if a slide collision occurred. To get the latest collision call `get_last_slide_collision`, for detailed information about collisions that occurred, use `get_slide_collision`.
				When the body touches a moving platform, the platform's velocity is automatically added to the body motion. If a collision occurs due to the platform's motion, it will always be first in the slide collisions.
				The general behavior and available properties change according to the `motion_mode`.
				Returns `true` if the body collided, otherwise, returns `false`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(348,tuple([]))
    return _ret


  @functools.native_method
  def apply_floor_snap(self) -> None:
    r'''
				Allows to manually apply a snap to the floor regardless of the body's velocity. This function does nothing when `is_on_floor` returns `true`.
			'''




    self._ptr.call_with_return(349,tuple([]))

  @functools.native_method
  def set_velocity(self, velocity:'Vector2'   ) -> None:
    r''''''

    assert(not velocity is None)
    assert isinstance(velocity, Vector2), 'velocity must be Vector2'

    self.py__velocity = velocity






    self._ptr.call_with_return(350,tuple([velocity._ptr]))

  @functools.native_method
  def get_velocity(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(351,tuple([]))

    return _ret


  @functools.native_method
  def set_safe_margin(self, margin:'float'   ) -> None:
    r''''''

    assert isinstance(margin, (int, float)), 'margin must be int or float'

    self.py__safe_margin = margin






    self._ptr.call_with_return(352,tuple([margin]))

  @functools.native_method
  def get_safe_margin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(353,tuple([]))

    return _ret


  @functools.native_method
  def is_floor_stop_on_slope_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(354,tuple([]))

    return _ret


  @functools.native_method
  def set_floor_stop_on_slope_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__floor_stop_on_slope = enabled






    self._ptr.call_with_return(355,tuple([enabled]))

  @functools.native_method
  def set_floor_constant_speed_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__floor_constant_speed = enabled






    self._ptr.call_with_return(356,tuple([enabled]))

  @functools.native_method
  def is_floor_constant_speed_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(357,tuple([]))

    return _ret


  @functools.native_method
  def set_floor_block_on_wall_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__floor_block_on_wall = enabled






    self._ptr.call_with_return(358,tuple([enabled]))

  @functools.native_method
  def is_floor_block_on_wall_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(359,tuple([]))

    return _ret


  @functools.native_method
  def set_slide_on_ceiling_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__slide_on_ceiling = enabled






    self._ptr.call_with_return(360,tuple([enabled]))

  @functools.native_method
  def is_slide_on_ceiling_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(361,tuple([]))

    return _ret


  @functools.native_method
  def set_platform_floor_layers(self, exclude_layer:'int'   ) -> None:
    r''''''

    assert isinstance(exclude_layer, (int, float)), 'exclude_layer must be int or float'

    self.py__platform_floor_layers = exclude_layer






    self._ptr.call_with_return(362,tuple([exclude_layer]))

  @functools.native_method
  def get_platform_floor_layers(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(363,tuple([]))

    return _ret


  @functools.native_method
  def set_platform_wall_layers(self, exclude_layer:'int'   ) -> None:
    r''''''

    assert isinstance(exclude_layer, (int, float)), 'exclude_layer must be int or float'

    self.py__platform_wall_layers = exclude_layer






    self._ptr.call_with_return(364,tuple([exclude_layer]))

  @functools.native_method
  def get_platform_wall_layers(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(365,tuple([]))

    return _ret


  @functools.native_method
  def get_max_slides(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(366,tuple([]))

    return _ret


  @functools.native_method
  def set_max_slides(self, max_slides:'int'   ) -> None:
    r''''''

    assert isinstance(max_slides, (int, float)), 'max_slides must be int or float'

    self.py__max_slides = max_slides






    self._ptr.call_with_return(367,tuple([max_slides]))

  @functools.native_method
  def get_floor_max_angle(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(368,tuple([]))

    return _ret


  @functools.native_method
  def set_floor_max_angle(self, radians:'float'   ) -> None:
    r''''''

    assert isinstance(radians, (int, float)), 'radians must be int or float'

    self.py__floor_max_angle = radians






    self._ptr.call_with_return(369,tuple([radians]))

  @functools.native_method
  def get_floor_snap_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(370,tuple([]))

    return _ret


  @functools.native_method
  def set_floor_snap_length(self, floor_snap_length:'float'   ) -> None:
    r''''''

    assert isinstance(floor_snap_length, (int, float)), 'floor_snap_length must be int or float'

    self.py__floor_snap_length = floor_snap_length






    self._ptr.call_with_return(371,tuple([floor_snap_length]))

  @functools.native_method
  def get_wall_min_slide_angle(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(372,tuple([]))

    return _ret


  @functools.native_method
  def set_wall_min_slide_angle(self, radians:'float'   ) -> None:
    r''''''

    assert isinstance(radians, (int, float)), 'radians must be int or float'

    self.py__wall_min_slide_angle = radians






    self._ptr.call_with_return(373,tuple([radians]))

  @functools.native_method
  def get_up_direction(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(374,tuple([]))

    return _ret


  @functools.native_method
  def set_up_direction(self, up_direction:'Vector2'   ) -> None:
    r''''''

    assert(not up_direction is None)
    assert isinstance(up_direction, Vector2), 'up_direction must be Vector2'

    self.py__up_direction = up_direction






    self._ptr.call_with_return(375,tuple([up_direction._ptr]))

  @functools.native_method
  def set_motion_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__motion_mode = mode






    self._ptr.call_with_return(376,tuple([mode]))

  @functools.native_method
  def get_motion_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(377,tuple([]))

    return _ret


  @functools.native_method
  def set_platform_on_leave(self, on_leave_apply_velocity:'int'  ) -> None:
    r''''''

    assert isinstance(on_leave_apply_velocity, (int, float)), 'on_leave_apply_velocity must be int or float'

    self.py__platform_on_leave = on_leave_apply_velocity






    self._ptr.call_with_return(378,tuple([on_leave_apply_velocity]))

  @functools.native_method
  def get_platform_on_leave(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(379,tuple([]))

    return _ret


  @functools.native_method
  def is_on_floor(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the body collided with the floor on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "floor" or not.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(380,tuple([]))
    return _ret


  @functools.native_method
  def is_on_floor_only(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the body collided only with the floor on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "floor" or not.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(381,tuple([]))
    return _ret


  @functools.native_method
  def is_on_ceiling(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the body collided with the ceiling on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "ceiling" or not.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(382,tuple([]))
    return _ret


  @functools.native_method
  def is_on_ceiling_only(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the body collided only with the ceiling on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "ceiling" or not.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(383,tuple([]))
    return _ret


  @functools.native_method
  def is_on_wall(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the body collided with a wall on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "wall" or not.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(384,tuple([]))
    return _ret


  @functools.native_method
  def is_on_wall_only(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the body collided only with a wall on the last call of `move_and_slide`. Otherwise, returns `false`. The `up_direction` and `floor_max_angle` are used to determine whether a surface is "wall" or not.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(385,tuple([]))
    return _ret


  @functools.native_method
  def get_floor_normal(self) -> typing.Union['Vector2']:
    r'''
				Returns the collision normal of the floor at the last collision point. Only valid after calling `move_and_slide` and when `is_on_floor` returns `true`.
				**Warning:** The collision normal is not always the same as the surface normal.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(386,tuple([]))
    return _ret


  @functools.native_method
  def get_wall_normal(self) -> typing.Union['Vector2']:
    r'''
				Returns the collision normal of the wall at the last collision point. Only valid after calling `move_and_slide` and when `is_on_wall` returns `true`.
				**Warning:** The collision normal is not always the same as the surface normal.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(387,tuple([]))
    return _ret


  @functools.native_method
  def get_last_motion(self) -> typing.Union['Vector2']:
    r'''
				Returns the last motion applied to the `CharacterBody2D` during the last call to `move_and_slide`. The movement can be split into multiple motions when sliding occurs, and this method return the last one, which is useful to retrieve the current direction of the movement.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(388,tuple([]))
    return _ret


  @functools.native_method
  def get_position_delta(self) -> typing.Union['Vector2']:
    r'''
				Returns the travel (position delta) that occurred during the last call to `move_and_slide`.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(389,tuple([]))
    return _ret


  @functools.native_method
  def get_real_velocity(self) -> typing.Union['Vector2']:
    r'''
				Returns the current real velocity since the last call to `move_and_slide`. For example, when you climb a slope, you will move diagonally even though the velocity is horizontal. This method returns the diagonal movement, as opposed to `velocity` which returns the requested velocity.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(390,tuple([]))
    return _ret


  @functools.native_method
  def get_floor_angle(self, up_direction:'Vector2' = None  ) -> typing.Union[float]:
    r'''
				Returns the floor's collision angle at the last collision point according to `up_direction`, which is `constant Vector2.UP` by default. This value is always positive and only valid after calling `move_and_slide` and when `is_on_floor` returns `true`.
			'''
    if up_direction is None:
      up_direction = Vector2.new0()
    if up_direction is None:
      up_direction = Vector2.new0()







    _ret = 0
    _ret = self._ptr.call_with_return(391,tuple([up_direction._ptr]))
    return _ret


  @functools.native_method
  def get_platform_velocity(self) -> typing.Union['Vector2']:
    r'''
				Returns the linear velocity of the platform at the last collision point. Only valid after calling `move_and_slide`.
			'''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(392,tuple([]))
    return _ret


  @functools.native_method
  def get_slide_collision_count(self) -> typing.Union[int]:
    r'''
				Returns the number of times the body collided and changed direction during the last call to `move_and_slide`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(393,tuple([]))
    return _ret


  @functools.native_method
  def get_slide_collision(self, slide_idx:'int'   ) -> typing.Union['py4godot_kinematiccollision2d.KinematicCollision2D']:
    r'''
				Returns a `KinematicCollision2D`, which contains information about a collision that occurred during the last call to `move_and_slide`. Since the body can collide several times in a single call to `move_and_slide`, you must specify the index of the collision in the range 0 to (`get_slide_collision_count` - 1).
				**Example:** Iterate through the collisions with a `for` loop:
				
				```gdscript
				for i in get_slide_collision_count():
					var collision = get_slide_collision(i)
					print("Collided with: ", collision.get_collider().name)
				```
				
				
			'''

    assert isinstance(slide_idx, (int, float)), 'slide_idx must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: KinematicCollision2D
    _ret._ptr = self._ptr.call_with_return(394,tuple([slide_idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_last_slide_collision(self) -> typing.Union['py4godot_kinematiccollision2d.KinematicCollision2D']:
    r'''
				Returns a `KinematicCollision2D`, which contains information about the latest collision that occurred during the last call to `move_and_slide`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: KinematicCollision2D
    _ret._ptr = self._ptr.call_with_return(395,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('CharacterBody2D', CharacterBody2D.cast)
register_class('CharacterBody2D', CharacterBody2D)
