# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeTextureWrapper

class Source:
  SOURCE_TEXTURE = 0
  SOURCE_SCREEN = 1
  SOURCE_2D_TEXTURE = 2
  SOURCE_2D_NORMAL = 3
  SOURCE_DEPTH = 4
  SOURCE_PORT = 5
  SOURCE_3D_NORMAL = 6
  SOURCE_ROUGHNESS = 7
  SOURCE_MAX = 8
class TextureType:
  TYPE_DATA = 0
  TYPE_COLOR = 1
  TYPE_NORMAL_MAP = 2
  TYPE_MAX = 3


class VisualShaderNodeTexture(py4godot_visualshadernode.VisualShaderNode):
  r'''
		Performs a lookup operation on the provided texture, with support for multiple texture sources to choose from.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeTexture.construct_without_init()
    class_._ptr = constructor(950,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeTexture.construct_without_init()
    class_._ptr = constructor(950,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(950,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeTexture.__new__(VisualShaderNodeTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTexture.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTexture.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def source(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_source()
    return _ret
  @source.setter
  def source(self,  value:'int'):
    self.set_source(value)
  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @property
  def texture_type(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_type()
    return _ret
  @texture_type.setter
  def texture_type(self,  value:'int'):
    self.set_texture_type(value)
  @functools.native_method
  def set_source(self, value:'int'  ) -> None:
    r''''''

    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__source = value






    self._ptr.call_with_return(88,tuple([value]))

  @functools.native_method
  def get_source(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_texture(self, value:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not value is None)
    assert isinstance(value, get_class('Texture2D')), 'value must be Texture2D'

    self.py__texture = value






    self._ptr.call_with_return(90,tuple([value._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture_type(self, value:'int'  ) -> None:
    r''''''

    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__texture_type = value






    self._ptr.call_with_return(92,tuple([value]))

  @functools.native_method
  def get_texture_type(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeTexture', VisualShaderNodeTexture.cast)
register_class('VisualShaderNodeTexture', VisualShaderNodeTexture)
