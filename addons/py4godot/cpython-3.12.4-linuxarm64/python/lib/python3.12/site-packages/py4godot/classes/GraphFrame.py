# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
import py4godot.classes.GraphElement as py4godot_graphelement 
from py4godot.wrappers.wrappers import CPPGraphFrameWrapper


class GraphFrame(py4godot_graphelement.GraphElement):
  r'''
		GraphFrame is a special `GraphElement` to which other `GraphElement`s can be attached. It can be configured to automatically resize to enclose all attached `GraphElement`s. If the frame is moved, all the attached `GraphElement`s inside it will be moved as well.
		A GraphFrame is always kept behind the connection layer and other `GraphElement`s inside a `GraphEdit`.
	'''

  @staticmethod
  def constructor():
    class_ = GraphFrame.construct_without_init()
    class_._ptr = constructor(384,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GraphFrame.construct_without_init()
    class_._ptr = constructor(384,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGraphFrameWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(384,0, ())


  def generate_wrapper(self):
    return CPPGraphFrameWrapper()
  def init_signals(self):
    super().init_signals()
    autoshrink_changed_name = utils.py_string_to_string_name("autoshrink_changed")
    self.autoshrink_changed = signals.BuiltinSignal(self, autoshrink_changed_name)

  @staticmethod
  def construct_without_init():
    cls = GraphFrame.__new__(GraphFrame)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GraphFrame'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GraphFrame.construct_without_init()
    cls._ptr = CPPGraphFrameWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GraphFrame.construct_without_init()
    cls._ptr = CPPGraphFrameWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def title(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_title()
    return _ret
  @title.setter
  def title(self,  value:'str'):
    self.set_title(value)
  @property
  def autoshrink_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_autoshrink_enabled()
    return _ret
  @autoshrink_enabled.setter
  def autoshrink_enabled(self,  value:'bool'):
    self.set_autoshrink_enabled(value)
  @property
  def autoshrink_margin(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_autoshrink_margin()
    return _ret
  @autoshrink_margin.setter
  def autoshrink_margin(self,  value:'int'):
    self.set_autoshrink_margin(value)
  @property
  def drag_margin(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_drag_margin()
    return _ret
  @drag_margin.setter
  def drag_margin(self,  value:'int'):
    self.set_drag_margin(value)
  @property
  def tint_color_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_tint_color_enabled()
    return _ret
  @tint_color_enabled.setter
  def tint_color_enabled(self,  value:'bool'):
    self.set_tint_color_enabled(value)
  @property
  def tint_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_tint_color()
    return _ret
  @tint_color.setter
  def tint_color(self,  value:'Color'):
    self.set_tint_color(value)
  @functools.native_method
  def set_title(self, title:'str'   ) -> None:
    r''''''

    assert(not title is None)
    assert isinstance(title, (str, String)), 'title must be str or String'

    self.py__title = title



    assert(isinstance(title, (str, String)))
    py_string_title = title if isinstance(title, StringName) else c_utils.py_string_to_string(title)

    py__string_title = utils.py_string_to_string(title)
    py__string_title.shouldBeDeleted = False


    self._ptr.call_with_return(447,tuple([py__string_title._ptr]))

  @functools.native_method
  def get_title(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(448,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_titlebar_hbox(self) -> typing.Any:
    r'''
				Returns the `HBoxContainer` used for the title bar, only containing a `Label` for displaying the title by default.
				This can be used to add custom controls to the title bar such as option or close buttons.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: HBoxContainer
    _ret._ptr = self._ptr.call_with_return(449,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_autoshrink_enabled(self, shrink:'bool'   ) -> None:
    r''''''

    assert isinstance(shrink, bool), 'shrink must be bool'

    self.py__autoshrink_enabled = shrink






    self._ptr.call_with_return(450,tuple([shrink]))

  @functools.native_method
  def is_autoshrink_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(451,tuple([]))

    return _ret


  @functools.native_method
  def set_autoshrink_margin(self, autoshrink_margin:'int'   ) -> None:
    r''''''

    assert isinstance(autoshrink_margin, (int, float)), 'autoshrink_margin must be int or float'

    self.py__autoshrink_margin = autoshrink_margin






    self._ptr.call_with_return(452,tuple([autoshrink_margin]))

  @functools.native_method
  def get_autoshrink_margin(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(453,tuple([]))

    return _ret


  @functools.native_method
  def set_drag_margin(self, drag_margin:'int'   ) -> None:
    r''''''

    assert isinstance(drag_margin, (int, float)), 'drag_margin must be int or float'

    self.py__drag_margin = drag_margin






    self._ptr.call_with_return(454,tuple([drag_margin]))

  @functools.native_method
  def get_drag_margin(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(455,tuple([]))

    return _ret


  @functools.native_method
  def set_tint_color_enabled(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__tint_color_enabled = enable






    self._ptr.call_with_return(456,tuple([enable]))

  @functools.native_method
  def is_tint_color_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(457,tuple([]))

    return _ret


  @functools.native_method
  def set_tint_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__tint_color = color






    self._ptr.call_with_return(458,tuple([color._ptr]))

  @functools.native_method
  def get_tint_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(459,tuple([]))

    return _ret



register_cast_function('GraphFrame', GraphFrame.cast)
register_class('GraphFrame', GraphFrame)
