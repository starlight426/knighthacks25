# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Light2D as py4godot_light2d 
from py4godot.wrappers.wrappers import CPPPointLight2DWrapper


class PointLight2D(py4godot_light2d.Light2D):
  r'''
		Casts light in a 2D environment. This light's shape is defined by a (usually grayscale) texture.
	'''

  @staticmethod
  def constructor():
    class_ = PointLight2D.construct_without_init()
    class_._ptr = constructor(628,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PointLight2D.construct_without_init()
    class_._ptr = constructor(628,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPointLight2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(628,0, ())


  def generate_wrapper(self):
    return CPPPointLight2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PointLight2D.__new__(PointLight2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PointLight2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PointLight2D.construct_without_init()
    cls._ptr = CPPPointLight2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PointLight2D.construct_without_init()
    cls._ptr = CPPPointLight2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @property
  def offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_texture_offset()
    return _ret
  @offset.setter
  def offset(self,  value:'Vector2'):
    self.set_texture_offset(value)
  @property
  def texture_scale(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_texture_scale()
    return _ret
  @texture_scale.setter
  def texture_scale(self,  value:'float'):
    self.set_texture_scale(value)
  @property
  def height(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'float'):
    self.set_height(value)
  @functools.native_method
  def set_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture = texture






    self._ptr.call_with_return(335,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(336,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture_offset(self, texture_offset:'Vector2'   ) -> None:
    r''''''

    assert(not texture_offset is None)
    assert isinstance(texture_offset, Vector2), 'texture_offset must be Vector2'

    self.py__offset = texture_offset






    self._ptr.call_with_return(337,tuple([texture_offset._ptr]))

  @functools.native_method
  def get_texture_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(338,tuple([]))

    return _ret


  @functools.native_method
  def set_texture_scale(self, texture_scale:'float'   ) -> None:
    r''''''

    assert isinstance(texture_scale, (int, float)), 'texture_scale must be int or float'

    self.py__texture_scale = texture_scale






    self._ptr.call_with_return(339,tuple([texture_scale]))

  @functools.native_method
  def get_texture_scale(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(340,tuple([]))

    return _ret



register_cast_function('PointLight2D', PointLight2D.cast)
register_class('PointLight2D', PointLight2D)
