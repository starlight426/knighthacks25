# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.BaseButtonTypedArray as py4godot_basebuttontypedarray 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
import py4godot.classes.BaseButtonTypedArray as py4godot_basebuttontypedarray 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPButtonGroupWrapper


class ButtonGroup(py4godot_resource.Resource):
  r'''
		A group of `BaseButton`-derived buttons. The buttons in a `ButtonGroup` are treated like radio buttons: No more than one button can be pressed at a time. Some types of buttons (such as `CheckBox`) may have a special appearance in this state.
		Every member of a `ButtonGroup` should have `BaseButton.toggle_mode` set to `true`.
	'''

  @staticmethod
  def constructor():
    class_ = ButtonGroup.construct_without_init()
    class_._ptr = constructor(175,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ButtonGroup.construct_without_init()
    class_._ptr = constructor(175,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPButtonGroupWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(175,0, ())


  def generate_wrapper(self):
    return CPPButtonGroupWrapper()
  def init_signals(self):
    super().init_signals()
    pressed_name = utils.py_string_to_string_name("pressed")
    self.pressed = signals.BuiltinSignal(self, pressed_name)

  @staticmethod
  def construct_without_init():
    cls = ButtonGroup.__new__(ButtonGroup)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ButtonGroup'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ButtonGroup.construct_without_init()
    cls._ptr = CPPButtonGroupWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ButtonGroup.construct_without_init()
    cls._ptr = CPPButtonGroupWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def allow_unpress(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_allow_unpress()
    return _ret
  @allow_unpress.setter
  def allow_unpress(self,  value:'bool'):
    self.set_allow_unpress(value)
  @functools.native_method
  def get_pressed_button(self) -> typing.Any:
    r'''
				Returns the current pressed button.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: BaseButton
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_buttons(self) -> typing.Union['py4godot_basebuttontypedarray.BaseButtonTypedArray']:
    r'''
				Returns an `Array` of `Button`s who have this as their `ButtonGroup` (see `BaseButton.button_group`).
			'''




    _ret = py4godot_basebuttontypedarray.BaseButtonTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))
    return _ret


  @functools.native_method
  def set_allow_unpress(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__allow_unpress = enabled






    self._ptr.call_with_return(79,tuple([enabled]))

  @functools.native_method
  def is_allow_unpress(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret



register_cast_function('ButtonGroup', ButtonGroup.cast)
register_class('ButtonGroup', ButtonGroup)
