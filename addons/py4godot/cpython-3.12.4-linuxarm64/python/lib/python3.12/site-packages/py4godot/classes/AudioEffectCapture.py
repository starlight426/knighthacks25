# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectCaptureWrapper


class AudioEffectCapture(py4godot_audioeffect.AudioEffect):
  r'''
		AudioEffectCapture is an AudioEffect which copies all audio frames from the attached audio effect bus into its internal ring buffer.
		Application code should consume these audio frames from this ring buffer using `get_buffer` and process it as needed, for example to capture data from an `AudioStreamMicrophone`, implement application-defined effects, or to transmit audio over the network. When capturing audio data from a microphone, the format of the samples will be stereo 32-bit floating-point PCM.
		Unlike `AudioEffectRecord`, this effect only returns the raw audio samples instead of encoding them into an `AudioStream`.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectCapture.construct_without_init()
    class_._ptr = constructor(109,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectCapture.construct_without_init()
    class_._ptr = constructor(109,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectCaptureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(109,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectCaptureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectCapture.__new__(AudioEffectCapture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectCapture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectCapture.construct_without_init()
    cls._ptr = CPPAudioEffectCaptureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectCapture.construct_without_init()
    cls._ptr = CPPAudioEffectCaptureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def buffer_length(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_buffer_length()
    return _ret
  @buffer_length.setter
  def buffer_length(self,  value:'float'):
    self.set_buffer_length(value)
  @functools.native_method
  def can_get_buffer(self, frames:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if at least `frames` audio frames are available to read in the internal ring buffer.
			'''

    assert isinstance(frames, (int, float)), 'frames must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([frames]))
    return _ret


  @functools.native_method
  def get_buffer(self, frames:'int'   ) -> typing.Union['PackedVector2Array']:
    r'''
				Gets the next `frames` audio samples from the internal ring buffer.
				Returns a `PackedVector2Array` containing exactly `frames` audio samples if available, or an empty `PackedVector2Array` if insufficient data was available.
				The samples are signed floating-point PCM between `-1` and `1`. You will have to scale them if you want to use them as 8 or 16-bit integer samples. (`v = 0x7fff * samples`0`.x`)
			'''

    assert isinstance(frames, (int, float)), 'frames must be int or float'






    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([frames]))
    return _ret


  @functools.native_method
  def clear_buffer(self) -> None:
    r'''
				Clears the internal ring buffer.
				**Note:** Calling this during a capture can cause the loss of samples which causes popping in the playback.
			'''




    self._ptr.call_with_return(80,tuple([]))

  @functools.native_method
  def set_buffer_length(self, buffer_length_seconds:'float'   ) -> None:
    r''''''

    assert isinstance(buffer_length_seconds, (int, float)), 'buffer_length_seconds must be int or float'

    self.py__buffer_length = buffer_length_seconds






    self._ptr.call_with_return(81,tuple([buffer_length_seconds]))

  @functools.native_method
  def get_buffer_length(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def get_frames_available(self) -> typing.Union[int]:
    r'''
				Returns the number of frames available to read using `get_buffer`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))
    return _ret


  @functools.native_method
  def get_discarded_frames(self) -> typing.Union[int]:
    r'''
				Returns the number of audio frames discarded from the audio bus due to full buffer.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))
    return _ret


  @functools.native_method
  def get_buffer_length_frames(self) -> typing.Union[int]:
    r'''
				Returns the total size of the internal ring buffer in frames.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))
    return _ret


  @functools.native_method
  def get_pushed_frames(self) -> typing.Union[int]:
    r'''
				Returns the number of audio frames inserted from the audio bus.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))
    return _ret



register_cast_function('AudioEffectCapture', AudioEffectCapture.cast)
register_class('AudioEffectCapture', AudioEffectCapture)
