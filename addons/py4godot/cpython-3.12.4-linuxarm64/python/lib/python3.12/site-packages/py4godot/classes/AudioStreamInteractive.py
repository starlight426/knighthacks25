# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AudioStreamGenerator as py4godot_audiostreamgenerator 
  import py4godot.classes.AudioStreamSynchronized as py4godot_audiostreamsynchronized 
  import py4godot.classes.AudioStreamOggVorbis as py4godot_audiostreamoggvorbis 
  import py4godot.classes.AudioStreamMicrophone as py4godot_audiostreammicrophone 
  import py4godot.classes.AudioStreamWAV as py4godot_audiostreamwav 
  import py4godot.classes.AudioStreamMP3 as py4godot_audiostreammp3 
  import py4godot.classes.AudioStreamPolyphonic as py4godot_audiostreampolyphonic 
  import py4godot.classes.AudioStreamRandomizer as py4godot_audiostreamrandomizer 
  import py4godot.classes.AudioStreamPlaylist as py4godot_audiostreamplaylist 
import py4godot.classes.AudioStream as py4godot_audiostream 
from py4godot.wrappers.wrappers import CPPAudioStreamInteractiveWrapper

class TransitionFromTime:
  TRANSITION_FROM_TIME_IMMEDIATE = 0
  TRANSITION_FROM_TIME_NEXT_BEAT = 1
  TRANSITION_FROM_TIME_NEXT_BAR = 2
  TRANSITION_FROM_TIME_END = 3
class TransitionToTime:
  TRANSITION_TO_TIME_SAME_POSITION = 0
  TRANSITION_TO_TIME_START = 1
class FadeMode:
  FADE_DISABLED = 0
  FADE_IN = 1
  FADE_OUT = 2
  FADE_CROSS = 3
  FADE_AUTOMATIC = 4
class AutoAdvanceMode:
  AUTO_ADVANCE_DISABLED = 0
  AUTO_ADVANCE_ENABLED = 1
  AUTO_ADVANCE_RETURN_TO_HOLD = 2


class AudioStreamInteractive(py4godot_audiostream.AudioStream):
  r''''''
  CLIP_ANY:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = AudioStreamInteractive.construct_without_init()
    class_._ptr = constructor(143,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamInteractive.construct_without_init()
    class_._ptr = constructor(143,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamInteractiveWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(143,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamInteractiveWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamInteractive.__new__(AudioStreamInteractive)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamInteractive'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamInteractive.construct_without_init()
    cls._ptr = CPPAudioStreamInteractiveWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamInteractive.construct_without_init()
    cls._ptr = CPPAudioStreamInteractiveWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def clip_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_clip_count()
    return _ret
  @clip_count.setter
  def clip_count(self,  value:'int'):
    self.set_clip_count(value)
  @property
  def initial_clip(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_initial_clip()
    return _ret
  @initial_clip.setter
  def initial_clip(self,  value:'int'):
    self.set_initial_clip(value)
  @functools.native_method
  def set_clip_count(self, clip_count:'int'   ) -> None:
    r''''''

    assert isinstance(clip_count, (int, float)), 'clip_count must be int or float'

    self.py__clip_count = clip_count






    self._ptr.call_with_return(93,tuple([clip_count]))

  @functools.native_method
  def get_clip_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_initial_clip(self, clip_index:'int'   ) -> None:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'

    self.py__initial_clip = clip_index






    self._ptr.call_with_return(95,tuple([clip_index]))

  @functools.native_method
  def get_initial_clip(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_clip_name(self, clip_index:'int'   , name:'object'   ) -> None:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'
    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'





    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)

    self._ptr.call_with_return(97,tuple([clip_index, py_stringname_name._ptr]))

  @functools.native_method
  def get_clip_name(self, clip_index:'int'   ) -> typing.Union['StringName']:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(98,tuple([clip_index]))
    return _ret


  @functools.native_method
  def set_clip_stream(self, clip_index:'int'   , stream:'py4godot_audiostream.AudioStream'   ) -> None:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'
    assert(not stream is None)
    assert isinstance(stream, get_class('AudioStream')), 'stream must be AudioStream'







    self._ptr.call_with_return(99,tuple([clip_index, stream._ptr]))

  @functools.native_method
  def get_clip_stream(self, clip_index:'int'   ) -> typing.Any:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AudioStream
    _ret._ptr = self._ptr.call_with_return(100,tuple([clip_index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_clip_auto_advance(self, clip_index:'int'   , mode:'int'  ) -> None:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'
    assert isinstance(mode, (int, float)), 'mode must be int or float'







    self._ptr.call_with_return(101,tuple([clip_index, mode]))

  @functools.native_method
  def get_clip_auto_advance(self, clip_index:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(102,tuple([clip_index]))
    return _ret


  @functools.native_method
  def set_clip_auto_advance_next_clip(self, clip_index:'int'   , auto_advance_next_clip:'int'   ) -> None:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'
    assert isinstance(auto_advance_next_clip, (int, float)), 'auto_advance_next_clip must be int or float'







    self._ptr.call_with_return(103,tuple([clip_index, auto_advance_next_clip]))

  @functools.native_method
  def get_clip_auto_advance_next_clip(self, clip_index:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(clip_index, (int, float)), 'clip_index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([clip_index]))
    return _ret


  @functools.native_method
  def add_transition(self, from_clip:'int'   , to_clip:'int'   , from_time:'int'  , to_time:'int'  , fade_mode:'int'  , fade_beats:'float'   , use_filler_clip:'bool' =False  , filler_clip:'int' =-1  , hold_previous:'bool' =False  ) -> None:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'
    assert isinstance(from_time, (int, float)), 'from_time must be int or float'
    assert isinstance(to_time, (int, float)), 'to_time must be int or float'
    assert isinstance(fade_mode, (int, float)), 'fade_mode must be int or float'
    assert isinstance(fade_beats, (int, float)), 'fade_beats must be int or float'
    assert isinstance(use_filler_clip, bool), 'use_filler_clip must be bool'
    assert isinstance(filler_clip, (int, float)), 'filler_clip must be int or float'
    assert isinstance(hold_previous, bool), 'hold_previous must be bool'














    self._ptr.call_with_return(105,tuple([from_clip, to_clip, from_time, to_time, fade_mode, fade_beats, use_filler_clip, filler_clip, hold_previous]))

  @functools.native_method
  def has_transition(self, from_clip:'int'   , to_clip:'int'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(106,tuple([from_clip, to_clip]))
    return _ret


  @functools.native_method
  def erase_transition(self, from_clip:'int'   , to_clip:'int'   ) -> None:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'







    self._ptr.call_with_return(107,tuple([from_clip, to_clip]))

  @functools.native_method
  def get_transition_list(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(108,tuple([]))
    return _ret


  @functools.native_method
  def get_transition_from_time(self, from_clip:'int'   , to_clip:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'







    _ret:int
    _ret = self._ptr.call_with_return(109,tuple([from_clip, to_clip]))
    return _ret


  @functools.native_method
  def get_transition_to_time(self, from_clip:'int'   , to_clip:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'







    _ret:int
    _ret = self._ptr.call_with_return(110,tuple([from_clip, to_clip]))
    return _ret


  @functools.native_method
  def get_transition_fade_mode(self, from_clip:'int'   , to_clip:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'







    _ret:int
    _ret = self._ptr.call_with_return(111,tuple([from_clip, to_clip]))
    return _ret


  @functools.native_method
  def get_transition_fade_beats(self, from_clip:'int'   , to_clip:'int'   ) -> typing.Union[float]:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(112,tuple([from_clip, to_clip]))
    return _ret


  @functools.native_method
  def is_transition_using_filler_clip(self, from_clip:'int'   , to_clip:'int'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(113,tuple([from_clip, to_clip]))
    return _ret


  @functools.native_method
  def get_transition_filler_clip(self, from_clip:'int'   , to_clip:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(114,tuple([from_clip, to_clip]))
    return _ret


  @functools.native_method
  def is_transition_holding_previous(self, from_clip:'int'   , to_clip:'int'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(from_clip, (int, float)), 'from_clip must be int or float'
    assert isinstance(to_clip, (int, float)), 'to_clip must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(115,tuple([from_clip, to_clip]))
    return _ret



register_cast_function('AudioStreamInteractive', AudioStreamInteractive.cast)
register_class('AudioStreamInteractive', AudioStreamInteractive)
