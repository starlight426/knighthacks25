# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.PhysicsPointQueryParameters2D as py4godot_physicspointqueryparameters2d 
  import py4godot.classes.PhysicsRayQueryParameters2D as py4godot_physicsrayqueryparameters2d 
  import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
  import py4godot.classes.PhysicsShapeQueryParameters2D as py4godot_physicsshapequeryparameters2d 
  import py4godot.classes.Vector2TypedArray as py4godot_vector2typedarray 
import py4godot.classes.Object as py4godot_object 
import py4godot.classes.DictionaryTypedArray as py4godot_dictionarytypedarray 
import py4godot.classes.Vector2TypedArray as py4godot_vector2typedarray 
from py4godot.wrappers.wrappers import CPPPhysicsDirectSpaceState2DWrapper


class PhysicsDirectSpaceState2D(py4godot_object.Object):
  r'''
		Provides direct access to a physics space in the `PhysicsServer2D`. It's used mainly to do queries against objects and areas residing in a given space.
		**Note:** This class is not meant to be instantiated directly. Use `World2D.direct_space_state` to get the world's physics 2D space state.
	'''

  @staticmethod
  def constructor():
    class_ = PhysicsDirectSpaceState2D.construct_without_init()
    class_._ptr = constructor(595,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PhysicsDirectSpaceState2D.construct_without_init()
    class_._ptr = constructor(595,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPhysicsDirectSpaceState2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(595,0, ())


  def generate_wrapper(self):
    return CPPPhysicsDirectSpaceState2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsDirectSpaceState2D.__new__(PhysicsDirectSpaceState2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsDirectSpaceState2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsDirectSpaceState2D.construct_without_init()
    cls._ptr = CPPPhysicsDirectSpaceState2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsDirectSpaceState2D.construct_without_init()
    cls._ptr = CPPPhysicsDirectSpaceState2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def intersect_point(self, parameters:'py4godot_physicspointqueryparameters2d.PhysicsPointQueryParameters2D'   , max_results:'int' =32  ) -> typing.Union['py4godot_dictionarytypedarray.DictionaryTypedArray']:
    r'''
				Checks whether a point is inside any solid shape. Position and other parameters are defined through `PhysicsPointQueryParameters2D`. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:
				`collider`: The colliding object.
				`collider_id`: The colliding object's ID.
				`rid`: The intersecting object's `RID`.
				`shape`: The shape index of the colliding shape.
				The number of intersections can be limited with the `max_results` parameter, to reduce the processing time.
				**Note:** `ConcavePolygonShape2D`s and `CollisionPolygon2D`s in `Segments` build mode are not solid shapes. Therefore, they will not be detected.
			'''

    assert(not parameters is None)
    assert isinstance(parameters, get_class('PhysicsPointQueryParameters2D')), 'parameters must be PhysicsPointQueryParameters2D'
    assert isinstance(max_results, (int, float)), 'max_results must be int or float'







    _ret = py4godot_dictionarytypedarray.DictionaryTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(49,tuple([parameters._ptr, max_results]))
    return _ret


  @functools.native_method
  def intersect_ray(self, parameters:'py4godot_physicsrayqueryparameters2d.PhysicsRayQueryParameters2D'   ) -> typing.Union['Dictionary']:
    r'''
				Intersects a ray in a given space. Ray position and other parameters are defined through `PhysicsRayQueryParameters2D`. The returned object is a dictionary with the following fields:
				`collider`: The colliding object.
				`collider_id`: The colliding object's ID.
				`normal`: The object's surface normal at the intersection point, or `Vector2(0, 0)` if the ray starts inside the shape and `PhysicsRayQueryParameters2D.hit_from_inside` is `true`.
				`position`: The intersection point.
				`rid`: The intersecting object's `RID`.
				`shape`: The shape index of the colliding shape.
				If the ray did not intersect anything, then an empty dictionary is returned instead.
			'''

    assert(not parameters is None)
    assert isinstance(parameters, get_class('PhysicsRayQueryParameters2D')), 'parameters must be PhysicsRayQueryParameters2D'






    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(50,tuple([parameters._ptr]))
    return _ret


  @functools.native_method
  def intersect_shape(self, parameters:'py4godot_physicsshapequeryparameters2d.PhysicsShapeQueryParameters2D'   , max_results:'int' =32  ) -> typing.Union['py4godot_dictionarytypedarray.DictionaryTypedArray']:
    r'''
				Checks the intersections of a shape, given through a `PhysicsShapeQueryParameters2D` object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:
				`collider`: The colliding object.
				`collider_id`: The colliding object's ID.
				`rid`: The intersecting object's `RID`.
				`shape`: The shape index of the colliding shape.
				The number of intersections can be limited with the `max_results` parameter, to reduce the processing time.
			'''

    assert(not parameters is None)
    assert isinstance(parameters, get_class('PhysicsShapeQueryParameters2D')), 'parameters must be PhysicsShapeQueryParameters2D'
    assert isinstance(max_results, (int, float)), 'max_results must be int or float'







    _ret = py4godot_dictionarytypedarray.DictionaryTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(51,tuple([parameters._ptr, max_results]))
    return _ret


  @functools.native_method
  def cast_motion(self, parameters:'py4godot_physicsshapequeryparameters2d.PhysicsShapeQueryParameters2D'   ) -> typing.Union['PackedFloat32Array']:
    r'''
				Checks how far a `Shape2D` can move without colliding. All the parameters for the query, including the shape and the motion, are supplied through a `PhysicsShapeQueryParameters2D` object.
				Returns an array with the safe and unsafe proportions (between 0 and 1) of the motion. The safe proportion is the maximum fraction of the motion that can be made without a collision. The unsafe proportion is the minimum fraction of the distance that must be moved for a collision. If no collision is detected a result of ``1.0, 1.0`` will be returned.
				**Note:** Any `Shape2D`s that the shape is already colliding with e.g. inside of, will be ignored. Use `collide_shape` to determine the `Shape2D`s that the shape is already colliding with.
			'''

    assert(not parameters is None)
    assert isinstance(parameters, get_class('PhysicsShapeQueryParameters2D')), 'parameters must be PhysicsShapeQueryParameters2D'






    _ret = PackedFloat32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(52,tuple([parameters._ptr]))
    return _ret


  @functools.native_method
  def collide_shape(self, parameters:'py4godot_physicsshapequeryparameters2d.PhysicsShapeQueryParameters2D'   , max_results:'int' =32  ) -> typing.Union['py4godot_vector2typedarray.Vector2TypedArray']:
    r'''
				Checks the intersections of a shape, given through a `PhysicsShapeQueryParameters2D` object, against the space. The resulting array contains a list of points where the shape intersects another. Like with `intersect_shape`, the number of returned results can be limited to save processing time.
				Returned points are a list of pairs of contact points. For each pair the first one is in the shape passed in `PhysicsShapeQueryParameters2D` object, second one is in the collided shape from the physics space.
			'''

    assert(not parameters is None)
    assert isinstance(parameters, get_class('PhysicsShapeQueryParameters2D')), 'parameters must be PhysicsShapeQueryParameters2D'
    assert isinstance(max_results, (int, float)), 'max_results must be int or float'







    _ret = py4godot_vector2typedarray.Vector2TypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([parameters._ptr, max_results]))
    return _ret


  @functools.native_method
  def get_rest_info(self, parameters:'py4godot_physicsshapequeryparameters2d.PhysicsShapeQueryParameters2D'   ) -> typing.Union['Dictionary']:
    r'''
				Checks the intersections of a shape, given through a `PhysicsShapeQueryParameters2D` object, against the space. If it collides with more than one shape, the nearest one is selected. The returned object is a dictionary containing the following fields:
				`collider_id`: The colliding object's ID.
				`linear_velocity`: The colliding object's velocity `Vector2`. If the object is an `Area2D`, the result is `(0, 0)`.
				`normal`: The collision normal of the query shape at the intersection point, pointing away from the intersecting object.
				`point`: The intersection point.
				`rid`: The intersecting object's `RID`.
				`shape`: The shape index of the colliding shape.
				If the shape did not intersect anything, then an empty dictionary is returned instead.
			'''

    assert(not parameters is None)
    assert isinstance(parameters, get_class('PhysicsShapeQueryParameters2D')), 'parameters must be PhysicsShapeQueryParameters2D'






    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([parameters._ptr]))
    return _ret



register_cast_function('PhysicsDirectSpaceState2D', PhysicsDirectSpaceState2D.cast)
register_class('PhysicsDirectSpaceState2D', PhysicsDirectSpaceState2D)
