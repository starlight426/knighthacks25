# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPXRFaceModifier3DWrapper


class XRFaceModifier3D(py4godot_node3d.Node3D):
  r'''
		This node applies weights from an `XRFaceTracker` to a mesh with supporting face blend shapes.
		The `url=https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/unified-blendshapes`Unified Expressions`/url` blend shapes are supported, as well as ARKit and SRanipal blend shapes.
		The node attempts to identify blend shapes based on name matching. Blend shapes should match the names listed in the `url=https://docs.vrcft.io/docs/tutorial-avatars/tutorial-avatars-extras/compatibility/overview`Unified Expressions Compatibility`/url` chart.
	'''

  @staticmethod
  def constructor():
    class_ = XRFaceModifier3D.construct_without_init()
    class_._ptr = constructor(1017,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRFaceModifier3D.construct_without_init()
    class_._ptr = constructor(1017,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRFaceModifier3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1017,0, ())


  def generate_wrapper(self):
    return CPPXRFaceModifier3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XRFaceModifier3D.__new__(XRFaceModifier3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRFaceModifier3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRFaceModifier3D.construct_without_init()
    cls._ptr = CPPXRFaceModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRFaceModifier3D.construct_without_init()
    cls._ptr = CPPXRFaceModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def face_tracker(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_face_tracker()
    return _ret
  @face_tracker.setter
  def face_tracker(self,  value:'str'):
    self.set_face_tracker(value)
  @property
  def target(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_target()
    return _ret
  @target.setter
  def target(self,  value:'object'):
    self.set_target(value)
  @functools.native_method
  def set_face_tracker(self, tracker_name:'object'   ) -> None:
    r''''''

    assert(not tracker_name is None)
    assert isinstance(tracker_name, (str, StringName)), 'tracker_name must be str or StringName'

    self.py__face_tracker = tracker_name



    assert(isinstance(tracker_name, (str, StringName)))
    py_stringname_tracker_name = tracker_name if isinstance(tracker_name, StringName) else c_utils.py_string_to_string_name(tracker_name)


    self._ptr.call_with_return(251,tuple([py_stringname_tracker_name._ptr]))

  @functools.native_method
  def get_face_tracker(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(252,tuple([]))

    return _ret


  @functools.native_method
  def set_target(self, target:'object'   ) -> None:
    r''''''

    assert(not target is None)
    assert isinstance(target, (str, NodePath)), 'target must be str or NodePath'

    self.py__target = target



    assert(isinstance(target, (str, NodePath)))
    py_nodepath_target = target if isinstance(target,NodePath) else NodePath.new2(target)


    self._ptr.call_with_return(253,tuple([py_nodepath_target._ptr]))

  @functools.native_method
  def get_target(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(254,tuple([]))

    return _ret



register_cast_function('XRFaceModifier3D', XRFaceModifier3D.cast)
register_class('XRFaceModifier3D', XRFaceModifier3D)
