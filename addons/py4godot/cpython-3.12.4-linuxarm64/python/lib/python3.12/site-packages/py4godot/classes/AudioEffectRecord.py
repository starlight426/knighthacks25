# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AudioStreamWAV as py4godot_audiostreamwav 
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectRecordWrapper


class AudioEffectRecord(py4godot_audioeffect.AudioEffect):
  r'''
		Allows the user to record the sound from an audio bus into an `AudioStreamWAV`. When used on the "Master" audio bus, this includes all audio output by Godot.
		Unlike `AudioEffectCapture`, this effect encodes the recording with the given format (8-bit, 16-bit, or compressed) instead of giving access to the raw audio samples.
		Can be used (with an `AudioStreamMicrophone`) to record from a microphone.
		**Note:** `ProjectSettings.audio/driver/enable_input` must be `true` for audio input to work. See also that setting's description for caveats related to permissions and operating system privacy settings.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectRecord.construct_without_init()
    class_._ptr = constructor(130,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectRecord.construct_without_init()
    class_._ptr = constructor(130,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectRecordWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(130,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectRecordWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectRecord.__new__(AudioEffectRecord)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectRecord'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectRecord.construct_without_init()
    cls._ptr = CPPAudioEffectRecordWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectRecord.construct_without_init()
    cls._ptr = CPPAudioEffectRecordWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def format(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_format()
    return _ret
  @format.setter
  def format(self,  value:'int'):
    self.set_format(value)
  @functools.native_method
  def set_recording_active(self, record:'bool'   ) -> None:
    r'''
				If `true`, the sound will be recorded. Note that restarting the recording will remove the previously recorded sample.
			'''

    assert isinstance(record, bool), 'record must be bool'






    self._ptr.call_with_return(78,tuple([record]))

  @functools.native_method
  def is_recording_active(self) -> typing.Union[bool]:
    r'''
				Returns whether the recording is active or not.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def set_format(self, format:'int'  ) -> None:
    r''''''

    assert isinstance(format, (int, float)), 'format must be int or float'

    self.py__format = format






    self._ptr.call_with_return(80,tuple([format]))

  @functools.native_method
  def get_format(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def get_recording(self) -> typing.Union['py4godot_audiostreamwav.AudioStreamWAV']:
    r'''
				Returns the recorded sample.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AudioStreamWAV
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('AudioEffectRecord', AudioEffectRecord.cast)
register_class('AudioEffectRecord', AudioEffectRecord)
