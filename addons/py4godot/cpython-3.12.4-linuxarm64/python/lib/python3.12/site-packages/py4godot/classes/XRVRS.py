# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPXRVRSWrapper


class XRVRS(py4godot_object.Object):
  r'''
		This class is used by various XR interfaces to generate VRS textures that can be used to speed up rendering.
	'''

  @staticmethod
  def constructor():
    class_ = XRVRS.construct_without_init()
    class_._ptr = constructor(1029,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRVRS.construct_without_init()
    class_._ptr = constructor(1029,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRVRSWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1029,0, ())


  def generate_wrapper(self):
    return CPPXRVRSWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XRVRS.__new__(XRVRS)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRVRS'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRVRS.construct_without_init()
    cls._ptr = CPPXRVRSWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRVRS.construct_without_init()
    cls._ptr = CPPXRVRSWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def vrs_min_radius(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_vrs_min_radius()
    return _ret
  @vrs_min_radius.setter
  def vrs_min_radius(self,  value:'float'):
    self.set_vrs_min_radius(value)
  @property
  def vrs_strength(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_vrs_strength()
    return _ret
  @vrs_strength.setter
  def vrs_strength(self,  value:'float'):
    self.set_vrs_strength(value)
  @property
  def vrs_render_region(self) -> typing.Union['Rect2i']:
    r''''''
    _ret = self. get_vrs_render_region()
    return _ret
  @vrs_render_region.setter
  def vrs_render_region(self,  value:'Rect2i'):
    self.set_vrs_render_region(value)
  @functools.native_method
  def get_vrs_min_radius(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(49,tuple([]))

    return _ret


  @functools.native_method
  def set_vrs_min_radius(self, radius:'float'   ) -> None:
    r''''''

    assert isinstance(radius, (int, float)), 'radius must be int or float'

    self.py__vrs_min_radius = radius






    self._ptr.call_with_return(50,tuple([radius]))

  @functools.native_method
  def get_vrs_strength(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(51,tuple([]))

    return _ret


  @functools.native_method
  def set_vrs_strength(self, strength:'float'   ) -> None:
    r''''''

    assert isinstance(strength, (int, float)), 'strength must be int or float'

    self.py__vrs_strength = strength






    self._ptr.call_with_return(52,tuple([strength]))

  @functools.native_method
  def get_vrs_render_region(self) -> typing.Union['Rect2i']:
    r''''''




    _ret = Rect2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))

    return _ret


  @functools.native_method
  def set_vrs_render_region(self, render_region:'Rect2i'   ) -> None:
    r''''''

    assert(not render_region is None)
    assert isinstance(render_region, Rect2i), 'render_region must be Rect2i'

    self.py__vrs_render_region = render_region






    self._ptr.call_with_return(54,tuple([render_region._ptr]))

  @functools.native_method
  def make_vrs_texture(self, target_size:'Vector2'   , eye_foci:'PackedVector2Array'   ) -> typing.Union['RID']:
    r'''
				Generates the VRS texture based on a render `target_size` adjusted by our VRS tile size. For each eyes focal point passed in `eye_foci` a layer is created. Focal point should be in NDC.
				The result will be cached, requesting a VRS texture with unchanged parameters and settings will return the cached RID.
			'''

    assert(not target_size is None)
    assert isinstance(target_size, Vector2), 'target_size must be Vector2'
    assert(not eye_foci is None)
    assert isinstance(eye_foci, PackedVector2Array), 'eye_foci must be PackedVector2Array'







    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([target_size._ptr, eye_foci._ptr]))
    return _ret



register_cast_function('XRVRS', XRVRS.cast)
register_class('XRVRS', XRVRS)
