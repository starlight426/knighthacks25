# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.PrimitiveMesh as py4godot_primitivemesh 
from py4godot.wrappers.wrappers import CPPSphereMeshWrapper


class SphereMesh(py4godot_primitivemesh.PrimitiveMesh):
  r'''
		Class representing a spherical `PrimitiveMesh`.
	'''

  @staticmethod
  def constructor():
    class_ = SphereMesh.construct_without_init()
    class_._ptr = constructor(767,0, ())
    return class_
  @staticmethod
  def new():
    class_ = SphereMesh.construct_without_init()
    class_._ptr = constructor(767,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSphereMeshWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(767,0, ())


  def generate_wrapper(self):
    return CPPSphereMeshWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = SphereMesh.__new__(SphereMesh)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'SphereMesh'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = SphereMesh.construct_without_init()
    cls._ptr = CPPSphereMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = SphereMesh.construct_without_init()
    cls._ptr = CPPSphereMeshWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def radius(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_radius()
    return _ret
  @radius.setter
  def radius(self,  value:'float'):
    self.set_radius(value)
  @property
  def height(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'float'):
    self.set_height(value)
  @property
  def radial_segments(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_radial_segments()
    return _ret
  @radial_segments.setter
  def radial_segments(self,  value:'int'):
    self.set_radial_segments(value)
  @property
  def rings(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_rings()
    return _ret
  @rings.setter
  def rings(self,  value:'int'):
    self.set_rings(value)
  @property
  def is_hemisphere(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_is_hemisphere()
    return _ret
  @is_hemisphere.setter
  def is_hemisphere(self,  value:'bool'):
    self.set_is_hemisphere(value)
  @functools.native_method
  def set_radius(self, radius:'float'   ) -> None:
    r''''''

    assert isinstance(radius, (int, float)), 'radius must be int or float'

    self.py__radius = radius






    self._ptr.call_with_return(118,tuple([radius]))

  @functools.native_method
  def get_radius(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(119,tuple([]))

    return _ret


  @functools.native_method
  def set_height(self, height:'float'   ) -> None:
    r''''''

    assert isinstance(height, (int, float)), 'height must be int or float'

    self.py__height = height






    self._ptr.call_with_return(120,tuple([height]))

  @functools.native_method
  def get_height(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(121,tuple([]))

    return _ret


  @functools.native_method
  def set_radial_segments(self, radial_segments:'int'   ) -> None:
    r''''''

    assert isinstance(radial_segments, (int, float)), 'radial_segments must be int or float'

    self.py__radial_segments = radial_segments






    self._ptr.call_with_return(122,tuple([radial_segments]))

  @functools.native_method
  def get_radial_segments(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(123,tuple([]))

    return _ret


  @functools.native_method
  def set_rings(self, rings:'int'   ) -> None:
    r''''''

    assert isinstance(rings, (int, float)), 'rings must be int or float'

    self.py__rings = rings






    self._ptr.call_with_return(124,tuple([rings]))

  @functools.native_method
  def get_rings(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(125,tuple([]))

    return _ret


  @functools.native_method
  def set_is_hemisphere(self, is_hemisphere:'bool'   ) -> None:
    r''''''

    assert isinstance(is_hemisphere, bool), 'is_hemisphere must be bool'

    self.py__is_hemisphere = is_hemisphere






    self._ptr.call_with_return(126,tuple([is_hemisphere]))

  @functools.native_method
  def get_is_hemisphere(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(127,tuple([]))

    return _ret



register_cast_function('SphereMesh', SphereMesh.cast)
register_class('SphereMesh', SphereMesh)
