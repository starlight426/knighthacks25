# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderSceneDataRD as py4godot_renderscenedatard 
  import py4godot.classes.RenderSceneBuffersRD as py4godot_renderscenebuffersrd 
  import py4godot.classes.RenderSceneBuffersExtension as py4godot_renderscenebuffersextension 
  import py4godot.classes.RenderSceneData as py4godot_renderscenedata 
  import py4godot.classes.RenderSceneDataExtension as py4godot_renderscenedataextension 
  import py4godot.classes.RenderSceneBuffers as py4godot_renderscenebuffers 
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPRenderDataWrapper


class RenderData(py4godot_object.Object):
  r'''
		Abstract render data object, exists for the duration of rendering a single viewport.
		**Note:** This is an internal rendering server object, do not instantiate this from script.
	'''

  @staticmethod
  def constructor():
    class_ = RenderData.construct_without_init()
    class_._ptr = constructor(673,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RenderData.construct_without_init()
    class_._ptr = constructor(673,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRenderDataWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(673,0, ())


  def generate_wrapper(self):
    return CPPRenderDataWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RenderData.__new__(RenderData)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RenderData'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderData.construct_without_init()
    cls._ptr = CPPRenderDataWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RenderData.construct_without_init()
    cls._ptr = CPPRenderDataWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_render_scene_buffers(self) -> typing.Union['py4godot_renderscenebuffersextension.RenderSceneBuffersExtension','py4godot_renderscenebuffersrd.RenderSceneBuffersRD','py4godot_renderscenebuffers.RenderSceneBuffers']:
    r'''
				Returns the `RenderSceneBuffers` object managing the scene buffers for rendering this viewport.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: RenderSceneBuffers
    _ret._ptr = self._ptr.call_with_return(49,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_render_scene_data(self) -> typing.Union['py4godot_renderscenedata.RenderSceneData','py4godot_renderscenedatard.RenderSceneDataRD','py4godot_renderscenedataextension.RenderSceneDataExtension']:
    r'''
				Returns the `RenderSceneData` object managing this frames scene data.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: RenderSceneData
    _ret._ptr = self._ptr.call_with_return(50,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_environment(self) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the environment object in the `RenderingServer` being used to render this viewport.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(51,tuple([]))
    return _ret


  @functools.native_method
  def get_camera_attributes(self) -> typing.Union['RID']:
    r'''
				Returns the `RID` of the camera attributes object in the `RenderingServer` being used to render this viewport.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(52,tuple([]))
    return _ret



register_cast_function('RenderData', RenderData.cast)
register_class('RenderData', RenderData)
