# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPRefCountedWrapper


class RefCounted(py4godot_object.Object):
  r'''
		Base class for any object that keeps a reference count. `Resource` and many other helper objects inherit this class.
		Unlike other `Object` types, `RefCounted`s keep an internal reference counter so that they are automatically released when no longer in use, and only then. `RefCounted`s therefore do not need to be freed manually with `Object.free`.
		`RefCounted` instances caught in a cyclic reference will **not** be freed automatically. For example, if a node holds a reference to instance `A`, which directly or indirectly holds a reference back to `A`, `A`'s reference count will be 2. Destruction of the node will leave `A` dangling with a reference count of 1, and there will be a memory leak. To prevent this, one of the references in the cycle can be made weak with `@GlobalScope.weakref`.
		In the vast majority of use cases, instantiating and using `RefCounted`-derived types is all you need to do. The methods provided in this class are only for advanced users, and can cause issues if misused.
		**Note:** In C#, reference-counted objects will not be freed instantly after they are no longer in use. Instead, garbage collection will run periodically and will free reference-counted objects that are no longer in use. This means that unused ones will remain in memory for a while before being removed.
	'''

  @staticmethod
  def constructor():
    class_ = RefCounted.construct_without_init()
    class_._ptr = constructor(666,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RefCounted.construct_without_init()
    class_._ptr = constructor(666,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRefCountedWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(666,0, ())


  def generate_wrapper(self):
    return CPPRefCountedWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RefCounted.__new__(RefCounted)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RefCounted'

  def __del__(self):
    if self.casted_from is None:
      self._ptr.call_with_return(53, ())
      self._ptr = None
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RefCounted.construct_without_init()
    cls._ptr = CPPRefCountedWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RefCounted.construct_without_init()
    cls._ptr = CPPRefCountedWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def init_ref(self) -> typing.Union[bool]:
    r'''
				Initializes the internal reference counter. Use this only if you really know what you are doing.
				Returns whether the initialization was successful.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(49,tuple([]))
    return _ret


  @functools.native_method
  def reference(self) -> typing.Union[bool]:
    r'''
				Increments the internal reference counter. Use this only if you really know what you are doing.
				Returns `true` if the increment was successful, `false` otherwise.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(50,tuple([]))
    return _ret


  @functools.native_method
  def unreference(self) -> typing.Union[bool]:
    r'''
				Decrements the internal reference counter. Use this only if you really know what you are doing.
				Returns `true` if the object should be freed after the decrement, `false` otherwise.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(51,tuple([]))
    return _ret


  @functools.native_method
  def get_reference_count(self) -> typing.Union[int]:
    r'''
				Returns the current reference count.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(52,tuple([]))
    return _ret



register_cast_function('RefCounted', RefCounted.cast)
register_class('RefCounted', RefCounted)
