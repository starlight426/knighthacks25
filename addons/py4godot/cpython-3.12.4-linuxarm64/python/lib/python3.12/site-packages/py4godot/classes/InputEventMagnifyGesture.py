# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.InputEventGesture as py4godot_inputeventgesture 
from py4godot.wrappers.wrappers import CPPInputEventMagnifyGestureWrapper


class InputEventMagnifyGesture(py4godot_inputeventgesture.InputEventGesture):
  r'''
		Stores the factor of a magnifying touch gesture. This is usually performed when the user pinches the touch screen and used for zooming in/out.
		**Note:** On Android, this requires the `ProjectSettings.input_devices/pointing/android/enable_pan_and_scale_gestures` project setting to be enabled.
	'''

  @staticmethod
  def constructor():
    class_ = InputEventMagnifyGesture.construct_without_init()
    class_._ptr = constructor(421,0, ())
    return class_
  @staticmethod
  def new():
    class_ = InputEventMagnifyGesture.construct_without_init()
    class_._ptr = constructor(421,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPInputEventMagnifyGestureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(421,0, ())


  def generate_wrapper(self):
    return CPPInputEventMagnifyGestureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = InputEventMagnifyGesture.__new__(InputEventMagnifyGesture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'InputEventMagnifyGesture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventMagnifyGesture.construct_without_init()
    cls._ptr = CPPInputEventMagnifyGestureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventMagnifyGesture.construct_without_init()
    cls._ptr = CPPInputEventMagnifyGestureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def factor(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_factor()
    return _ret
  @factor.setter
  def factor(self,  value:'float'):
    self.set_factor(value)
  @functools.native_method
  def set_factor(self, factor:'float'   ) -> None:
    r''''''

    assert isinstance(factor, (int, float)), 'factor must be int or float'

    self.py__factor = factor






    self._ptr.call_with_return(108,tuple([factor]))

  @functools.native_method
  def get_factor(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(109,tuple([]))

    return _ret



register_cast_function('InputEventMagnifyGesture', InputEventMagnifyGesture.cast)
register_class('InputEventMagnifyGesture', InputEventMagnifyGesture)
