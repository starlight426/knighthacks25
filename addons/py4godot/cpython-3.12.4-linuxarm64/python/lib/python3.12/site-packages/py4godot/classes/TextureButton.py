# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.BitMap as py4godot_bitmap 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.BaseButton as py4godot_basebutton 
from py4godot.wrappers.wrappers import CPPTextureButtonWrapper

class StretchMode:
  STRETCH_SCALE = 0
  STRETCH_TILE = 1
  STRETCH_KEEP = 2
  STRETCH_KEEP_CENTERED = 3
  STRETCH_KEEP_ASPECT = 4
  STRETCH_KEEP_ASPECT_CENTERED = 5
  STRETCH_KEEP_ASPECT_COVERED = 6


class TextureButton(py4godot_basebutton.BaseButton):
  r'''
		`TextureButton` has the same functionality as `Button`, except it uses sprites instead of Godot's `Theme` resource. It is faster to create, but it doesn't support localization like more complex `Control`s.
		See also `BaseButton` which contains common properties and methods associated with this node.
		**Note:** Setting a texture for the "normal" state (`texture_normal`) is recommended. If `texture_normal` is not set, the `TextureButton` will still receive input events and be clickable, but the user will not be able to see it unless they activate another one of its states with a texture assigned (e.g., hover over it to show `texture_hover`).
	'''

  @staticmethod
  def constructor():
    class_ = TextureButton.construct_without_init()
    class_._ptr = constructor(824,0, ())
    return class_
  @staticmethod
  def new():
    class_ = TextureButton.construct_without_init()
    class_._ptr = constructor(824,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPTextureButtonWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(824,0, ())


  def generate_wrapper(self):
    return CPPTextureButtonWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = TextureButton.__new__(TextureButton)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'TextureButton'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextureButton.construct_without_init()
    cls._ptr = CPPTextureButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = TextureButton.construct_without_init()
    cls._ptr = CPPTextureButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture_normal(self) -> typing.Any:
    r''''''
    _ret = self. get_texture_normal()
    return _ret
  @texture_normal.setter
  def texture_normal(self,  value:'py4godot_object.Object'):
    self.set_texture_normal(value)
  @property
  def texture_pressed(self) -> typing.Any:
    r''''''
    _ret = self. get_texture_pressed()
    return _ret
  @texture_pressed.setter
  def texture_pressed(self,  value:'py4godot_object.Object'):
    self.set_texture_pressed(value)
  @property
  def texture_hover(self) -> typing.Any:
    r''''''
    _ret = self. get_texture_hover()
    return _ret
  @texture_hover.setter
  def texture_hover(self,  value:'py4godot_object.Object'):
    self.set_texture_hover(value)
  @property
  def texture_disabled(self) -> typing.Any:
    r''''''
    _ret = self. get_texture_disabled()
    return _ret
  @texture_disabled.setter
  def texture_disabled(self,  value:'py4godot_object.Object'):
    self.set_texture_disabled(value)
  @property
  def texture_focused(self) -> typing.Any:
    r''''''
    _ret = self. get_texture_focused()
    return _ret
  @texture_focused.setter
  def texture_focused(self,  value:'py4godot_object.Object'):
    self.set_texture_focused(value)
  @property
  def texture_click_mask(self) -> typing.Union['py4godot_bitmap.BitMap']:
    r''''''
    _ret = self. get_click_mask()
    return _ret
  @texture_click_mask.setter
  def texture_click_mask(self,  value:'py4godot_object.Object'):
    self.set_click_mask(value)
  @property
  def ignore_texture_size(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_ignore_texture_size()
    return _ret
  @ignore_texture_size.setter
  def ignore_texture_size(self,  value:'bool'):
    self.set_ignore_texture_size(value)
  @property
  def stretch_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stretch_mode()
    return _ret
  @stretch_mode.setter
  def stretch_mode(self,  value:'int'):
    self.set_stretch_mode(value)
  @property
  def flip_h(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_flipped_h()
    return _ret
  @flip_h.setter
  def flip_h(self,  value:'bool'):
    self.set_flip_h(value)
  @property
  def flip_v(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_flipped_v()
    return _ret
  @flip_v.setter
  def flip_v(self,  value:'bool'):
    self.set_flip_v(value)
  @functools.native_method
  def set_texture_normal(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture_normal = texture






    self._ptr.call_with_return(458,tuple([texture._ptr]))

  @functools.native_method
  def set_texture_pressed(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture_pressed = texture






    self._ptr.call_with_return(459,tuple([texture._ptr]))

  @functools.native_method
  def set_texture_hover(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture_hover = texture






    self._ptr.call_with_return(460,tuple([texture._ptr]))

  @functools.native_method
  def set_texture_disabled(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture_disabled = texture






    self._ptr.call_with_return(461,tuple([texture._ptr]))

  @functools.native_method
  def set_texture_focused(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture_focused = texture






    self._ptr.call_with_return(462,tuple([texture._ptr]))

  @functools.native_method
  def set_click_mask(self, mask:'py4godot_bitmap.BitMap'   ) -> None:
    r''''''

    assert(not mask is None)
    assert isinstance(mask, get_class('BitMap')), 'mask must be BitMap'

    self.py__texture_click_mask = mask






    self._ptr.call_with_return(463,tuple([mask._ptr]))

  @functools.native_method
  def set_ignore_texture_size(self, ignore:'bool'   ) -> None:
    r''''''

    assert isinstance(ignore, bool), 'ignore must be bool'

    self.py__ignore_texture_size = ignore






    self._ptr.call_with_return(464,tuple([ignore]))

  @functools.native_method
  def set_stretch_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__stretch_mode = mode






    self._ptr.call_with_return(465,tuple([mode]))

  @functools.native_method
  def set_flip_h(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__flip_h = enable






    self._ptr.call_with_return(466,tuple([enable]))

  @functools.native_method
  def is_flipped_h(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(467,tuple([]))

    return _ret


  @functools.native_method
  def set_flip_v(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__flip_v = enable






    self._ptr.call_with_return(468,tuple([enable]))

  @functools.native_method
  def is_flipped_v(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(469,tuple([]))

    return _ret


  @functools.native_method
  def get_texture_normal(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(470,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_texture_pressed(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(471,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_texture_hover(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(472,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_texture_disabled(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(473,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_texture_focused(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(474,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_click_mask(self) -> typing.Union['py4godot_bitmap.BitMap']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: BitMap
    _ret._ptr = self._ptr.call_with_return(475,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_ignore_texture_size(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(476,tuple([]))

    return _ret


  @functools.native_method
  def get_stretch_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(477,tuple([]))

    return _ret



register_cast_function('TextureButton', TextureButton.cast)
register_class('TextureButton', TextureButton)
