# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPOccluderPolygon2DWrapper

class CullMode:
  CULL_DISABLED = 0
  CULL_CLOCKWISE = 1
  CULL_COUNTER_CLOCKWISE = 2


class OccluderPolygon2D(py4godot_resource.Resource):
  r'''
		Editor facility that helps you draw a 2D polygon used as resource for `LightOccluder2D`.
	'''

  @staticmethod
  def constructor():
    class_ = OccluderPolygon2D.construct_without_init()
    class_._ptr = constructor(526,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OccluderPolygon2D.construct_without_init()
    class_._ptr = constructor(526,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOccluderPolygon2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(526,0, ())


  def generate_wrapper(self):
    return CPPOccluderPolygon2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OccluderPolygon2D.__new__(OccluderPolygon2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OccluderPolygon2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OccluderPolygon2D.construct_without_init()
    cls._ptr = CPPOccluderPolygon2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OccluderPolygon2D.construct_without_init()
    cls._ptr = CPPOccluderPolygon2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def closed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_closed()
    return _ret
  @closed.setter
  def closed(self,  value:'bool'):
    self.set_closed(value)
  @property
  def cull_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_cull_mode()
    return _ret
  @cull_mode.setter
  def cull_mode(self,  value:'int'):
    self.set_cull_mode(value)
  @property
  def polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''
    _ret = self. get_polygon()
    return _ret
  @polygon.setter
  def polygon(self,  value:'PackedVector2Array'):
    self.set_polygon(value)
  @functools.native_method
  def set_closed(self, closed:'bool'   ) -> None:
    r''''''

    assert isinstance(closed, bool), 'closed must be bool'

    self.py__closed = closed






    self._ptr.call_with_return(77,tuple([closed]))

  @functools.native_method
  def is_closed(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_cull_mode(self, cull_mode:'int'  ) -> None:
    r''''''

    assert isinstance(cull_mode, (int, float)), 'cull_mode must be int or float'

    self.py__cull_mode = cull_mode






    self._ptr.call_with_return(79,tuple([cull_mode]))

  @functools.native_method
  def get_cull_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_polygon(self, polygon:'PackedVector2Array'   ) -> None:
    r''''''

    assert(not polygon is None)
    assert isinstance(polygon, PackedVector2Array), 'polygon must be PackedVector2Array'

    self.py__polygon = polygon






    self._ptr.call_with_return(81,tuple([polygon._ptr]))

  @functools.native_method
  def get_polygon(self) -> typing.Union['PackedVector2Array']:
    r''''''




    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return _ret



register_cast_function('OccluderPolygon2D', OccluderPolygon2D.cast)
register_class('OccluderPolygon2D', OccluderPolygon2D)
