# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.XRControllerTracker as py4godot_xrcontrollertracker 
import py4godot.classes.XRInterface as py4godot_xrinterface 
from py4godot.wrappers.wrappers import CPPWebXRInterfaceWrapper

class TargetRayMode:
  TARGET_RAY_MODE_UNKNOWN = 0
  TARGET_RAY_MODE_GAZE = 1
  TARGET_RAY_MODE_TRACKED_POINTER = 2
  TARGET_RAY_MODE_SCREEN = 3


class WebXRInterface(py4godot_xrinterface.XRInterface):
  r''''''

  @staticmethod
  def constructor():
    class_ = WebXRInterface.construct_without_init()
    class_._ptr = constructor(1001,0, ())
    return class_
  @staticmethod
  def new():
    class_ = WebXRInterface.construct_without_init()
    class_._ptr = constructor(1001,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWebXRInterfaceWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1001,0, ())


  def generate_wrapper(self):
    return CPPWebXRInterfaceWrapper()
  def init_signals(self):
    super().init_signals()
    session_supported_name = utils.py_string_to_string_name("session_supported")
    self.session_supported = signals.BuiltinSignal(self, session_supported_name)
    session_started_name = utils.py_string_to_string_name("session_started")
    self.session_started = signals.BuiltinSignal(self, session_started_name)
    session_ended_name = utils.py_string_to_string_name("session_ended")
    self.session_ended = signals.BuiltinSignal(self, session_ended_name)
    session_failed_name = utils.py_string_to_string_name("session_failed")
    self.session_failed = signals.BuiltinSignal(self, session_failed_name)
    selectstart_name = utils.py_string_to_string_name("selectstart")
    self.selectstart = signals.BuiltinSignal(self, selectstart_name)
    select_name = utils.py_string_to_string_name("select")
    self.select = signals.BuiltinSignal(self, select_name)
    selectend_name = utils.py_string_to_string_name("selectend")
    self.selectend = signals.BuiltinSignal(self, selectend_name)
    squeezestart_name = utils.py_string_to_string_name("squeezestart")
    self.squeezestart = signals.BuiltinSignal(self, squeezestart_name)
    squeeze_name = utils.py_string_to_string_name("squeeze")
    self.squeeze = signals.BuiltinSignal(self, squeeze_name)
    squeezeend_name = utils.py_string_to_string_name("squeezeend")
    self.squeezeend = signals.BuiltinSignal(self, squeezeend_name)
    visibility_state_changed_name = utils.py_string_to_string_name("visibility_state_changed")
    self.visibility_state_changed = signals.BuiltinSignal(self, visibility_state_changed_name)
    reference_space_reset_name = utils.py_string_to_string_name("reference_space_reset")
    self.reference_space_reset = signals.BuiltinSignal(self, reference_space_reset_name)
    display_refresh_rate_changed_name = utils.py_string_to_string_name("display_refresh_rate_changed")
    self.display_refresh_rate_changed = signals.BuiltinSignal(self, display_refresh_rate_changed_name)

  @staticmethod
  def construct_without_init():
    cls = WebXRInterface.__new__(WebXRInterface)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'WebXRInterface'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebXRInterface.construct_without_init()
    cls._ptr = CPPWebXRInterfaceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = WebXRInterface.construct_without_init()
    cls._ptr = CPPWebXRInterfaceWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def session_mode(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_session_mode()
    return _ret
  @session_mode.setter
  def session_mode(self,  value:'str'):
    self.set_session_mode(value)
  @property
  def required_features(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_required_features()
    return _ret
  @required_features.setter
  def required_features(self,  value:'str'):
    self.set_required_features(value)
  @property
  def optional_features(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_optional_features()
    return _ret
  @optional_features.setter
  def optional_features(self,  value:'str'):
    self.set_optional_features(value)
  @property
  def requested_reference_space_types(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_requested_reference_space_types()
    return _ret
  @requested_reference_space_types.setter
  def requested_reference_space_types(self,  value:'str'):
    self.set_requested_reference_space_types(value)
  @property
  def reference_space_type(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_reference_space_type()
    return _ret
  @property
  def enabled_features(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_enabled_features()
    return _ret
  @property
  def visibility_state(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_visibility_state()
    return _ret
  @functools.native_method
  def is_session_supported(self, session_mode:'str'   ) -> None:
    r''''''

    assert(not session_mode is None)
    assert isinstance(session_mode, (str, String)), 'session_mode must be str or String'




    assert(isinstance(session_mode, (str, String)))
    py_string_session_mode = session_mode if isinstance(session_mode, StringName) else c_utils.py_string_to_string(session_mode)

    self._ptr.call_with_return(81,tuple([py_string_session_mode._ptr]))

  @functools.native_method
  def set_session_mode(self, session_mode:'str'   ) -> None:
    r''''''

    assert(not session_mode is None)
    assert isinstance(session_mode, (str, String)), 'session_mode must be str or String'

    self.py__session_mode = session_mode



    assert(isinstance(session_mode, (str, String)))
    py_string_session_mode = session_mode if isinstance(session_mode, StringName) else c_utils.py_string_to_string(session_mode)

    py__string_session_mode = utils.py_string_to_string(session_mode)
    py__string_session_mode.shouldBeDeleted = False


    self._ptr.call_with_return(82,tuple([py__string_session_mode._ptr]))

  @functools.native_method
  def get_session_mode(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_required_features(self, required_features:'str'   ) -> None:
    r''''''

    assert(not required_features is None)
    assert isinstance(required_features, (str, String)), 'required_features must be str or String'

    self.py__required_features = required_features



    assert(isinstance(required_features, (str, String)))
    py_string_required_features = required_features if isinstance(required_features, StringName) else c_utils.py_string_to_string(required_features)

    py__string_required_features = utils.py_string_to_string(required_features)
    py__string_required_features.shouldBeDeleted = False


    self._ptr.call_with_return(84,tuple([py__string_required_features._ptr]))

  @functools.native_method
  def get_required_features(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_optional_features(self, optional_features:'str'   ) -> None:
    r''''''

    assert(not optional_features is None)
    assert isinstance(optional_features, (str, String)), 'optional_features must be str or String'

    self.py__optional_features = optional_features



    assert(isinstance(optional_features, (str, String)))
    py_string_optional_features = optional_features if isinstance(optional_features, StringName) else c_utils.py_string_to_string(optional_features)

    py__string_optional_features = utils.py_string_to_string(optional_features)
    py__string_optional_features.shouldBeDeleted = False


    self._ptr.call_with_return(86,tuple([py__string_optional_features._ptr]))

  @functools.native_method
  def get_optional_features(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(87,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_reference_space_type(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(88,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_enabled_features(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(89,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_requested_reference_space_types(self, requested_reference_space_types:'str'   ) -> None:
    r''''''

    assert(not requested_reference_space_types is None)
    assert isinstance(requested_reference_space_types, (str, String)), 'requested_reference_space_types must be str or String'

    self.py__requested_reference_space_types = requested_reference_space_types



    assert(isinstance(requested_reference_space_types, (str, String)))
    py_string_requested_reference_space_types = requested_reference_space_types if isinstance(requested_reference_space_types, StringName) else c_utils.py_string_to_string(requested_reference_space_types)

    py__string_requested_reference_space_types = utils.py_string_to_string(requested_reference_space_types)
    py__string_requested_reference_space_types.shouldBeDeleted = False


    self._ptr.call_with_return(90,tuple([py__string_requested_reference_space_types._ptr]))

  @functools.native_method
  def get_requested_reference_space_types(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def is_input_source_active(self, input_source_id:'int'   ) -> typing.Union[bool]:
    r''''''

    assert isinstance(input_source_id, (int, float)), 'input_source_id must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([input_source_id]))
    return _ret


  @functools.native_method
  def get_input_source_tracker(self, input_source_id:'int'   ) -> typing.Union['py4godot_xrcontrollertracker.XRControllerTracker']:
    r''''''

    assert isinstance(input_source_id, (int, float)), 'input_source_id must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: XRControllerTracker
    _ret._ptr = self._ptr.call_with_return(93,tuple([input_source_id]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_input_source_target_ray_mode(self, input_source_id:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(input_source_id, (int, float)), 'input_source_id must be int or float'






    _ret:int
    _ret = self._ptr.call_with_return(94,tuple([input_source_id]))
    return _ret


  @functools.native_method
  def get_visibility_state(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(95,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_display_refresh_rate(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))
    return _ret


  @functools.native_method
  def set_display_refresh_rate(self, refresh_rate:'float'   ) -> None:
    r''''''

    assert isinstance(refresh_rate, (int, float)), 'refresh_rate must be int or float'






    self._ptr.call_with_return(97,tuple([refresh_rate]))

  @functools.native_method
  def get_available_display_refresh_rates(self) -> typing.Union['Array']:
    r''''''




    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(98,tuple([]))
    return _ret



register_cast_function('WebXRInterface', WebXRInterface.cast)
register_class('WebXRInterface', WebXRInterface)
