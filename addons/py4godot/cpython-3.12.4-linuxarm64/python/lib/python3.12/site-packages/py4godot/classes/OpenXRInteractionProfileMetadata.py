# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRAction as py4godot_openxraction 
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPOpenXRInteractionProfileMetadataWrapper


class OpenXRInteractionProfileMetadata(py4godot_object.Object):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRInteractionProfileMetadata.construct_without_init()
    class_._ptr = constructor(556,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRInteractionProfileMetadata.construct_without_init()
    class_._ptr = constructor(556,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRInteractionProfileMetadataWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(556,0, ())


  def generate_wrapper(self):
    return CPPOpenXRInteractionProfileMetadataWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRInteractionProfileMetadata.__new__(OpenXRInteractionProfileMetadata)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRInteractionProfileMetadata'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRInteractionProfileMetadata.construct_without_init()
    cls._ptr = CPPOpenXRInteractionProfileMetadataWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRInteractionProfileMetadata.construct_without_init()
    cls._ptr = CPPOpenXRInteractionProfileMetadataWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def register_profile_rename(self, old_name:'str'   , new_name:'str'   ) -> None:
    r''''''

    assert(not old_name is None)
    assert isinstance(old_name, (str, String)), 'old_name must be str or String'
    assert(not new_name is None)
    assert isinstance(new_name, (str, String)), 'new_name must be str or String'




    assert(isinstance(old_name, (str, String)))
    py_string_old_name = old_name if isinstance(old_name, StringName) else c_utils.py_string_to_string(old_name)
    assert(isinstance(new_name, (str, String)))
    py_string_new_name = new_name if isinstance(new_name, StringName) else c_utils.py_string_to_string(new_name)

    self._ptr.call_with_return(49,tuple([py_string_old_name._ptr, py_string_new_name._ptr]))

  @functools.native_method
  def register_top_level_path(self, display_name:'str'   , openxr_path:'str'   , openxr_extension_name:'str'   ) -> None:
    r''''''

    assert(not display_name is None)
    assert isinstance(display_name, (str, String)), 'display_name must be str or String'
    assert(not openxr_path is None)
    assert isinstance(openxr_path, (str, String)), 'openxr_path must be str or String'
    assert(not openxr_extension_name is None)
    assert isinstance(openxr_extension_name, (str, String)), 'openxr_extension_name must be str or String'




    assert(isinstance(display_name, (str, String)))
    py_string_display_name = display_name if isinstance(display_name, StringName) else c_utils.py_string_to_string(display_name)
    assert(isinstance(openxr_path, (str, String)))
    py_string_openxr_path = openxr_path if isinstance(openxr_path, StringName) else c_utils.py_string_to_string(openxr_path)
    assert(isinstance(openxr_extension_name, (str, String)))
    py_string_openxr_extension_name = openxr_extension_name if isinstance(openxr_extension_name, StringName) else c_utils.py_string_to_string(openxr_extension_name)

    self._ptr.call_with_return(50,tuple([py_string_display_name._ptr, py_string_openxr_path._ptr, py_string_openxr_extension_name._ptr]))

  @functools.native_method
  def register_interaction_profile(self, display_name:'str'   , openxr_path:'str'   , openxr_extension_name:'str'   ) -> None:
    r''''''

    assert(not display_name is None)
    assert isinstance(display_name, (str, String)), 'display_name must be str or String'
    assert(not openxr_path is None)
    assert isinstance(openxr_path, (str, String)), 'openxr_path must be str or String'
    assert(not openxr_extension_name is None)
    assert isinstance(openxr_extension_name, (str, String)), 'openxr_extension_name must be str or String'




    assert(isinstance(display_name, (str, String)))
    py_string_display_name = display_name if isinstance(display_name, StringName) else c_utils.py_string_to_string(display_name)
    assert(isinstance(openxr_path, (str, String)))
    py_string_openxr_path = openxr_path if isinstance(openxr_path, StringName) else c_utils.py_string_to_string(openxr_path)
    assert(isinstance(openxr_extension_name, (str, String)))
    py_string_openxr_extension_name = openxr_extension_name if isinstance(openxr_extension_name, StringName) else c_utils.py_string_to_string(openxr_extension_name)

    self._ptr.call_with_return(51,tuple([py_string_display_name._ptr, py_string_openxr_path._ptr, py_string_openxr_extension_name._ptr]))

  @functools.native_method
  def register_io_path(self, interaction_profile:'str'   , display_name:'str'   , toplevel_path:'str'   , openxr_path:'str'   , openxr_extension_name:'str'   , action_type:'int'  ) -> None:
    r''''''

    assert(not interaction_profile is None)
    assert isinstance(interaction_profile, (str, String)), 'interaction_profile must be str or String'
    assert(not display_name is None)
    assert isinstance(display_name, (str, String)), 'display_name must be str or String'
    assert(not toplevel_path is None)
    assert isinstance(toplevel_path, (str, String)), 'toplevel_path must be str or String'
    assert(not openxr_path is None)
    assert isinstance(openxr_path, (str, String)), 'openxr_path must be str or String'
    assert(not openxr_extension_name is None)
    assert isinstance(openxr_extension_name, (str, String)), 'openxr_extension_name must be str or String'
    assert isinstance(action_type, (int, float)), 'action_type must be int or float'




    assert(isinstance(interaction_profile, (str, String)))
    py_string_interaction_profile = interaction_profile if isinstance(interaction_profile, StringName) else c_utils.py_string_to_string(interaction_profile)
    assert(isinstance(display_name, (str, String)))
    py_string_display_name = display_name if isinstance(display_name, StringName) else c_utils.py_string_to_string(display_name)
    assert(isinstance(toplevel_path, (str, String)))
    py_string_toplevel_path = toplevel_path if isinstance(toplevel_path, StringName) else c_utils.py_string_to_string(toplevel_path)
    assert(isinstance(openxr_path, (str, String)))
    py_string_openxr_path = openxr_path if isinstance(openxr_path, StringName) else c_utils.py_string_to_string(openxr_path)
    assert(isinstance(openxr_extension_name, (str, String)))
    py_string_openxr_extension_name = openxr_extension_name if isinstance(openxr_extension_name, StringName) else c_utils.py_string_to_string(openxr_extension_name)


    self._ptr.call_with_return(52,tuple([py_string_interaction_profile._ptr, py_string_display_name._ptr, py_string_toplevel_path._ptr, py_string_openxr_path._ptr, py_string_openxr_extension_name._ptr, action_type]))


register_cast_function('OpenXRInteractionProfileMetadata', OpenXRInteractionProfileMetadata.cast)
register_class('OpenXRInteractionProfileMetadata', OpenXRInteractionProfileMetadata)
