# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPPolygonPathFinderWrapper


class PolygonPathFinder(py4godot_resource.Resource):
  r'''
'''

  @staticmethod
  def constructor():
    class_ = PolygonPathFinder.construct_without_init()
    class_._ptr = constructor(632,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PolygonPathFinder.construct_without_init()
    class_._ptr = constructor(632,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPolygonPathFinderWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(632,0, ())


  def generate_wrapper(self):
    return CPPPolygonPathFinderWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PolygonPathFinder.__new__(PolygonPathFinder)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PolygonPathFinder'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PolygonPathFinder.construct_without_init()
    cls._ptr = CPPPolygonPathFinderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PolygonPathFinder.construct_without_init()
    cls._ptr = CPPPolygonPathFinderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def data(self) -> typing.Union['Dictionary']:
    r''''''
    _ret = self. _get_data()
    return _ret
  @data.setter
  def data(self,  value:'Dictionary'):
    self._set_data(value)
  @functools.native_method
  def setup(self, points:'PackedVector2Array'   , connections:'PackedInt32Array'   ) -> None:
    r'''
				Sets up `PolygonPathFinder` with an array of points that define the vertices of the polygon, and an array of indices that determine the edges of the polygon.
				The length of `connections` must be even, returns an error if odd.
				
				```gdscript
				var polygon_path_finder = PolygonPathFinder.new()
				var points = `Vector2(0.0, 0.0), Vector2(1.0, 0.0), Vector2(0.0, 1.0)`
				var connections = `0, 1, 1, 2, 2, 0`
				polygon_path_finder.setup(points, connections)
				```
				
				
			'''

    assert(not points is None)
    assert isinstance(points, PackedVector2Array), 'points must be PackedVector2Array'
    assert(not connections is None)
    assert isinstance(connections, PackedInt32Array), 'connections must be PackedInt32Array'







    self._ptr.call_with_return(77,tuple([points._ptr, connections._ptr]))

  @functools.native_method
  def find_path(self, from_:'Vector2'   , to:'Vector2'   ) -> typing.Union['PackedVector2Array']:
    r'''
'''

    assert(not from_ is None)
    assert isinstance(from_, Vector2), 'from_ must be Vector2'
    assert(not to is None)
    assert isinstance(to, Vector2), 'to must be Vector2'







    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([from_._ptr, to._ptr]))
    return _ret


  @functools.native_method
  def get_intersections(self, from_:'Vector2'   , to:'Vector2'   ) -> typing.Union['PackedVector2Array']:
    r'''
'''

    assert(not from_ is None)
    assert isinstance(from_, Vector2), 'from_ must be Vector2'
    assert(not to is None)
    assert isinstance(to, Vector2), 'to must be Vector2'







    _ret = PackedVector2Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([from_._ptr, to._ptr]))
    return _ret


  @functools.native_method
  def get_closest_point(self, point:'Vector2'   ) -> typing.Union['Vector2']:
    r'''
'''

    assert(not point is None)
    assert isinstance(point, Vector2), 'point must be Vector2'






    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(80,tuple([point._ptr]))
    return _ret


  @functools.native_method
  def is_point_inside(self, point:'Vector2'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if `point` falls inside the polygon area.
				
				```gdscript
				var polygon_path_finder = PolygonPathFinder.new()
				var points = `Vector2(0.0, 0.0), Vector2(1.0, 0.0), Vector2(0.0, 1.0)`
				var connections = `0, 1, 1, 2, 2, 0`
				polygon_path_finder.setup(points, connections)
				print(polygon_path_finder.is_point_inside(Vector2(0.2, 0.2))) # Prints true
				print(polygon_path_finder.is_point_inside(Vector2(1.0, 1.0))) # Prints false
				```
				
				
			'''

    assert(not point is None)
    assert isinstance(point, Vector2), 'point must be Vector2'






    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([point._ptr]))
    return _ret


  @functools.native_method
  def set_point_penalty(self, idx:'int'   , penalty:'float'   ) -> None:
    r'''
'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert isinstance(penalty, (int, float)), 'penalty must be int or float'







    self._ptr.call_with_return(82,tuple([idx, penalty]))

  @functools.native_method
  def get_point_penalty(self, idx:'int'   ) -> typing.Union[float]:
    r'''
'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([idx]))
    return _ret


  @functools.native_method
  def get_bounds(self) -> typing.Union['Rect2']:
    r'''
'''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([]))
    return _ret



register_cast_function('PolygonPathFinder', PolygonPathFinder.cast)
register_class('PolygonPathFinder', PolygonPathFinder)
