# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RenderingDevice as py4godot_renderingdevice 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPRDTextureViewWrapper


class RDTextureView(py4godot_refcounted.RefCounted):
  r'''
		This object is used by `RenderingDevice`.
	'''

  @staticmethod
  def constructor():
    class_ = RDTextureView.construct_without_init()
    class_._ptr = constructor(658,0, ())
    return class_
  @staticmethod
  def new():
    class_ = RDTextureView.construct_without_init()
    class_._ptr = constructor(658,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPRDTextureViewWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(658,0, ())


  def generate_wrapper(self):
    return CPPRDTextureViewWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = RDTextureView.__new__(RDTextureView)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'RDTextureView'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDTextureView.construct_without_init()
    cls._ptr = CPPRDTextureViewWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = RDTextureView.construct_without_init()
    cls._ptr = CPPRDTextureViewWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def format_override(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_format_override()
    return _ret
  @format_override.setter
  def format_override(self,  value:'int'):
    self.set_format_override(value)
  @property
  def swizzle_r(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_swizzle_r()
    return _ret
  @swizzle_r.setter
  def swizzle_r(self,  value:'int'):
    self.set_swizzle_r(value)
  @property
  def swizzle_g(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_swizzle_g()
    return _ret
  @swizzle_g.setter
  def swizzle_g(self,  value:'int'):
    self.set_swizzle_g(value)
  @property
  def swizzle_b(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_swizzle_b()
    return _ret
  @swizzle_b.setter
  def swizzle_b(self,  value:'int'):
    self.set_swizzle_b(value)
  @property
  def swizzle_a(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_swizzle_a()
    return _ret
  @swizzle_a.setter
  def swizzle_a(self,  value:'int'):
    self.set_swizzle_a(value)
  @functools.native_method
  def set_format_override(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__format_override = p_member






    self._ptr.call_with_return(53,tuple([p_member]))

  @functools.native_method
  def get_format_override(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_swizzle_r(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__swizzle_r = p_member






    self._ptr.call_with_return(55,tuple([p_member]))

  @functools.native_method
  def get_swizzle_r(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_swizzle_g(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__swizzle_g = p_member






    self._ptr.call_with_return(57,tuple([p_member]))

  @functools.native_method
  def get_swizzle_g(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_swizzle_b(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__swizzle_b = p_member






    self._ptr.call_with_return(59,tuple([p_member]))

  @functools.native_method
  def get_swizzle_b(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_swizzle_a(self, p_member:'int'  ) -> None:
    r''''''

    assert isinstance(p_member, (int, float)), 'p_member must be int or float'

    self.py__swizzle_a = p_member






    self._ptr.call_with_return(61,tuple([p_member]))

  @functools.native_method
  def get_swizzle_a(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret



register_cast_function('RDTextureView', RDTextureView.cast)
register_class('RDTextureView', RDTextureView)
