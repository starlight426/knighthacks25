# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.DirectionalLight2D as py4godot_directionallight2d 
  import py4godot.classes.BackBufferCopy as py4godot_backbuffercopy 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.DampedSpringJoint2D as py4godot_dampedspringjoint2d 
  import py4godot.classes.Light2D as py4godot_light2d 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.PhysicalBone2D as py4godot_physicalbone2d 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasGroup as py4godot_canvasgroup 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.Path2D as py4godot_path2d 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.RemoteTransform2D as py4godot_remotetransform2d 
  import py4godot.classes.MultiMeshInstance2D as py4godot_multimeshinstance2d 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CollisionPolygon2D as py4godot_collisionpolygon2d 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.CanvasItem as py4godot_canvasitem 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.PathFollow2D as py4godot_pathfollow2d 
  import py4godot.classes.Marker2D as py4godot_marker2d 
  import py4godot.classes.Node2D as py4godot_node2d 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.Line2D as py4godot_line2d 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.CharacterBody2D as py4godot_characterbody2d 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.VisibleOnScreenNotifier2D as py4godot_visibleonscreennotifier2d 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.NavigationLink2D as py4godot_navigationlink2d 
  import py4godot.classes.Skeleton2D as py4godot_skeleton2d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.Parallax2D as py4godot_parallax2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
  import py4godot.classes.PhysicsBody2D as py4godot_physicsbody2d 
  import py4godot.classes.Bone2D as py4godot_bone2d 
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.MeshInstance2D as py4godot_meshinstance2d 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.CPUParticles2D as py4godot_cpuparticles2d 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.Camera2D as py4godot_camera2d 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.StaticBody2D as py4godot_staticbody2d 
  import py4godot.classes.ShapeCast2D as py4godot_shapecast2d 
  import py4godot.classes.Sprite2D as py4godot_sprite2d 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.VisibleOnScreenEnabler2D as py4godot_visibleonscreenenabler2d 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.AudioStreamPlayer2D as py4godot_audiostreamplayer2d 
  import py4godot.classes.TileMapLayer as py4godot_tilemaplayer 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.AudioListener2D as py4godot_audiolistener2d 
  import py4godot.classes.CollisionObject2D as py4godot_collisionobject2d 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.Polygon2D as py4godot_polygon2d 
  import py4godot.classes.RayCast2D as py4godot_raycast2d 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.RigidBody2D as py4godot_rigidbody2d 
  import py4godot.classes.CanvasModulate as py4godot_canvasmodulate 
  import py4godot.classes.CollisionShape2D as py4godot_collisionshape2d 
  import py4godot.classes.NavigationObstacle2D as py4godot_navigationobstacle2d 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.LightOccluder2D as py4godot_lightoccluder2d 
  import py4godot.classes.TouchScreenButton as py4godot_touchscreenbutton 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.TileMap as py4godot_tilemap 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.ParallaxLayer as py4godot_parallaxlayer 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.NavigationRegion2D as py4godot_navigationregion2d 
  import py4godot.classes.AnimatableBody2D as py4godot_animatablebody2d 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.PinJoint2D as py4godot_pinjoint2d 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.PointLight2D as py4godot_pointlight2d 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.Area2D as py4godot_area2d 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.AnimatedSprite2D as py4godot_animatedsprite2d 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.Joint2D as py4godot_joint2d 
  import py4godot.classes.GrooveJoint2D as py4godot_groovejoint2d 
  import py4godot.classes.GPUParticles2D as py4godot_gpuparticles2d 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
import py4godot.classes.Texture2D as py4godot_texture2d 
from py4godot.wrappers.wrappers import CPPCanvasTextureWrapper


class CanvasTexture(py4godot_texture2d.Texture2D):
  r'''
		`CanvasTexture` is an alternative to `ImageTexture` for 2D rendering. It allows using normal maps and specular maps in any node that inherits from `CanvasItem`. `CanvasTexture` also allows overriding the texture's filter and repeat mode independently of the node's properties (or the project settings).
		**Note:** `CanvasTexture` cannot be used in 3D. It will not display correctly when applied to any `VisualInstance3D`, such as `Sprite3D` or `Decal`. For physically-based materials in 3D, use `BaseMaterial3D` instead.
	'''

  @staticmethod
  def constructor():
    class_ = CanvasTexture.construct_without_init()
    class_._ptr = constructor(201,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CanvasTexture.construct_without_init()
    class_._ptr = constructor(201,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCanvasTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(201,0, ())


  def generate_wrapper(self):
    return CPPCanvasTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CanvasTexture.__new__(CanvasTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CanvasTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CanvasTexture.construct_without_init()
    cls._ptr = CPPCanvasTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CanvasTexture.construct_without_init()
    cls._ptr = CPPCanvasTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def diffuse_texture(self) -> typing.Any:
    r''''''
    _ret = self. get_diffuse_texture()
    return _ret
  @diffuse_texture.setter
  def diffuse_texture(self,  value:'py4godot_object.Object'):
    self.set_diffuse_texture(value)
  @property
  def normal_texture(self) -> typing.Any:
    r''''''
    _ret = self. get_normal_texture()
    return _ret
  @normal_texture.setter
  def normal_texture(self,  value:'py4godot_object.Object'):
    self.set_normal_texture(value)
  @property
  def specular_texture(self) -> typing.Any:
    r''''''
    _ret = self. get_specular_texture()
    return _ret
  @specular_texture.setter
  def specular_texture(self,  value:'py4godot_object.Object'):
    self.set_specular_texture(value)
  @property
  def specular_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_specular_color()
    return _ret
  @specular_color.setter
  def specular_color(self,  value:'Color'):
    self.set_specular_color(value)
  @property
  def specular_shininess(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_specular_shininess()
    return _ret
  @specular_shininess.setter
  def specular_shininess(self,  value:'float'):
    self.set_specular_shininess(value)
  @property
  def texture_filter(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_filter()
    return _ret
  @texture_filter.setter
  def texture_filter(self,  value:'int'):
    self.set_texture_filter(value)
  @property
  def texture_repeat(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_texture_repeat()
    return _ret
  @texture_repeat.setter
  def texture_repeat(self,  value:'int'):
    self.set_texture_repeat(value)
  @functools.native_method
  def set_diffuse_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__diffuse_texture = texture






    self._ptr.call_with_return(93,tuple([texture._ptr]))

  @functools.native_method
  def get_diffuse_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(94,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_normal_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__normal_texture = texture






    self._ptr.call_with_return(95,tuple([texture._ptr]))

  @functools.native_method
  def get_normal_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(96,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_specular_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__specular_texture = texture






    self._ptr.call_with_return(97,tuple([texture._ptr]))

  @functools.native_method
  def get_specular_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(98,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_specular_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__specular_color = color






    self._ptr.call_with_return(99,tuple([color._ptr]))

  @functools.native_method
  def get_specular_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(100,tuple([]))

    return _ret


  @functools.native_method
  def set_specular_shininess(self, shininess:'float'   ) -> None:
    r''''''

    assert isinstance(shininess, (int, float)), 'shininess must be int or float'

    self.py__specular_shininess = shininess






    self._ptr.call_with_return(101,tuple([shininess]))

  @functools.native_method
  def get_specular_shininess(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(102,tuple([]))

    return _ret


  @functools.native_method
  def set_texture_filter(self, filter:'int'  ) -> None:
    r''''''

    assert isinstance(filter, (int, float)), 'filter must be int or float'

    self.py__texture_filter = filter






    self._ptr.call_with_return(103,tuple([filter]))

  @functools.native_method
  def get_texture_filter(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(104,tuple([]))

    return _ret


  @functools.native_method
  def set_texture_repeat(self, repeat:'int'  ) -> None:
    r''''''

    assert isinstance(repeat, (int, float)), 'repeat must be int or float'

    self.py__texture_repeat = repeat






    self._ptr.call_with_return(105,tuple([repeat]))

  @functools.native_method
  def get_texture_repeat(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(106,tuple([]))

    return _ret



register_cast_function('CanvasTexture', CanvasTexture.cast)
register_class('CanvasTexture', CanvasTexture)
