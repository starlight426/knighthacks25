# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Joint3D as py4godot_joint3d 
from py4godot.wrappers.wrappers import CPPConeTwistJoint3DWrapper

class Param:
  PARAM_SWING_SPAN = 0
  PARAM_TWIST_SPAN = 1
  PARAM_BIAS = 2
  PARAM_SOFTNESS = 3
  PARAM_RELAXATION = 4
  PARAM_MAX = 5


class ConeTwistJoint3D(py4godot_joint3d.Joint3D):
  r'''
		A physics joint that connects two 3D physics bodies in a way that simulates a ball-and-socket joint. The twist axis is initiated as the X axis of the `ConeTwistJoint3D`. Once the physics bodies swing, the twist axis is calculated as the middle of the X axes of the joint in the local space of the two physics bodies. Useful for limbs like shoulders and hips, lamps hanging off a ceiling, etc.
	'''

  @staticmethod
  def constructor():
    class_ = ConeTwistJoint3D.construct_without_init()
    class_._ptr = constructor(235,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ConeTwistJoint3D.construct_without_init()
    class_._ptr = constructor(235,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPConeTwistJoint3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(235,0, ())


  def generate_wrapper(self):
    return CPPConeTwistJoint3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ConeTwistJoint3D.__new__(ConeTwistJoint3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ConeTwistJoint3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConeTwistJoint3D.construct_without_init()
    cls._ptr = CPPConeTwistJoint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ConeTwistJoint3D.construct_without_init()
    cls._ptr = CPPConeTwistJoint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def swing_span(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(0)
    return _ret
  @swing_span.setter
  def swing_span(self,  value:'float'):
    self.set_param(value)
  @property
  def twist_span(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(1)
    return _ret
  @twist_span.setter
  def twist_span(self,  value:'float'):
    self.set_param(value)
  @property
  def bias(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(2)
    return _ret
  @bias.setter
  def bias(self,  value:'float'):
    self.set_param(value)
  @property
  def softness(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(3)
    return _ret
  @softness.setter
  def softness(self,  value:'float'):
    self.set_param(value)
  @property
  def relaxation(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(4)
    return _ret
  @relaxation.setter
  def relaxation(self,  value:'float'):
    self.set_param(value)
  @functools.native_method
  def set_param(self, param:'int'  , value:'float'   ) -> None:
    r'''
				Sets the value of the specified parameter.
			'''

    assert isinstance(param, (int, float)), 'param must be int or float'
    assert isinstance(value, (int, float)), 'value must be int or float'

    self.py__swing_span = param







    self._ptr.call_with_return(260,tuple([param, value]))

  @functools.native_method
  def get_param(self, param:'int'  ) -> typing.Union[float]:
    r'''
				Returns the value of the specified parameter.
			'''

    assert isinstance(param, (int, float)), 'param must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(261,tuple([param]))

    return _ret



register_cast_function('ConeTwistJoint3D', ConeTwistJoint3D.cast)
register_class('ConeTwistJoint3D', ConeTwistJoint3D)
