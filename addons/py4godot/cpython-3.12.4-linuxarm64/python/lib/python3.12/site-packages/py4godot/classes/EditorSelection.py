# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Node as py4godot_node 
  import py4godot.classes.NodeTypedArray as py4godot_nodetypedarray 
import py4godot.classes.Object as py4godot_object 
import py4godot.classes.NodeTypedArray as py4godot_nodetypedarray 
from py4godot.wrappers.wrappers import CPPEditorSelectionWrapper


class EditorSelection(py4godot_object.Object):
  r'''
		This object manages the SceneTree selection in the editor.
		**Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_selection`.
	'''

  @staticmethod
  def constructor():
    class_ = EditorSelection.construct_without_init()
    class_._ptr = constructor(311,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorSelection.construct_without_init()
    class_._ptr = constructor(311,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorSelectionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(311,0, ())


  def generate_wrapper(self):
    return CPPEditorSelectionWrapper()
  def init_signals(self):
    super().init_signals()
    selection_changed_name = utils.py_string_to_string_name("selection_changed")
    self.selection_changed = signals.BuiltinSignal(self, selection_changed_name)

  @staticmethod
  def construct_without_init():
    cls = EditorSelection.__new__(EditorSelection)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorSelection'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorSelection.construct_without_init()
    cls._ptr = CPPEditorSelectionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorSelection.construct_without_init()
    cls._ptr = CPPEditorSelectionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def clear(self) -> None:
    r'''
				Clear the selection.
			'''




    self._ptr.call_with_return(49,tuple([]))

  @functools.native_method
  def add_node(self, node:'py4godot_node.Node'   ) -> None:
    r'''
				Adds a node to the selection.
				**Note:** The newly selected node will not be automatically edited in the inspector. If you want to edit a node, use `EditorInterface.edit_node`.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'






    self._ptr.call_with_return(50,tuple([node._ptr]))

  @functools.native_method
  def remove_node(self, node:'py4godot_node.Node'   ) -> None:
    r'''
				Removes a node from the selection.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'






    self._ptr.call_with_return(51,tuple([node._ptr]))

  @functools.native_method
  def get_selected_nodes(self) -> typing.Union['py4godot_nodetypedarray.NodeTypedArray']:
    r'''
				Returns the list of selected nodes.
			'''




    _ret = py4godot_nodetypedarray.NodeTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(52,tuple([]))
    return _ret


  @functools.native_method
  def get_top_selected_nodes(self) -> typing.Union['py4godot_nodetypedarray.NodeTypedArray']:
    r'''
				Returns the list of top selected nodes only, excluding any children. This is useful for performing transform operations (moving them, rotating, etc.).
				For example, if there is a node A with a child B and a sibling C, then selecting all three will cause this method to return only A and C. Changing the global transform of A will affect the global transform of B, so there is no need to change B separately.
			'''




    _ret = py4godot_nodetypedarray.NodeTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def get_transformable_selected_nodes(self) -> typing.Union['py4godot_nodetypedarray.NodeTypedArray']:
    r'''
				Returns the list of top selected nodes only, excluding any children. This is useful for performing transform operations (moving them, rotating, etc.). See `get_top_selected_nodes`.
			'''




    _ret = py4godot_nodetypedarray.NodeTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))
    return _ret



register_cast_function('EditorSelection', EditorSelection.cast)
register_class('EditorSelection', EditorSelection)
