# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.GLTFState as py4godot_gltfstate 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFBufferViewWrapper


class GLTFBufferView(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFBufferView.construct_without_init()
    class_._ptr = constructor(347,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFBufferView.construct_without_init()
    class_._ptr = constructor(347,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFBufferViewWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(347,0, ())


  def generate_wrapper(self):
    return CPPGLTFBufferViewWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFBufferView.__new__(GLTFBufferView)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFBufferView'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFBufferView.construct_without_init()
    cls._ptr = CPPGLTFBufferViewWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFBufferView.construct_without_init()
    cls._ptr = CPPGLTFBufferViewWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def buffer(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_buffer()
    return _ret
  @buffer.setter
  def buffer(self,  value:'int'):
    self.set_buffer(value)
  @property
  def byte_offset(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_byte_offset()
    return _ret
  @byte_offset.setter
  def byte_offset(self,  value:'int'):
    self.set_byte_offset(value)
  @property
  def byte_length(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_byte_length()
    return _ret
  @byte_length.setter
  def byte_length(self,  value:'int'):
    self.set_byte_length(value)
  @property
  def byte_stride(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_byte_stride()
    return _ret
  @byte_stride.setter
  def byte_stride(self,  value:'int'):
    self.set_byte_stride(value)
  @property
  def indices(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_indices()
    return _ret
  @indices.setter
  def indices(self,  value:'bool'):
    self.set_indices(value)
  @property
  def vertex_attributes(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_vertex_attributes()
    return _ret
  @vertex_attributes.setter
  def vertex_attributes(self,  value:'bool'):
    self.set_vertex_attributes(value)
  @functools.native_method
  def load_buffer_view_data(self, state:'py4godot_gltfstate.GLTFState'   ) -> typing.Union['PackedByteArray']:
    r''''''

    assert(not state is None)
    assert isinstance(state, get_class('GLTFState')), 'state must be GLTFState'






    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([state._ptr]))
    return _ret


  @functools.native_method
  def get_buffer(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_buffer(self, buffer:'int'   ) -> None:
    r''''''

    assert isinstance(buffer, (int, float)), 'buffer must be int or float'

    self.py__buffer = buffer






    self._ptr.call_with_return(79,tuple([buffer]))

  @functools.native_method
  def get_byte_offset(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_byte_offset(self, byte_offset:'int'   ) -> None:
    r''''''

    assert isinstance(byte_offset, (int, float)), 'byte_offset must be int or float'

    self.py__byte_offset = byte_offset






    self._ptr.call_with_return(81,tuple([byte_offset]))

  @functools.native_method
  def get_byte_length(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([]))

    return _ret


  @functools.native_method
  def set_byte_length(self, byte_length:'int'   ) -> None:
    r''''''

    assert isinstance(byte_length, (int, float)), 'byte_length must be int or float'

    self.py__byte_length = byte_length






    self._ptr.call_with_return(83,tuple([byte_length]))

  @functools.native_method
  def get_byte_stride(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(84,tuple([]))

    return _ret


  @functools.native_method
  def set_byte_stride(self, byte_stride:'int'   ) -> None:
    r''''''

    assert isinstance(byte_stride, (int, float)), 'byte_stride must be int or float'

    self.py__byte_stride = byte_stride






    self._ptr.call_with_return(85,tuple([byte_stride]))

  @functools.native_method
  def get_indices(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(86,tuple([]))

    return _ret


  @functools.native_method
  def set_indices(self, indices:'bool'   ) -> None:
    r''''''

    assert isinstance(indices, bool), 'indices must be bool'

    self.py__indices = indices






    self._ptr.call_with_return(87,tuple([indices]))

  @functools.native_method
  def get_vertex_attributes(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_vertex_attributes(self, is_attributes:'bool'   ) -> None:
    r''''''

    assert isinstance(is_attributes, bool), 'is_attributes must be bool'

    self.py__vertex_attributes = is_attributes






    self._ptr.call_with_return(89,tuple([is_attributes]))


register_cast_function('GLTFBufferView', GLTFBufferView.cast)
register_class('GLTFBufferView', GLTFBufferView)
