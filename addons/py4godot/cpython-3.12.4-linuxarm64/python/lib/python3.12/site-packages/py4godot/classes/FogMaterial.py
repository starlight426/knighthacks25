# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.NoiseTexture3D as py4godot_noisetexture3d 
  import py4godot.classes.ImageTexture3D as py4godot_imagetexture3d 
  import py4godot.classes.Texture3DRD as py4godot_texture3drd 
  import py4godot.classes.CompressedTexture3D as py4godot_compressedtexture3d 
  import py4godot.classes.PlaceholderTexture3D as py4godot_placeholdertexture3d 
  import py4godot.classes.Texture3D as py4godot_texture3d 
import py4godot.classes.Material as py4godot_material 
from py4godot.wrappers.wrappers import CPPFogMaterialWrapper


class FogMaterial(py4godot_material.Material):
  r'''
		A `Material` resource that can be used by `FogVolume`s to draw volumetric effects.
		If you need more advanced effects, use a custom `url=$DOCS_URL/tutorials/shaders/shader_reference/fog_shader.html`fog shader`/url`.
	'''

  @staticmethod
  def constructor():
    class_ = FogMaterial.construct_without_init()
    class_._ptr = constructor(333,0, ())
    return class_
  @staticmethod
  def new():
    class_ = FogMaterial.construct_without_init()
    class_._ptr = constructor(333,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPFogMaterialWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(333,0, ())


  def generate_wrapper(self):
    return CPPFogMaterialWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = FogMaterial.__new__(FogMaterial)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'FogMaterial'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = FogMaterial.construct_without_init()
    cls._ptr = CPPFogMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = FogMaterial.construct_without_init()
    cls._ptr = CPPFogMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def density(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_density()
    return _ret
  @density.setter
  def density(self,  value:'float'):
    self.set_density(value)
  @property
  def albedo(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_albedo()
    return _ret
  @albedo.setter
  def albedo(self,  value:'Color'):
    self.set_albedo(value)
  @property
  def emission(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_emission()
    return _ret
  @emission.setter
  def emission(self,  value:'Color'):
    self.set_emission(value)
  @property
  def height_falloff(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_height_falloff()
    return _ret
  @height_falloff.setter
  def height_falloff(self,  value:'float'):
    self.set_height_falloff(value)
  @property
  def edge_fade(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_edge_fade()
    return _ret
  @edge_fade.setter
  def edge_fade(self,  value:'float'):
    self.set_edge_fade(value)
  @property
  def density_texture(self) -> typing.Any:
    r''''''
    _ret = self. get_density_texture()
    return _ret
  @density_texture.setter
  def density_texture(self,  value:'py4godot_object.Object'):
    self.set_density_texture(value)
  @functools.native_method
  def set_density(self, density:'float'   ) -> None:
    r''''''

    assert isinstance(density, (int, float)), 'density must be int or float'

    self.py__density = density






    self._ptr.call_with_return(87,tuple([density]))

  @functools.native_method
  def get_density(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_albedo(self, albedo:'Color'   ) -> None:
    r''''''

    assert(not albedo is None)
    assert isinstance(albedo, Color), 'albedo must be Color'

    self.py__albedo = albedo






    self._ptr.call_with_return(89,tuple([albedo._ptr]))

  @functools.native_method
  def get_albedo(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_emission(self, emission:'Color'   ) -> None:
    r''''''

    assert(not emission is None)
    assert isinstance(emission, Color), 'emission must be Color'

    self.py__emission = emission






    self._ptr.call_with_return(91,tuple([emission._ptr]))

  @functools.native_method
  def get_emission(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(92,tuple([]))

    return _ret


  @functools.native_method
  def set_height_falloff(self, height_falloff:'float'   ) -> None:
    r''''''

    assert isinstance(height_falloff, (int, float)), 'height_falloff must be int or float'

    self.py__height_falloff = height_falloff






    self._ptr.call_with_return(93,tuple([height_falloff]))

  @functools.native_method
  def get_height_falloff(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_edge_fade(self, edge_fade:'float'   ) -> None:
    r''''''

    assert isinstance(edge_fade, (int, float)), 'edge_fade must be int or float'

    self.py__edge_fade = edge_fade






    self._ptr.call_with_return(95,tuple([edge_fade]))

  @functools.native_method
  def get_edge_fade(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_density_texture(self, density_texture:'py4godot_texture3d.Texture3D'   ) -> None:
    r''''''

    assert(not density_texture is None)
    assert isinstance(density_texture, get_class('Texture3D')), 'density_texture must be Texture3D'

    self.py__density_texture = density_texture






    self._ptr.call_with_return(97,tuple([density_texture._ptr]))

  @functools.native_method
  def get_density_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture3D
    _ret._ptr = self._ptr.call_with_return(98,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('FogMaterial', FogMaterial.cast)
register_class('FogMaterial', FogMaterial)
