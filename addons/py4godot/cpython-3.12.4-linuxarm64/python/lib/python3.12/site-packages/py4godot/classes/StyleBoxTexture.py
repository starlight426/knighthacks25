# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.StyleBox as py4godot_stylebox 
from py4godot.wrappers.wrappers import CPPStyleBoxTextureWrapper

class AxisStretchMode:
  AXIS_STRETCH_MODE_STRETCH = 0
  AXIS_STRETCH_MODE_TILE = 1
  AXIS_STRETCH_MODE_TILE_FIT = 2


class StyleBoxTexture(py4godot_stylebox.StyleBox):
  r'''
		A texture-based nine-patch `StyleBox`, in a way similar to `NinePatchRect`. This stylebox performs a 3Ã—3 scaling of a texture, where only the center cell is fully stretched. This makes it possible to design bordered styles regardless of the stylebox's size.
	'''

  @staticmethod
  def constructor():
    class_ = StyleBoxTexture.construct_without_init()
    class_._ptr = constructor(797,0, ())
    return class_
  @staticmethod
  def new():
    class_ = StyleBoxTexture.construct_without_init()
    class_._ptr = constructor(797,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPStyleBoxTextureWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(797,0, ())


  def generate_wrapper(self):
    return CPPStyleBoxTextureWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = StyleBoxTexture.__new__(StyleBoxTexture)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'StyleBoxTexture'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = StyleBoxTexture.construct_without_init()
    cls._ptr = CPPStyleBoxTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = StyleBoxTexture.construct_without_init()
    cls._ptr = CPPStyleBoxTextureWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @property
  def texture_margin_left(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_texture_margin(0)
    return _ret
  @texture_margin_left.setter
  def texture_margin_left(self,  value:'float'):
    self.set_texture_margin(value)
  @property
  def texture_margin_top(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_texture_margin(1)
    return _ret
  @texture_margin_top.setter
  def texture_margin_top(self,  value:'float'):
    self.set_texture_margin(value)
  @property
  def texture_margin_right(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_texture_margin(2)
    return _ret
  @texture_margin_right.setter
  def texture_margin_right(self,  value:'float'):
    self.set_texture_margin(value)
  @property
  def texture_margin_bottom(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_texture_margin(3)
    return _ret
  @texture_margin_bottom.setter
  def texture_margin_bottom(self,  value:'float'):
    self.set_texture_margin(value)
  @property
  def expand_margin_left(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_expand_margin(0)
    return _ret
  @expand_margin_left.setter
  def expand_margin_left(self,  value:'float'):
    self.set_expand_margin(value)
  @property
  def expand_margin_top(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_expand_margin(1)
    return _ret
  @expand_margin_top.setter
  def expand_margin_top(self,  value:'float'):
    self.set_expand_margin(value)
  @property
  def expand_margin_right(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_expand_margin(2)
    return _ret
  @expand_margin_right.setter
  def expand_margin_right(self,  value:'float'):
    self.set_expand_margin(value)
  @property
  def expand_margin_bottom(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_expand_margin(3)
    return _ret
  @expand_margin_bottom.setter
  def expand_margin_bottom(self,  value:'float'):
    self.set_expand_margin(value)
  @property
  def axis_stretch_horizontal(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_h_axis_stretch_mode()
    return _ret
  @axis_stretch_horizontal.setter
  def axis_stretch_horizontal(self,  value:'int'):
    self.set_h_axis_stretch_mode(value)
  @property
  def axis_stretch_vertical(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_v_axis_stretch_mode()
    return _ret
  @axis_stretch_vertical.setter
  def axis_stretch_vertical(self,  value:'int'):
    self.set_v_axis_stretch_mode(value)
  @property
  def region_rect(self) -> typing.Union['Rect2']:
    r''''''
    _ret = self. get_region_rect()
    return _ret
  @region_rect.setter
  def region_rect(self,  value:'Rect2'):
    self.set_region_rect(value)
  @property
  def modulate_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_modulate()
    return _ret
  @modulate_color.setter
  def modulate_color(self,  value:'Color'):
    self.set_modulate(value)
  @property
  def draw_center(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_draw_center_enabled()
    return _ret
  @draw_center.setter
  def draw_center(self,  value:'bool'):
    self.set_draw_center(value)
  @functools.native_method
  def set_texture(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__texture = texture






    self._ptr.call_with_return(90,tuple([texture._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_texture_margin(self, margin:'int'  , size:'float'   ) -> None:
    r'''
				Sets the margin to `size` pixels for the specified `enum Side`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'
    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__texture_margin_left = margin







    self._ptr.call_with_return(92,tuple([margin, size]))

  @functools.native_method
  def set_texture_margin_all(self, size:'float'   ) -> None:
    r'''
				Sets the margin to `size` pixels for all sides.
			'''

    assert isinstance(size, (int, float)), 'size must be int or float'






    self._ptr.call_with_return(93,tuple([size]))

  @functools.native_method
  def get_texture_margin(self, margin:'int'  ) -> typing.Union[float]:
    r'''
				Returns the margin size of the specified `enum Side`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([margin]))

    return _ret


  @functools.native_method
  def set_expand_margin(self, margin:'int'  , size:'float'   ) -> None:
    r'''
				Sets the expand margin to `size` pixels for the specified `enum Side`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'
    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__expand_margin_left = margin







    self._ptr.call_with_return(95,tuple([margin, size]))

  @functools.native_method
  def set_expand_margin_all(self, size:'float'   ) -> None:
    r'''
				Sets the expand margin to `size` pixels for all sides.
			'''

    assert isinstance(size, (int, float)), 'size must be int or float'






    self._ptr.call_with_return(96,tuple([size]))

  @functools.native_method
  def get_expand_margin(self, margin:'int'  ) -> typing.Union[float]:
    r'''
				Returns the expand margin size of the specified `enum Side`.
			'''

    assert isinstance(margin, (int, float)), 'margin must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([margin]))

    return _ret


  @functools.native_method
  def set_region_rect(self, region:'Rect2'   ) -> None:
    r''''''

    assert(not region is None)
    assert isinstance(region, Rect2), 'region must be Rect2'

    self.py__region_rect = region






    self._ptr.call_with_return(98,tuple([region._ptr]))

  @functools.native_method
  def get_region_rect(self) -> typing.Union['Rect2']:
    r''''''




    _ret = Rect2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_draw_center(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__draw_center = enable






    self._ptr.call_with_return(100,tuple([enable]))

  @functools.native_method
  def is_draw_center_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(101,tuple([]))

    return _ret


  @functools.native_method
  def set_modulate(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__modulate_color = color






    self._ptr.call_with_return(102,tuple([color._ptr]))

  @functools.native_method
  def get_modulate(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(103,tuple([]))

    return _ret


  @functools.native_method
  def set_h_axis_stretch_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__axis_stretch_horizontal = mode






    self._ptr.call_with_return(104,tuple([mode]))

  @functools.native_method
  def get_h_axis_stretch_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(105,tuple([]))

    return _ret


  @functools.native_method
  def set_v_axis_stretch_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__axis_stretch_vertical = mode






    self._ptr.call_with_return(106,tuple([mode]))

  @functools.native_method
  def get_v_axis_stretch_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(107,tuple([]))

    return _ret



register_cast_function('StyleBoxTexture', StyleBoxTexture.cast)
register_class('StyleBoxTexture', StyleBoxTexture)
