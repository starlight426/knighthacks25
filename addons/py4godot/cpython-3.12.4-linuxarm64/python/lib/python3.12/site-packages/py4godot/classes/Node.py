# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.MissingNode as py4godot_missingnode 
  import py4godot.classes.VFlowContainer as py4godot_vflowcontainer 
  import py4godot.classes.DampedSpringJoint2D as py4godot_dampedspringjoint2d 
  import py4godot.classes.XRAnchor3D as py4godot_xranchor3d 
  import py4godot.classes.Light2D as py4godot_light2d 
  import py4godot.classes.Area3D as py4godot_area3d 
  import py4godot.classes.CollisionShape3D as py4godot_collisionshape3d 
  import py4godot.classes.VScrollBar as py4godot_vscrollbar 
  import py4godot.classes.CSGPolygon3D as py4godot_csgpolygon3d 
  import py4godot.classes.MultiplayerAPIExtension as py4godot_multiplayerapiextension 
  import py4godot.classes.PathFollow3D as py4godot_pathfollow3d 
  import py4godot.classes.CanvasGroup as py4godot_canvasgroup 
  import py4godot.classes.SpringBoneCollision3D as py4godot_springbonecollision3d 
  import py4godot.classes.AnimationTree as py4godot_animationtree 
  import py4godot.classes.ImporterMeshInstance3D as py4godot_importermeshinstance3d 
  import py4godot.classes.TextureButton as py4godot_texturebutton 
  import py4godot.classes.EditorResourcePreview as py4godot_editorresourcepreview 
  import py4godot.classes.SpringBoneCollisionPlane3D as py4godot_springbonecollisionplane3d 
  import py4godot.classes.RemoteTransform2D as py4godot_remotetransform2d 
  import py4godot.classes.MultiMeshInstance2D as py4godot_multimeshinstance2d 
  import py4godot.classes.GraphEdit as py4godot_graphedit 
  import py4godot.classes.CollisionPolygon2D as py4godot_collisionpolygon2d 
  import py4godot.classes.SoftBody3D as py4godot_softbody3d 
  import py4godot.classes.MarginContainer as py4godot_margincontainer 
  import py4godot.classes.CanvasItem as py4godot_canvasitem 
  import py4godot.classes.SpringBoneCollisionCapsule3D as py4godot_springbonecollisioncapsule3d 
  import py4godot.classes.GPUParticlesCollisionHeightField3D as py4godot_gpuparticlescollisionheightfield3d 
  import py4godot.classes.Button as py4godot_button 
  import py4godot.classes.intTypedArray as py4godot_inttypedarray 
  import py4godot.classes.Marker2D as py4godot_marker2d 
  import py4godot.classes.Node2D as py4godot_node2d 
  import py4godot.classes.Range as py4godot_range 
  import py4godot.classes.SpotLight3D as py4godot_spotlight3d 
  import py4godot.classes.CSGTorus3D as py4godot_csgtorus3d 
  import py4godot.classes.MeshInstance3D as py4godot_meshinstance3d 
  import py4godot.classes.RayCast3D as py4godot_raycast3d 
  import py4godot.classes.GeometryInstance3D as py4godot_geometryinstance3d 
  import py4godot.classes.EditorCommandPalette as py4godot_editorcommandpalette 
  import py4godot.classes.CollisionPolygon3D as py4godot_collisionpolygon3d 
  import py4godot.classes.Line2D as py4godot_line2d 
  import py4godot.classes.BaseButton as py4godot_basebutton 
  import py4godot.classes.ResourcePreloader as py4godot_resourcepreloader 
  import py4godot.classes.ScrollContainer as py4godot_scrollcontainer 
  import py4godot.classes.GPUParticlesCollisionSphere3D as py4godot_gpuparticlescollisionsphere3d 
  import py4godot.classes.LinkButton as py4godot_linkbutton 
  import py4godot.classes.ColorRect as py4godot_colorrect 
  import py4godot.classes.NinePatchRect as py4godot_ninepatchrect 
  import py4godot.classes.HingeJoint3D as py4godot_hingejoint3d 
  import py4godot.classes.OpenXRCompositionLayerEquirect as py4godot_openxrcompositionlayerequirect 
  import py4godot.classes.SpringBoneCollisionSphere3D as py4godot_springbonecollisionsphere3d 
  import py4godot.classes.ItemList as py4godot_itemlist 
  import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
  import py4godot.classes.OpenXRCompositionLayerQuad as py4godot_openxrcompositionlayerquad 
  import py4godot.classes.SceneMultiplayer as py4godot_scenemultiplayer 
  import py4godot.classes.EditorFileDialog as py4godot_editorfiledialog 
  import py4godot.classes.Popup as py4godot_popup 
  import py4godot.classes.DirectionalLight3D as py4godot_directionallight3d 
  import py4godot.classes.Parallax2D as py4godot_parallax2d 
  import py4godot.classes.PhysicsBody2D as py4godot_physicsbody2d 
  import py4godot.classes.CSGPrimitive3D as py4godot_csgprimitive3d 
  import py4godot.classes.ShaderGlobalsOverride as py4godot_shaderglobalsoverride 
  import py4godot.classes.FileDialog as py4godot_filedialog 
  import py4godot.classes.MultiplayerSpawner as py4godot_multiplayerspawner 
  import py4godot.classes.CPUParticles3D as py4godot_cpuparticles3d 
  import py4godot.classes.LightmapProbe as py4godot_lightmapprobe 
  import py4godot.classes.CPUParticles2D as py4godot_cpuparticles2d 
  import py4godot.classes.EditorProperty as py4godot_editorproperty 
  import py4godot.classes.InputEvent as py4godot_inputevent 
  import py4godot.classes.Camera3D as py4godot_camera3d 
  import py4godot.classes.SpriteBase3D as py4godot_spritebase3d 
  import py4godot.classes.XRNode3D as py4godot_xrnode3d 
  import py4godot.classes.EditorToaster as py4godot_editortoaster 
  import py4godot.classes.MultiplayerSynchronizer as py4godot_multiplayersynchronizer 
  import py4godot.classes.PhysicalBoneSimulator3D as py4godot_physicalbonesimulator3d 
  import py4godot.classes.AimModifier3D as py4godot_aimmodifier3d 
  import py4godot.classes.CheckButton as py4godot_checkbutton 
  import py4godot.classes.ScriptCreateDialog as py4godot_scriptcreatedialog 
  import py4godot.classes.BoxContainer as py4godot_boxcontainer 
  import py4godot.classes.XRController3D as py4godot_xrcontroller3d 
  import py4godot.classes.Separator as py4godot_separator 
  import py4godot.classes.OpenXRVisibilityMask as py4godot_openxrvisibilitymask 
  import py4godot.classes.AudioListener3D as py4godot_audiolistener3d 
  import py4godot.classes.SceneTree as py4godot_scenetree 
  import py4godot.classes.Tween as py4godot_tween 
  import py4godot.classes.VehicleBody3D as py4godot_vehiclebody3d 
  import py4godot.classes.VisibleOnScreenEnabler2D as py4godot_visibleonscreenenabler2d 
  import py4godot.classes.GraphNode as py4godot_graphnode 
  import py4godot.classes.ShapeCast3D as py4godot_shapecast3d 
  import py4godot.classes.XRCamera3D as py4godot_xrcamera3d 
  import py4godot.classes.CSGShape3D as py4godot_csgshape3d 
  import py4godot.classes.LightmapGI as py4godot_lightmapgi 
  import py4godot.classes.VoxelGI as py4godot_voxelgi 
  import py4godot.classes.XRFaceModifier3D as py4godot_xrfacemodifier3d 
  import py4godot.classes.ConfirmationDialog as py4godot_confirmationdialog 
  import py4godot.classes.PhysicalBone3D as py4godot_physicalbone3d 
  import py4godot.classes.ConeTwistJoint3D as py4godot_conetwistjoint3d 
  import py4godot.classes.CollisionObject2D as py4godot_collisionobject2d 
  import py4godot.classes.Timer as py4godot_timer 
  import py4godot.classes.FoldableContainer as py4godot_foldablecontainer 
  import py4godot.classes.ColorPickerButton as py4godot_colorpickerbutton 
  import py4godot.classes.Polygon2D as py4godot_polygon2d 
  import py4godot.classes.TextureProgressBar as py4godot_textureprogressbar 
  import py4godot.classes.VisibleOnScreenNotifier3D as py4godot_visibleonscreennotifier3d 
  import py4godot.classes.RigidBody2D as py4godot_rigidbody2d 
  import py4godot.classes.Marker3D as py4godot_marker3d 
  import py4godot.classes.VSplitContainer as py4godot_vsplitcontainer 
  import py4godot.classes.AnimatedSprite3D as py4godot_animatedsprite3d 
  import py4godot.classes.LightOccluder2D as py4godot_lightoccluder2d 
  import py4godot.classes.TouchScreenButton as py4godot_touchscreenbutton 
  import py4godot.classes.EditorScriptPicker as py4godot_editorscriptpicker 
  import py4godot.classes.TileMap as py4godot_tilemap 
  import py4godot.classes.Joint3D as py4godot_joint3d 
  import py4godot.classes.Viewport as py4godot_viewport 
  import py4godot.classes.XRBodyModifier3D as py4godot_xrbodymodifier3d 
  import py4godot.classes.ParallaxLayer as py4godot_parallaxlayer 
  import py4godot.classes.MenuButton as py4godot_menubutton 
  import py4godot.classes.NavigationRegion2D as py4godot_navigationregion2d 
  import py4godot.classes.AnimatableBody2D as py4godot_animatablebody2d 
  import py4godot.classes.CSGCylinder3D as py4godot_csgcylinder3d 
  import py4godot.classes.LookAtModifier3D as py4godot_lookatmodifier3d 
  import py4godot.classes.Control as py4godot_control 
  import py4godot.classes.NavigationRegion3D as py4godot_navigationregion3d 
  import py4godot.classes.SplitContainer as py4godot_splitcontainer 
  import py4godot.classes.NavigationObstacle3D as py4godot_navigationobstacle3d 
  import py4godot.classes.GridMapEditorPlugin as py4godot_gridmapeditorplugin 
  import py4godot.classes.ConvertTransformModifier3D as py4godot_converttransformmodifier3d 
  import py4godot.classes.OptionButton as py4godot_optionbutton 
  import py4godot.classes.SubViewportContainer as py4godot_subviewportcontainer 
  import py4godot.classes.Panel as py4godot_panel 
  import py4godot.classes.Area2D as py4godot_area2d 
  import py4godot.classes.Decal as py4godot_decal 
  import py4godot.classes.Path3D as py4godot_path3d 
  import py4godot.classes.AudioStreamPlayer as py4godot_audiostreamplayer 
  import py4godot.classes.GraphElement as py4godot_graphelement 
  import py4godot.classes.XROrigin3D as py4godot_xrorigin3d 
  import py4godot.classes.FlowContainer as py4godot_flowcontainer 
  import py4godot.classes.RemoteTransform3D as py4godot_remotetransform3d 
  import py4godot.classes.GPUParticles2D as py4godot_gpuparticles2d 
  import py4godot.classes.TabContainer as py4godot_tabcontainer 
  import py4godot.classes.DirectionalLight2D as py4godot_directionallight2d 
  import py4godot.classes.EditorPlugin as py4godot_editorplugin 
  import py4godot.classes.VisibleOnScreenEnabler3D as py4godot_visibleonscreenenabler3d 
  import py4godot.classes.BackBufferCopy as py4godot_backbuffercopy 
  import py4godot.classes.NavigationAgent3D as py4godot_navigationagent3d 
  import py4godot.classes.PhysicsBody3D as py4godot_physicsbody3d 
  import py4godot.classes.MultiMeshInstance3D as py4godot_multimeshinstance3d 
  import py4godot.classes.CanvasLayer as py4godot_canvaslayer 
  import py4godot.classes.PhysicalBone2D as py4godot_physicalbone2d 
  import py4godot.classes.SkeletonIK3D as py4godot_skeletonik3d 
  import py4godot.classes.CopyTransformModifier3D as py4godot_copytransformmodifier3d 
  import py4godot.classes.GPUParticlesCollisionSDF3D as py4godot_gpuparticlescollisionsdf3d 
  import py4godot.classes.RetargetModifier3D as py4godot_retargetmodifier3d 
  import py4godot.classes.GPUParticlesCollision3D as py4godot_gpuparticlescollision3d 
  import py4godot.classes.Path2D as py4godot_path2d 
  import py4godot.classes.GPUParticles3D as py4godot_gpuparticles3d 
  import py4godot.classes.SpringArm3D as py4godot_springarm3d 
  import py4godot.classes.SpringBoneSimulator3D as py4godot_springbonesimulator3d 
  import py4godot.classes.PopupMenu as py4godot_popupmenu 
  import py4godot.classes.CSGBox3D as py4godot_csgbox3d 
  import py4godot.classes.ScriptEditor as py4godot_scripteditor 
  import py4godot.classes.OpenXRInteractionProfileEditorBase as py4godot_openxrinteractionprofileeditorbase 
  import py4godot.classes.EditorSpinSlider as py4godot_editorspinslider 
  import py4godot.classes.Container as py4godot_container 
  import py4godot.classes.ParallaxBackground as py4godot_parallaxbackground 
  import py4godot.classes.PathFollow2D as py4godot_pathfollow2d 
  import py4godot.classes.CollisionObject3D as py4godot_collisionobject3d 
  import py4godot.classes.GridContainer as py4godot_gridcontainer 
  import py4godot.classes.Tree as py4godot_tree 
  import py4godot.classes.TextureRect as py4godot_texturerect 
  import py4godot.classes.StatusIndicator as py4godot_statusindicator 
  import py4godot.classes.Label3D as py4godot_label3d 
  import py4godot.classes.ReferenceRect as py4godot_referencerect 
  import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
  import py4godot.classes.CSGSphere3D as py4godot_csgsphere3d 
  import py4godot.classes.PinJoint3D as py4godot_pinjoint3d 
  import py4godot.classes.GridMap as py4godot_gridmap 
  import py4godot.classes.ModifierBoneTarget3D as py4godot_modifierbonetarget3d 
  import py4godot.classes.FileSystemDock as py4godot_filesystemdock 
  import py4godot.classes.CharacterBody2D as py4godot_characterbody2d 
  import py4godot.classes.WorldEnvironment as py4godot_worldenvironment 
  import py4godot.classes.VisibleOnScreenNotifier2D as py4godot_visibleonscreennotifier2d 
  import py4godot.classes.StaticBody3D as py4godot_staticbody3d 
  import py4godot.classes.RichTextLabel as py4godot_richtextlabel 
  import py4godot.classes.SliderJoint3D as py4godot_sliderjoint3d 
  import py4godot.classes.NavigationAgent2D as py4godot_navigationagent2d 
  import py4godot.classes.AnimatableBody3D as py4godot_animatablebody3d 
  import py4godot.classes.VisualInstance3D as py4godot_visualinstance3d 
  import py4godot.classes.OpenXRBindingModifierEditor as py4godot_openxrbindingmodifiereditor 
  import py4godot.classes.ReflectionProbe as py4godot_reflectionprobe 
  import py4godot.classes.NavigationLink3D as py4godot_navigationlink3d 
  import py4godot.classes.NavigationLink2D as py4godot_navigationlink2d 
  import py4godot.classes.GPUParticlesAttractorBox3D as py4godot_gpuparticlesattractorbox3d 
  import py4godot.classes.RootMotionView as py4godot_rootmotionview 
  import py4godot.classes.BoneConstraint3D as py4godot_boneconstraint3d 
  import py4godot.classes.Skeleton2D as py4godot_skeleton2d 
  import py4godot.classes.HScrollBar as py4godot_hscrollbar 
  import py4godot.classes.NodeTypedArray as py4godot_nodetypedarray 
  import py4godot.classes.CSGCombiner3D as py4godot_csgcombiner3d 
  import py4godot.classes.OccluderInstance3D as py4godot_occluderinstance3d 
  import py4godot.classes.FogVolume as py4godot_fogvolume 
  import py4godot.classes.Bone2D as py4godot_bone2d 
  import py4godot.classes.AudioStreamPlayer3D as py4godot_audiostreamplayer3d 
  import py4godot.classes.ScriptEditorBase as py4godot_scripteditorbase 
  import py4godot.classes.Sprite3D as py4godot_sprite3d 
  import py4godot.classes.MultiplayerAPI as py4godot_multiplayerapi 
  import py4godot.classes.MeshInstance2D as py4godot_meshinstance2d 
  import py4godot.classes.HSlider as py4godot_hslider 
  import py4godot.classes.GPUParticlesCollisionBox3D as py4godot_gpuparticlescollisionbox3d 
  import py4godot.classes.GPUParticlesAttractor3D as py4godot_gpuparticlesattractor3d 
  import py4godot.classes.XRHandModifier3D as py4godot_xrhandmodifier3d 
  import py4godot.classes.Camera2D as py4godot_camera2d 
  import py4godot.classes.SubViewport as py4godot_subviewport 
  import py4godot.classes.Window as py4godot_window 
  import py4godot.classes.StaticBody2D as py4godot_staticbody2d 
  import py4godot.classes.ShapeCast2D as py4godot_shapecast2d 
  import py4godot.classes.Sprite2D as py4godot_sprite2d 
  import py4godot.classes.HFlowContainer as py4godot_hflowcontainer 
  import py4godot.classes.SpinBox as py4godot_spinbox 
  import py4godot.classes.VideoStreamPlayer as py4godot_videostreamplayer 
  import py4godot.classes.Node3D as py4godot_node3d 
  import py4godot.classes.PanelContainer as py4godot_panelcontainer 
  import py4godot.classes.HTTPRequest as py4godot_httprequest 
  import py4godot.classes.VehicleWheel3D as py4godot_vehiclewheel3d 
  import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
  import py4godot.classes.AspectRatioContainer as py4godot_aspectratiocontainer 
  import py4godot.classes.CodeEdit as py4godot_codeedit 
  import py4godot.classes.TextEdit as py4godot_textedit 
  import py4godot.classes.AnimationMixer as py4godot_animationmixer 
  import py4godot.classes.GPUParticlesAttractorVectorField3D as py4godot_gpuparticlesattractorvectorfield3d 
  import py4godot.classes.ColorPicker as py4godot_colorpicker 
  import py4godot.classes.OpenXRCompositionLayerCylinder as py4godot_openxrcompositionlayercylinder 
  import py4godot.classes.CharacterBody3D as py4godot_characterbody3d 
  import py4godot.classes.AudioStreamPlayer2D as py4godot_audiostreamplayer2d 
  import py4godot.classes.TileMapLayer as py4godot_tilemaplayer 
  import py4godot.classes.HSplitContainer as py4godot_hsplitcontainer 
  import py4godot.classes.AudioListener2D as py4godot_audiolistener2d 
  import py4godot.classes.ProgressBar as py4godot_progressbar 
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
  import py4godot.classes.CheckBox as py4godot_checkbox 
  import py4godot.classes.HSeparator as py4godot_hseparator 
  import py4godot.classes.Label as py4godot_label 
  import py4godot.classes.RayCast2D as py4godot_raycast2d 
  import py4godot.classes.CanvasModulate as py4godot_canvasmodulate 
  import py4godot.classes.CollisionShape2D as py4godot_collisionshape2d 
  import py4godot.classes.NavigationObstacle2D as py4godot_navigationobstacle2d 
  import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
  import py4godot.classes.InstancePlaceholder as py4godot_instanceplaceholder 
  import py4godot.classes.OpenXRHand as py4godot_openxrhand 
  import py4godot.classes.ScrollBar as py4godot_scrollbar 
  import py4godot.classes.Generic6DOFJoint3D as py4godot_generic6dofjoint3d 
  import py4godot.classes.RigidBody3D as py4godot_rigidbody3d 
  import py4godot.classes.Light3D as py4godot_light3d 
  import py4godot.classes.AcceptDialog as py4godot_acceptdialog 
  import py4godot.classes.OpenXRRenderModel as py4godot_openxrrendermodel 
  import py4godot.classes.OpenXRInteractionProfileEditor as py4godot_openxrinteractionprofileeditor 
  import py4godot.classes.CenterContainer as py4godot_centercontainer 
  import py4godot.classes.PinJoint2D as py4godot_pinjoint2d 
  import py4godot.classes.EditorFileSystem as py4godot_editorfilesystem 
  import py4godot.classes.OpenXRCompositionLayer as py4godot_openxrcompositionlayer 
  import py4godot.classes.AnimationPlayer as py4godot_animationplayer 
  import py4godot.classes.GraphFrame as py4godot_graphframe 
  import py4godot.classes.VSlider as py4godot_vslider 
  import py4godot.classes.Slider as py4godot_slider 
  import py4godot.classes.LineEdit as py4godot_lineedit 
  import py4godot.classes.OpenXRRenderModelManager as py4godot_openxrrendermodelmanager 
  import py4godot.classes.PointLight2D as py4godot_pointlight2d 
  import py4godot.classes.MenuBar as py4godot_menubar 
  import py4godot.classes.VSeparator as py4godot_vseparator 
  import py4godot.classes.AnimatedSprite2D as py4godot_animatedsprite2d 
  import py4godot.classes.OmniLight3D as py4godot_omnilight3d 
  import py4godot.classes.CSGMesh3D as py4godot_csgmesh3d 
  import py4godot.classes.EditorResourcePicker as py4godot_editorresourcepicker 
  import py4godot.classes.EditorInspector as py4godot_editorinspector 
  import py4godot.classes.BoneAttachment3D as py4godot_boneattachment3d 
  import py4godot.classes.TabBar as py4godot_tabbar 
  import py4godot.classes.PopupPanel as py4godot_popuppanel 
  import py4godot.classes.Joint2D as py4godot_joint2d 
  import py4godot.classes.GrooveJoint2D as py4godot_groovejoint2d 
  import py4godot.classes.GPUParticlesAttractorSphere3D as py4godot_gpuparticlesattractorsphere3d 
import py4godot.classes.Object as py4godot_object 
import py4godot.classes.intTypedArray as py4godot_inttypedarray 
import py4godot.classes.NodeTypedArray as py4godot_nodetypedarray 
import py4godot.classes.StringNameTypedArray as py4godot_stringnametypedarray 
from py4godot.wrappers.wrappers import CPPNodeWrapper

class ProcessMode:
  PROCESS_MODE_INHERIT = 0
  PROCESS_MODE_PAUSABLE = 1
  PROCESS_MODE_WHEN_PAUSED = 2
  PROCESS_MODE_ALWAYS = 3
  PROCESS_MODE_DISABLED = 4
class ProcessThreadGroup:
  PROCESS_THREAD_GROUP_INHERIT = 0
  PROCESS_THREAD_GROUP_MAIN_THREAD = 1
  PROCESS_THREAD_GROUP_SUB_THREAD = 2
class ProcessThreadMessages:
  FLAG_PROCESS_THREAD_MESSAGES = 1
  FLAG_PROCESS_THREAD_MESSAGES_PHYSICS = 2
  FLAG_PROCESS_THREAD_MESSAGES_ALL = 3
class PhysicsInterpolationMode:
  PHYSICS_INTERPOLATION_MODE_INHERIT = 0
  PHYSICS_INTERPOLATION_MODE_ON = 1
  PHYSICS_INTERPOLATION_MODE_OFF = 2
class DuplicateFlags:
  DUPLICATE_SIGNALS = 1
  DUPLICATE_GROUPS = 2
  DUPLICATE_SCRIPTS = 4
  DUPLICATE_USE_INSTANTIATION = 8
class InternalMode:
  INTERNAL_MODE_DISABLED = 0
  INTERNAL_MODE_FRONT = 1
  INTERNAL_MODE_BACK = 2
class AutoTranslateMode:
  AUTO_TRANSLATE_MODE_INHERIT = 0
  AUTO_TRANSLATE_MODE_ALWAYS = 1
  AUTO_TRANSLATE_MODE_DISABLED = 2


class Node(py4godot_object.Object):
  r'''
		Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.
		A tree of nodes is called a _scene_. Scenes can be saved to the disk and then instantiated into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.
		**Scene tree:** The `SceneTree` contains the active tree of nodes. When a node is added to the scene tree, it receives the `constant NOTIFICATION_ENTER_TREE` notification and its `_enter_tree` callback is triggered. Child nodes are always added _after_ their parent node, i.e. the `_enter_tree` callback of a parent node will be triggered before its child's.
		Once all nodes have been added in the scene tree, they receive the `constant NOTIFICATION_READY` notification and their respective `_ready` callbacks are triggered. For groups of nodes, the `_ready` callback is called in reverse order, starting with the children and moving up to the parent nodes.
		This means that when adding a node to the scene tree, the following order will be used for the callbacks: `_enter_tree` of the parent, `_enter_tree` of the children, `_ready` of the children and finally `_ready` of the parent (recursively for the entire scene tree).
		**Processing:** Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback `_process`, toggled with `set_process`) happens as fast as possible and is dependent on the frame rate, so the processing time _delta_ (in seconds) is passed as an argument. Physics processing (callback `_physics_process`, toggled with `set_physics_process`) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.
		Nodes can also process input events. When present, the `_input` function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the `_unhandled_input` function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI `Control` nodes), ensuring that the node only receives the events that were meant for it.
		To keep track of the scene hierarchy (especially when instantiating scenes into other scenes), an "owner" can be set for the node with the `owner` property. This keeps track of who instantiated what. This is mostly useful when writing editors and tools, though.
		Finally, when a node is freed with `Object.free` or `queue_free`, it will also free all its children.
		**Groups:** Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See `add_to_group`, `is_in_group` and `remove_from_group`. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on `SceneTree`.
		**Networking with nodes:** After connecting to a server (or making one, see `ENetMultiplayerPeer`), it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling `rpc` with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call, Godot will use its `NodePath` (make sure node names are the same on all peers). Also, take a look at the high-level networking tutorial and corresponding demos.
		**Note:** The `script` property is part of the `Object` class, not `Node`. It isn't exposed like most properties but does have a setter and getter (see `Object.set_script` and `Object.get_script`).
	'''
  NOTIFICATION_ENTER_TREE:typing.ClassVar[int]

  NOTIFICATION_EXIT_TREE:typing.ClassVar[int]

  NOTIFICATION_MOVED_IN_PARENT:typing.ClassVar[int]

  NOTIFICATION_READY:typing.ClassVar[int]

  NOTIFICATION_PAUSED:typing.ClassVar[int]

  NOTIFICATION_UNPAUSED:typing.ClassVar[int]

  NOTIFICATION_PHYSICS_PROCESS:typing.ClassVar[int]

  NOTIFICATION_PROCESS:typing.ClassVar[int]

  NOTIFICATION_PARENTED:typing.ClassVar[int]

  NOTIFICATION_UNPARENTED:typing.ClassVar[int]

  NOTIFICATION_SCENE_INSTANTIATED:typing.ClassVar[int]

  NOTIFICATION_DRAG_BEGIN:typing.ClassVar[int]

  NOTIFICATION_DRAG_END:typing.ClassVar[int]

  NOTIFICATION_PATH_RENAMED:typing.ClassVar[int]

  NOTIFICATION_CHILD_ORDER_CHANGED:typing.ClassVar[int]

  NOTIFICATION_INTERNAL_PROCESS:typing.ClassVar[int]

  NOTIFICATION_INTERNAL_PHYSICS_PROCESS:typing.ClassVar[int]

  NOTIFICATION_POST_ENTER_TREE:typing.ClassVar[int]

  NOTIFICATION_DISABLED:typing.ClassVar[int]

  NOTIFICATION_ENABLED:typing.ClassVar[int]

  NOTIFICATION_RESET_PHYSICS_INTERPOLATION:typing.ClassVar[int]

  NOTIFICATION_EDITOR_PRE_SAVE:typing.ClassVar[int]

  NOTIFICATION_EDITOR_POST_SAVE:typing.ClassVar[int]

  NOTIFICATION_WM_MOUSE_ENTER:typing.ClassVar[int]

  NOTIFICATION_WM_MOUSE_EXIT:typing.ClassVar[int]

  NOTIFICATION_WM_WINDOW_FOCUS_IN:typing.ClassVar[int]

  NOTIFICATION_WM_WINDOW_FOCUS_OUT:typing.ClassVar[int]

  NOTIFICATION_WM_CLOSE_REQUEST:typing.ClassVar[int]

  NOTIFICATION_WM_GO_BACK_REQUEST:typing.ClassVar[int]

  NOTIFICATION_WM_SIZE_CHANGED:typing.ClassVar[int]

  NOTIFICATION_WM_DPI_CHANGE:typing.ClassVar[int]

  NOTIFICATION_VP_MOUSE_ENTER:typing.ClassVar[int]

  NOTIFICATION_VP_MOUSE_EXIT:typing.ClassVar[int]

  NOTIFICATION_WM_POSITION_CHANGED:typing.ClassVar[int]

  NOTIFICATION_OS_MEMORY_WARNING:typing.ClassVar[int]

  NOTIFICATION_TRANSLATION_CHANGED:typing.ClassVar[int]

  NOTIFICATION_WM_ABOUT:typing.ClassVar[int]

  NOTIFICATION_CRASH:typing.ClassVar[int]

  NOTIFICATION_OS_IME_UPDATE:typing.ClassVar[int]

  NOTIFICATION_APPLICATION_RESUMED:typing.ClassVar[int]

  NOTIFICATION_APPLICATION_PAUSED:typing.ClassVar[int]

  NOTIFICATION_APPLICATION_FOCUS_IN:typing.ClassVar[int]

  NOTIFICATION_APPLICATION_FOCUS_OUT:typing.ClassVar[int]

  NOTIFICATION_TEXT_SERVER_CHANGED:typing.ClassVar[int]

  NOTIFICATION_ACCESSIBILITY_UPDATE:typing.ClassVar[int]

  NOTIFICATION_ACCESSIBILITY_INVALIDATE:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = Node.construct_without_init()
    class_._ptr = constructor(514,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Node.construct_without_init()
    class_._ptr = constructor(514,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPNodeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(514,0, ())


  def generate_wrapper(self):
    return CPPNodeWrapper()
  def init_signals(self):
    super().init_signals()
    ready_name = utils.py_string_to_string_name("ready")
    self.ready = signals.BuiltinSignal(self, ready_name)
    renamed_name = utils.py_string_to_string_name("renamed")
    self.renamed = signals.BuiltinSignal(self, renamed_name)
    tree_entered_name = utils.py_string_to_string_name("tree_entered")
    self.tree_entered = signals.BuiltinSignal(self, tree_entered_name)
    tree_exiting_name = utils.py_string_to_string_name("tree_exiting")
    self.tree_exiting = signals.BuiltinSignal(self, tree_exiting_name)
    tree_exited_name = utils.py_string_to_string_name("tree_exited")
    self.tree_exited = signals.BuiltinSignal(self, tree_exited_name)
    child_entered_tree_name = utils.py_string_to_string_name("child_entered_tree")
    self.child_entered_tree = signals.BuiltinSignal(self, child_entered_tree_name)
    child_exiting_tree_name = utils.py_string_to_string_name("child_exiting_tree")
    self.child_exiting_tree = signals.BuiltinSignal(self, child_exiting_tree_name)
    child_order_changed_name = utils.py_string_to_string_name("child_order_changed")
    self.child_order_changed = signals.BuiltinSignal(self, child_order_changed_name)
    replacing_by_name = utils.py_string_to_string_name("replacing_by")
    self.replacing_by = signals.BuiltinSignal(self, replacing_by_name)
    editor_description_changed_name = utils.py_string_to_string_name("editor_description_changed")
    self.editor_description_changed = signals.BuiltinSignal(self, editor_description_changed_name)
    editor_state_changed_name = utils.py_string_to_string_name("editor_state_changed")
    self.editor_state_changed = signals.BuiltinSignal(self, editor_state_changed_name)

  @staticmethod
  def construct_without_init():
    cls = Node.__new__(Node)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Node'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Node.construct_without_init()
    cls._ptr = CPPNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Node.construct_without_init()
    cls._ptr = CPPNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def name(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_name()
    return _ret
  @name.setter
  def name(self,  value:'object'):
    self.set_name(value)
  @property
  def unique_name_in_owner(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_unique_name_in_owner()
    return _ret
  @unique_name_in_owner.setter
  def unique_name_in_owner(self,  value:'bool'):
    self.set_unique_name_in_owner(value)
  @property
  def scene_file_path(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_scene_file_path()
    return _ret
  @scene_file_path.setter
  def scene_file_path(self,  value:'str'):
    self.set_scene_file_path(value)
  @property
  def owner(self) -> typing.Any:
    r''''''
    _ret = self. get_owner()
    return _ret
  @owner.setter
  def owner(self,  value:'py4godot_object.Object'):
    self.set_owner(value)
  @property
  def multiplayer(self) -> typing.Union['py4godot_multiplayerapiextension.MultiplayerAPIExtension','py4godot_scenemultiplayer.SceneMultiplayer','py4godot_multiplayerapi.MultiplayerAPI']:
    r''''''
    _ret = self. get_multiplayer()
    return _ret
  @property
  def process_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_process_mode()
    return _ret
  @process_mode.setter
  def process_mode(self,  value:'int'):
    self.set_process_mode(value)
  @property
  def process_priority(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_process_priority()
    return _ret
  @process_priority.setter
  def process_priority(self,  value:'int'):
    self.set_process_priority(value)
  @property
  def process_physics_priority(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_physics_process_priority()
    return _ret
  @process_physics_priority.setter
  def process_physics_priority(self,  value:'int'):
    self.set_physics_process_priority(value)
  @property
  def process_thread_group(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_process_thread_group()
    return _ret
  @process_thread_group.setter
  def process_thread_group(self,  value:'int'):
    self.set_process_thread_group(value)
  @property
  def process_thread_group_order(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_process_thread_group_order()
    return _ret
  @process_thread_group_order.setter
  def process_thread_group_order(self,  value:'int'):
    self.set_process_thread_group_order(value)
  @property
  def process_thread_messages(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_process_thread_messages()
    return _ret
  @process_thread_messages.setter
  def process_thread_messages(self,  value:'int'):
    self.set_process_thread_messages(value)
  @property
  def physics_interpolation_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_physics_interpolation_mode()
    return _ret
  @physics_interpolation_mode.setter
  def physics_interpolation_mode(self,  value:'int'):
    self.set_physics_interpolation_mode(value)
  @property
  def auto_translate_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_auto_translate_mode()
    return _ret
  @auto_translate_mode.setter
  def auto_translate_mode(self,  value:'int'):
    self.set_auto_translate_mode(value)
  @property
  def editor_description(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_editor_description()
    return _ret
  @editor_description.setter
  def editor_description(self,  value:'str'):
    self.set_editor_description(value)
  @functools.native_method
  def _process(self, delta:'float'   ) -> None:
    r'''
				Called on each idle frame, prior to rendering, and after physics ticks have been processed. `delta` is the time between frames in seconds.
				It is only called if processing is enabled for this Node, which is done automatically if this method is overridden, and can be toggled with `set_process`.
				Processing happens in order of `process_priority`, lower priority values are called first. Nodes with the same priority are processed in tree order, or top to bottom as seen in the editor (also known as pre-order traversal).
				Corresponds to the `constant NOTIFICATION_PROCESS` notification in `Object._notification`.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
				**Note:** When the engine is struggling and the frame rate is lowered, `delta` will increase. When `delta` is increased, it's capped at a maximum of `Engine.time_scale` * `Engine.max_physics_steps_per_frame` / `Engine.physics_ticks_per_second`. As a result, accumulated `delta` may not represent real world time.
				**Note:** When `--fixed-fps` is enabled or the engine is running in Movie Maker mode (see `MovieWriter`), process `delta` will always be the same for every frame, regardless of how much time the frame took to render.
				**Note:** Frame delta may be post-processed by `OS.delta_smoothing` if this is enabled for the project.
			'''

    assert isinstance(delta, (int, float)), 'delta must be int or float'






    self._ptr.call_with_return(49,tuple([delta]))

  @functools.native_method
  def _physics_process(self, delta:'float'   ) -> None:
    r'''
				Called once on each physics tick, and allows Nodes to synchronize their logic with physics ticks. `delta` is the logical time between physics ticks in seconds and is equal to `Engine.time_scale` / `Engine.physics_ticks_per_second`.
				It is only called if physics processing is enabled for this Node, which is done automatically if this method is overridden, and can be toggled with `set_physics_process`.
				Processing happens in order of `process_physics_priority`, lower priority values are called first. Nodes with the same priority are processed in tree order, or top to bottom as seen in the editor (also known as pre-order traversal).
				Corresponds to the `constant NOTIFICATION_PHYSICS_PROCESS` notification in `Object._notification`.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
				**Note:** Accumulated `delta` may diverge from real world seconds.
			'''

    assert isinstance(delta, (int, float)), 'delta must be int or float'






    self._ptr.call_with_return(50,tuple([delta]))

  @functools.native_method
  def _enter_tree(self) -> None:
    r'''
				Called when the node enters the `SceneTree` (e.g. upon instantiating, scene changing, or after calling `add_child` in a script). If the node has children, its `_enter_tree` callback will be called first, and then that of the children.
				Corresponds to the `constant NOTIFICATION_ENTER_TREE` notification in `Object._notification`.
			'''




    self._ptr.call_with_return(51,tuple([]))

  @functools.native_method
  def _exit_tree(self) -> None:
    r'''
				Called when the node is about to leave the `SceneTree` (e.g. upon freeing, scene changing, or after calling `remove_child` in a script). If the node has children, its `_exit_tree` callback will be called last, after all its children have left the tree.
				Corresponds to the `constant NOTIFICATION_EXIT_TREE` notification in `Object._notification` and signal `signal tree_exiting`. To get notified when the node has already left the active tree, connect to the `signal tree_exited`.
			'''




    self._ptr.call_with_return(52,tuple([]))

  @functools.native_method
  def _ready(self) -> None:
    r'''
				Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their `_ready` callbacks get triggered first, and the parent node will receive the ready notification afterwards.
				Corresponds to the `constant NOTIFICATION_READY` notification in `Object._notification`. See also the `@onready` annotation for variables.
				Usually used for initialization. For even earlier initialization, `Object._init` may be used. See also `_enter_tree`.
				**Note:** This method may be called only once for each node. After removing a node from the scene tree and adding it again, `_ready` will **not** be called a second time. This can be bypassed by requesting another call with `request_ready`, which may be called anywhere before adding the node again.
			'''




    self._ptr.call_with_return(53,tuple([]))

  @functools.native_method
  def _get_configuration_warnings(self) -> typing.Union['PackedStringArray']:
    r'''
				The elements in the array returned from this method are displayed as warnings in the Scene dock if the script that overrides it is a `tool` script.
				Returning an empty array produces no warnings.
				Call `update_configuration_warnings` when the warnings need to be updated for this node.
				```gdscript
				@export var energy = 0:
					set(value):
						energy = value
						update_configuration_warnings()

				func _get_configuration_warnings():
					if energy < 0:
						return `"Energy must be 0 or greater."`
					else:
						return ``
				```
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))
    return _ret


  @functools.native_method
  def _get_accessibility_configuration_warnings(self) -> typing.Union['PackedStringArray']:
    r'''
				The elements in the array returned from this method are displayed as warnings in the Scene dock if the script that overrides it is a `tool` script, and accessibility warnings are enabled in the editor settings.
				Returning an empty array produces no warnings.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def _input(self, event:'py4godot_inputevent.InputEvent'   ) -> None:
    r'''
				Called when there is an input event. The input event propagates up through the node tree until a node consumes it.
				It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_input`.
				To consume the input event and stop it propagating further to other nodes, `Viewport.set_input_as_handled` can be called.
				For gameplay input, `_unhandled_input` and `_unhandled_key_input` are usually a better fit as they allow the GUI to intercept the events first.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
			'''

    assert(not event is None)
    assert isinstance(event, get_class('InputEvent')), 'event must be InputEvent'






    self._ptr.call_with_return(56,tuple([event._ptr]))

  @functools.native_method
  def _shortcut_input(self, event:'py4godot_inputevent.InputEvent'   ) -> None:
    r'''
				Called when an `InputEventKey`, `InputEventShortcut`, or `InputEventJoypadButton` hasn't been consumed by `_input` or any GUI `Control` item. It is called before `_unhandled_key_input` and `_unhandled_input`. The input event propagates up through the node tree until a node consumes it.
				It is only called if shortcut processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_shortcut_input`.
				To consume the input event and stop it propagating further to other nodes, `Viewport.set_input_as_handled` can be called.
				This method can be used to handle shortcuts. For generic GUI events, use `_input` instead. Gameplay events should usually be handled with either `_unhandled_input` or `_unhandled_key_input`.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan).
			'''

    assert(not event is None)
    assert isinstance(event, get_class('InputEvent')), 'event must be InputEvent'






    self._ptr.call_with_return(57,tuple([event._ptr]))

  @functools.native_method
  def _unhandled_input(self, event:'py4godot_inputevent.InputEvent'   ) -> None:
    r'''
				Called when an `InputEvent` hasn't been consumed by `_input` or any GUI `Control` item. It is called after `_shortcut_input` and after `_unhandled_key_input`. The input event propagates up through the node tree until a node consumes it.
				It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_unhandled_input`.
				To consume the input event and stop it propagating further to other nodes, `Viewport.set_input_as_handled` can be called.
				For gameplay input, this method is usually a better fit than `_input`, as GUI events need a higher priority. For keyboard shortcuts, consider using `_shortcut_input` instead, as it is called before this method. Finally, to handle keyboard events, consider using `_unhandled_key_input` for performance reasons.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
			'''

    assert(not event is None)
    assert isinstance(event, get_class('InputEvent')), 'event must be InputEvent'






    self._ptr.call_with_return(58,tuple([event._ptr]))

  @functools.native_method
  def _unhandled_key_input(self, event:'py4godot_inputevent.InputEvent'   ) -> None:
    r'''
				Called when an `InputEventKey` hasn't been consumed by `_input` or any GUI `Control` item. It is called after `_shortcut_input` but before `_unhandled_input`. The input event propagates up through the node tree until a node consumes it.
				It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_unhandled_key_input`.
				To consume the input event and stop it propagating further to other nodes, `Viewport.set_input_as_handled` can be called.
				This method can be used to handle Unicode character input with `kbd`Alt`/kbd`, `kbd`Alt + Ctrl`/kbd`, and `kbd`Alt + Shift`/kbd` modifiers, after shortcuts were handled.
				For gameplay input, this and `_unhandled_input` are usually a better fit than `_input`, as GUI events should be handled first. This method also performs better than `_unhandled_input`, since unrelated events such as `InputEventMouseMotion` are automatically filtered. For shortcuts, consider using `_shortcut_input` instead.
				**Note:** This method is only called if the node is present in the scene tree (i.e. if it's not an orphan).
			'''

    assert(not event is None)
    assert isinstance(event, get_class('InputEvent')), 'event must be InputEvent'






    self._ptr.call_with_return(59,tuple([event._ptr]))

  @functools.native_method
  def _get_focused_accessibility_element(self) -> typing.Union['RID']:
    r'''
				Called during accessibility information updates to determine the currently focused sub-element, should return a sub-element RID or the value returned by `get_accessibility_element`.
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))
    return _ret


  @staticmethod
  def print_orphan_nodes() -> None:
    r'''
				Prints all orphan nodes (nodes outside the `SceneTree`). Useful for debugging.
				**Note:** This method only works in debug builds. Does nothing in a project exported in release mode.
			'''




    static_method(514,0,tuple([]))

  @staticmethod
  def get_orphan_node_ids() -> typing.Union['py4godot_inttypedarray.intTypedArray']:
    r'''
				Returns object IDs of all orphan nodes (nodes outside the `SceneTree`). Used for debugging.
				**Note:** `get_orphan_node_ids` only works in debug builds. When called in a project exported in release mode, `get_orphan_node_ids` will return an empty array.
			'''




    _ret = py4godot_inttypedarray.intTypedArray.construct_without_init()
    _ret._ptr = static_method(514,1,tuple([]))
    return _ret


  @functools.native_method
  def add_sibling(self, sibling:'Node'   , force_readable_name:'bool' =False  ) -> None:
    r'''
				Adds a `sibling` node to this node's parent, and moves the added sibling right below this node.
				If `force_readable_name` is `true`, improves the readability of the added `sibling`. If not named, the `sibling` is renamed to its type, and if it shares `name` with a sibling, a number is suffixed more appropriately. This operation is very slow. As such, it is recommended leaving this to `false`, which assigns a dummy name featuring `@` in both situations.
				Use `add_child` instead of this method if you don't need the child node to be added below a specific node in the list of children.
				**Note:** If this node is internal, the added sibling will be internal too (see `add_child`'s `internal` parameter).
			'''

    assert(not sibling is None)
    assert isinstance(sibling, get_class('Node')), 'sibling must be Node'
    assert isinstance(force_readable_name, bool), 'force_readable_name must be bool'







    self._ptr.call_with_return(61,tuple([sibling._ptr, force_readable_name]))

  @functools.native_method
  def set_name(self, name:'object'   ) -> None:
    r''''''

    assert(not name is None)
    assert isinstance(name, (str, StringName)), 'name must be str or StringName'

    self.py__name = name



    assert(isinstance(name, (str, StringName)))
    py_stringname_name = name if isinstance(name, StringName) else c_utils.py_string_to_string_name(name)


    self._ptr.call_with_return(62,tuple([py_stringname_name._ptr]))

  @functools.native_method
  def get_name(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(63,tuple([]))

    return _ret


  @functools.native_method
  def add_child(self, node:'Node'   , force_readable_name:'bool' =False  , internal:'int'  =0) -> None:
    r'''
				Adds a child `node`. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.
				If `force_readable_name` is `true`, improves the readability of the added `node`. If not named, the `node` is renamed to its type, and if it shares `name` with a sibling, a number is suffixed more appropriately. This operation is very slow. As such, it is recommended leaving this to `false`, which assigns a dummy name featuring `@` in both situations.
				If `internal` is different than `constant INTERNAL_MODE_DISABLED`, the child will be added as internal node. These nodes are ignored by methods like `get_children`, unless their parameter `include_internal` is `true`. It also prevents these nodes being duplicated with their parent. The intended usage is to hide the internal nodes from the user, so the user won't accidentally delete or modify them. Used by some GUI nodes, e.g. `ColorPicker`.
				**Note:** If `node` already has a parent, this method will fail. Use `remove_child` first to remove `node` from its current parent. For example:
				
				```gdscript
				var child_node = get_child(0)
				if child_node.get_parent():
					child_node.get_parent().remove_child(child_node)
				add_child(child_node)
				```
				
				
				If you need the child node to be added below a specific node in the list of children, use `add_sibling` instead of this method.
				**Note:** If you want a child to be persisted to a `PackedScene`, you must set `owner` in addition to calling `add_child`. This is typically relevant for `url=$DOCS_URL/tutorials/plugins/running_code_in_the_editor.html`tool scripts`/url` and `url=$DOCS_URL/tutorials/plugins/editor/index.html`editor plugins`/url`. If `add_child` is called without setting `owner`, the newly added `Node` will not be visible in the scene tree, though it will be visible in the 2D/3D view.
			'''



    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'
    assert isinstance(force_readable_name, bool), 'force_readable_name must be bool'
    assert isinstance(internal, (int, float)), 'internal must be int or float'








    self._ptr.call_with_return(64,tuple([node._ptr, force_readable_name, internal]))

  @functools.native_method
  def remove_child(self, node:'Node'   ) -> None:
    r'''
				Removes a child `node`. The `node`, along with its children, are **not** deleted. To delete a node, see `queue_free`.
				**Note:** When this node is inside the tree, this method sets the `owner` of the removed `node` (or its descendants) to `null`, if their `owner` is no longer an ancestor (see `is_ancestor_of`).
			'''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'






    self._ptr.call_with_return(65,tuple([node._ptr]))

  @functools.native_method
  def reparent(self, new_parent:'Node'   , keep_global_transform:'bool' =True  ) -> None:
    r'''
				Changes the parent of this `Node` to the `new_parent`. The node needs to already have a parent. The node's `owner` is preserved if its owner is still reachable from the new location (i.e., the node is still a descendant of the new parent after the operation).
				If `keep_global_transform` is `true`, the node's global transform will be preserved if supported. `Node2D`, `Node3D` and `Control` support this argument (but `Control` keeps only position).
			'''

    assert(not new_parent is None)
    assert isinstance(new_parent, get_class('Node')), 'new_parent must be Node'
    assert isinstance(keep_global_transform, bool), 'keep_global_transform must be bool'







    self._ptr.call_with_return(66,tuple([new_parent._ptr, keep_global_transform]))

  @functools.native_method
  def get_child_count(self, include_internal:'bool' =False  ) -> typing.Union[int]:
    r'''
				Returns the number of children of this node.
				If `include_internal` is `false`, internal children are not counted (see `add_child`'s `internal` parameter).
			'''

    assert isinstance(include_internal, bool), 'include_internal must be bool'






    _ret = 0
    _ret = self._ptr.call_with_return(67,tuple([include_internal]))
    return _ret


  @functools.native_method
  def get_children(self, include_internal:'bool' =False  ) -> typing.Union['py4godot_nodetypedarray.NodeTypedArray']:
    r'''
				Returns all children of this node inside an `Array`.
				If `include_internal` is `false`, excludes internal children from the returned array (see `add_child`'s `internal` parameter).
			'''

    assert isinstance(include_internal, bool), 'include_internal must be bool'






    _ret = py4godot_nodetypedarray.NodeTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(68,tuple([include_internal]))
    return _ret


  @functools.native_method
  def get_child(self, idx:'int'   , include_internal:'bool' =False  ) -> typing.Any:
    r'''
				Fetches a child node by its index. Each child node has an index relative to its siblings (see `get_index`). The first child is at index 0. Negative values can also be used to start from the end of the list. This method can be used in combination with `get_child_count` to iterate over this node's children. If no child exists at the given index, this method returns `null` and an error is generated.
				If `include_internal` is `false`, internal children are ignored (see `add_child`'s `internal` parameter).
				```gdscript
				# Assuming the following are children of this node, in order:
				# First, Middle, Last.

				var a = get_child(0).name  # a is "First"
				var b = get_child(1).name  # b is "Middle"
				var b = get_child(2).name  # b is "Last"
				var c = get_child(-1).name # c is "Last"
				```
				**Note:** To fetch a node by `NodePath`, use `get_node`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert isinstance(include_internal, bool), 'include_internal must be bool'







    _ret = Node.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(69,tuple([idx, include_internal]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def has_node(self, path:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the `path` points to a valid node. See also `get_node`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = 0
    _ret = self._ptr.call_with_return(70,tuple([py_nodepath_path._ptr]))
    return _ret


  @functools.native_method
  def get_node(self, path:'object'   ) -> typing.Any:
    r'''
				Fetches a node. The `NodePath` can either be a relative path (from this node), or an absolute path (from the `SceneTree.root`) to a node. If `path` does not point to a valid node, generates an error and returns `null`. Attempts to access methods on the return value will result in an _"Attempt to call <method> on a null instance."_ error.
				**Note:** Fetching by absolute path only works when the node is inside the scene tree (see `is_inside_tree`).
				**Example:** Assume this method is called from the Character node, inside the following tree:
				`codeblock lang=text`
				 ┖╴root
				    ┠╴Character (you are here!)
				    ┃  ┠╴Sword
				    ┃  ┖╴Backpack
				    ┃     ┖╴Dagger
				    ┠╴MyGame
				    ┖╴Swamp
				       ┠╴Alligator
				       ┠╴Mosquito
				       ┖╴Goblin
				```
				The following calls will return a valid node:
				
				```gdscript
				get_node("Sword")
				get_node("Backpack/Dagger")
				get_node("../Swamp/Alligator")
				get_node("/root/MyGame")
				```
				
				
			'''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = Node.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(71,tuple([py_nodepath_path._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_node_or_null(self, path:'object'   ) -> typing.Any:
    r'''
				Fetches a node by `NodePath`. Similar to `get_node`, but does not generate an error if `path` does not point to a valid node.
			'''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = Node.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(72,tuple([py_nodepath_path._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_parent(self) -> typing.Any:
    r'''
				Returns this node's parent node, or `null` if the node doesn't have a parent.
			'''




    _ret = Node.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(73,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def find_child(self, pattern:'str'   , recursive:'bool' =True  , owned:'bool' =True  ) -> typing.Any:
    r'''
				Finds the first descendant of this node whose `name` matches `pattern`, returning `null` if no match is found. The matching is done against node names, _not_ their paths, through `String.match`. As such, it is case-sensitive, `"*"` matches zero or more characters, and `"?"` matches any single character.
				If `recursive` is `false`, only this node's direct children are checked. Nodes are checked in tree order, so this node's first direct child is checked first, then its own direct children, etc., before moving to the second direct child, and so on. Internal children are also included in the search (see `internal` parameter in `add_child`).
				If `owned` is `true`, only descendants with a valid `owner` node are checked.
				**Note:** This method can be very slow. Consider storing a reference to the found node in a variable. Alternatively, use `get_node` with unique names (see `unique_name_in_owner`).
				**Note:** To find all descendant nodes matching a pattern or a class type, see `find_children`.
			'''

    assert(not pattern is None)
    assert isinstance(pattern, (str, String)), 'pattern must be str or String'
    assert isinstance(recursive, bool), 'recursive must be bool'
    assert isinstance(owned, bool), 'owned must be bool'




    assert(isinstance(pattern, (str, String)))
    py_string_pattern = pattern if isinstance(pattern, StringName) else c_utils.py_string_to_string(pattern)



    _ret = Node.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(74,tuple([py_string_pattern._ptr, recursive, owned]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def find_children(self, pattern:'str'   , type:'str' =""  , recursive:'bool' =True  , owned:'bool' =True  ) -> typing.Union['py4godot_nodetypedarray.NodeTypedArray']:
    r'''
				Finds all descendants of this node whose names match `pattern`, returning an empty `Array` if no match is found. The matching is done against node names, _not_ their paths, through `String.match`. As such, it is case-sensitive, `"*"` matches zero or more characters, and `"?"` matches any single character.
				If `type` is not empty, only ancestors inheriting from `type` are included (see `Object.is_class`).
				If `recursive` is `false`, only this node's direct children are checked. Nodes are checked in tree order, so this node's first direct child is checked first, then its own direct children, etc., before moving to the second direct child, and so on. Internal children are also included in the search (see `internal` parameter in `add_child`).
				If `owned` is `true`, only descendants with a valid `owner` node are checked.
				**Note:** This method can be very slow. Consider storing references to the found nodes in a variable.
				**Note:** To find a single descendant node matching a pattern, see `find_child`.
			'''
    if type is None:
      type = String.new0()
    if type is None:
      type = String.new0()

    assert(not pattern is None)
    assert isinstance(pattern, (str, String)), 'pattern must be str or String'
    assert isinstance(recursive, bool), 'recursive must be bool'
    assert isinstance(owned, bool), 'owned must be bool'




    assert(isinstance(pattern, (str, String)))
    py_string_pattern = pattern if isinstance(pattern, StringName) else c_utils.py_string_to_string(pattern)
    assert(isinstance(type, (str, String)))
    py_string_type = type if isinstance(type, StringName) else c_utils.py_string_to_string(type)



    _ret = py4godot_nodetypedarray.NodeTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(75,tuple([py_string_pattern._ptr, py_string_type._ptr, recursive, owned]))
    return _ret


  @functools.native_method
  def find_parent(self, pattern:'str'   ) -> typing.Any:
    r'''
				Finds the first ancestor of this node whose `name` matches `pattern`, returning `null` if no match is found. The matching is done through `String.match`. As such, it is case-sensitive, `"*"` matches zero or more characters, and `"?"` matches any single character. See also `find_child` and `find_children`.
				**Note:** As this method walks upwards in the scene tree, it can be slow in large, deeply nested nodes. Consider storing a reference to the found node in a variable. Alternatively, use `get_node` with unique names (see `unique_name_in_owner`).
			'''

    assert(not pattern is None)
    assert isinstance(pattern, (str, String)), 'pattern must be str or String'




    assert(isinstance(pattern, (str, String)))
    py_string_pattern = pattern if isinstance(pattern, StringName) else c_utils.py_string_to_string(pattern)

    _ret = Node.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(76,tuple([py_string_pattern._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def has_node_and_resource(self, path:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if `path` points to a valid node and its subnames point to a valid `Resource`, e.g. `Area2D/CollisionShape2D:shape`. Properties that are not `Resource` types (such as nodes or other `Variant` types) are not considered. See also `get_node_and_resource`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([py_nodepath_path._ptr]))
    return _ret


  @functools.native_method
  def get_node_and_resource(self, path:'object'   ) -> typing.Union['Array']:
    r'''
				Fetches a node and its most nested resource as specified by the `NodePath`'s subname. Returns an `Array` of size `3` where:
				- Element `0` is the `Node`, or `null` if not found;
				- Element `1` is the subname's last nested `Resource`, or `null` if not found;
				- Element `2` is the remaining `NodePath`, referring to an existing, non-`Resource` property (see `Object.get_indexed`).
				**Example:** Assume that the child's `Sprite2D.texture` has been assigned an `AtlasTexture`:
				
				```gdscript
				var a = get_node_and_resource("Area2D/Sprite2D")
				print(a`0`.name) # Prints Sprite2D
				print(a`1`)      # Prints <null>
				print(a`2`)      # Prints ^""

				var b = get_node_and_resource("Area2D/Sprite2D:texture:atlas")
				print(b`0`.name)        # Prints Sprite2D
				print(b`1`.get_class()) # Prints AtlasTexture
				print(b`2`)             # Prints ^""

				var c = get_node_and_resource("Area2D/Sprite2D:texture:atlas:region")
				print(c`0`.name)        # Prints Sprite2D
				print(c`1`.get_class()) # Prints AtlasTexture
				print(c`2`)             # Prints ^":region"
				```
				
				
			'''

    assert(not path is None)
    assert isinstance(path, (str, NodePath)), 'path must be str or NodePath'




    assert(isinstance(path, (str, NodePath)))
    py_nodepath_path = path if isinstance(path,NodePath) else NodePath.new2(path)

    _ret = Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([py_nodepath_path._ptr]))
    return _ret


  @functools.native_method
  def is_inside_tree(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this node is currently inside a `SceneTree`. See also `get_tree`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))
    return _ret


  @functools.native_method
  def is_part_of_edited_scene(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the node is part of the scene currently opened in the editor.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([]))
    return _ret


  @functools.native_method
  def is_ancestor_of(self, node:'Node'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the given `node` is a direct or indirect child of this node.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'






    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([node._ptr]))
    return _ret


  @functools.native_method
  def is_greater_than(self, node:'Node'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the given `node` occurs later in the scene hierarchy than this node. A node occurring later is usually processed last.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'






    _ret = 0
    _ret = self._ptr.call_with_return(82,tuple([node._ptr]))
    return _ret


  @functools.native_method
  def get_path(self) -> typing.Union['NodePath']:
    r'''
				Returns the node's absolute path, relative to the `SceneTree.root`. If the node is not inside the scene tree, this method fails and returns an empty `NodePath`.
			'''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))
    return _ret


  @functools.native_method
  def get_path_to(self, node:'Node'   , use_unique_path:'bool' =False  ) -> typing.Union['NodePath']:
    r'''
				Returns the relative `NodePath` from this node to the specified `node`. Both nodes must be in the same `SceneTree` or scene hierarchy, otherwise this method fails and returns an empty `NodePath`.
				If `use_unique_path` is `true`, returns the shortest path accounting for this node's unique name (see `unique_name_in_owner`).
				**Note:** If you get a relative path which starts from a unique node, the path may be longer than a normal relative path, due to the addition of the unique node's name.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'
    assert isinstance(use_unique_path, bool), 'use_unique_path must be bool'







    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([node._ptr, use_unique_path]))
    return _ret


  @functools.native_method
  def add_to_group(self, group:'object'   , persistent:'bool' =False  ) -> None:
    r'''
				Adds the node to the `group`. Groups can be helpful to organize a subset of nodes, for example `"enemies"` or `"collectables"`. See notes in the description, and the group methods in `SceneTree`.
				If `persistent` is `true`, the group will be stored when saved inside a `PackedScene`. All groups created and displayed in the Node dock are persistent.
				**Note:** To improve performance, the order of group names is _not_ guaranteed and may vary between project runs. Therefore, do not rely on the group order.
				**Note:** `SceneTree`'s group methods will _not_ work on this node if not inside the tree (see `is_inside_tree`).
			'''

    assert(not group is None)
    assert isinstance(group, (str, StringName)), 'group must be str or StringName'
    assert isinstance(persistent, bool), 'persistent must be bool'




    assert(isinstance(group, (str, StringName)))
    py_stringname_group = group if isinstance(group, StringName) else c_utils.py_string_to_string_name(group)


    self._ptr.call_with_return(85,tuple([py_stringname_group._ptr, persistent]))

  @functools.native_method
  def remove_from_group(self, group:'object'   ) -> None:
    r'''
				Removes the node from the given `group`. Does nothing if the node is not in the `group`. See also notes in the description, and the `SceneTree`'s group methods.
			'''

    assert(not group is None)
    assert isinstance(group, (str, StringName)), 'group must be str or StringName'




    assert(isinstance(group, (str, StringName)))
    py_stringname_group = group if isinstance(group, StringName) else c_utils.py_string_to_string_name(group)

    self._ptr.call_with_return(86,tuple([py_stringname_group._ptr]))

  @functools.native_method
  def is_in_group(self, group:'object'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if this node has been added to the given `group`. See `add_to_group` and `remove_from_group`. See also notes in the description, and the `SceneTree`'s group methods.
			'''

    assert(not group is None)
    assert isinstance(group, (str, StringName)), 'group must be str or StringName'




    assert(isinstance(group, (str, StringName)))
    py_stringname_group = group if isinstance(group, StringName) else c_utils.py_string_to_string_name(group)

    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([py_stringname_group._ptr]))
    return _ret


  @functools.native_method
  def move_child(self, child_node:'Node'   , to_index:'int'   ) -> None:
    r'''
				Moves `child_node` to the given index. A node's index is the order among its siblings. If `to_index` is negative, the index is counted from the end of the list. See also `get_child` and `get_index`.
				**Note:** The processing order of several engine callbacks (`_ready`, `_process`, etc.) and notifications sent through `propagate_notification` is affected by tree order. `CanvasItem` nodes are also rendered in tree order. See also `process_priority`.
			'''

    assert(not child_node is None)
    assert isinstance(child_node, get_class('Node')), 'child_node must be Node'
    assert isinstance(to_index, (int, float)), 'to_index must be int or float'







    self._ptr.call_with_return(88,tuple([child_node._ptr, to_index]))

  @functools.native_method
  def get_groups(self) -> typing.Union['py4godot_stringnametypedarray.StringNameTypedArray']:
    r'''
				Returns an `Array` of group names that the node has been added to.
				**Note:** To improve performance, the order of group names is _not_ guaranteed and may vary between project runs. Therefore, do not rely on the group order.
				**Note:** This method may also return some group names starting with an underscore (`_`). These are internally used by the engine. To avoid conflicts, do not use custom groups starting with underscores. To exclude internal groups, see the following code snippet:
				
				```gdscript
				# Stores the node's non-internal groups only (as an array of StringNames).
				var non_internal_groups = ``
				for group in get_groups():
					if not str(group).begins_with("_"):
						non_internal_groups.push_back(group)
				```
				
				
			'''




    _ret = py4godot_stringnametypedarray.StringNameTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(89,tuple([]))
    return _ret


  @functools.native_method
  def set_owner(self, owner:'Node'   ) -> None:
    r''''''

    assert(not owner is None)
    assert isinstance(owner, get_class('Node')), 'owner must be Node'

    self.py__owner = owner






    self._ptr.call_with_return(90,tuple([owner._ptr]))

  @functools.native_method
  def get_owner(self) -> typing.Any:
    r''''''




    _ret = Node.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_index(self, include_internal:'bool' =False  ) -> typing.Union[int]:
    r'''
				Returns this node's order among its siblings. The first node's index is `0`. See also `get_child`.
				If `include_internal` is `false`, returns the index ignoring internal children. The first, non-internal child will have an index of `0` (see `add_child`'s `internal` parameter).
			'''

    assert isinstance(include_internal, bool), 'include_internal must be bool'






    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([include_internal]))
    return _ret


  @functools.native_method
  def print_tree(self) -> None:
    r'''
				Prints the node and its children to the console, recursively. The node does not have to be inside the tree. This method outputs `NodePath`s relative to this node, and is good for copy/pasting into `get_node`. See also `print_tree_pretty`.
				May print, for example:
				`codeblock lang=text`
				.
				Menu
				Menu/Label
				Menu/Camera2D
				SplashScreen
				SplashScreen/Camera2D
				```
			'''




    self._ptr.call_with_return(93,tuple([]))

  @functools.native_method
  def print_tree_pretty(self) -> None:
    r'''
				Prints the node and its children to the console, recursively. The node does not have to be inside the tree. Similar to `print_tree`, but the graphical representation looks like what is displayed in the editor's Scene dock. It is useful for inspecting larger trees.
				May print, for example:
				`codeblock lang=text`
				 ┖╴TheGame
				    ┠╴Menu
				    ┃  ┠╴Label
				    ┃  ┖╴Camera2D
				    ┖╴SplashScreen
				       ┖╴Camera2D
				```
			'''




    self._ptr.call_with_return(94,tuple([]))

  @functools.native_method
  def get_tree_string(self) -> typing.Union[str]:
    r'''
				Returns the tree as a `String`. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the `get_node` function. It also can be used in game UI/UX.
				May print, for example:
				`codeblock lang=text`
				TheGame
				TheGame/Menu
				TheGame/Menu/Label
				TheGame/Menu/Camera2D
				TheGame/SplashScreen
				TheGame/SplashScreen/Camera2D
				```
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(95,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_tree_string_pretty(self) -> typing.Union[str]:
    r'''
				Similar to `get_tree_string`, this returns the tree as a `String`. This version displays a more graphical representation similar to what is displayed in the Scene Dock. It is useful for inspecting larger trees.
				May print, for example:
				`codeblock lang=text`
				 ┖╴TheGame
				    ┠╴Menu
				    ┃  ┠╴Label
				    ┃  ┖╴Camera2D
				    ┖╴SplashScreen
				       ┖╴Camera2D
				```
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(96,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_scene_file_path(self, scene_file_path:'str'   ) -> None:
    r''''''

    assert(not scene_file_path is None)
    assert isinstance(scene_file_path, (str, String)), 'scene_file_path must be str or String'

    self.py__scene_file_path = scene_file_path



    assert(isinstance(scene_file_path, (str, String)))
    py_string_scene_file_path = scene_file_path if isinstance(scene_file_path, StringName) else c_utils.py_string_to_string(scene_file_path)

    py__string_scene_file_path = utils.py_string_to_string(scene_file_path)
    py__string_scene_file_path.shouldBeDeleted = False


    self._ptr.call_with_return(97,tuple([py__string_scene_file_path._ptr]))

  @functools.native_method
  def get_scene_file_path(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(98,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def propagate_notification(self, what:'int'   ) -> None:
    r'''
				Calls `Object.notification` with `what` on this node and all of its children, recursively.
			'''

    assert isinstance(what, (int, float)), 'what must be int or float'






    self._ptr.call_with_return(99,tuple([what]))

  @functools.native_method
  def propagate_call(self, method:'object'   , args:'Array' = None  , parent_first:'bool' =False  ) -> None:
    r'''
				Calls the given `method` name, passing `args` as arguments, on this node and all of its children, recursively.
				If `parent_first` is `true`, the method is called on this node first, then on all of its children. If `false`, the children's methods are called first.
			'''
    if args is None:
      args = Array.new0()
    if args is None:
      args = Array.new0()

    assert(not method is None)
    assert isinstance(method, (str, StringName)), 'method must be str or StringName'
    assert isinstance(parent_first, bool), 'parent_first must be bool'




    assert(isinstance(method, (str, StringName)))
    py_stringname_method = method if isinstance(method, StringName) else c_utils.py_string_to_string_name(method)



    self._ptr.call_with_return(100,tuple([py_stringname_method._ptr, args._ptr, parent_first]))

  @functools.native_method
  def set_physics_process(self, enable:'bool'   ) -> None:
    r'''
				If set to `true`, enables physics (fixed framerate) processing. When a node is being processed, it will receive a `constant NOTIFICATION_PHYSICS_PROCESS` at a fixed (usually 60 FPS, see `Engine.physics_ticks_per_second` to change) interval (and the `_physics_process` callback will be called if it exists).
				**Note:** If `_physics_process` is overridden, this will be automatically enabled before `_ready` is called.
			'''

    assert isinstance(enable, bool), 'enable must be bool'






    self._ptr.call_with_return(101,tuple([enable]))

  @functools.native_method
  def get_physics_process_delta_time(self) -> typing.Union[float]:
    r'''
				Returns the time elapsed (in seconds) since the last physics callback. This value is identical to `_physics_process`'s `delta` parameter, and is often consistent at run-time, unless `Engine.physics_ticks_per_second` is changed. See also `constant NOTIFICATION_PHYSICS_PROCESS`.
				**Note:** The returned value will be larger than expected if running at a framerate lower than `Engine.physics_ticks_per_second` / `Engine.max_physics_steps_per_frame` FPS. This is done to avoid "spiral of death" scenarios where performance would plummet due to an ever-increasing number of physics steps per frame. This behavior affects both `_process` and `_physics_process`. As a result, avoid using `delta` for time measurements in real-world seconds. Use the `Time` singleton's methods for this purpose instead, such as `Time.get_ticks_usec`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(102,tuple([]))
    return _ret


  @functools.native_method
  def is_physics_processing(self) -> typing.Union[bool]:
    r'''
				Returns `true` if physics processing is enabled (see `set_physics_process`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(103,tuple([]))
    return _ret


  @functools.native_method
  def get_process_delta_time(self) -> typing.Union[float]:
    r'''
				Returns the time elapsed (in seconds) since the last process callback. This value is identical to `_process`'s `delta` parameter, and may vary from frame to frame. See also `constant NOTIFICATION_PROCESS`.
				**Note:** The returned value will be larger than expected if running at a framerate lower than `Engine.physics_ticks_per_second` / `Engine.max_physics_steps_per_frame` FPS. This is done to avoid "spiral of death" scenarios where performance would plummet due to an ever-increasing number of physics steps per frame. This behavior affects both `_process` and `_physics_process`. As a result, avoid using `delta` for time measurements in real-world seconds. Use the `Time` singleton's methods for this purpose instead, such as `Time.get_ticks_usec`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([]))
    return _ret


  @functools.native_method
  def set_process(self, enable:'bool'   ) -> None:
    r'''
				If set to `true`, enables processing. When a node is being processed, it will receive a `constant NOTIFICATION_PROCESS` on every drawn frame (and the `_process` callback will be called if it exists).
				**Note:** If `_process` is overridden, this will be automatically enabled before `_ready` is called.
				**Note:** This method only affects the `_process` callback, i.e. it has no effect on other callbacks like `_physics_process`. If you want to disable all processing for the node, set `process_mode` to `constant PROCESS_MODE_DISABLED`.
			'''

    assert isinstance(enable, bool), 'enable must be bool'






    self._ptr.call_with_return(105,tuple([enable]))

  @functools.native_method
  def set_process_priority(self, priority:'int'   ) -> None:
    r''''''

    assert isinstance(priority, (int, float)), 'priority must be int or float'

    self.py__process_priority = priority






    self._ptr.call_with_return(106,tuple([priority]))

  @functools.native_method
  def get_process_priority(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(107,tuple([]))

    return _ret


  @functools.native_method
  def set_physics_process_priority(self, priority:'int'   ) -> None:
    r''''''

    assert isinstance(priority, (int, float)), 'priority must be int or float'

    self.py__process_physics_priority = priority






    self._ptr.call_with_return(108,tuple([priority]))

  @functools.native_method
  def get_physics_process_priority(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(109,tuple([]))

    return _ret


  @functools.native_method
  def is_processing(self) -> typing.Union[bool]:
    r'''
				Returns `true` if processing is enabled (see `set_process`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(110,tuple([]))
    return _ret


  @functools.native_method
  def set_process_input(self, enable:'bool'   ) -> None:
    r'''
				If set to `true`, enables input processing.
				**Note:** If `_input` is overridden, this will be automatically enabled before `_ready` is called. Input processing is also already enabled for GUI controls, such as `Button` and `TextEdit`.
			'''

    assert isinstance(enable, bool), 'enable must be bool'






    self._ptr.call_with_return(111,tuple([enable]))

  @functools.native_method
  def is_processing_input(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the node is processing input (see `set_process_input`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(112,tuple([]))
    return _ret


  @functools.native_method
  def set_process_shortcut_input(self, enable:'bool'   ) -> None:
    r'''
				If set to `true`, enables shortcut processing for this node.
				**Note:** If `_shortcut_input` is overridden, this will be automatically enabled before `_ready` is called.
			'''

    assert isinstance(enable, bool), 'enable must be bool'






    self._ptr.call_with_return(113,tuple([enable]))

  @functools.native_method
  def is_processing_shortcut_input(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the node is processing shortcuts (see `set_process_shortcut_input`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(114,tuple([]))
    return _ret


  @functools.native_method
  def set_process_unhandled_input(self, enable:'bool'   ) -> None:
    r'''
				If set to `true`, enables unhandled input processing. It enables the node to receive all input that was not previously handled (usually by a `Control`).
				**Note:** If `_unhandled_input` is overridden, this will be automatically enabled before `_ready` is called. Unhandled input processing is also already enabled for GUI controls, such as `Button` and `TextEdit`.
			'''

    assert isinstance(enable, bool), 'enable must be bool'






    self._ptr.call_with_return(115,tuple([enable]))

  @functools.native_method
  def is_processing_unhandled_input(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the node is processing unhandled input (see `set_process_unhandled_input`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(116,tuple([]))
    return _ret


  @functools.native_method
  def set_process_unhandled_key_input(self, enable:'bool'   ) -> None:
    r'''
				If set to `true`, enables unhandled key input processing.
				**Note:** If `_unhandled_key_input` is overridden, this will be automatically enabled before `_ready` is called.
			'''

    assert isinstance(enable, bool), 'enable must be bool'






    self._ptr.call_with_return(117,tuple([enable]))

  @functools.native_method
  def is_processing_unhandled_key_input(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the node is processing unhandled key input (see `set_process_unhandled_key_input`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(118,tuple([]))
    return _ret


  @functools.native_method
  def set_process_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__process_mode = mode






    self._ptr.call_with_return(119,tuple([mode]))

  @functools.native_method
  def get_process_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(120,tuple([]))

    return _ret


  @functools.native_method
  def can_process(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the node can receive processing notifications and input callbacks (`constant NOTIFICATION_PROCESS`, `_input`, etc.) from the `SceneTree` and `Viewport`. The returned value depends on `process_mode`:
				- If set to `constant PROCESS_MODE_PAUSABLE`, returns `true` when the game is processing, i.e. `SceneTree.paused` is `false`;
				- If set to `constant PROCESS_MODE_WHEN_PAUSED`, returns `true` when the game is paused, i.e. `SceneTree.paused` is `true`;
				- If set to `constant PROCESS_MODE_ALWAYS`, always returns `true`;
				- If set to `constant PROCESS_MODE_DISABLED`, always returns `false`;
				- If set to `constant PROCESS_MODE_INHERIT`, use the parent node's `process_mode` to determine the result.
				If the node is not inside the tree, returns `false` no matter the value of `process_mode`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(121,tuple([]))
    return _ret


  @functools.native_method
  def set_process_thread_group(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__process_thread_group = mode






    self._ptr.call_with_return(122,tuple([mode]))

  @functools.native_method
  def get_process_thread_group(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(123,tuple([]))

    return _ret


  @functools.native_method
  def set_process_thread_messages(self, flags:'int'   ) -> None:
    r''''''

    assert isinstance(flags, (int, float)), 'flags must be int or float'

    self.py__process_thread_messages = flags






    self._ptr.call_with_return(124,tuple([flags]))

  @functools.native_method
  def get_process_thread_messages(self) -> typing.Union[int]:
    r''''''




    _ret
    _ret = self._ptr.call_with_return(125,tuple([]))

    return _ret


  @functools.native_method
  def set_process_thread_group_order(self, order:'int'   ) -> None:
    r''''''

    assert isinstance(order, (int, float)), 'order must be int or float'

    self.py__process_thread_group_order = order






    self._ptr.call_with_return(126,tuple([order]))

  @functools.native_method
  def get_process_thread_group_order(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(127,tuple([]))

    return _ret


  @functools.native_method
  def queue_accessibility_update(self) -> None:
    r'''
				Queues an accessibility information update for this node.
			'''




    self._ptr.call_with_return(128,tuple([]))

  @functools.native_method
  def get_accessibility_element(self) -> typing.Union['RID']:
    r'''
				Returns main accessibility element RID.
				**Note:** This method should be called only during accessibility information updates (`constant NOTIFICATION_ACCESSIBILITY_UPDATE`).
			'''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(129,tuple([]))
    return _ret


  @functools.native_method
  def set_display_folded(self, fold:'bool'   ) -> None:
    r'''
				If set to `true`, the node appears folded in the Scene dock. As a result, all of its children are hidden. This method is intended to be used in editor plugins and tools, but it also works in release builds. See also `is_displayed_folded`.
			'''

    assert isinstance(fold, bool), 'fold must be bool'






    self._ptr.call_with_return(130,tuple([fold]))

  @functools.native_method
  def is_displayed_folded(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the node is folded (collapsed) in the Scene dock. This method is intended to be used in editor plugins and tools. See also `set_display_folded`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(131,tuple([]))
    return _ret


  @functools.native_method
  def set_process_internal(self, enable:'bool'   ) -> None:
    r'''
				If set to `true`, enables internal processing for this node. Internal processing happens in isolation from the normal `_process` calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting (`set_process`).
				**Warning:** Built-in nodes rely on internal processing for their internal logic. Disabling it is unsafe and may lead to unexpected behavior. Use this method if you know what you are doing.
			'''

    assert isinstance(enable, bool), 'enable must be bool'






    self._ptr.call_with_return(132,tuple([enable]))

  @functools.native_method
  def is_processing_internal(self) -> typing.Union[bool]:
    r'''
				Returns `true` if internal processing is enabled (see `set_process_internal`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(133,tuple([]))
    return _ret


  @functools.native_method
  def set_physics_process_internal(self, enable:'bool'   ) -> None:
    r'''
				If set to `true`, enables internal physics for this node. Internal physics processing happens in isolation from the normal `_physics_process` calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting (`set_physics_process`).
				**Warning:** Built-in nodes rely on internal processing for their internal logic. Disabling it is unsafe and may lead to unexpected behavior. Use this method if you know what you are doing.
			'''

    assert isinstance(enable, bool), 'enable must be bool'






    self._ptr.call_with_return(134,tuple([enable]))

  @functools.native_method
  def is_physics_processing_internal(self) -> typing.Union[bool]:
    r'''
				Returns `true` if internal physics processing is enabled (see `set_physics_process_internal`).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(135,tuple([]))
    return _ret


  @functools.native_method
  def set_physics_interpolation_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__physics_interpolation_mode = mode






    self._ptr.call_with_return(136,tuple([mode]))

  @functools.native_method
  def get_physics_interpolation_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(137,tuple([]))

    return _ret


  @functools.native_method
  def is_physics_interpolated(self) -> typing.Union[bool]:
    r'''
				Returns `true` if physics interpolation is enabled for this node (see `physics_interpolation_mode`).
				**Note:** Interpolation will only be active if both the flag is set **and** physics interpolation is enabled within the `SceneTree`. This can be tested using `is_physics_interpolated_and_enabled`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(138,tuple([]))
    return _ret


  @functools.native_method
  def is_physics_interpolated_and_enabled(self) -> typing.Union[bool]:
    r'''
				Returns `true` if physics interpolation is enabled (see `physics_interpolation_mode`) **and** enabled in the `SceneTree`.
				This is a convenience version of `is_physics_interpolated` that also checks whether physics interpolation is enabled globally.
				See `SceneTree.physics_interpolation` and `ProjectSettings.physics/common/physics_interpolation`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(139,tuple([]))
    return _ret


  @functools.native_method
  def reset_physics_interpolation(self) -> None:
    r'''
				When physics interpolation is active, moving a node to a radically different transform (such as placement within a level) can result in a visible glitch as the object is rendered moving from the old to new position over the physics tick.
				That glitch can be prevented by calling this method, which temporarily disables interpolation until the physics tick is complete.
				The notification `constant NOTIFICATION_RESET_PHYSICS_INTERPOLATION` will be received by the node and all children recursively.
				**Note:** This function should be called **after** moving the node, rather than before.
			'''




    self._ptr.call_with_return(140,tuple([]))

  @functools.native_method
  def set_auto_translate_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__auto_translate_mode = mode






    self._ptr.call_with_return(141,tuple([mode]))

  @functools.native_method
  def get_auto_translate_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(142,tuple([]))

    return _ret


  @functools.native_method
  def can_auto_translate(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this node can automatically translate messages depending on the current locale. See `auto_translate_mode`, `atr`, and `atr_n`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(143,tuple([]))
    return _ret


  @functools.native_method
  def set_translation_domain_inherited(self) -> None:
    r'''
				Makes this node inherit the translation domain from its parent node. If this node has no parent, the main translation domain will be used.
				This is the default behavior for all nodes. Calling `Object.set_translation_domain` disables this behavior.
			'''




    self._ptr.call_with_return(144,tuple([]))

  @functools.native_method
  def get_window(self) -> typing.Any:
    r'''
				Returns the `Window` that contains this node. If the node is in the main window, this is equivalent to getting the root node (`get_tree().get_root()`).
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Window
    _ret._ptr = self._ptr.call_with_return(145,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_last_exclusive_window(self) -> typing.Any:
    r'''
				Returns the `Window` that contains this node, or the last exclusive child in a chain of windows starting with the one that contains this node.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Window
    _ret._ptr = self._ptr.call_with_return(146,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_tree(self) -> typing.Union['py4godot_scenetree.SceneTree']:
    r'''
				Returns the `SceneTree` that contains this node. If this node is not inside the tree, generates an error and returns `null`. See also `is_inside_tree`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: SceneTree
    _ret._ptr = self._ptr.call_with_return(147,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def create_tween(self) -> typing.Union['py4godot_tween.Tween']:
    r'''
				Creates a new `Tween` and binds it to this node.
				This is the equivalent of doing:
				
				```gdscript
				get_tree().create_tween().bind_node(self)
				```
				
				
				The Tween will start automatically on the next process frame or physics frame (depending on `enum Tween.TweenProcessMode`). See `Tween.bind_node` for more info on Tweens bound to nodes.
				**Note:** The method can still be used when the node is not inside `SceneTree`. It can fail in an unlikely case of using a custom `MainLoop`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Tween
    _ret._ptr = self._ptr.call_with_return(148,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def duplicate(self, flags:'int' =15  ) -> typing.Any:
    r'''
				Duplicates the node, returning a new node with all of its properties, signals, groups, and children copied from the original. The behavior can be tweaked through the `flags` (see `enum DuplicateFlags`). Internal nodes are not duplicated.
				**Note:** For nodes with a `Script` attached, if `Object._init` has been defined with required parameters, the duplicated node will not have a `Script`.
			'''

    assert isinstance(flags, (int, float)), 'flags must be int or float'






    _ret = Node.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(149,tuple([flags]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def replace_by(self, node:'Node'   , keep_groups:'bool' =False  ) -> None:
    r'''
				Replaces this node by the given `node`. All children of this node are moved to `node`.
				If `keep_groups` is `true`, the `node` is added to the same groups that the replaced node is in (see `add_to_group`).
				**Warning:** The replaced node is removed from the tree, but it is **not** deleted. To prevent memory leaks, store a reference to the node in a variable, or use `Object.free`.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'
    assert isinstance(keep_groups, bool), 'keep_groups must be bool'







    self._ptr.call_with_return(150,tuple([node._ptr, keep_groups]))

  @functools.native_method
  def set_scene_instance_load_placeholder(self, load_placeholder:'bool'   ) -> None:
    r'''
				If set to `true`, the node becomes an `InstancePlaceholder` when packed and instantiated from a `PackedScene`. See also `get_scene_instance_load_placeholder`.
			'''

    assert isinstance(load_placeholder, bool), 'load_placeholder must be bool'






    self._ptr.call_with_return(151,tuple([load_placeholder]))

  @functools.native_method
  def get_scene_instance_load_placeholder(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this node is an instance load placeholder. See `InstancePlaceholder` and `set_scene_instance_load_placeholder`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(152,tuple([]))
    return _ret


  @functools.native_method
  def set_editable_instance(self, node:'Node'   , is_editable:'bool'   ) -> None:
    r'''
				Set to `true` to allow all nodes owned by `node` to be available, and editable, in the Scene dock, even if their `owner` is not the scene root. This method is intended to be used in editor plugins and tools, but it also works in release builds. See also `is_editable_instance`.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'
    assert isinstance(is_editable, bool), 'is_editable must be bool'







    self._ptr.call_with_return(153,tuple([node._ptr, is_editable]))

  @functools.native_method
  def is_editable_instance(self, node:'Node'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if `node` has editable children enabled relative to this node. This method is intended to be used in editor plugins and tools. See also `set_editable_instance`.
			'''

    assert(not node is None)
    assert isinstance(node, get_class('Node')), 'node must be Node'






    _ret = 0
    _ret = self._ptr.call_with_return(154,tuple([node._ptr]))
    return _ret


  @functools.native_method
  def get_viewport(self) -> typing.Any:
    r'''
				Returns the node's closest `Viewport` ancestor, if the node is inside the tree. Otherwise, returns `null`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Viewport
    _ret._ptr = self._ptr.call_with_return(155,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def queue_free(self) -> None:
    r'''
				Queues this node to be deleted at the end of the current frame. When deleted, all of its children are deleted as well, and all references to the node and its children become invalid.
				Unlike with `Object.free`, the node is not deleted instantly, and it can still be accessed before deletion. It is also safe to call `queue_free` multiple times. Use `Object.is_queued_for_deletion` to check if the node will be deleted at the end of the frame.
				**Note:** The node will only be freed after all other deferred calls are finished. Using this method is not always the same as calling `Object.free` through `Object.call_deferred`.
			'''




    self._ptr.call_with_return(156,tuple([]))

  @functools.native_method
  def request_ready(self) -> None:
    r'''
				Requests `_ready` to be called again the next time the node enters the tree. Does **not** immediately call `_ready`.
				**Note:** This method only affects the current node. If the node's children also need to request ready, this method needs to be called for each one of them. When the node and its children enter the tree again, the order of `_ready` callbacks will be the same as normal.
			'''




    self._ptr.call_with_return(157,tuple([]))

  @functools.native_method
  def is_node_ready(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the node is ready, i.e. it's inside scene tree and all its children are initialized.
				`request_ready` resets it back to `false`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(158,tuple([]))
    return _ret


  @functools.native_method
  def set_multiplayer_authority(self, id:'int'   , recursive:'bool' =True  ) -> None:
    r'''
				Sets the node's multiplayer authority to the peer with the given peer `id`. The multiplayer authority is the peer that has authority over the node on the network. Defaults to peer ID 1 (the server). Useful in conjunction with `rpc_config` and the `MultiplayerAPI`.
				If `recursive` is `true`, the given peer is recursively set as the authority for all children of this node.
				**Warning:** This does **not** automatically replicate the new authority to other peers. It is the developer's responsibility to do so. You may replicate the new authority's information using `MultiplayerSpawner.spawn_function`, an RPC, or a `MultiplayerSynchronizer`. Furthermore, the parent's authority does **not** propagate to newly added children.
			'''

    assert isinstance(id, (int, float)), 'id must be int or float'
    assert isinstance(recursive, bool), 'recursive must be bool'







    self._ptr.call_with_return(159,tuple([id, recursive]))

  @functools.native_method
  def get_multiplayer_authority(self) -> typing.Union[int]:
    r'''
				Returns the peer ID of the multiplayer authority for this node. See `set_multiplayer_authority`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(160,tuple([]))
    return _ret


  @functools.native_method
  def is_multiplayer_authority(self) -> typing.Union[bool]:
    r'''
				Returns `true` if the local system is the multiplayer authority of this node.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(161,tuple([]))
    return _ret


  @functools.native_method
  def get_multiplayer(self) -> typing.Union['py4godot_multiplayerapiextension.MultiplayerAPIExtension','py4godot_scenemultiplayer.SceneMultiplayer','py4godot_multiplayerapi.MultiplayerAPI']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: MultiplayerAPI
    _ret._ptr = self._ptr.call_with_return(162,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def rpc_config(self, method:'object'   , config:'object'   ) -> None:
    r'''
				Changes the RPC configuration for the given `method`. `config` should either be `null` to disable the feature (as by default), or a `Dictionary` containing the following entries:
				- `rpc_mode`: see `enum MultiplayerAPI.RPCMode`;
				- `transfer_mode`: see `enum MultiplayerPeer.TransferMode`;
				- `call_local`: if `true`, the method will also be called locally;
				- `channel`: an `int` representing the channel to send the RPC on.
				**Note:** In GDScript, this method corresponds to the `annotation @GDScript.@rpc` annotation, with various parameters passed (`@rpc(any)`, `@rpc(authority)`...). See also the `url=$DOCS_URL/tutorials/networking/high_level_multiplayer.html`high-level multiplayer`/url` tutorial.
			'''

    assert(not method is None)
    assert isinstance(method, (str, StringName)), 'method must be str or StringName'
    




    assert(isinstance(method, (str, StringName)))
    py_stringname_method = method if isinstance(method, StringName) else c_utils.py_string_to_string_name(method)


    self._ptr.call_with_return(163,tuple([py_stringname_method._ptr, config]))

  @functools.native_method
  def get_node_rpc_config(self) -> typing.Union[typing.Any]:
    r'''
				Returns a `Dictionary` mapping method names to their RPC configuration defined for this node using `rpc_config`.
				**Note:** This method only returns the RPC configuration assigned via `rpc_config`. See `Script.get_rpc_config` to retrieve the RPCs defined by the `Script`.
			'''




    _ret = None
    _ret = self._ptr.call_with_return(164,tuple([]))
    return _ret


  @functools.native_method
  def set_editor_description(self, editor_description:'str'   ) -> None:
    r''''''

    assert(not editor_description is None)
    assert isinstance(editor_description, (str, String)), 'editor_description must be str or String'

    self.py__editor_description = editor_description



    assert(isinstance(editor_description, (str, String)))
    py_string_editor_description = editor_description if isinstance(editor_description, StringName) else c_utils.py_string_to_string(editor_description)

    py__string_editor_description = utils.py_string_to_string(editor_description)
    py__string_editor_description.shouldBeDeleted = False


    self._ptr.call_with_return(165,tuple([py__string_editor_description._ptr]))

  @functools.native_method
  def get_editor_description(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(166,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_unique_name_in_owner(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__unique_name_in_owner = enable






    self._ptr.call_with_return(167,tuple([enable]))

  @functools.native_method
  def is_unique_name_in_owner(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(168,tuple([]))

    return _ret


  @functools.native_method
  def atr(self, message:'str'   , context:'object' = None  ) -> typing.Union[str]:
    r'''
				Translates a `message`, using the translation catalogs configured in the Project Settings. Further `context` can be specified to help with the translation. Note that most `Control` nodes automatically translate their strings, so this method is mostly useful for formatted strings or custom drawn text.
				This method works the same as `Object.tr`, with the addition of respecting the `auto_translate_mode` state.
				If `Object.can_translate_messages` is `false`, or no translation is available, this method returns the `message` without changes. See `Object.set_message_translation`.
				For detailed examples, see `url=$DOCS_URL/tutorials/i18n/internationalizing_games.html`Internationalizing games`/url`.
			'''
    if context is None:
      context = StringName.new0()
    if context is None:
      context = StringName.new0()

    assert(not message is None)
    assert isinstance(message, (str, String)), 'message must be str or String'




    assert(isinstance(message, (str, String)))
    py_string_message = message if isinstance(message, StringName) else c_utils.py_string_to_string(message)
    assert(isinstance(context, (str, StringName)))
    py_stringname_context = context if isinstance(context, StringName) else c_utils.py_string_to_string_name(context)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(169,tuple([py_string_message._ptr, py_stringname_context._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def atr_n(self, message:'str'   , plural_message:'object'   , n:'int'   , context:'object' = None  ) -> typing.Union[str]:
    r'''
				Translates a `message` or `plural_message`, using the translation catalogs configured in the Project Settings. Further `context` can be specified to help with the translation.
				This method works the same as `Object.tr_n`, with the addition of respecting the `auto_translate_mode` state.
				If `Object.can_translate_messages` is `false`, or no translation is available, this method returns `message` or `plural_message`, without changes. See `Object.set_message_translation`.
				The `n` is the number, or amount, of the message's subject. It is used by the translation system to fetch the correct plural form for the current language.
				For detailed examples, see `url=$DOCS_URL/tutorials/i18n/localization_using_gettext.html`Localization using gettext`/url`.
				**Note:** Negative and `float` numbers may not properly apply to some countable subjects. It's recommended to handle these cases with `atr`.
			'''
    if context is None:
      context = StringName.new0()
    if context is None:
      context = StringName.new0()

    assert(not message is None)
    assert isinstance(message, (str, String)), 'message must be str or String'
    assert(not plural_message is None)
    assert isinstance(plural_message, (str, StringName)), 'plural_message must be str or StringName'
    assert isinstance(n, (int, float)), 'n must be int or float'




    assert(isinstance(message, (str, String)))
    py_string_message = message if isinstance(message, StringName) else c_utils.py_string_to_string(message)
    assert(isinstance(plural_message, (str, StringName)))
    py_stringname_plural_message = plural_message if isinstance(plural_message, StringName) else c_utils.py_string_to_string_name(plural_message)

    assert(isinstance(context, (str, StringName)))
    py_stringname_context = context if isinstance(context, StringName) else c_utils.py_string_to_string_name(context)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(170,tuple([py_string_message._ptr, py_stringname_plural_message._ptr, n, py_stringname_context._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def rpc(self, method:'object'   , *varargs) -> typing.Union[int]:
    r'''
				Sends a remote procedure call request for the given `method` to peers on the network (and locally), sending additional arguments to the method called by the RPC. The call request will only be received by nodes with the same `NodePath`, including the exact same `name`. Behavior depends on the RPC configuration for the given `method` (see `rpc_config` and `annotation @GDScript.@rpc`). By default, methods are not exposed to RPCs.
				May return `constant OK` if the call is successful, `constant ERR_INVALID_PARAMETER` if the arguments passed in the `method` do not match, `constant ERR_UNCONFIGURED` if the node's `multiplayer` cannot be fetched (such as when the node is not inside the tree), `constant ERR_CONNECTION_ERROR` if `multiplayer`'s connection is not available.
				**Note:** You can only safely use RPCs on clients after you received the `signal MultiplayerAPI.connected_to_server` signal from the `MultiplayerAPI`. You also need to keep track of the connection state, either by the `MultiplayerAPI` signals like `signal MultiplayerAPI.server_disconnected` or by checking (`get_multiplayer().peer.get_connection_status() == CONNECTION_CONNECTED`).
			'''

    assert(not method is None)
    assert isinstance(method, (str, StringName)), 'method must be str or StringName'




    assert(isinstance(method, (str, StringName)))
    py_stringname_method = method if isinstance(method, StringName) else c_utils.py_string_to_string_name(method)

    _ret:int
    _ret = self._ptr.call_with_return(171,tuple([py_stringname_method._ptr, *varargs]))
    return _ret


  @functools.native_method
  def rpc_id(self, peer_id:'int'   , method:'object'   , *varargs) -> typing.Union[int]:
    r'''
				Sends a `rpc` to a specific peer identified by `peer_id` (see `MultiplayerPeer.set_target_peer`).
				May return `constant OK` if the call is successful, `constant ERR_INVALID_PARAMETER` if the arguments passed in the `method` do not match, `constant ERR_UNCONFIGURED` if the node's `multiplayer` cannot be fetched (such as when the node is not inside the tree), `constant ERR_CONNECTION_ERROR` if `multiplayer`'s connection is not available.
			'''

    assert isinstance(peer_id, (int, float)), 'peer_id must be int or float'
    assert(not method is None)
    assert isinstance(method, (str, StringName)), 'method must be str or StringName'





    assert(isinstance(method, (str, StringName)))
    py_stringname_method = method if isinstance(method, StringName) else c_utils.py_string_to_string_name(method)

    _ret:int
    _ret = self._ptr.call_with_return(172,tuple([peer_id, py_stringname_method._ptr, *varargs]))
    return _ret


  @functools.native_method
  def update_configuration_warnings(self) -> None:
    r'''
				Refreshes the warnings displayed for this node in the Scene dock. Use `_get_configuration_warnings` to customize the warning messages to display.
			'''




    self._ptr.call_with_return(173,tuple([]))

  @functools.native_method
  def call_deferred_thread_group(self, method:'object'   , *varargs) -> typing.Union[typing.Any]:
    r'''
				This function is similar to `Object.call_deferred` except that the call will take place when the node thread group is processed. If the node thread group processes in sub-threads, then the call will be done on that thread, right before `constant NOTIFICATION_PROCESS` or `constant NOTIFICATION_PHYSICS_PROCESS`, the `_process` or `_physics_process` or their internal versions are called.
			'''

    assert(not method is None)
    assert isinstance(method, (str, StringName)), 'method must be str or StringName'




    assert(isinstance(method, (str, StringName)))
    py_stringname_method = method if isinstance(method, StringName) else c_utils.py_string_to_string_name(method)

    _ret = None
    _ret = self._ptr.call_with_return(174,tuple([py_stringname_method._ptr, *varargs]))
    return _ret


  @functools.native_method
  def set_deferred_thread_group(self, property:'object'   , value:'object'   ) -> None:
    r'''
				Similar to `call_deferred_thread_group`, but for setting properties.
			'''

    assert(not property is None)
    assert isinstance(property, (str, StringName)), 'property must be str or StringName'
    




    assert(isinstance(property, (str, StringName)))
    py_stringname_property = property if isinstance(property, StringName) else c_utils.py_string_to_string_name(property)


    self._ptr.call_with_return(175,tuple([py_stringname_property._ptr, value]))

  @functools.native_method
  def notify_deferred_thread_group(self, what:'int'   ) -> None:
    r'''
				Similar to `call_deferred_thread_group`, but for notifications.
			'''

    assert isinstance(what, (int, float)), 'what must be int or float'






    self._ptr.call_with_return(176,tuple([what]))

  @functools.native_method
  def call_thread_safe(self, method:'object'   , *varargs) -> typing.Union[typing.Any]:
    r'''
				This function ensures that the calling of this function will succeed, no matter whether it's being done from a thread or not. If called from a thread that is not allowed to call the function, the call will become deferred. Otherwise, the call will go through directly.
			'''

    assert(not method is None)
    assert isinstance(method, (str, StringName)), 'method must be str or StringName'




    assert(isinstance(method, (str, StringName)))
    py_stringname_method = method if isinstance(method, StringName) else c_utils.py_string_to_string_name(method)

    _ret = None
    _ret = self._ptr.call_with_return(177,tuple([py_stringname_method._ptr, *varargs]))
    return _ret


  @functools.native_method
  def set_thread_safe(self, property:'object'   , value:'object'   ) -> None:
    r'''
				Similar to `call_thread_safe`, but for setting properties.
			'''

    assert(not property is None)
    assert isinstance(property, (str, StringName)), 'property must be str or StringName'
    




    assert(isinstance(property, (str, StringName)))
    py_stringname_property = property if isinstance(property, StringName) else c_utils.py_string_to_string_name(property)


    self._ptr.call_with_return(178,tuple([py_stringname_property._ptr, value]))

  @functools.native_method
  def notify_thread_safe(self, what:'int'   ) -> None:
    r'''
				Similar to `call_thread_safe`, but for notifications.
			'''

    assert isinstance(what, (int, float)), 'what must be int or float'






    self._ptr.call_with_return(179,tuple([what]))


register_cast_function('Node', Node.cast)
register_class('Node', Node)
