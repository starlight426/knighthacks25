# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTypedArray as py4godot_imagetypedarray 
  import py4godot.classes.Image as py4godot_image 
import py4godot.classes.ImageTypedArray as py4godot_imagetypedarray 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPNoiseWrapper


class Noise(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = Noise.construct_without_init()
    class_._ptr = constructor(518,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Noise.construct_without_init()
    class_._ptr = constructor(518,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPNoiseWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(518,0, ())


  def generate_wrapper(self):
    return CPPNoiseWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Noise.__new__(Noise)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Noise'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Noise.construct_without_init()
    cls._ptr = CPPNoiseWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Noise.construct_without_init()
    cls._ptr = CPPNoiseWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_noise_1d(self, x:'float'   ) -> typing.Union[float]:
    r''''''

    assert isinstance(x, (int, float)), 'x must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([x]))
    return _ret


  @functools.native_method
  def get_noise_2d(self, x:'float'   , y:'float'   ) -> typing.Union[float]:
    r''''''

    assert isinstance(x, (int, float)), 'x must be int or float'
    assert isinstance(y, (int, float)), 'y must be int or float'







    _ret = 0
    _ret = self._ptr.call_with_return(78,tuple([x, y]))
    return _ret


  @functools.native_method
  def get_noise_2dv(self, v:'Vector2'   ) -> typing.Union[float]:
    r''''''

    assert(not v is None)
    assert isinstance(v, Vector2), 'v must be Vector2'






    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([v._ptr]))
    return _ret


  @functools.native_method
  def get_noise_3d(self, x:'float'   , y:'float'   , z:'float'   ) -> typing.Union[float]:
    r''''''

    assert isinstance(x, (int, float)), 'x must be int or float'
    assert isinstance(y, (int, float)), 'y must be int or float'
    assert isinstance(z, (int, float)), 'z must be int or float'








    _ret = 0
    _ret = self._ptr.call_with_return(80,tuple([x, y, z]))
    return _ret


  @functools.native_method
  def get_noise_3dv(self, v:'Vector3'   ) -> typing.Union[float]:
    r''''''

    assert(not v is None)
    assert isinstance(v, Vector3), 'v must be Vector3'






    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([v._ptr]))
    return _ret


  @functools.native_method
  def get_image(self, width:'int'   , height:'int'   , invert:'bool' =False  , in_3d_space:'bool' =False  , normalize:'bool' =True  ) -> typing.Union['py4godot_image.Image']:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'
    assert isinstance(height, (int, float)), 'height must be int or float'
    assert isinstance(invert, bool), 'invert must be bool'
    assert isinstance(in_3d_space, bool), 'in_3d_space must be bool'
    assert isinstance(normalize, bool), 'normalize must be bool'










    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Image
    _ret._ptr = self._ptr.call_with_return(82,tuple([width, height, invert, in_3d_space, normalize]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_seamless_image(self, width:'int'   , height:'int'   , invert:'bool' =False  , in_3d_space:'bool' =False  , skirt:'float' =0.1  , normalize:'bool' =True  ) -> typing.Union['py4godot_image.Image']:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'
    assert isinstance(height, (int, float)), 'height must be int or float'
    assert isinstance(invert, bool), 'invert must be bool'
    assert isinstance(in_3d_space, bool), 'in_3d_space must be bool'
    assert isinstance(skirt, (int, float)), 'skirt must be int or float'
    assert isinstance(normalize, bool), 'normalize must be bool'











    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Image
    _ret._ptr = self._ptr.call_with_return(83,tuple([width, height, invert, in_3d_space, skirt, normalize]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_image_3d(self, width:'int'   , height:'int'   , depth:'int'   , invert:'bool' =False  , normalize:'bool' =True  ) -> typing.Union['py4godot_imagetypedarray.ImageTypedArray']:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'
    assert isinstance(height, (int, float)), 'height must be int or float'
    assert isinstance(depth, (int, float)), 'depth must be int or float'
    assert isinstance(invert, bool), 'invert must be bool'
    assert isinstance(normalize, bool), 'normalize must be bool'










    _ret = py4godot_imagetypedarray.ImageTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(84,tuple([width, height, depth, invert, normalize]))
    return _ret


  @functools.native_method
  def get_seamless_image_3d(self, width:'int'   , height:'int'   , depth:'int'   , invert:'bool' =False  , skirt:'float' =0.1  , normalize:'bool' =True  ) -> typing.Union['py4godot_imagetypedarray.ImageTypedArray']:
    r''''''

    assert isinstance(width, (int, float)), 'width must be int or float'
    assert isinstance(height, (int, float)), 'height must be int or float'
    assert isinstance(depth, (int, float)), 'depth must be int or float'
    assert isinstance(invert, bool), 'invert must be bool'
    assert isinstance(skirt, (int, float)), 'skirt must be int or float'
    assert isinstance(normalize, bool), 'normalize must be bool'











    _ret = py4godot_imagetypedarray.ImageTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([width, height, depth, invert, skirt, normalize]))
    return _ret



register_cast_function('Noise', Noise.cast)
register_class('Noise', Noise)
