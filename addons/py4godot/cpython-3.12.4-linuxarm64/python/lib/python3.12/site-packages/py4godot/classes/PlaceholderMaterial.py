# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Material as py4godot_material 
from py4godot.wrappers.wrappers import CPPPlaceholderMaterialWrapper


class PlaceholderMaterial(py4godot_material.Material):
  r'''
		This class is used when loading a project that uses a `Material` subclass in 2 conditions:
		- When running the project exported in dedicated server mode, only the texture's dimensions are kept (as they may be relied upon for gameplay purposes or positioning of other elements). This allows reducing the exported PCK's size significantly.
		- When this subclass is missing due to using a different engine version or build (e.g. modules disabled).
	'''

  @staticmethod
  def constructor():
    class_ = PlaceholderMaterial.construct_without_init()
    class_._ptr = constructor(621,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PlaceholderMaterial.construct_without_init()
    class_._ptr = constructor(621,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPlaceholderMaterialWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(621,0, ())


  def generate_wrapper(self):
    return CPPPlaceholderMaterialWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PlaceholderMaterial.__new__(PlaceholderMaterial)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PlaceholderMaterial'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PlaceholderMaterial.construct_without_init()
    cls._ptr = CPPPlaceholderMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PlaceholderMaterial.construct_without_init()
    cls._ptr = CPPPlaceholderMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls


register_cast_function('PlaceholderMaterial', PlaceholderMaterial.cast)
register_class('PlaceholderMaterial', PlaceholderMaterial)
