# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.VisualShaderNode as py4godot_visualshadernode 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeParticleEmitWrapper

class EmitFlags:
  EMIT_FLAG_POSITION = 1
  EMIT_FLAG_ROT_SCALE = 2
  EMIT_FLAG_VELOCITY = 4
  EMIT_FLAG_COLOR = 8
  EMIT_FLAG_CUSTOM = 16


class VisualShaderNodeParticleEmit(py4godot_visualshadernode.VisualShaderNode):
  r'''
		This node internally calls `emit_subparticle` shader method. It will emit a particle from the configured sub-emitter and also allows to customize how its emitted. Requires a sub-emitter assigned to the particles node with this shader.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeParticleEmit.construct_without_init()
    class_._ptr = constructor(928,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeParticleEmit.construct_without_init()
    class_._ptr = constructor(928,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeParticleEmitWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(928,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeParticleEmitWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeParticleEmit.__new__(VisualShaderNodeParticleEmit)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeParticleEmit'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeParticleEmit.construct_without_init()
    cls._ptr = CPPVisualShaderNodeParticleEmitWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeParticleEmit.construct_without_init()
    cls._ptr = CPPVisualShaderNodeParticleEmitWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def flags(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_flags()
    return _ret
  @flags.setter
  def flags(self,  value:'int'):
    self.set_flags(value)
  @functools.native_method
  def set_flags(self, flags:'int'  ) -> None:
    r''''''

    assert isinstance(flags, (int, float)), 'flags must be int or float'

    self.py__flags = flags






    self._ptr.call_with_return(88,tuple([flags]))

  @functools.native_method
  def get_flags(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret



register_cast_function('VisualShaderNodeParticleEmit', VisualShaderNodeParticleEmit.cast)
register_class('VisualShaderNodeParticleEmit', VisualShaderNodeParticleEmit)
