# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPPacketPeerWrapper


class PacketPeer(py4godot_refcounted.RefCounted):
  r'''
		PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low-level bytes or having to worry about network ordering.
		**Note:** When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
	'''

  @staticmethod
  def constructor():
    class_ = PacketPeer.construct_without_init()
    class_._ptr = constructor(568,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PacketPeer.construct_without_init()
    class_._ptr = constructor(568,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPacketPeerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(568,0, ())


  def generate_wrapper(self):
    return CPPPacketPeerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PacketPeer.__new__(PacketPeer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PacketPeer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PacketPeer.construct_without_init()
    cls._ptr = CPPPacketPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PacketPeer.construct_without_init()
    cls._ptr = CPPPacketPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def encode_buffer_max_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_encode_buffer_max_size()
    return _ret
  @encode_buffer_max_size.setter
  def encode_buffer_max_size(self,  value:'int'):
    self.set_encode_buffer_max_size(value)
  @functools.native_method
  def get_var(self, allow_objects:'bool' =False  ) -> typing.Union[typing.Any]:
    r'''
				Gets a Variant. If `allow_objects` is `true`, decoding objects is allowed.
				Internally, this uses the same decoding mechanism as the `@GlobalScope.bytes_to_var` method.
				**Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
			'''

    assert isinstance(allow_objects, bool), 'allow_objects must be bool'






    _ret = None
    _ret = self._ptr.call_with_return(53,tuple([allow_objects]))
    return _ret


  @functools.native_method
  def put_var(self, var:'object'   , full_objects:'bool' =False  ) -> typing.Union[int]:
    r'''
				Sends a `Variant` as a packet. If `full_objects` is `true`, encoding objects is allowed (and can potentially include code).
				Internally, this uses the same encoding mechanism as the `@GlobalScope.var_to_bytes` method.
			'''

    
    assert isinstance(full_objects, bool), 'full_objects must be bool'







    _ret:int
    _ret = self._ptr.call_with_return(54,tuple([var, full_objects]))
    return _ret


  @functools.native_method
  def get_packet(self) -> typing.Union['PackedByteArray']:
    r'''
				Gets a raw packet.
			'''




    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def put_packet(self, buffer:'PackedByteArray'   ) -> typing.Union[int]:
    r'''
				Sends a raw packet.
			'''

    assert(not buffer is None)
    assert isinstance(buffer, PackedByteArray), 'buffer must be PackedByteArray'






    _ret:int
    _ret = self._ptr.call_with_return(56,tuple([buffer._ptr]))
    return _ret


  @functools.native_method
  def get_packet_error(self) -> typing.Union[int]:
    r'''
				Returns the error state of the last packet received (via `get_packet` and `get_var`).
			'''




    _ret:int
    _ret = self._ptr.call_with_return(57,tuple([]))
    return _ret


  @functools.native_method
  def get_available_packet_count(self) -> typing.Union[int]:
    r'''
				Returns the number of packets currently available in the ring-buffer.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))
    return _ret


  @functools.native_method
  def get_encode_buffer_max_size(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([]))

    return _ret


  @functools.native_method
  def set_encode_buffer_max_size(self, max_size:'int'   ) -> None:
    r''''''

    assert isinstance(max_size, (int, float)), 'max_size must be int or float'

    self.py__encode_buffer_max_size = max_size






    self._ptr.call_with_return(60,tuple([max_size]))


register_cast_function('PacketPeer', PacketPeer.cast)
register_class('PacketPeer', PacketPeer)
