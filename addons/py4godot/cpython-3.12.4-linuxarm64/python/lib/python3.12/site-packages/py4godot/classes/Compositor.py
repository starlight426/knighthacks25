# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.CompositorEffectTypedArray as py4godot_compositoreffecttypedarray 
import py4godot.classes.Resource as py4godot_resource 
import py4godot.classes.CompositorEffectTypedArray as py4godot_compositoreffecttypedarray 
from py4godot.wrappers.wrappers import CPPCompositorWrapper


class Compositor(py4godot_resource.Resource):
  r'''
		The compositor resource stores attributes used to customize how a `Viewport` is rendered.
	'''

  @staticmethod
  def constructor():
    class_ = Compositor.construct_without_init()
    class_._ptr = constructor(225,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Compositor.construct_without_init()
    class_._ptr = constructor(225,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCompositorWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(225,0, ())


  def generate_wrapper(self):
    return CPPCompositorWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Compositor.__new__(Compositor)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Compositor'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Compositor.construct_without_init()
    cls._ptr = CPPCompositorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Compositor.construct_without_init()
    cls._ptr = CPPCompositorWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def compositor_effects(self) -> typing.Union['py4godot_compositoreffecttypedarray.CompositorEffectTypedArray']:
    r''''''
    _ret = self. get_compositor_effects()
    return _ret
  @compositor_effects.setter
  def compositor_effects(self, value:'Array'):
    self.set_compositor_effects(value)
  @functools.native_method
  def set_compositor_effects(self, compositor_effects:'py4godot_compositoreffecttypedarray.CompositorEffectTypedArray'   ) -> None:
    r''''''

    assert isinstance(compositor_effects, get_class('CompositorEffectTypedArray')), 'compositor_effects must be CompositorEffectTypedArray'

    self.py__compositor_effects = compositor_effects






    self._ptr.call_with_return(77,tuple([compositor_effects._ptr]))

  @functools.native_method
  def get_compositor_effects(self) -> typing.Union['py4godot_compositoreffecttypedarray.CompositorEffectTypedArray']:
    r''''''




    _ret = py4godot_compositoreffecttypedarray.CompositorEffectTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return _ret



register_cast_function('Compositor', Compositor.cast)
register_class('Compositor', Compositor)
