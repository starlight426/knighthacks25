# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.PacketPeer as py4godot_packetpeer 
from py4godot.wrappers.wrappers import CPPENetPacketPeerWrapper

class PeerState:
  STATE_DISCONNECTED = 0
  STATE_CONNECTING = 1
  STATE_ACKNOWLEDGING_CONNECT = 2
  STATE_CONNECTION_PENDING = 3
  STATE_CONNECTION_SUCCEEDED = 4
  STATE_CONNECTED = 5
  STATE_DISCONNECT_LATER = 6
  STATE_DISCONNECTING = 7
  STATE_ACKNOWLEDGING_DISCONNECT = 8
  STATE_ZOMBIE = 9
class PeerStatistic:
  PEER_PACKET_LOSS = 0
  PEER_PACKET_LOSS_VARIANCE = 1
  PEER_PACKET_LOSS_EPOCH = 2
  PEER_ROUND_TRIP_TIME = 3
  PEER_ROUND_TRIP_TIME_VARIANCE = 4
  PEER_LAST_ROUND_TRIP_TIME = 5
  PEER_LAST_ROUND_TRIP_TIME_VARIANCE = 6
  PEER_PACKET_THROTTLE = 7
  PEER_PACKET_THROTTLE_LIMIT = 8
  PEER_PACKET_THROTTLE_COUNTER = 9
  PEER_PACKET_THROTTLE_EPOCH = 10
  PEER_PACKET_THROTTLE_ACCELERATION = 11
  PEER_PACKET_THROTTLE_DECELERATION = 12
  PEER_PACKET_THROTTLE_INTERVAL = 13


class ENetPacketPeer(py4godot_packetpeer.PacketPeer):
  r''''''
  PACKET_LOSS_SCALE:typing.ClassVar[int]

  PACKET_THROTTLE_SCALE:typing.ClassVar[int]

  FLAG_RELIABLE:typing.ClassVar[int]

  FLAG_UNSEQUENCED:typing.ClassVar[int]

  FLAG_UNRELIABLE_FRAGMENT:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = ENetPacketPeer.construct_without_init()
    class_._ptr = constructor(265,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ENetPacketPeer.construct_without_init()
    class_._ptr = constructor(265,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPENetPacketPeerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(265,0, ())


  def generate_wrapper(self):
    return CPPENetPacketPeerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ENetPacketPeer.__new__(ENetPacketPeer)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ENetPacketPeer'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ENetPacketPeer.construct_without_init()
    cls._ptr = CPPENetPacketPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ENetPacketPeer.construct_without_init()
    cls._ptr = CPPENetPacketPeerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def peer_disconnect(self, data:'int' =0  ) -> None:
    r''''''

    assert isinstance(data, (int, float)), 'data must be int or float'






    self._ptr.call_with_return(61,tuple([data]))

  @functools.native_method
  def peer_disconnect_later(self, data:'int' =0  ) -> None:
    r''''''

    assert isinstance(data, (int, float)), 'data must be int or float'






    self._ptr.call_with_return(62,tuple([data]))

  @functools.native_method
  def peer_disconnect_now(self, data:'int' =0  ) -> None:
    r''''''

    assert isinstance(data, (int, float)), 'data must be int or float'






    self._ptr.call_with_return(63,tuple([data]))

  @functools.native_method
  def ping(self) -> None:
    r''''''




    self._ptr.call_with_return(64,tuple([]))

  @functools.native_method
  def ping_interval(self, ping_interval:'int'   ) -> None:
    r''''''

    assert isinstance(ping_interval, (int, float)), 'ping_interval must be int or float'






    self._ptr.call_with_return(65,tuple([ping_interval]))

  @functools.native_method
  def reset(self) -> None:
    r''''''




    self._ptr.call_with_return(66,tuple([]))

  @functools.native_method
  def send(self, channel:'int'   , packet:'PackedByteArray'   , flags:'int'   ) -> typing.Union[int]:
    r''''''

    assert isinstance(channel, (int, float)), 'channel must be int or float'
    assert(not packet is None)
    assert isinstance(packet, PackedByteArray), 'packet must be PackedByteArray'
    assert isinstance(flags, (int, float)), 'flags must be int or float'








    _ret:int
    _ret = self._ptr.call_with_return(67,tuple([channel, packet._ptr, flags]))
    return _ret


  @functools.native_method
  def throttle_configure(self, interval:'int'   , acceleration:'int'   , deceleration:'int'   ) -> None:
    r''''''

    assert isinstance(interval, (int, float)), 'interval must be int or float'
    assert isinstance(acceleration, (int, float)), 'acceleration must be int or float'
    assert isinstance(deceleration, (int, float)), 'deceleration must be int or float'








    self._ptr.call_with_return(68,tuple([interval, acceleration, deceleration]))

  @functools.native_method
  def set_timeout(self, timeout:'int'   , timeout_min:'int'   , timeout_max:'int'   ) -> None:
    r''''''

    assert isinstance(timeout, (int, float)), 'timeout must be int or float'
    assert isinstance(timeout_min, (int, float)), 'timeout_min must be int or float'
    assert isinstance(timeout_max, (int, float)), 'timeout_max must be int or float'








    self._ptr.call_with_return(69,tuple([timeout, timeout_min, timeout_max]))

  @functools.native_method
  def get_packet_flags(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(70,tuple([]))
    return _ret


  @functools.native_method
  def get_remote_address(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(71,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_remote_port(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(72,tuple([]))
    return _ret


  @functools.native_method
  def get_statistic(self, statistic:'int'  ) -> typing.Union[float]:
    r''''''

    assert isinstance(statistic, (int, float)), 'statistic must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([statistic]))
    return _ret


  @functools.native_method
  def get_state(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(74,tuple([]))
    return _ret


  @functools.native_method
  def get_channels(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(75,tuple([]))
    return _ret


  @functools.native_method
  def is_active(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(76,tuple([]))
    return _ret



register_cast_function('ENetPacketPeer', ENetPacketPeer.cast)
register_class('ENetPacketPeer', ENetPacketPeer)
