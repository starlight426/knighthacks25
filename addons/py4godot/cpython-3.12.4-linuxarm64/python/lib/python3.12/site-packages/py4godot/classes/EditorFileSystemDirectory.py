# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Object as py4godot_object 
from py4godot.wrappers.wrappers import CPPEditorFileSystemDirectoryWrapper


class EditorFileSystemDirectory(py4godot_object.Object):
  r'''
		A more generalized, low-level variation of the directory concept.
	'''

  @staticmethod
  def constructor():
    class_ = EditorFileSystemDirectory.construct_without_init()
    class_._ptr = constructor(286,0, ())
    return class_
  @staticmethod
  def new():
    class_ = EditorFileSystemDirectory.construct_without_init()
    class_._ptr = constructor(286,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPEditorFileSystemDirectoryWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(286,0, ())


  def generate_wrapper(self):
    return CPPEditorFileSystemDirectoryWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = EditorFileSystemDirectory.__new__(EditorFileSystemDirectory)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'EditorFileSystemDirectory'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorFileSystemDirectory.construct_without_init()
    cls._ptr = CPPEditorFileSystemDirectoryWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = EditorFileSystemDirectory.construct_without_init()
    cls._ptr = CPPEditorFileSystemDirectoryWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def get_subdir_count(self) -> typing.Union[int]:
    r'''
				Returns the number of subdirectories in this directory.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(49,tuple([]))
    return _ret


  @functools.native_method
  def get_subdir(self, idx:'int'   ) -> typing.Union['typing.Self']:
    r'''
				Returns the subdirectory at index `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = EditorFileSystemDirectory.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(50,tuple([idx]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def get_file_count(self) -> typing.Union[int]:
    r'''
				Returns the number of files in this directory.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(51,tuple([]))
    return _ret


  @functools.native_method
  def get_file(self, idx:'int'   ) -> typing.Union[str]:
    r'''
				Returns the name of the file at index `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(52,tuple([idx]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_file_path(self, idx:'int'   ) -> typing.Union[str]:
    r'''
				Returns the path to the file at index `idx`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([idx]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_file_type(self, idx:'int'   ) -> typing.Union['StringName']:
    r'''
				Returns the resource type of the file at index `idx`. This returns a string such as `"Resource"` or `"GDScript"`, _not_ a file extension such as `".gd"`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([idx]))
    return _ret


  @functools.native_method
  def get_file_script_class_name(self, idx:'int'   ) -> typing.Union[str]:
    r'''
				Returns the name of the script class defined in the file at index `idx`. If the file doesn't define a script class using the `class_name` syntax, this will return an empty string.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([idx]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_file_script_class_extends(self, idx:'int'   ) -> typing.Union[str]:
    r'''
				Returns the base class of the script class defined in the file at index `idx`. If the file doesn't define a script class using the `class_name` syntax, this will return an empty string.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([idx]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_file_import_is_valid(self, idx:'int'   ) -> typing.Union[bool]:
    r'''
				Returns `true` if the file at index `idx` imported properly.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([idx]))
    return _ret


  @functools.native_method
  def get_name(self) -> typing.Union[str]:
    r'''
				Returns the name of this directory.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(58,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_path(self) -> typing.Union[str]:
    r'''
				Returns the path to this directory.
			'''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(59,tuple([]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def get_parent(self) -> typing.Union['typing.Self']:
    r'''
				Returns the parent directory for this directory or `null` if called on a directory at `res://` or `user://`.
			'''




    _ret = EditorFileSystemDirectory.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def find_file_index(self, name:'str'   ) -> typing.Union[int]:
    r'''
				Returns the index of the file with name `name` or `-1` if not found.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = 0
    _ret = self._ptr.call_with_return(61,tuple([py_string_name._ptr]))
    return _ret


  @functools.native_method
  def find_dir_index(self, name:'str'   ) -> typing.Union[int]:
    r'''
				Returns the index of the directory with name `name` or `-1` if not found.
			'''

    assert(not name is None)
    assert isinstance(name, (str, String)), 'name must be str or String'




    assert(isinstance(name, (str, String)))
    py_string_name = name if isinstance(name, StringName) else c_utils.py_string_to_string(name)

    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([py_string_name._ptr]))
    return _ret



register_cast_function('EditorFileSystemDirectory', EditorFileSystemDirectory.cast)
register_class('EditorFileSystemDirectory', EditorFileSystemDirectory)
