# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.MultiplayerAPIExtension as py4godot_multiplayerapiextension 
  import py4godot.classes.WebSocketMultiplayerPeer as py4godot_websocketmultiplayerpeer 
  import py4godot.classes.Object as py4godot_object 
  import py4godot.classes.OfflineMultiplayerPeer as py4godot_offlinemultiplayerpeer 
  import py4godot.classes.SceneMultiplayer as py4godot_scenemultiplayer 
  import py4godot.classes.MultiplayerPeer as py4godot_multiplayerpeer 
  import py4godot.classes.WebRTCMultiplayerPeer as py4godot_webrtcmultiplayerpeer 
  import py4godot.classes.MultiplayerPeerExtension as py4godot_multiplayerpeerextension 
  import py4godot.classes.ENetMultiplayerPeer as py4godot_enetmultiplayerpeer 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPMultiplayerAPIWrapper

class RPCMode:
  RPC_MODE_DISABLED = 0
  RPC_MODE_ANY_PEER = 1
  RPC_MODE_AUTHORITY = 2


class MultiplayerAPI(py4godot_refcounted.RefCounted):
  r'''
		Base class for high-level multiplayer API implementations. See also `MultiplayerPeer`.
		By default, `SceneTree` has a reference to an implementation of this class and uses it to provide multiplayer capabilities (i.e. RPCs) across the whole scene.
		It is possible to override the MultiplayerAPI instance used by specific tree branches by calling the `SceneTree.set_multiplayer` method, effectively allowing to run both client and server in the same scene.
		It is also possible to extend or replace the default implementation via scripting or native extensions. See `MultiplayerAPIExtension` for details about extensions, `SceneMultiplayer` for the details about the default implementation.
	'''

  @staticmethod
  def constructor():
    class_ = MultiplayerAPI.construct_without_init()
    class_._ptr = constructor(486,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MultiplayerAPI.construct_without_init()
    class_._ptr = constructor(486,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMultiplayerAPIWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(486,0, ())


  def generate_wrapper(self):
    return CPPMultiplayerAPIWrapper()
  def init_signals(self):
    super().init_signals()
    peer_connected_name = utils.py_string_to_string_name("peer_connected")
    self.peer_connected = signals.BuiltinSignal(self, peer_connected_name)
    peer_disconnected_name = utils.py_string_to_string_name("peer_disconnected")
    self.peer_disconnected = signals.BuiltinSignal(self, peer_disconnected_name)
    connected_to_server_name = utils.py_string_to_string_name("connected_to_server")
    self.connected_to_server = signals.BuiltinSignal(self, connected_to_server_name)
    connection_failed_name = utils.py_string_to_string_name("connection_failed")
    self.connection_failed = signals.BuiltinSignal(self, connection_failed_name)
    server_disconnected_name = utils.py_string_to_string_name("server_disconnected")
    self.server_disconnected = signals.BuiltinSignal(self, server_disconnected_name)

  @staticmethod
  def construct_without_init():
    cls = MultiplayerAPI.__new__(MultiplayerAPI)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MultiplayerAPI'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiplayerAPI.construct_without_init()
    cls._ptr = CPPMultiplayerAPIWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MultiplayerAPI.construct_without_init()
    cls._ptr = CPPMultiplayerAPIWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def multiplayer_peer(self) -> typing.Any:
    r''''''
    _ret = self. get_multiplayer_peer()
    return _ret
  @multiplayer_peer.setter
  def multiplayer_peer(self,  value:'py4godot_object.Object'):
    self.set_multiplayer_peer(value)
  @functools.native_method
  def has_multiplayer_peer(self) -> typing.Union[bool]:
    r'''
				Returns `true` if there is a `multiplayer_peer` set.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def get_multiplayer_peer(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: MultiplayerPeer
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_multiplayer_peer(self, peer:'py4godot_multiplayerpeer.MultiplayerPeer'   ) -> None:
    r''''''

    assert(not peer is None)
    assert isinstance(peer, get_class('MultiplayerPeer')), 'peer must be MultiplayerPeer'

    self.py__multiplayer_peer = peer






    self._ptr.call_with_return(55,tuple([peer._ptr]))

  @functools.native_method
  def get_unique_id(self) -> typing.Union[int]:
    r'''
				Returns the unique peer ID of this MultiplayerAPI's `multiplayer_peer`.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))
    return _ret


  @functools.native_method
  def is_server(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this MultiplayerAPI's `multiplayer_peer` is valid and in server mode (listening for connections).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))
    return _ret


  @functools.native_method
  def get_remote_sender_id(self) -> typing.Union[int]:
    r'''
				Returns the sender's peer ID for the RPC currently being executed.
				**Note:** This method returns `0` when called outside of an RPC. As such, the original peer ID may be lost when code execution is delayed (such as with GDScript's `await` keyword).
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))
    return _ret


  @functools.native_method
  def poll(self) -> typing.Union[int]:
    r'''
				Method used for polling the MultiplayerAPI. You only need to worry about this if you set `SceneTree.multiplayer_poll` to `false`. By default, `SceneTree` will poll its MultiplayerAPI(s) for you.
				**Note:** This method results in RPCs being called, so they will be executed in the same context of this function (e.g. `_process`, `physics`, `Thread`).
			'''




    _ret:int
    _ret = self._ptr.call_with_return(59,tuple([]))
    return _ret


  @functools.native_method
  def rpc(self, peer:'int'   , object_:'py4godot_object.Object'   , method:'object'   , arguments:'Array' = None  ) -> typing.Union[int]:
    r'''
				Sends an RPC to the target `peer`. The given `method` will be called on the remote `object` with the provided `arguments`. The RPC may also be called locally depending on the implementation and RPC configuration. See `Node.rpc` and `Node.rpc_config`.
				**Note:** Prefer using `Node.rpc`, `Node.rpc_id`, or `my_method.rpc(peer, arg1, arg2, ...)` (in GDScript), since they are faster. This method is mostly useful in conjunction with `MultiplayerAPIExtension` when extending or replacing the multiplayer capabilities.
			'''
    if arguments is None:
      arguments = Array.new0()
    if arguments is None:
      arguments = Array.new0()

    assert isinstance(peer, (int, float)), 'peer must be int or float'
    assert(not object_ is None)
    assert isinstance(object_, get_class('Object')), 'object_ must be Object'
    assert(not method is None)
    assert isinstance(method, (str, StringName)), 'method must be str or StringName'






    assert(isinstance(method, (str, StringName)))
    py_stringname_method = method if isinstance(method, StringName) else c_utils.py_string_to_string_name(method)


    _ret:int
    _ret = self._ptr.call_with_return(60,tuple([peer, object_._ptr, py_stringname_method._ptr, arguments._ptr]))
    return _ret


  @functools.native_method
  def object_configuration_add(self, object_:'py4godot_object.Object'   , configuration:'object'   ) -> typing.Union[int]:
    r'''
				Notifies the MultiplayerAPI of a new `configuration` for the given `object`. This method is used internally by `SceneTree` to configure the root path for this MultiplayerAPI (passing `null` and a valid `NodePath` as `configuration`). This method can be further used by MultiplayerAPI implementations to provide additional features, refer to specific implementation (e.g. `SceneMultiplayer`) for details on how they use it.
				**Note:** This method is mostly relevant when extending or overriding the MultiplayerAPI behavior via `MultiplayerAPIExtension`.
			'''

    assert(not object_ is None)
    assert isinstance(object_, get_class('Object')), 'object_ must be Object'
    







    _ret:int
    _ret = self._ptr.call_with_return(61,tuple([object_._ptr, configuration]))
    return _ret


  @functools.native_method
  def object_configuration_remove(self, object_:'py4godot_object.Object'   , configuration:'object'   ) -> typing.Union[int]:
    r'''
				Notifies the MultiplayerAPI to remove a `configuration` for the given `object`. This method is used internally by `SceneTree` to configure the root path for this MultiplayerAPI (passing `null` and an empty `NodePath` as `configuration`). This method can be further used by MultiplayerAPI implementations to provide additional features, refer to specific implementation (e.g. `SceneMultiplayer`) for details on how they use it.
				**Note:** This method is mostly relevant when extending or overriding the MultiplayerAPI behavior via `MultiplayerAPIExtension`.
			'''

    assert(not object_ is None)
    assert isinstance(object_, get_class('Object')), 'object_ must be Object'
    







    _ret:int
    _ret = self._ptr.call_with_return(62,tuple([object_._ptr, configuration]))
    return _ret


  @functools.native_method
  def get_peers(self) -> typing.Union['PackedInt32Array']:
    r'''
				Returns the peer IDs of all connected peers of this MultiplayerAPI's `multiplayer_peer`.
			'''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(63,tuple([]))
    return _ret


  @staticmethod
  def set_default_interface(interface_name:'object'   ) -> None:
    r'''
				Sets the default MultiplayerAPI implementation class. This method can be used by modules and extensions to configure which implementation will be used by `SceneTree` when the engine starts.
			'''

    assert(not interface_name is None)
    assert isinstance(interface_name, (str, StringName)), 'interface_name must be str or StringName'




    assert(isinstance(interface_name, (str, StringName)))
    py_stringname_interface_name = interface_name if isinstance(interface_name, StringName) else c_utils.py_string_to_string_name(interface_name)

    static_method(486,0,tuple([py_stringname_interface_name._ptr]))

  @staticmethod
  def get_default_interface() -> typing.Union['StringName']:
    r'''
				Returns the default MultiplayerAPI implementation class name. This is usually `"SceneMultiplayer"` when `SceneMultiplayer` is available. See `set_default_interface`.
			'''




    _ret = StringName.construct_without_init()
    _ret._ptr = static_method(486,1,tuple([]))
    return _ret


  @staticmethod
  def create_default_interface() -> typing.Union['py4godot_multiplayerapiextension.MultiplayerAPIExtension','py4godot_scenemultiplayer.SceneMultiplayer','typing.Self']:
    r'''
				Returns a new instance of the default MultiplayerAPI.
			'''




    _ret = MultiplayerAPI.construct_without_init()
    _ret._ptr = static_method(486,2,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('MultiplayerAPI', MultiplayerAPI.cast)
register_class('MultiplayerAPI', MultiplayerAPI)
