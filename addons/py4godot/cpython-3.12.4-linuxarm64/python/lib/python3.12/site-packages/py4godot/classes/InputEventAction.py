# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.InputEvent as py4godot_inputevent 
from py4godot.wrappers.wrappers import CPPInputEventActionWrapper


class InputEventAction(py4godot_inputevent.InputEvent):
  r'''
		Contains a generic action which can be targeted from several types of inputs. Actions and their events can be set in the **Input Map** tab in **Project > Project Settings**, or with the `InputMap` class.
		**Note:** Unlike the other `InputEvent` subclasses which map to unique physical events, this virtual one is not emitted by the engine. This class is useful to emit actions manually with `Input.parse_input_event`, which are then received in `Node._input`. To check if a physical event matches an action from the Input Map, use `InputEvent.is_action` and `InputEvent.is_action_pressed`.
	'''

  @staticmethod
  def constructor():
    class_ = InputEventAction.construct_without_init()
    class_._ptr = constructor(414,0, ())
    return class_
  @staticmethod
  def new():
    class_ = InputEventAction.construct_without_init()
    class_._ptr = constructor(414,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPInputEventActionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(414,0, ())


  def generate_wrapper(self):
    return CPPInputEventActionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = InputEventAction.__new__(InputEventAction)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'InputEventAction'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventAction.construct_without_init()
    cls._ptr = CPPInputEventActionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = InputEventAction.construct_without_init()
    cls._ptr = CPPInputEventActionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def action(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_action()
    return _ret
  @action.setter
  def action(self,  value:'object'):
    self.set_action(value)
  @property
  def pressed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_pressed()
    return _ret
  @pressed.setter
  def pressed(self,  value:'bool'):
    self.set_pressed(value)
  @property
  def strength(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_strength()
    return _ret
  @strength.setter
  def strength(self,  value:'float'):
    self.set_strength(value)
  @property
  def event_index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_event_index()
    return _ret
  @event_index.setter
  def event_index(self,  value:'int'):
    self.set_event_index(value)
  @functools.native_method
  def set_action(self, action:'object'   ) -> None:
    r''''''

    assert(not action is None)
    assert isinstance(action, (str, StringName)), 'action must be str or StringName'

    self.py__action = action



    assert(isinstance(action, (str, StringName)))
    py_stringname_action = action if isinstance(action, StringName) else c_utils.py_string_to_string_name(action)


    self._ptr.call_with_return(92,tuple([py_stringname_action._ptr]))

  @functools.native_method
  def get_action(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_pressed(self, pressed:'bool'   ) -> None:
    r''''''

    assert isinstance(pressed, bool), 'pressed must be bool'

    self.py__pressed = pressed






    self._ptr.call_with_return(94,tuple([pressed]))

  @functools.native_method
  def set_strength(self, strength:'float'   ) -> None:
    r''''''

    assert isinstance(strength, (int, float)), 'strength must be int or float'

    self.py__strength = strength






    self._ptr.call_with_return(95,tuple([strength]))

  @functools.native_method
  def get_strength(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(96,tuple([]))

    return _ret


  @functools.native_method
  def set_event_index(self, index:'int'   ) -> None:
    r''''''

    assert isinstance(index, (int, float)), 'index must be int or float'

    self.py__event_index = index






    self._ptr.call_with_return(97,tuple([index]))

  @functools.native_method
  def get_event_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([]))

    return _ret



register_cast_function('InputEventAction', InputEventAction.cast)
register_class('InputEventAction', InputEventAction)
