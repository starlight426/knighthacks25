# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
from py4godot.wrappers.wrappers import CPPXRBodyModifier3DWrapper

class BodyUpdate:
  BODY_UPDATE_UPPER_BODY = 1
  BODY_UPDATE_LOWER_BODY = 2
  BODY_UPDATE_HANDS = 4
class BoneUpdate:
  BONE_UPDATE_FULL = 0
  BONE_UPDATE_ROTATION_ONLY = 1
  BONE_UPDATE_MAX = 2


class XRBodyModifier3D(py4godot_skeletonmodifier3d.SkeletonModifier3D):
  r'''
		This node uses body tracking data from an `XRBodyTracker` to pose the skeleton of a body mesh.
		Positioning of the body is performed by creating an `XRNode3D` ancestor of the body mesh driven by the same `XRBodyTracker`.
		The body tracking position-data is scaled by `Skeleton3D.motion_scale` when applied to the skeleton, which can be used to adjust the tracked body to match the scale of the body model.
	'''

  @staticmethod
  def constructor():
    class_ = XRBodyModifier3D.construct_without_init()
    class_._ptr = constructor(1012,0, ())
    return class_
  @staticmethod
  def new():
    class_ = XRBodyModifier3D.construct_without_init()
    class_._ptr = constructor(1012,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPXRBodyModifier3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1012,0, ())


  def generate_wrapper(self):
    return CPPXRBodyModifier3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = XRBodyModifier3D.__new__(XRBodyModifier3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'XRBodyModifier3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRBodyModifier3D.construct_without_init()
    cls._ptr = CPPXRBodyModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = XRBodyModifier3D.construct_without_init()
    cls._ptr = CPPXRBodyModifier3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def body_tracker(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_body_tracker()
    return _ret
  @body_tracker.setter
  def body_tracker(self,  value:'str'):
    self.set_body_tracker(value)
  @property
  def body_update(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_body_update()
    return _ret
  @body_update.setter
  def body_update(self,  value:'int'):
    self.set_body_update(value)
  @property
  def bone_update(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_bone_update()
    return _ret
  @bone_update.setter
  def bone_update(self,  value:'int'):
    self.set_bone_update(value)
  @functools.native_method
  def set_body_tracker(self, tracker_name:'object'   ) -> None:
    r''''''

    assert(not tracker_name is None)
    assert isinstance(tracker_name, (str, StringName)), 'tracker_name must be str or StringName'

    self.py__body_tracker = tracker_name



    assert(isinstance(tracker_name, (str, StringName)))
    py_stringname_tracker_name = tracker_name if isinstance(tracker_name, StringName) else c_utils.py_string_to_string_name(tracker_name)


    self._ptr.call_with_return(260,tuple([py_stringname_tracker_name._ptr]))

  @functools.native_method
  def get_body_tracker(self) -> typing.Union['StringName']:
    r''''''




    _ret = StringName.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(261,tuple([]))

    return _ret


  @functools.native_method
  def set_body_update(self, body_update:'int'   ) -> None:
    r''''''

    assert isinstance(body_update, (int, float)), 'body_update must be int or float'

    self.py__body_update = body_update






    self._ptr.call_with_return(262,tuple([body_update]))

  @functools.native_method
  def get_body_update(self) -> typing.Union[int]:
    r''''''




    _ret
    _ret = self._ptr.call_with_return(263,tuple([]))

    return _ret


  @functools.native_method
  def set_bone_update(self, bone_update:'int'  ) -> None:
    r''''''

    assert isinstance(bone_update, (int, float)), 'bone_update must be int or float'

    self.py__bone_update = bone_update






    self._ptr.call_with_return(264,tuple([bone_update]))

  @functools.native_method
  def get_bone_update(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(265,tuple([]))

    return _ret



register_cast_function('XRBodyModifier3D', XRBodyModifier3D.cast)
register_class('XRBodyModifier3D', XRBodyModifier3D)
