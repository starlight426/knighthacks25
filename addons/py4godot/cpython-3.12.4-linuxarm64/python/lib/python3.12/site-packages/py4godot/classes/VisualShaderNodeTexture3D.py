# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.NoiseTexture3D as py4godot_noisetexture3d 
  import py4godot.classes.ImageTexture3D as py4godot_imagetexture3d 
  import py4godot.classes.Texture3DRD as py4godot_texture3drd 
  import py4godot.classes.CompressedTexture3D as py4godot_compressedtexture3d 
  import py4godot.classes.PlaceholderTexture3D as py4godot_placeholdertexture3d 
  import py4godot.classes.Texture3D as py4godot_texture3d 
import py4godot.classes.VisualShaderNodeSample3D as py4godot_visualshadernodesample3d 
from py4godot.wrappers.wrappers import CPPVisualShaderNodeTexture3DWrapper


class VisualShaderNodeTexture3D(py4godot_visualshadernodesample3d.VisualShaderNodeSample3D):
  r'''
		Performs a lookup operation on the provided texture, with support for multiple texture sources to choose from.
	'''

  @staticmethod
  def constructor():
    class_ = VisualShaderNodeTexture3D.construct_without_init()
    class_._ptr = constructor(954,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VisualShaderNodeTexture3D.construct_without_init()
    class_._ptr = constructor(954,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVisualShaderNodeTexture3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(954,0, ())


  def generate_wrapper(self):
    return CPPVisualShaderNodeTexture3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VisualShaderNodeTexture3D.__new__(VisualShaderNodeTexture3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VisualShaderNodeTexture3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTexture3D.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTexture3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VisualShaderNodeTexture3D.construct_without_init()
    cls._ptr = CPPVisualShaderNodeTexture3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def texture(self) -> typing.Any:
    r''''''
    _ret = self. get_texture()
    return _ret
  @texture.setter
  def texture(self,  value:'py4godot_object.Object'):
    self.set_texture(value)
  @functools.native_method
  def set_texture(self, value:'py4godot_texture3d.Texture3D'   ) -> None:
    r''''''

    assert(not value is None)
    assert isinstance(value, get_class('Texture3D')), 'value must be Texture3D'

    self.py__texture = value






    self._ptr.call_with_return(90,tuple([value._ptr]))

  @functools.native_method
  def get_texture(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture3D
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('VisualShaderNodeTexture3D', VisualShaderNodeTexture3D.cast)
register_class('VisualShaderNodeTexture3D', VisualShaderNodeTexture3D)
