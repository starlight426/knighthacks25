# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.PhysicsDirectSpaceState2DExtension as py4godot_physicsdirectspacestate2dextension 
  import py4godot.classes.PhysicsDirectSpaceState2D as py4godot_physicsdirectspacestate2d 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPWorld2DWrapper


class World2D(py4godot_resource.Resource):
  r'''
		Class that has everything pertaining to a 2D world: A physics space, a canvas, and a sound space. 2D nodes register their resources into the current 2D world.
	'''

  @staticmethod
  def constructor():
    class_ = World2D.construct_without_init()
    class_._ptr = constructor(1004,0, ())
    return class_
  @staticmethod
  def new():
    class_ = World2D.construct_without_init()
    class_._ptr = constructor(1004,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPWorld2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1004,0, ())


  def generate_wrapper(self):
    return CPPWorld2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = World2D.__new__(World2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'World2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = World2D.construct_without_init()
    cls._ptr = CPPWorld2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = World2D.construct_without_init()
    cls._ptr = CPPWorld2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def canvas(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_canvas()
    return _ret
  @property
  def navigation_map(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_navigation_map()
    return _ret
  @property
  def space(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_space()
    return _ret
  @property
  def direct_space_state(self) -> typing.Union['py4godot_physicsdirectspacestate2dextension.PhysicsDirectSpaceState2DExtension','py4godot_physicsdirectspacestate2d.PhysicsDirectSpaceState2D']:
    r''''''
    _ret = self. get_direct_space_state()
    return _ret
  @functools.native_method
  def get_canvas(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return _ret


  @functools.native_method
  def get_navigation_map(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def get_space(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def get_direct_space_state(self) -> typing.Union['py4godot_physicsdirectspacestate2dextension.PhysicsDirectSpaceState2DExtension','py4godot_physicsdirectspacestate2d.PhysicsDirectSpaceState2D']:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PhysicsDirectSpaceState2D
    _ret._ptr = self._ptr.call_with_return(80,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('World2D', World2D.cast)
register_class('World2D', World2D)
