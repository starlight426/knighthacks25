# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.EditorResourceTooltipPlugin as py4godot_editorresourcetooltipplugin 
import py4godot.classes.VBoxContainer as py4godot_vboxcontainer 
from py4godot.wrappers.wrappers import CPPFileSystemDockWrapper


class FileSystemDock(py4godot_vboxcontainer.VBoxContainer):
  r'''
		This class is available only in `EditorPlugin`s and can't be instantiated. You can access it using `EditorInterface.get_file_system_dock`.
		While `FileSystemDock` doesn't expose any methods for file manipulation, it can listen for various file-related signals.
	'''

  @staticmethod
  def constructor():
    class_ = FileSystemDock.construct_without_init()
    class_._ptr = constructor(331,0, ())
    return class_
  @staticmethod
  def new():
    class_ = FileSystemDock.construct_without_init()
    class_._ptr = constructor(331,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPFileSystemDockWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(331,0, ())


  def generate_wrapper(self):
    return CPPFileSystemDockWrapper()
  def init_signals(self):
    super().init_signals()
    inherit_name = utils.py_string_to_string_name("inherit")
    self.inherit = signals.BuiltinSignal(self, inherit_name)
    instantiate_name = utils.py_string_to_string_name("instantiate")
    self.instantiate = signals.BuiltinSignal(self, instantiate_name)
    resource_removed_name = utils.py_string_to_string_name("resource_removed")
    self.resource_removed = signals.BuiltinSignal(self, resource_removed_name)
    file_removed_name = utils.py_string_to_string_name("file_removed")
    self.file_removed = signals.BuiltinSignal(self, file_removed_name)
    folder_removed_name = utils.py_string_to_string_name("folder_removed")
    self.folder_removed = signals.BuiltinSignal(self, folder_removed_name)
    files_moved_name = utils.py_string_to_string_name("files_moved")
    self.files_moved = signals.BuiltinSignal(self, files_moved_name)
    folder_moved_name = utils.py_string_to_string_name("folder_moved")
    self.folder_moved = signals.BuiltinSignal(self, folder_moved_name)
    folder_color_changed_name = utils.py_string_to_string_name("folder_color_changed")
    self.folder_color_changed = signals.BuiltinSignal(self, folder_color_changed_name)
    display_mode_changed_name = utils.py_string_to_string_name("display_mode_changed")
    self.display_mode_changed = signals.BuiltinSignal(self, display_mode_changed_name)

  @staticmethod
  def construct_without_init():
    cls = FileSystemDock.__new__(FileSystemDock)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'FileSystemDock'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = FileSystemDock.construct_without_init()
    cls._ptr = CPPFileSystemDockWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = FileSystemDock.construct_without_init()
    cls._ptr = CPPFileSystemDockWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def navigate_to_path(self, path:'str'   ) -> None:
    r'''
				Sets the given `path` as currently selected, ensuring that the selected file/directory is visible.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    self._ptr.call_with_return(442,tuple([py_string_path._ptr]))

  @functools.native_method
  def add_resource_tooltip_plugin(self, plugin:'py4godot_editorresourcetooltipplugin.EditorResourceTooltipPlugin'   ) -> None:
    r'''
				Registers a new `EditorResourceTooltipPlugin`.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorResourceTooltipPlugin')), 'plugin must be EditorResourceTooltipPlugin'






    self._ptr.call_with_return(443,tuple([plugin._ptr]))

  @functools.native_method
  def remove_resource_tooltip_plugin(self, plugin:'py4godot_editorresourcetooltipplugin.EditorResourceTooltipPlugin'   ) -> None:
    r'''
				Removes an `EditorResourceTooltipPlugin`. Fails if the plugin wasn't previously added.
			'''

    assert(not plugin is None)
    assert isinstance(plugin, get_class('EditorResourceTooltipPlugin')), 'plugin must be EditorResourceTooltipPlugin'






    self._ptr.call_with_return(444,tuple([plugin._ptr]))


register_cast_function('FileSystemDock', FileSystemDock.cast)
register_class('FileSystemDock', FileSystemDock)
