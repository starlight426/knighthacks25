# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.PopupMenu as py4godot_popupmenu 
import py4godot.classes.Button as py4godot_button 
from py4godot.wrappers.wrappers import CPPMenuButtonWrapper


class MenuButton(py4godot_button.Button):
  r'''
		A button that brings up a `PopupMenu` when clicked. To create new items inside this `PopupMenu`, use `get_popup().add_item("My Item Name")`. You can also create them directly from Godot editor's inspector.
		See also `BaseButton` which contains common properties and methods associated with this node.
	'''

  @staticmethod
  def constructor():
    class_ = MenuButton.construct_without_init()
    class_._ptr = constructor(469,0, ())
    return class_
  @staticmethod
  def new():
    class_ = MenuButton.construct_without_init()
    class_._ptr = constructor(469,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPMenuButtonWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(469,0, ())


  def generate_wrapper(self):
    return CPPMenuButtonWrapper()
  def init_signals(self):
    super().init_signals()
    about_to_popup_name = utils.py_string_to_string_name("about_to_popup")
    self.about_to_popup = signals.BuiltinSignal(self, about_to_popup_name)

  @staticmethod
  def construct_without_init():
    cls = MenuButton.__new__(MenuButton)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'MenuButton'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = MenuButton.construct_without_init()
    cls._ptr = CPPMenuButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = MenuButton.construct_without_init()
    cls._ptr = CPPMenuButtonWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def switch_on_hover(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_switch_on_hover()
    return _ret
  @switch_on_hover.setter
  def switch_on_hover(self,  value:'bool'):
    self.set_switch_on_hover(value)
  @property
  def item_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_item_count()
    return _ret
  @item_count.setter
  def item_count(self,  value:'int'):
    self.set_item_count(value)
  @functools.native_method
  def get_popup(self) -> typing.Union['py4godot_popupmenu.PopupMenu']:
    r'''
				Returns the `PopupMenu` contained in this button.
				**Warning:** This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their `Window.visible` property.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: PopupMenu
    _ret._ptr = self._ptr.call_with_return(484,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def show_popup(self) -> None:
    r'''
				Adjusts popup position and sizing for the `MenuButton`, then shows the `PopupMenu`. Prefer this over using `get_popup().popup()`.
			'''




    self._ptr.call_with_return(485,tuple([]))

  @functools.native_method
  def set_switch_on_hover(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__switch_on_hover = enable






    self._ptr.call_with_return(486,tuple([enable]))

  @functools.native_method
  def is_switch_on_hover(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(487,tuple([]))

    return _ret


  @functools.native_method
  def set_disable_shortcuts(self, disabled:'bool'   ) -> None:
    r'''
				If `true`, shortcuts are disabled and cannot be used to trigger the button.
			'''

    assert isinstance(disabled, bool), 'disabled must be bool'






    self._ptr.call_with_return(488,tuple([disabled]))

  @functools.native_method
  def set_item_count(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__item_count = count






    self._ptr.call_with_return(489,tuple([count]))

  @functools.native_method
  def get_item_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(490,tuple([]))

    return _ret



register_cast_function('MenuButton', MenuButton.cast)
register_class('MenuButton', MenuButton)
