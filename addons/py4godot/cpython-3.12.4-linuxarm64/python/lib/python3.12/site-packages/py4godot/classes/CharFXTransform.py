# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPCharFXTransformWrapper


class CharFXTransform(py4godot_refcounted.RefCounted):
  r'''
		By setting various properties on this object, you can control how individual characters will be displayed in a `RichTextEffect`.
	'''

  @staticmethod
  def constructor():
    class_ = CharFXTransform.construct_without_init()
    class_._ptr = constructor(206,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CharFXTransform.construct_without_init()
    class_._ptr = constructor(206,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCharFXTransformWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(206,0, ())


  def generate_wrapper(self):
    return CPPCharFXTransformWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CharFXTransform.__new__(CharFXTransform)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CharFXTransform'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CharFXTransform.construct_without_init()
    cls._ptr = CPPCharFXTransformWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CharFXTransform.construct_without_init()
    cls._ptr = CPPCharFXTransformWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def transform(self) -> typing.Union['Transform2D']:
    r''''''
    _ret = self. get_transform()
    return _ret
  @transform.setter
  def transform(self,  value:'Transform2D'):
    self.set_transform(value)
  @property
  def range(self) -> typing.Union['Vector2i']:
    r''''''
    _ret = self. get_range()
    return _ret
  @range.setter
  def range(self,  value:'Vector2i'):
    self.set_range(value)
  @property
  def elapsed_time(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_elapsed_time()
    return _ret
  @elapsed_time.setter
  def elapsed_time(self,  value:'float'):
    self.set_elapsed_time(value)
  @property
  def visible(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_visible()
    return _ret
  @visible.setter
  def visible(self,  value:'bool'):
    self.set_visibility(value)
  @property
  def outline(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_outline()
    return _ret
  @outline.setter
  def outline(self,  value:'bool'):
    self.set_outline(value)
  @property
  def offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_offset()
    return _ret
  @offset.setter
  def offset(self,  value:'Vector2'):
    self.set_offset(value)
  @property
  def color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_color()
    return _ret
  @color.setter
  def color(self,  value:'Color'):
    self.set_color(value)
  @property
  def env(self) -> typing.Union['Dictionary']:
    r''''''
    _ret = self. get_environment()
    return _ret
  @env.setter
  def env(self,  value:'Dictionary'):
    self.set_environment(value)
  @property
  def glyph_index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_glyph_index()
    return _ret
  @glyph_index.setter
  def glyph_index(self,  value:'int'):
    self.set_glyph_index(value)
  @property
  def glyph_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_glyph_count()
    return _ret
  @glyph_count.setter
  def glyph_count(self,  value:'int'):
    self.set_glyph_count(value)
  @property
  def glyph_flags(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_glyph_flags()
    return _ret
  @glyph_flags.setter
  def glyph_flags(self,  value:'int'):
    self.set_glyph_flags(value)
  @property
  def relative_index(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_relative_index()
    return _ret
  @relative_index.setter
  def relative_index(self,  value:'int'):
    self.set_relative_index(value)
  @property
  def font(self) -> typing.Union['RID']:
    r''''''
    _ret = self. get_font()
    return _ret
  @font.setter
  def font(self,  value:'RID'):
    self.set_font(value)
  @functools.native_method
  def get_transform(self) -> typing.Union['Transform2D']:
    r''''''




    _ret = Transform2D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))

    return _ret


  @functools.native_method
  def set_transform(self, transform:'Transform2D'   ) -> None:
    r''''''

    assert(not transform is None)
    assert isinstance(transform, Transform2D), 'transform must be Transform2D'

    self.py__transform = transform






    self._ptr.call_with_return(54,tuple([transform._ptr]))

  @functools.native_method
  def get_range(self) -> typing.Union['Vector2i']:
    r''''''




    _ret = Vector2i.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))

    return _ret


  @functools.native_method
  def set_range(self, range:'Vector2i'   ) -> None:
    r''''''

    assert(not range is None)
    assert isinstance(range, Vector2i), 'range must be Vector2i'

    self.py__range = range






    self._ptr.call_with_return(56,tuple([range._ptr]))

  @functools.native_method
  def get_elapsed_time(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(57,tuple([]))

    return _ret


  @functools.native_method
  def set_elapsed_time(self, time:'float'   ) -> None:
    r''''''

    assert isinstance(time, (int, float)), 'time must be int or float'

    self.py__elapsed_time = time






    self._ptr.call_with_return(58,tuple([time]))

  @functools.native_method
  def is_visible(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(59,tuple([]))

    return _ret


  @functools.native_method
  def set_visibility(self, visibility:'bool'   ) -> None:
    r''''''

    assert isinstance(visibility, bool), 'visibility must be bool'

    self.py__visible = visibility






    self._ptr.call_with_return(60,tuple([visibility]))

  @functools.native_method
  def is_outline(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(61,tuple([]))

    return _ret


  @functools.native_method
  def set_outline(self, outline:'bool'   ) -> None:
    r''''''

    assert isinstance(outline, bool), 'outline must be bool'

    self.py__outline = outline






    self._ptr.call_with_return(62,tuple([outline]))

  @functools.native_method
  def get_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(63,tuple([]))

    return _ret


  @functools.native_method
  def set_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__offset = offset






    self._ptr.call_with_return(64,tuple([offset._ptr]))

  @functools.native_method
  def get_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(65,tuple([]))

    return _ret


  @functools.native_method
  def set_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__color = color






    self._ptr.call_with_return(66,tuple([color._ptr]))

  @functools.native_method
  def get_environment(self) -> typing.Union['Dictionary']:
    r''''''




    _ret = Dictionary.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(67,tuple([]))

    return _ret


  @functools.native_method
  def set_environment(self, environment:'Dictionary'   ) -> None:
    r''''''

    assert(not environment is None)
    assert isinstance(environment, Dictionary), 'environment must be Dictionary'

    self.py__env = environment






    self._ptr.call_with_return(68,tuple([environment._ptr]))

  @functools.native_method
  def get_glyph_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(69,tuple([]))

    return _ret


  @functools.native_method
  def set_glyph_index(self, glyph_index:'int'   ) -> None:
    r''''''

    assert isinstance(glyph_index, (int, float)), 'glyph_index must be int or float'

    self.py__glyph_index = glyph_index






    self._ptr.call_with_return(70,tuple([glyph_index]))

  @functools.native_method
  def get_relative_index(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(71,tuple([]))

    return _ret


  @functools.native_method
  def set_relative_index(self, relative_index:'int'   ) -> None:
    r''''''

    assert isinstance(relative_index, (int, float)), 'relative_index must be int or float'

    self.py__relative_index = relative_index






    self._ptr.call_with_return(72,tuple([relative_index]))

  @functools.native_method
  def get_glyph_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(73,tuple([]))

    return _ret


  @functools.native_method
  def set_glyph_count(self, glyph_count:'int'   ) -> None:
    r''''''

    assert isinstance(glyph_count, (int, float)), 'glyph_count must be int or float'

    self.py__glyph_count = glyph_count






    self._ptr.call_with_return(74,tuple([glyph_count]))

  @functools.native_method
  def get_glyph_flags(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(75,tuple([]))

    return _ret


  @functools.native_method
  def set_glyph_flags(self, glyph_flags:'int'   ) -> None:
    r''''''

    assert isinstance(glyph_flags, (int, float)), 'glyph_flags must be int or float'

    self.py__glyph_flags = glyph_flags






    self._ptr.call_with_return(76,tuple([glyph_flags]))

  @functools.native_method
  def get_font(self) -> typing.Union['RID']:
    r''''''




    _ret = RID.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return _ret


  @functools.native_method
  def set_font(self, font:'RID'   ) -> None:
    r''''''

    assert(not font is None)
    assert isinstance(font, RID), 'font must be RID'

    self.py__font = font






    self._ptr.call_with_return(78,tuple([font._ptr]))


register_cast_function('CharFXTransform', CharFXTransform.cast)
register_class('CharFXTransform', CharFXTransform)
