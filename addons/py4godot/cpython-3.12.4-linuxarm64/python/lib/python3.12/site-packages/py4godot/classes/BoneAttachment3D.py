# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Skeleton3D as py4godot_skeleton3d 
import py4godot.classes.Node3D as py4godot_node3d 
from py4godot.wrappers.wrappers import CPPBoneAttachment3DWrapper


class BoneAttachment3D(py4godot_node3d.Node3D):
  r'''
		This node selects a bone in a `Skeleton3D` and attaches to it. This means that the `BoneAttachment3D` node will either dynamically copy or override the 3D transform of the selected bone.
	'''

  @staticmethod
  def constructor():
    class_ = BoneAttachment3D.construct_without_init()
    class_._ptr = constructor(167,0, ())
    return class_
  @staticmethod
  def new():
    class_ = BoneAttachment3D.construct_without_init()
    class_._ptr = constructor(167,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPBoneAttachment3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(167,0, ())


  def generate_wrapper(self):
    return CPPBoneAttachment3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = BoneAttachment3D.__new__(BoneAttachment3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'BoneAttachment3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoneAttachment3D.construct_without_init()
    cls._ptr = CPPBoneAttachment3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoneAttachment3D.construct_without_init()
    cls._ptr = CPPBoneAttachment3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def bone_name(self) -> typing.Union['StringName']:
    r''''''
    _ret = self. get_bone_name()
    return _ret
  @bone_name.setter
  def bone_name(self,  value:'object'):
    self.set_bone_name(value)
  @property
  def bone_idx(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_bone_idx()
    return _ret
  @bone_idx.setter
  def bone_idx(self,  value:'int'):
    self.set_bone_idx(value)
  @property
  def override_pose(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_override_pose()
    return _ret
  @override_pose.setter
  def override_pose(self,  value:'bool'):
    self.set_override_pose(value)
  @property
  def use_external_skeleton(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_use_external_skeleton()
    return _ret
  @use_external_skeleton.setter
  def use_external_skeleton(self,  value:'bool'):
    self.set_use_external_skeleton(value)
  @property
  def external_skeleton(self) -> typing.Union['NodePath']:
    r''''''
    _ret = self. get_external_skeleton()
    return _ret
  @external_skeleton.setter
  def external_skeleton(self,  value:'object'):
    self.set_external_skeleton(value)
  @functools.native_method
  def get_skeleton(self) -> typing.Union['py4godot_skeleton3d.Skeleton3D']:
    r'''
				Returns the parent or external `Skeleton3D` node if it exists, otherwise returns `null`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Skeleton3D
    _ret._ptr = self._ptr.call_with_return(251,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_bone_name(self, bone_name:'str'   ) -> None:
    r''''''

    assert(not bone_name is None)
    assert isinstance(bone_name, (str, String)), 'bone_name must be str or String'

    self.py__bone_name = bone_name



    assert(isinstance(bone_name, (str, String)))
    py_string_bone_name = bone_name if isinstance(bone_name, StringName) else c_utils.py_string_to_string(bone_name)

    py__string_bone_name = utils.py_string_to_string(bone_name)
    py__string_bone_name.shouldBeDeleted = False


    self._ptr.call_with_return(252,tuple([py__string_bone_name._ptr]))

  @functools.native_method
  def get_bone_name(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(253,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_bone_idx(self, bone_idx:'int'   ) -> None:
    r''''''

    assert isinstance(bone_idx, (int, float)), 'bone_idx must be int or float'

    self.py__bone_idx = bone_idx






    self._ptr.call_with_return(254,tuple([bone_idx]))

  @functools.native_method
  def get_bone_idx(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(255,tuple([]))

    return _ret


  @functools.native_method
  def on_skeleton_update(self) -> None:
    r'''
				A function that is called automatically when the `Skeleton3D` is updated. This function is where the `BoneAttachment3D` node updates its position so it is correctly bound when it is _not_ set to override the bone pose.
			'''




    self._ptr.call_with_return(256,tuple([]))

  @functools.native_method
  def set_override_pose(self, override_pose:'bool'   ) -> None:
    r''''''

    assert isinstance(override_pose, bool), 'override_pose must be bool'

    self.py__override_pose = override_pose






    self._ptr.call_with_return(257,tuple([override_pose]))

  @functools.native_method
  def get_override_pose(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(258,tuple([]))

    return _ret


  @functools.native_method
  def set_use_external_skeleton(self, use_external_skeleton:'bool'   ) -> None:
    r''''''

    assert isinstance(use_external_skeleton, bool), 'use_external_skeleton must be bool'

    self.py__use_external_skeleton = use_external_skeleton






    self._ptr.call_with_return(259,tuple([use_external_skeleton]))

  @functools.native_method
  def get_use_external_skeleton(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(260,tuple([]))

    return _ret


  @functools.native_method
  def set_external_skeleton(self, external_skeleton:'object'   ) -> None:
    r''''''

    assert(not external_skeleton is None)
    assert isinstance(external_skeleton, (str, NodePath)), 'external_skeleton must be str or NodePath'

    self.py__external_skeleton = external_skeleton



    assert(isinstance(external_skeleton, (str, NodePath)))
    py_nodepath_external_skeleton = external_skeleton if isinstance(external_skeleton,NodePath) else NodePath.new2(external_skeleton)


    self._ptr.call_with_return(261,tuple([py_nodepath_external_skeleton._ptr]))

  @functools.native_method
  def get_external_skeleton(self) -> typing.Union['NodePath']:
    r''''''




    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(262,tuple([]))

    return _ret



register_cast_function('BoneAttachment3D', BoneAttachment3D.cast)
register_class('BoneAttachment3D', BoneAttachment3D)
