# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPCurve3DWrapper


class Curve3D(py4godot_resource.Resource):
  r'''
		This class describes a BÃ©zier curve in 3D space. It is mainly used to give a shape to a `Path3D`, but can be manually sampled for other purposes.
		It keeps a cache of precalculated points along the curve, to speed up further calculations.
	'''

  @staticmethod
  def constructor():
    class_ = Curve3D.construct_without_init()
    class_._ptr = constructor(250,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Curve3D.construct_without_init()
    class_._ptr = constructor(250,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCurve3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(250,0, ())


  def generate_wrapper(self):
    return CPPCurve3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Curve3D.__new__(Curve3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Curve3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Curve3D.construct_without_init()
    cls._ptr = CPPCurve3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Curve3D.construct_without_init()
    cls._ptr = CPPCurve3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def closed(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_closed()
    return _ret
  @closed.setter
  def closed(self,  value:'bool'):
    self.set_closed(value)
  @property
  def bake_interval(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_bake_interval()
    return _ret
  @bake_interval.setter
  def bake_interval(self,  value:'float'):
    self.set_bake_interval(value)
  @property
  def point_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_point_count()
    return _ret
  @point_count.setter
  def point_count(self,  value:'int'):
    self.set_point_count(value)
  @property
  def up_vector_enabled(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_up_vector_enabled()
    return _ret
  @up_vector_enabled.setter
  def up_vector_enabled(self,  value:'bool'):
    self.set_up_vector_enabled(value)
  @functools.native_method
  def get_point_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([]))

    return _ret


  @functools.native_method
  def set_point_count(self, count:'int'   ) -> None:
    r''''''

    assert isinstance(count, (int, float)), 'count must be int or float'

    self.py__point_count = count






    self._ptr.call_with_return(78,tuple([count]))

  @functools.native_method
  def add_point(self, position:'Vector3'   , in_:'Vector3' = None  , out:'Vector3' = None  , index:'int' =-1  ) -> None:
    r'''
				Adds a point with the specified `position` relative to the curve's own position, with control points `in` and `out`. Appends the new point at the end of the point list.
				If `index` is given, the new point is inserted before the existing point identified by index `index`. Every existing point starting from `index` is shifted further down the list of points. The index must be greater than or equal to `0` and must not exceed the number of existing points in the line. See `point_count`.
			'''
    if in_ is None:
      in_ = Vector3.new0()
    if out is None:
      out = Vector3.new0()
    if in_ is None:
      in_ = Vector3.new0()
    if out is None:
      out = Vector3.new0()

    assert(not position is None)
    assert isinstance(position, Vector3), 'position must be Vector3'
    assert isinstance(index, (int, float)), 'index must be int or float'









    self._ptr.call_with_return(79,tuple([position._ptr, in_._ptr, out._ptr, index]))

  @functools.native_method
  def set_point_position(self, idx:'int'   , position:'Vector3'   ) -> None:
    r'''
				Sets the position for the vertex `idx`. If the index is out of bounds, the function sends an error to the console.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert(not position is None)
    assert isinstance(position, Vector3), 'position must be Vector3'







    self._ptr.call_with_return(80,tuple([idx, position._ptr]))

  @functools.native_method
  def get_point_position(self, idx:'int'   ) -> typing.Union['Vector3']:
    r'''
				Returns the position of the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0, 0)`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(81,tuple([idx]))
    return _ret


  @functools.native_method
  def set_point_tilt(self, idx:'int'   , tilt:'float'   ) -> None:
    r'''
				Sets the tilt angle in radians for the point `idx`. If the index is out of bounds, the function sends an error to the console.
				The tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a `PathFollow3D`, this tilt is an offset over the natural tilt the `PathFollow3D` calculates.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert isinstance(tilt, (int, float)), 'tilt must be int or float'







    self._ptr.call_with_return(82,tuple([idx, tilt]))

  @functools.native_method
  def get_point_tilt(self, idx:'int'   ) -> typing.Union[float]:
    r'''
				Returns the tilt angle in radians for the point `idx`. If the index is out of bounds, the function sends an error to the console, and returns `0`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([idx]))
    return _ret


  @functools.native_method
  def set_point_in(self, idx:'int'   , position:'Vector3'   ) -> None:
    r'''
				Sets the position of the control point leading to the vertex `idx`. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert(not position is None)
    assert isinstance(position, Vector3), 'position must be Vector3'







    self._ptr.call_with_return(84,tuple([idx, position._ptr]))

  @functools.native_method
  def get_point_in(self, idx:'int'   ) -> typing.Union['Vector3']:
    r'''
				Returns the position of the control point leading to the vertex `idx`. The returned position is relative to the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0, 0)`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(85,tuple([idx]))
    return _ret


  @functools.native_method
  def set_point_out(self, idx:'int'   , position:'Vector3'   ) -> None:
    r'''
				Sets the position of the control point leading out of the vertex `idx`. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert(not position is None)
    assert isinstance(position, Vector3), 'position must be Vector3'







    self._ptr.call_with_return(86,tuple([idx, position._ptr]))

  @functools.native_method
  def get_point_out(self, idx:'int'   ) -> typing.Union['Vector3']:
    r'''
				Returns the position of the control point leading out of the vertex `idx`. The returned position is relative to the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0, 0)`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(87,tuple([idx]))
    return _ret


  @functools.native_method
  def remove_point(self, idx:'int'   ) -> None:
    r'''
				Deletes the point `idx` from the curve. Sends an error to the console if `idx` is out of bounds.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'






    self._ptr.call_with_return(88,tuple([idx]))

  @functools.native_method
  def clear_points(self) -> None:
    r'''
				Removes all points from the curve.
			'''




    self._ptr.call_with_return(89,tuple([]))

  @functools.native_method
  def sample(self, idx:'int'   , t:'float'   ) -> typing.Union['Vector3']:
    r'''
				Returns the position between the vertex `idx` and the vertex `idx + 1`, where `t` controls if the point is the first vertex (`t = 0.0`), the last vertex (`t = 1.0`), or in between. Values of `t` outside the range (`0.0 >= t <=1`) give strange, but predictable results.
				If `idx` is out of bounds it is truncated to the first or last vertex, and `t` is ignored. If the curve has no points, the function sends an error to the console, and returns `(0, 0, 0)`.
			'''

    assert isinstance(idx, (int, float)), 'idx must be int or float'
    assert isinstance(t, (int, float)), 't must be int or float'







    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(90,tuple([idx, t]))
    return _ret


  @functools.native_method
  def samplef(self, fofs:'float'   ) -> typing.Union['Vector3']:
    r'''
				Returns the position at the vertex `fofs`. It calls `sample` using the integer part of `fofs` as `idx`, and its fractional part as `t`.
			'''

    assert isinstance(fofs, (int, float)), 'fofs must be int or float'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([fofs]))
    return _ret


  @functools.native_method
  def set_closed(self, closed:'bool'   ) -> None:
    r''''''

    assert isinstance(closed, bool), 'closed must be bool'

    self.py__closed = closed






    self._ptr.call_with_return(92,tuple([closed]))

  @functools.native_method
  def is_closed(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_bake_interval(self, distance:'float'   ) -> None:
    r''''''

    assert isinstance(distance, (int, float)), 'distance must be int or float'

    self.py__bake_interval = distance






    self._ptr.call_with_return(94,tuple([distance]))

  @functools.native_method
  def get_bake_interval(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_up_vector_enabled(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__up_vector_enabled = enable






    self._ptr.call_with_return(96,tuple([enable]))

  @functools.native_method
  def is_up_vector_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def get_baked_length(self) -> typing.Union[float]:
    r'''
				Returns the total length of the curve, based on the cached points. Given enough density (see `bake_interval`), it should be approximate enough.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([]))
    return _ret


  @functools.native_method
  def sample_baked(self, offset:'float' =0.0  , cubic:'bool' =False  ) -> typing.Union['Vector3']:
    r'''
				Returns a point within the curve at position `offset`, where `offset` is measured as a distance in 3D units along the curve. To do that, it finds the two cached points where the `offset` lies between, then interpolates the values. This interpolation is cubic if `cubic` is set to `true`, or linear if set to `false`.
				Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).
			'''

    assert isinstance(offset, (int, float)), 'offset must be int or float'
    assert isinstance(cubic, bool), 'cubic must be bool'







    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(99,tuple([offset, cubic]))
    return _ret


  @functools.native_method
  def sample_baked_with_rotation(self, offset:'float' =0.0  , cubic:'bool' =False  , apply_tilt:'bool' =False  ) -> typing.Union['Transform3D']:
    r'''
				Returns a `Transform3D` with `origin` as point position, `basis.x` as sideway vector, `basis.y` as up vector, `basis.z` as forward vector. When the curve length is 0, there is no reasonable way to calculate the rotation, all vectors aligned with global space axes. See also `sample_baked`.
			'''

    assert isinstance(offset, (int, float)), 'offset must be int or float'
    assert isinstance(cubic, bool), 'cubic must be bool'
    assert isinstance(apply_tilt, bool), 'apply_tilt must be bool'








    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(100,tuple([offset, cubic, apply_tilt]))
    return _ret


  @functools.native_method
  def sample_baked_up_vector(self, offset:'float'   , apply_tilt:'bool' =False  ) -> typing.Union['Vector3']:
    r'''
				Returns an up vector within the curve at position `offset`, where `offset` is measured as a distance in 3D units along the curve. To do that, it finds the two cached up vectors where the `offset` lies between, then interpolates the values. If `apply_tilt` is `true`, an interpolated tilt is applied to the interpolated up vector.
				If the curve has no up vectors, the function sends an error to the console, and returns `(0, 1, 0)`.
			'''

    assert isinstance(offset, (int, float)), 'offset must be int or float'
    assert isinstance(apply_tilt, bool), 'apply_tilt must be bool'







    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(101,tuple([offset, apply_tilt]))
    return _ret


  @functools.native_method
  def get_baked_points(self) -> typing.Union['PackedVector3Array']:
    r'''
				Returns the cache of points as a `PackedVector3Array`.
			'''




    _ret = PackedVector3Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(102,tuple([]))
    return _ret


  @functools.native_method
  def get_baked_tilts(self) -> typing.Union['PackedFloat32Array']:
    r'''
				Returns the cache of tilts as a `PackedFloat32Array`.
			'''




    _ret = PackedFloat32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(103,tuple([]))
    return _ret


  @functools.native_method
  def get_baked_up_vectors(self) -> typing.Union['PackedVector3Array']:
    r'''
				Returns the cache of up vectors as a `PackedVector3Array`.
				If `up_vector_enabled` is `false`, the cache will be empty.
			'''




    _ret = PackedVector3Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(104,tuple([]))
    return _ret


  @functools.native_method
  def get_closest_point(self, to_point:'Vector3'   ) -> typing.Union['Vector3']:
    r'''
				Returns the closest point on baked segments (in curve's local space) to `to_point`.
				`to_point` must be in this curve's local space.
			'''

    assert(not to_point is None)
    assert isinstance(to_point, Vector3), 'to_point must be Vector3'






    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(105,tuple([to_point._ptr]))
    return _ret


  @functools.native_method
  def get_closest_offset(self, to_point:'Vector3'   ) -> typing.Union[float]:
    r'''
				Returns the closest offset to `to_point`. This offset is meant to be used in `sample_baked` or `sample_baked_up_vector`.
				`to_point` must be in this curve's local space.
			'''

    assert(not to_point is None)
    assert isinstance(to_point, Vector3), 'to_point must be Vector3'






    _ret = 0
    _ret = self._ptr.call_with_return(106,tuple([to_point._ptr]))
    return _ret


  @functools.native_method
  def tessellate(self, max_stages:'int' =5  , tolerance_degrees:'float' =4  ) -> typing.Union['PackedVector3Array']:
    r'''
				Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.
				This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.
				`max_stages` controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!
				`tolerance_degrees` controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.
			'''

    assert isinstance(max_stages, (int, float)), 'max_stages must be int or float'
    assert isinstance(tolerance_degrees, (int, float)), 'tolerance_degrees must be int or float'







    _ret = PackedVector3Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(107,tuple([max_stages, tolerance_degrees]))
    return _ret


  @functools.native_method
  def tessellate_even_length(self, max_stages:'int' =5  , tolerance_length:'float' =0.2  ) -> typing.Union['PackedVector3Array']:
    r'''
				Returns a list of points along the curve, with almost uniform density. `max_stages` controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!
				`tolerance_length` controls the maximal distance between two neighboring points, before the segment has to be subdivided.
			'''

    assert isinstance(max_stages, (int, float)), 'max_stages must be int or float'
    assert isinstance(tolerance_length, (int, float)), 'tolerance_length must be int or float'







    _ret = PackedVector3Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(108,tuple([max_stages, tolerance_length]))
    return _ret



register_cast_function('Curve3D', Curve3D.cast)
register_class('Curve3D', Curve3D)
