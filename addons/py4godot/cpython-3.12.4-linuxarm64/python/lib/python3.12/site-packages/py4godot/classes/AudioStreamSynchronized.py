# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AudioStreamGenerator as py4godot_audiostreamgenerator 
  import py4godot.classes.AudioStreamOggVorbis as py4godot_audiostreamoggvorbis 
  import py4godot.classes.AudioStreamMicrophone as py4godot_audiostreammicrophone 
  import py4godot.classes.AudioStreamWAV as py4godot_audiostreamwav 
  import py4godot.classes.AudioStreamMP3 as py4godot_audiostreammp3 
  import py4godot.classes.AudioStreamPolyphonic as py4godot_audiostreampolyphonic 
  import py4godot.classes.AudioStreamRandomizer as py4godot_audiostreamrandomizer 
  import py4godot.classes.AudioStreamPlaylist as py4godot_audiostreamplaylist 
  import py4godot.classes.AudioStreamInteractive as py4godot_audiostreaminteractive 
import py4godot.classes.AudioStream as py4godot_audiostream 
from py4godot.wrappers.wrappers import CPPAudioStreamSynchronizedWrapper


class AudioStreamSynchronized(py4godot_audiostream.AudioStream):
  r''''''
  MAX_STREAMS:typing.ClassVar[int]

  @staticmethod
  def constructor():
    class_ = AudioStreamSynchronized.construct_without_init()
    class_._ptr = constructor(160,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioStreamSynchronized.construct_without_init()
    class_._ptr = constructor(160,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioStreamSynchronizedWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(160,0, ())


  def generate_wrapper(self):
    return CPPAudioStreamSynchronizedWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioStreamSynchronized.__new__(AudioStreamSynchronized)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioStreamSynchronized'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamSynchronized.construct_without_init()
    cls._ptr = CPPAudioStreamSynchronizedWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioStreamSynchronized.construct_without_init()
    cls._ptr = CPPAudioStreamSynchronizedWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def stream_count(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_stream_count()
    return _ret
  @stream_count.setter
  def stream_count(self,  value:'int'):
    self.set_stream_count(value)
  @functools.native_method
  def set_stream_count(self, stream_count:'int'   ) -> None:
    r''''''

    assert isinstance(stream_count, (int, float)), 'stream_count must be int or float'

    self.py__stream_count = stream_count






    self._ptr.call_with_return(93,tuple([stream_count]))

  @functools.native_method
  def get_stream_count(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_sync_stream(self, stream_index:'int'   , audio_stream:'py4godot_audiostream.AudioStream'   ) -> None:
    r''''''

    assert isinstance(stream_index, (int, float)), 'stream_index must be int or float'
    assert(not audio_stream is None)
    assert isinstance(audio_stream, get_class('AudioStream')), 'audio_stream must be AudioStream'







    self._ptr.call_with_return(95,tuple([stream_index, audio_stream._ptr]))

  @functools.native_method
  def get_sync_stream(self, stream_index:'int'   ) -> typing.Any:
    r''''''

    assert isinstance(stream_index, (int, float)), 'stream_index must be int or float'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AudioStream
    _ret._ptr = self._ptr.call_with_return(96,tuple([stream_index]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_sync_stream_volume(self, stream_index:'int'   , volume_db:'float'   ) -> None:
    r''''''

    assert isinstance(stream_index, (int, float)), 'stream_index must be int or float'
    assert isinstance(volume_db, (int, float)), 'volume_db must be int or float'







    self._ptr.call_with_return(97,tuple([stream_index, volume_db]))

  @functools.native_method
  def get_sync_stream_volume(self, stream_index:'int'   ) -> typing.Union[float]:
    r''''''

    assert isinstance(stream_index, (int, float)), 'stream_index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(98,tuple([stream_index]))
    return _ret



register_cast_function('AudioStreamSynchronized', AudioStreamSynchronized.cast)
register_class('AudioStreamSynchronized', AudioStreamSynchronized)
