# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPResourceFormatLoaderWrapper

class CacheMode:
  CACHE_MODE_IGNORE = 0
  CACHE_MODE_REUSE = 1
  CACHE_MODE_REPLACE = 2
  CACHE_MODE_IGNORE_DEEP = 3
  CACHE_MODE_REPLACE_DEEP = 4


class ResourceFormatLoader(py4godot_refcounted.RefCounted):
  r'''
		Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They are queried automatically via the `ResourceLoader` singleton, or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoaders are registered in the engine.
		Extending this class allows you to define your own loader. Be sure to respect the documented return types and values. You should give it a global class name with `class_name` for it to be registered. Like built-in ResourceFormatLoaders, it will be called automatically when loading resources of its handled type(s). You may also implement a `ResourceFormatSaver`.
		**Note:** You can also extend `EditorImportPlugin` if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends on if the format is suitable or not for the final exported game. For example, it's better to import `.png` textures as `.ctex` (`CompressedTexture2D`) first, so they can be loaded with better efficiency on the graphics card.
	'''

  @staticmethod
  def constructor():
    class_ = ResourceFormatLoader.construct_without_init()
    class_._ptr = constructor(686,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ResourceFormatLoader.construct_without_init()
    class_._ptr = constructor(686,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPResourceFormatLoaderWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(686,0, ())


  def generate_wrapper(self):
    return CPPResourceFormatLoaderWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ResourceFormatLoader.__new__(ResourceFormatLoader)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ResourceFormatLoader'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceFormatLoader.construct_without_init()
    cls._ptr = CPPResourceFormatLoaderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceFormatLoader.construct_without_init()
    cls._ptr = CPPResourceFormatLoaderWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def _get_recognized_extensions(self) -> typing.Union['PackedStringArray']:
    r'''
				Gets the list of extensions for files this loader is able to read.
			'''




    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(53,tuple([]))
    return _ret


  @functools.native_method
  def _recognize_path(self, path:'str'   , type:'object'   ) -> typing.Union[bool]:
    r'''
				Tells whether or not this loader should load a resource from its resource path for a given type.
				If it is not implemented, the default behavior returns whether the path's extension is within the ones provided by `_get_recognized_extensions`, and if the type is within the ones provided by `_get_resource_type`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not type is None)
    assert isinstance(type, (str, StringName)), 'type must be str or StringName'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)
    assert(isinstance(type, (str, StringName)))
    py_stringname_type = type if isinstance(type, StringName) else c_utils.py_string_to_string_name(type)

    _ret = 0
    _ret = self._ptr.call_with_return(54,tuple([py_string_path._ptr, py_stringname_type._ptr]))
    return _ret


  @functools.native_method
  def _handles_type(self, type:'object'   ) -> typing.Union[bool]:
    r'''
				Tells which resource class this loader can load.
				**Note:** Custom resource types defined by scripts aren't known by the `ClassDB`, so you might just handle `"Resource"` for them.
			'''

    assert(not type is None)
    assert isinstance(type, (str, StringName)), 'type must be str or StringName'




    assert(isinstance(type, (str, StringName)))
    py_stringname_type = type if isinstance(type, StringName) else c_utils.py_string_to_string_name(type)

    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([py_stringname_type._ptr]))
    return _ret


  @functools.native_method
  def _get_resource_type(self, path:'str'   ) -> typing.Union[str]:
    r'''
				Gets the class name of the resource associated with the given path. If the loader cannot handle it, it should return `""`.
				**Note:** Custom resource types defined by scripts aren't known by the `ClassDB`, so you might just return `"Resource"` for them.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(56,tuple([py_string_path._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _get_resource_script_class(self, path:'str'   ) -> typing.Union[str]:
    r'''
				Returns the script class name associated with the `Resource` under the given `path`. If the resource has no script or the script isn't a named class, it should return `""`.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(57,tuple([py_string_path._ptr]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def _get_resource_uid(self, path:'str'   ) -> typing.Union[int]:
    r'''
				Should return the unique ID for the resource associated with the given path. If this method is not overridden, a `.uid` file is generated along with the resource file, containing the unique ID.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def _get_dependencies(self, path:'str'   , add_types:'bool'   ) -> typing.Union['PackedStringArray']:
    r'''
				Should return the dependencies for the resource at the given `path`. Each dependency is a string composed of one to three sections separated by `::`, with trailing empty sections omitted:
				- The first section should contain the UID if the resource has one. Otherwise, it should contain the file path.
				- The second section should contain the class name of the dependency if `add_types` is `true`. Otherwise, it should be empty.
				- The third section should contain the fallback path if the resource has a UID. Otherwise, it should be empty.
				```gdscript
				func _get_dependencies(path, add_types):
					return `
						"uid://fqgvuwrkuixh::Script::res://script.gd",
						"uid://fqgvuwrkuixh::::res://script.gd",
						"res://script.gd::Script",
						"res://script.gd",
					`
				```
				**Note:** Custom resource types defined by scripts aren't known by the `ClassDB`, so `"Resource"` can be used for the class name.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(add_types, bool), 'add_types must be bool'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(59,tuple([py_string_path._ptr, add_types]))
    return _ret


  @functools.native_method
  def _rename_dependencies(self, path:'str'   , renames:'Dictionary'   ) -> typing.Union[int]:
    r'''
				If implemented, renames dependencies within the given resource and saves it. `renames` is a dictionary `{ String => String }` mapping old dependency paths to new paths.
				Returns `constant OK` on success, or an `enum Error` constant in case of failure.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not renames is None)
    assert isinstance(renames, Dictionary), 'renames must be Dictionary'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret:int
    _ret = self._ptr.call_with_return(60,tuple([py_string_path._ptr, renames._ptr]))
    return _ret


  @functools.native_method
  def _exists(self, path:'str'   ) -> typing.Union[bool]:
    r'''
'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = 0
    _ret = self._ptr.call_with_return(61,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def _get_classes_used(self, path:'str'   ) -> typing.Union['PackedStringArray']:
    r'''
'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = PackedStringArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(62,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def _load(self, path:'str'   , original_path:'str'   , use_sub_threads:'bool'   , cache_mode:'int'   ) -> typing.Union[typing.Any]:
    r'''
				Loads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, `original_path` will target the source file. Returns a `Resource` object on success, or an `enum Error` constant in case of failure.
				The `cache_mode` property defines whether and how the cache should be used or updated when loading the resource. See `enum CacheMode` for details.
			'''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert(not original_path is None)
    assert isinstance(original_path, (str, String)), 'original_path must be str or String'
    assert isinstance(use_sub_threads, bool), 'use_sub_threads must be bool'
    assert isinstance(cache_mode, (int, float)), 'cache_mode must be int or float'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)
    assert(isinstance(original_path, (str, String)))
    py_string_original_path = original_path if isinstance(original_path, StringName) else c_utils.py_string_to_string(original_path)



    _ret = None
    _ret = self._ptr.call_with_return(63,tuple([py_string_path._ptr, py_string_original_path._ptr, use_sub_threads, cache_mode]))
    return _ret



register_cast_function('ResourceFormatLoader', ResourceFormatLoader.cast)
register_class('ResourceFormatLoader', ResourceFormatLoader)
