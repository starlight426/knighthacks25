# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.GLTFState as py4godot_gltfstate 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGLTFNodeWrapper


class GLTFNode(py4godot_resource.Resource):
  r''''''

  @staticmethod
  def constructor():
    class_ = GLTFNode.construct_without_init()
    class_._ptr = constructor(354,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GLTFNode.construct_without_init()
    class_._ptr = constructor(354,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGLTFNodeWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(354,0, ())


  def generate_wrapper(self):
    return CPPGLTFNodeWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GLTFNode.__new__(GLTFNode)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GLTFNode'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFNode.construct_without_init()
    cls._ptr = CPPGLTFNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GLTFNode.construct_without_init()
    cls._ptr = CPPGLTFNodeWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def original_name(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_original_name()
    return _ret
  @original_name.setter
  def original_name(self,  value:'str'):
    self.set_original_name(value)
  @property
  def parent(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_parent()
    return _ret
  @parent.setter
  def parent(self,  value:'int'):
    self.set_parent(value)
  @property
  def height(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'int'):
    self.set_height(value)
  @property
  def xform(self) -> typing.Union['Transform3D']:
    r''''''
    _ret = self. get_xform()
    return _ret
  @xform.setter
  def xform(self,  value:'Transform3D'):
    self.set_xform(value)
  @property
  def mesh(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_mesh()
    return _ret
  @mesh.setter
  def mesh(self,  value:'int'):
    self.set_mesh(value)
  @property
  def camera(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_camera()
    return _ret
  @camera.setter
  def camera(self,  value:'int'):
    self.set_camera(value)
  @property
  def skin(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_skin()
    return _ret
  @skin.setter
  def skin(self,  value:'int'):
    self.set_skin(value)
  @property
  def skeleton(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_skeleton()
    return _ret
  @skeleton.setter
  def skeleton(self,  value:'int'):
    self.set_skeleton(value)
  @property
  def position(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_position()
    return _ret
  @position.setter
  def position(self,  value:'Vector3'):
    self.set_position(value)
  @property
  def rotation(self) -> typing.Union['Quaternion']:
    r''''''
    _ret = self. get_rotation()
    return _ret
  @rotation.setter
  def rotation(self,  value:'Quaternion'):
    self.set_rotation(value)
  @property
  def scale(self) -> typing.Union['Vector3']:
    r''''''
    _ret = self. get_scale()
    return _ret
  @scale.setter
  def scale(self,  value:'Vector3'):
    self.set_scale(value)
  @property
  def children(self) -> typing.Union['PackedInt32Array']:
    r''''''
    _ret = self. get_children()
    return _ret
  @children.setter
  def children(self,  value:'PackedInt32Array'):
    self.set_children(value)
  @property
  def light(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_light()
    return _ret
  @light.setter
  def light(self,  value:'int'):
    self.set_light(value)
  @property
  def visible(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_visible()
    return _ret
  @visible.setter
  def visible(self,  value:'bool'):
    self.set_visible(value)
  @functools.native_method
  def get_original_name(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))

    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_original_name(self, original_name:'str'   ) -> None:
    r''''''

    assert(not original_name is None)
    assert isinstance(original_name, (str, String)), 'original_name must be str or String'

    self.py__original_name = original_name



    assert(isinstance(original_name, (str, String)))
    py_string_original_name = original_name if isinstance(original_name, StringName) else c_utils.py_string_to_string(original_name)

    py__string_original_name = utils.py_string_to_string(original_name)
    py__string_original_name.shouldBeDeleted = False


    self._ptr.call_with_return(78,tuple([py__string_original_name._ptr]))

  @functools.native_method
  def get_parent(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_parent(self, parent:'int'   ) -> None:
    r''''''

    assert isinstance(parent, (int, float)), 'parent must be int or float'

    self.py__parent = parent






    self._ptr.call_with_return(80,tuple([parent]))

  @functools.native_method
  def get_height(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_height(self, height:'int'   ) -> None:
    r''''''

    assert isinstance(height, (int, float)), 'height must be int or float'

    self.py__height = height






    self._ptr.call_with_return(82,tuple([height]))

  @functools.native_method
  def get_xform(self) -> typing.Union['Transform3D']:
    r''''''




    _ret = Transform3D.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_xform(self, xform:'Transform3D'   ) -> None:
    r''''''

    assert(not xform is None)
    assert isinstance(xform, Transform3D), 'xform must be Transform3D'

    self.py__xform = xform






    self._ptr.call_with_return(84,tuple([xform._ptr]))

  @functools.native_method
  def get_mesh(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_mesh(self, mesh:'int'   ) -> None:
    r''''''

    assert isinstance(mesh, (int, float)), 'mesh must be int or float'

    self.py__mesh = mesh






    self._ptr.call_with_return(86,tuple([mesh]))

  @functools.native_method
  def get_camera(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret


  @functools.native_method
  def set_camera(self, camera:'int'   ) -> None:
    r''''''

    assert isinstance(camera, (int, float)), 'camera must be int or float'

    self.py__camera = camera






    self._ptr.call_with_return(88,tuple([camera]))

  @functools.native_method
  def get_skin(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(89,tuple([]))

    return _ret


  @functools.native_method
  def set_skin(self, skin:'int'   ) -> None:
    r''''''

    assert isinstance(skin, (int, float)), 'skin must be int or float'

    self.py__skin = skin






    self._ptr.call_with_return(90,tuple([skin]))

  @functools.native_method
  def get_skeleton(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(91,tuple([]))

    return _ret


  @functools.native_method
  def set_skeleton(self, skeleton:'int'   ) -> None:
    r''''''

    assert isinstance(skeleton, (int, float)), 'skeleton must be int or float'

    self.py__skeleton = skeleton






    self._ptr.call_with_return(92,tuple([skeleton]))

  @functools.native_method
  def get_position(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_position(self, position:'Vector3'   ) -> None:
    r''''''

    assert(not position is None)
    assert isinstance(position, Vector3), 'position must be Vector3'

    self.py__position = position






    self._ptr.call_with_return(94,tuple([position._ptr]))

  @functools.native_method
  def get_rotation(self) -> typing.Union['Quaternion']:
    r''''''




    _ret = Quaternion.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_rotation(self, rotation:'Quaternion'   ) -> None:
    r''''''

    assert(not rotation is None)
    assert isinstance(rotation, Quaternion), 'rotation must be Quaternion'

    self.py__rotation = rotation






    self._ptr.call_with_return(96,tuple([rotation._ptr]))

  @functools.native_method
  def get_scale(self) -> typing.Union['Vector3']:
    r''''''




    _ret = Vector3.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_scale(self, scale:'Vector3'   ) -> None:
    r''''''

    assert(not scale is None)
    assert isinstance(scale, Vector3), 'scale must be Vector3'

    self.py__scale = scale






    self._ptr.call_with_return(98,tuple([scale._ptr]))

  @functools.native_method
  def get_children(self) -> typing.Union['PackedInt32Array']:
    r''''''




    _ret = PackedInt32Array.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(99,tuple([]))

    return _ret


  @functools.native_method
  def set_children(self, children:'PackedInt32Array'   ) -> None:
    r''''''

    assert(not children is None)
    assert isinstance(children, PackedInt32Array), 'children must be PackedInt32Array'

    self.py__children = children






    self._ptr.call_with_return(100,tuple([children._ptr]))

  @functools.native_method
  def append_child_index(self, child_index:'int'   ) -> None:
    r''''''

    assert isinstance(child_index, (int, float)), 'child_index must be int or float'






    self._ptr.call_with_return(101,tuple([child_index]))

  @functools.native_method
  def get_light(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(102,tuple([]))

    return _ret


  @functools.native_method
  def set_light(self, light:'int'   ) -> None:
    r''''''

    assert isinstance(light, (int, float)), 'light must be int or float'

    self.py__light = light






    self._ptr.call_with_return(103,tuple([light]))

  @functools.native_method
  def get_visible(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([]))

    return _ret


  @functools.native_method
  def set_visible(self, visible:'bool'   ) -> None:
    r''''''

    assert isinstance(visible, bool), 'visible must be bool'

    self.py__visible = visible






    self._ptr.call_with_return(105,tuple([visible]))

  @functools.native_method
  def get_additional_data(self, extension_name:'object'   ) -> typing.Union[typing.Any]:
    r''''''

    assert(not extension_name is None)
    assert isinstance(extension_name, (str, StringName)), 'extension_name must be str or StringName'




    assert(isinstance(extension_name, (str, StringName)))
    py_stringname_extension_name = extension_name if isinstance(extension_name, StringName) else c_utils.py_string_to_string_name(extension_name)

    _ret = None
    _ret = self._ptr.call_with_return(106,tuple([py_stringname_extension_name._ptr]))
    return _ret


  @functools.native_method
  def set_additional_data(self, extension_name:'object'   , additional_data:'object'   ) -> None:
    r''''''

    assert(not extension_name is None)
    assert isinstance(extension_name, (str, StringName)), 'extension_name must be str or StringName'
    




    assert(isinstance(extension_name, (str, StringName)))
    py_stringname_extension_name = extension_name if isinstance(extension_name, StringName) else c_utils.py_string_to_string_name(extension_name)


    self._ptr.call_with_return(107,tuple([py_stringname_extension_name._ptr, additional_data]))

  @functools.native_method
  def get_scene_node_path(self, gltf_state:'py4godot_gltfstate.GLTFState'   , handle_skeletons:'bool' =True  ) -> typing.Union['NodePath']:
    r''''''

    assert(not gltf_state is None)
    assert isinstance(gltf_state, get_class('GLTFState')), 'gltf_state must be GLTFState'
    assert isinstance(handle_skeletons, bool), 'handle_skeletons must be bool'







    _ret = NodePath.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(108,tuple([gltf_state._ptr, handle_skeletons]))
    return _ret



register_cast_function('GLTFNode', GLTFNode.cast)
register_class('GLTFNode', GLTFNode)
