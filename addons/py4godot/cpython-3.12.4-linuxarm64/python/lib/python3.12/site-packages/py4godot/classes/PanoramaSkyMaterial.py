# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Material as py4godot_material 
from py4godot.wrappers.wrappers import CPPPanoramaSkyMaterialWrapper


class PanoramaSkyMaterial(py4godot_material.Material):
  r'''
		A resource referenced in a `Sky` that is used to draw a background. `PanoramaSkyMaterial` functions similar to skyboxes in other engines, except it uses an equirectangular sky map instead of a `Cubemap`.
		Using an HDR panorama is strongly recommended for accurate, high-quality reflections. Godot supports the Radiance HDR (`.hdr`) and OpenEXR (`.exr`) image formats for this purpose.
		You can use `url=https://danilw.github.io/GLSL-howto/cubemap_to_panorama_js/cubemap_to_panorama.html`this tool`/url` to convert a cubemap to an equirectangular sky map.
	'''

  @staticmethod
  def constructor():
    class_ = PanoramaSkyMaterial.construct_without_init()
    class_._ptr = constructor(575,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PanoramaSkyMaterial.construct_without_init()
    class_._ptr = constructor(575,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPanoramaSkyMaterialWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(575,0, ())


  def generate_wrapper(self):
    return CPPPanoramaSkyMaterialWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PanoramaSkyMaterial.__new__(PanoramaSkyMaterial)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PanoramaSkyMaterial'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PanoramaSkyMaterial.construct_without_init()
    cls._ptr = CPPPanoramaSkyMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PanoramaSkyMaterial.construct_without_init()
    cls._ptr = CPPPanoramaSkyMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def panorama(self) -> typing.Any:
    r''''''
    _ret = self. get_panorama()
    return _ret
  @panorama.setter
  def panorama(self,  value:'py4godot_object.Object'):
    self.set_panorama(value)
  @property
  def filter(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_filtering_enabled()
    return _ret
  @filter.setter
  def filter(self,  value:'bool'):
    self.set_filtering_enabled(value)
  @property
  def energy_multiplier(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_energy_multiplier()
    return _ret
  @energy_multiplier.setter
  def energy_multiplier(self,  value:'float'):
    self.set_energy_multiplier(value)
  @functools.native_method
  def set_panorama(self, texture:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not texture is None)
    assert isinstance(texture, get_class('Texture2D')), 'texture must be Texture2D'

    self.py__panorama = texture






    self._ptr.call_with_return(87,tuple([texture._ptr]))

  @functools.native_method
  def get_panorama(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(88,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_filtering_enabled(self, enabled:'bool'   ) -> None:
    r''''''

    assert isinstance(enabled, bool), 'enabled must be bool'

    self.py__filter = enabled






    self._ptr.call_with_return(89,tuple([enabled]))

  @functools.native_method
  def is_filtering_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_energy_multiplier(self, multiplier:'float'   ) -> None:
    r''''''

    assert isinstance(multiplier, (int, float)), 'multiplier must be int or float'

    self.py__energy_multiplier = multiplier






    self._ptr.call_with_return(91,tuple([multiplier]))

  @functools.native_method
  def get_energy_multiplier(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))

    return _ret



register_cast_function('PanoramaSkyMaterial', PanoramaSkyMaterial.cast)
register_class('PanoramaSkyMaterial', PanoramaSkyMaterial)
