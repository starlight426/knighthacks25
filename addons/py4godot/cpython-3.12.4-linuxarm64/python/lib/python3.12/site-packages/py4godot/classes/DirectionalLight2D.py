# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Light2D as py4godot_light2d 
from py4godot.wrappers.wrappers import CPPDirectionalLight2DWrapper


class DirectionalLight2D(py4godot_light2d.Light2D):
  r'''
		A directional light is a type of `Light2D` node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene (for example: to model sunlight or moonlight).
		Light is emitted in the +Y direction of the node's global basis. For an unrotated light, this means that the light is emitted downwards. The position of the node is ignored; only the basis is used to determine light direction.
		**Note:** `DirectionalLight2D` does not support light cull masks (but it supports shadow cull masks). It will always light up 2D nodes, regardless of the 2D node's `CanvasItem.light_mask`.
	'''

  @staticmethod
  def constructor():
    class_ = DirectionalLight2D.construct_without_init()
    class_._ptr = constructor(260,0, ())
    return class_
  @staticmethod
  def new():
    class_ = DirectionalLight2D.construct_without_init()
    class_._ptr = constructor(260,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPDirectionalLight2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(260,0, ())


  def generate_wrapper(self):
    return CPPDirectionalLight2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = DirectionalLight2D.__new__(DirectionalLight2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'DirectionalLight2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = DirectionalLight2D.construct_without_init()
    cls._ptr = CPPDirectionalLight2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = DirectionalLight2D.construct_without_init()
    cls._ptr = CPPDirectionalLight2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def height(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'float'):
    self.set_height(value)
  @property
  def max_distance(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_max_distance()
    return _ret
  @max_distance.setter
  def max_distance(self,  value:'float'):
    self.set_max_distance(value)
  @functools.native_method
  def set_max_distance(self, pixels:'float'   ) -> None:
    r''''''

    assert isinstance(pixels, (int, float)), 'pixels must be int or float'

    self.py__max_distance = pixels






    self._ptr.call_with_return(335,tuple([pixels]))

  @functools.native_method
  def get_max_distance(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(336,tuple([]))

    return _ret



register_cast_function('DirectionalLight2D', DirectionalLight2D.cast)
register_class('DirectionalLight2D', DirectionalLight2D)
