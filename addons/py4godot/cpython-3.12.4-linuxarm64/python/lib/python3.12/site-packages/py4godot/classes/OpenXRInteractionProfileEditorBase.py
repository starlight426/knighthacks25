# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.OpenXRInteractionProfile as py4godot_openxrinteractionprofile 
  import py4godot.classes.OpenXRActionMap as py4godot_openxractionmap 
import py4godot.classes.HBoxContainer as py4godot_hboxcontainer 
from py4godot.wrappers.wrappers import CPPOpenXRInteractionProfileEditorBaseWrapper


class OpenXRInteractionProfileEditorBase(py4godot_hboxcontainer.HBoxContainer):
  r''''''

  @staticmethod
  def constructor():
    class_ = OpenXRInteractionProfileEditorBase.construct_without_init()
    class_._ptr = constructor(555,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OpenXRInteractionProfileEditorBase.construct_without_init()
    class_._ptr = constructor(555,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOpenXRInteractionProfileEditorBaseWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(555,0, ())


  def generate_wrapper(self):
    return CPPOpenXRInteractionProfileEditorBaseWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OpenXRInteractionProfileEditorBase.__new__(OpenXRInteractionProfileEditorBase)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OpenXRInteractionProfileEditorBase'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRInteractionProfileEditorBase.construct_without_init()
    cls._ptr = CPPOpenXRInteractionProfileEditorBaseWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OpenXRInteractionProfileEditorBase.construct_without_init()
    cls._ptr = CPPOpenXRInteractionProfileEditorBaseWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def setup(self, action_map:'py4godot_openxractionmap.OpenXRActionMap'   , interaction_profile:'py4godot_openxrinteractionprofile.OpenXRInteractionProfile'   ) -> None:
    r''''''

    assert(not action_map is None)
    assert isinstance(action_map, get_class('OpenXRActionMap')), 'action_map must be OpenXRActionMap'
    assert(not interaction_profile is None)
    assert isinstance(interaction_profile, get_class('OpenXRInteractionProfile')), 'interaction_profile must be OpenXRInteractionProfile'







    self._ptr.call_with_return(442,tuple([action_map._ptr, interaction_profile._ptr]))


register_cast_function('OpenXRInteractionProfileEditorBase', OpenXRInteractionProfileEditorBase.cast)
register_class('OpenXRInteractionProfileEditorBase', OpenXRInteractionProfileEditorBase)
