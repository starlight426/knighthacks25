# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RIDTypedArray as py4godot_ridtypedarray 
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPPhysicsPointQueryParameters2DWrapper


class PhysicsPointQueryParameters2D(py4godot_refcounted.RefCounted):
  r'''
		By changing various properties of this object, such as the point position, you can configure the parameters for `PhysicsDirectSpaceState2D.intersect_point`.
	'''

  @staticmethod
  def constructor():
    class_ = PhysicsPointQueryParameters2D.construct_without_init()
    class_._ptr = constructor(600,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PhysicsPointQueryParameters2D.construct_without_init()
    class_._ptr = constructor(600,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPhysicsPointQueryParameters2DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(600,0, ())


  def generate_wrapper(self):
    return CPPPhysicsPointQueryParameters2DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PhysicsPointQueryParameters2D.__new__(PhysicsPointQueryParameters2D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PhysicsPointQueryParameters2D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsPointQueryParameters2D.construct_without_init()
    cls._ptr = CPPPhysicsPointQueryParameters2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PhysicsPointQueryParameters2D.construct_without_init()
    cls._ptr = CPPPhysicsPointQueryParameters2DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def position(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_position()
    return _ret
  @position.setter
  def position(self,  value:'Vector2'):
    self.set_position(value)
  @property
  def canvas_instance_id(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_canvas_instance_id()
    return _ret
  @canvas_instance_id.setter
  def canvas_instance_id(self,  value:'int'):
    self.set_canvas_instance_id(value)
  @property
  def collision_mask(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_collision_mask()
    return _ret
  @collision_mask.setter
  def collision_mask(self,  value:'int'):
    self.set_collision_mask(value)
  @property
  def exclude(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''
    _ret = self. get_exclude()
    return _ret
  @exclude.setter
  def exclude(self, value:'Array'):
    self.set_exclude(value)
  @property
  def collide_with_bodies(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_collide_with_bodies_enabled()
    return _ret
  @collide_with_bodies.setter
  def collide_with_bodies(self,  value:'bool'):
    self.set_collide_with_bodies(value)
  @property
  def collide_with_areas(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_collide_with_areas_enabled()
    return _ret
  @collide_with_areas.setter
  def collide_with_areas(self,  value:'bool'):
    self.set_collide_with_areas(value)
  @functools.native_method
  def set_position(self, position:'Vector2'   ) -> None:
    r''''''

    assert(not position is None)
    assert isinstance(position, Vector2), 'position must be Vector2'

    self.py__position = position






    self._ptr.call_with_return(53,tuple([position._ptr]))

  @functools.native_method
  def get_position(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([]))

    return _ret


  @functools.native_method
  def set_canvas_instance_id(self, canvas_instance_id:'int'   ) -> None:
    r''''''

    assert isinstance(canvas_instance_id, (int, float)), 'canvas_instance_id must be int or float'

    self.py__canvas_instance_id = canvas_instance_id






    self._ptr.call_with_return(55,tuple([canvas_instance_id]))

  @functools.native_method
  def get_canvas_instance_id(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(56,tuple([]))

    return _ret


  @functools.native_method
  def set_collision_mask(self, collision_mask:'int'   ) -> None:
    r''''''

    assert isinstance(collision_mask, (int, float)), 'collision_mask must be int or float'

    self.py__collision_mask = collision_mask






    self._ptr.call_with_return(57,tuple([collision_mask]))

  @functools.native_method
  def get_collision_mask(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(58,tuple([]))

    return _ret


  @functools.native_method
  def set_exclude(self, exclude:'py4godot_ridtypedarray.RIDTypedArray'   ) -> None:
    r''''''

    assert isinstance(exclude, get_class('RIDTypedArray')), 'exclude must be RIDTypedArray'

    self.py__exclude = exclude






    self._ptr.call_with_return(59,tuple([exclude._ptr]))

  @functools.native_method
  def get_exclude(self) -> typing.Union['py4godot_ridtypedarray.RIDTypedArray']:
    r''''''




    _ret = py4godot_ridtypedarray.RIDTypedArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(60,tuple([]))

    return _ret


  @functools.native_method
  def set_collide_with_bodies(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__collide_with_bodies = enable






    self._ptr.call_with_return(61,tuple([enable]))

  @functools.native_method
  def is_collide_with_bodies_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(62,tuple([]))

    return _ret


  @functools.native_method
  def set_collide_with_areas(self, enable:'bool'   ) -> None:
    r''''''

    assert isinstance(enable, bool), 'enable must be bool'

    self.py__collide_with_areas = enable






    self._ptr.call_with_return(63,tuple([enable]))

  @functools.native_method
  def is_collide_with_areas_enabled(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(64,tuple([]))

    return _ret



register_cast_function('PhysicsPointQueryParameters2D', PhysicsPointQueryParameters2D.cast)
register_class('PhysicsPointQueryParameters2D', PhysicsPointQueryParameters2D)
