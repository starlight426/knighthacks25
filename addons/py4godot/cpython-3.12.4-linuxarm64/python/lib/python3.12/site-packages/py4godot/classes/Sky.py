# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.Material as py4godot_material 
  import py4godot.classes.PanoramaSkyMaterial as py4godot_panoramaskymaterial 
  import py4godot.classes.FogMaterial as py4godot_fogmaterial 
  import py4godot.classes.ORMMaterial3D as py4godot_ormmaterial3d 
  import py4godot.classes.PhysicalSkyMaterial as py4godot_physicalskymaterial 
  import py4godot.classes.PlaceholderMaterial as py4godot_placeholdermaterial 
  import py4godot.classes.CanvasItemMaterial as py4godot_canvasitemmaterial 
  import py4godot.classes.ParticleProcessMaterial as py4godot_particleprocessmaterial 
  import py4godot.classes.ProceduralSkyMaterial as py4godot_proceduralskymaterial 
  import py4godot.classes.BaseMaterial3D as py4godot_basematerial3d 
  import py4godot.classes.ShaderMaterial as py4godot_shadermaterial 
  import py4godot.classes.StandardMaterial3D as py4godot_standardmaterial3d 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPSkyWrapper

class RadianceSize:
  RADIANCE_SIZE_32 = 0
  RADIANCE_SIZE_64 = 1
  RADIANCE_SIZE_128 = 2
  RADIANCE_SIZE_256 = 3
  RADIANCE_SIZE_512 = 4
  RADIANCE_SIZE_1024 = 5
  RADIANCE_SIZE_2048 = 6
  RADIANCE_SIZE_MAX = 7
class ProcessMode:
  PROCESS_MODE_AUTOMATIC = 0
  PROCESS_MODE_QUALITY = 1
  PROCESS_MODE_INCREMENTAL = 2
  PROCESS_MODE_REALTIME = 3


class Sky(py4godot_resource.Resource):
  r'''
		The `Sky` class uses a `Material` to render a 3D environment's background and the light it emits by updating the reflection/radiance cubemaps.
	'''

  @staticmethod
  def constructor():
    class_ = Sky.construct_without_init()
    class_._ptr = constructor(763,0, ())
    return class_
  @staticmethod
  def new():
    class_ = Sky.construct_without_init()
    class_._ptr = constructor(763,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPSkyWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(763,0, ())


  def generate_wrapper(self):
    return CPPSkyWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = Sky.__new__(Sky)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'Sky'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = Sky.construct_without_init()
    cls._ptr = CPPSkyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = Sky.construct_without_init()
    cls._ptr = CPPSkyWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def sky_material(self) -> typing.Union['py4godot_panoramaskymaterial.PanoramaSkyMaterial']:
    r''''''
    _ret = self. get_material()
    return _ret
  @sky_material.setter
  def sky_material(self,  value:'py4godot_object.Object'):
    self.set_material(value)
  @property
  def process_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_process_mode()
    return _ret
  @process_mode.setter
  def process_mode(self,  value:'int'):
    self.set_process_mode(value)
  @property
  def radiance_size(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_radiance_size()
    return _ret
  @radiance_size.setter
  def radiance_size(self,  value:'int'):
    self.set_radiance_size(value)
  @functools.native_method
  def set_radiance_size(self, size:'int'  ) -> None:
    r''''''

    assert isinstance(size, (int, float)), 'size must be int or float'

    self.py__radiance_size = size






    self._ptr.call_with_return(77,tuple([size]))

  @functools.native_method
  def get_radiance_size(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(78,tuple([]))

    return _ret


  @functools.native_method
  def set_process_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__process_mode = mode






    self._ptr.call_with_return(79,tuple([mode]))

  @functools.native_method
  def get_process_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(80,tuple([]))

    return _ret


  @functools.native_method
  def set_material(self, material:'py4godot_material.Material'   ) -> None:
    r''''''

    assert(not material is None)
    assert isinstance(material, get_class('Material')), 'material must be Material'

    self.py__sky_material = material






    self._ptr.call_with_return(81,tuple([material._ptr]))

  @functools.native_method
  def get_material(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Material
    _ret._ptr = self._ptr.call_with_return(82,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('Sky', Sky.cast)
register_class('Sky', Sky)
