# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.StyleBox as py4godot_stylebox 
from py4godot.wrappers.wrappers import CPPStyleBoxLineWrapper


class StyleBoxLine(py4godot_stylebox.StyleBox):
  r'''
		A `StyleBox` that displays a single line of a given color and thickness. The line can be either horizontal or vertical. Useful for separators.
	'''

  @staticmethod
  def constructor():
    class_ = StyleBoxLine.construct_without_init()
    class_._ptr = constructor(796,0, ())
    return class_
  @staticmethod
  def new():
    class_ = StyleBoxLine.construct_without_init()
    class_._ptr = constructor(796,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPStyleBoxLineWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(796,0, ())


  def generate_wrapper(self):
    return CPPStyleBoxLineWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = StyleBoxLine.__new__(StyleBoxLine)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'StyleBoxLine'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = StyleBoxLine.construct_without_init()
    cls._ptr = CPPStyleBoxLineWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = StyleBoxLine.construct_without_init()
    cls._ptr = CPPStyleBoxLineWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_color()
    return _ret
  @color.setter
  def color(self,  value:'Color'):
    self.set_color(value)
  @property
  def grow_begin(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_grow_begin()
    return _ret
  @grow_begin.setter
  def grow_begin(self,  value:'float'):
    self.set_grow_begin(value)
  @property
  def grow_end(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_grow_end()
    return _ret
  @grow_end.setter
  def grow_end(self,  value:'float'):
    self.set_grow_end(value)
  @property
  def thickness(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_thickness()
    return _ret
  @thickness.setter
  def thickness(self,  value:'int'):
    self.set_thickness(value)
  @property
  def vertical(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_vertical()
    return _ret
  @vertical.setter
  def vertical(self,  value:'bool'):
    self.set_vertical(value)
  @functools.native_method
  def set_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__color = color






    self._ptr.call_with_return(90,tuple([color._ptr]))

  @functools.native_method
  def get_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(91,tuple([]))

    return _ret


  @functools.native_method
  def set_thickness(self, thickness:'int'   ) -> None:
    r''''''

    assert isinstance(thickness, (int, float)), 'thickness must be int or float'

    self.py__thickness = thickness






    self._ptr.call_with_return(92,tuple([thickness]))

  @functools.native_method
  def get_thickness(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(93,tuple([]))

    return _ret


  @functools.native_method
  def set_grow_begin(self, offset:'float'   ) -> None:
    r''''''

    assert isinstance(offset, (int, float)), 'offset must be int or float'

    self.py__grow_begin = offset






    self._ptr.call_with_return(94,tuple([offset]))

  @functools.native_method
  def get_grow_begin(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(95,tuple([]))

    return _ret


  @functools.native_method
  def set_grow_end(self, offset:'float'   ) -> None:
    r''''''

    assert isinstance(offset, (int, float)), 'offset must be int or float'

    self.py__grow_end = offset






    self._ptr.call_with_return(96,tuple([offset]))

  @functools.native_method
  def get_grow_end(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(97,tuple([]))

    return _ret


  @functools.native_method
  def set_vertical(self, vertical:'bool'   ) -> None:
    r''''''

    assert isinstance(vertical, bool), 'vertical must be bool'

    self.py__vertical = vertical






    self._ptr.call_with_return(98,tuple([vertical]))

  @functools.native_method
  def is_vertical(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(99,tuple([]))

    return _ret



register_cast_function('StyleBoxLine', StyleBoxLine.cast)
register_class('StyleBoxLine', StyleBoxLine)
