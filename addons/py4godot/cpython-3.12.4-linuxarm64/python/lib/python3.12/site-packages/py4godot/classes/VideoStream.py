# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.VideoStreamPlayback as py4godot_videostreamplayback 
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPVideoStreamWrapper


class VideoStream(py4godot_resource.Resource):
  r'''
		Base resource type for all video streams. Classes that derive from `VideoStream` can all be used as resource types to play back videos in `VideoStreamPlayer`.
	'''

  @staticmethod
  def constructor():
    class_ = VideoStream.construct_without_init()
    class_._ptr = constructor(868,0, ())
    return class_
  @staticmethod
  def new():
    class_ = VideoStream.construct_without_init()
    class_._ptr = constructor(868,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPVideoStreamWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(868,0, ())


  def generate_wrapper(self):
    return CPPVideoStreamWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = VideoStream.__new__(VideoStream)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'VideoStream'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = VideoStream.construct_without_init()
    cls._ptr = CPPVideoStreamWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = VideoStream.construct_without_init()
    cls._ptr = CPPVideoStreamWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def file(self) -> typing.Union[str]:
    r''''''
    _ret = self. get_file()
    return _ret
  @file.setter
  def file(self,  value:'str'):
    self.set_file(value)
  @functools.native_method
  def _instantiate_playback(self) -> typing.Union['py4godot_videostreamplayback.VideoStreamPlayback']:
    r'''
				Called when the video starts playing, to initialize and return a subclass of `VideoStreamPlayback`.
			'''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: VideoStreamPlayback
    _ret._ptr = self._ptr.call_with_return(77,tuple([]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_file(self, file:'str'   ) -> None:
    r''''''

    assert(not file is None)
    assert isinstance(file, (str, String)), 'file must be str or String'

    self.py__file = file



    assert(isinstance(file, (str, String)))
    py_string_file = file if isinstance(file, StringName) else c_utils.py_string_to_string(file)

    py__string_file = utils.py_string_to_string(file)
    py__string_file.shouldBeDeleted = False


    self._ptr.call_with_return(78,tuple([py__string_file._ptr]))

  @functools.native_method
  def get_file(self) -> typing.Union[str]:
    r''''''




    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(79,tuple([]))

    return utils.gd_string_to_py_string(_ret)



register_cast_function('VideoStream', VideoStream.cast)
register_class('VideoStream', VideoStream)
