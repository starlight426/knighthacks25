# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.PlaceholderTextureLayered as py4godot_placeholdertexturelayered 
from py4godot.wrappers.wrappers import CPPPlaceholderCubemapArrayWrapper


class PlaceholderCubemapArray(py4godot_placeholdertexturelayered.PlaceholderTextureLayered):
  r'''
		This class replaces a `CubemapArray` or a `CubemapArray`-derived class in 2 conditions:
		- In dedicated server mode, where the image data shouldn't affect game logic. This allows reducing the exported PCK's size significantly.
		- When the `CubemapArray`-derived class is missing, for example when using a different engine version.
		**Note:** This class is not intended for rendering or for use in shaders. Operations like calculating UV are not guaranteed to work.
	'''

  @staticmethod
  def constructor():
    class_ = PlaceholderCubemapArray.construct_without_init()
    class_._ptr = constructor(620,0, ())
    return class_
  @staticmethod
  def new():
    class_ = PlaceholderCubemapArray.construct_without_init()
    class_._ptr = constructor(620,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPPlaceholderCubemapArrayWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(620,0, ())


  def generate_wrapper(self):
    return CPPPlaceholderCubemapArrayWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = PlaceholderCubemapArray.__new__(PlaceholderCubemapArray)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'PlaceholderCubemapArray'

  def __del__(self):
    pass
  def __setitem__(self,  index, value):
    self._ptr.call_with_return(95, (index, value))

  def __getitem__(self,  index):

    if index < 0:
      raise KeyError(f"Index '{index}' invalid")
    pyobject = self._ptr.call_with_return(94, (index,))
    return pyobject
  def __iter__(self):
    self._index = 0
    return self
  def __next__(self):
    if self._index >= self.size():
      raise StopIteration()
    val = self[self._index]
    self._index += 1
    return val

  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = PlaceholderCubemapArray.construct_without_init()
    cls._ptr = CPPPlaceholderCubemapArrayWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = PlaceholderCubemapArray.construct_without_init()
    cls._ptr = CPPPlaceholderCubemapArrayWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def from_list(values):
    result = PlaceholderCubemapArray.new0()
    for value in values:
      result.push_back(value)
    return result

  def to_list(self):
    return [value for value in self]



register_cast_function('PlaceholderCubemapArray', PlaceholderCubemapArray.cast)
register_class('PlaceholderCubemapArray', PlaceholderCubemapArray)
