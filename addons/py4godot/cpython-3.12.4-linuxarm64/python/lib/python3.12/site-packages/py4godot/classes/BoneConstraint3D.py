# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.SkeletonModifier3D as py4godot_skeletonmodifier3d 
from py4godot.wrappers.wrappers import CPPBoneConstraint3DWrapper


class BoneConstraint3D(py4godot_skeletonmodifier3d.SkeletonModifier3D):
  r'''
		Base class of `SkeletonModifier3D` that modifies the bone set in `set_apply_bone` based on the transform of the bone retrieved by `get_reference_bone`.
	'''

  @staticmethod
  def constructor():
    class_ = BoneConstraint3D.construct_without_init()
    class_._ptr = constructor(168,0, ())
    return class_
  @staticmethod
  def new():
    class_ = BoneConstraint3D.construct_without_init()
    class_._ptr = constructor(168,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPBoneConstraint3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(168,0, ())


  def generate_wrapper(self):
    return CPPBoneConstraint3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = BoneConstraint3D.__new__(BoneConstraint3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'BoneConstraint3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoneConstraint3D.construct_without_init()
    cls._ptr = CPPBoneConstraint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = BoneConstraint3D.construct_without_init()
    cls._ptr = CPPBoneConstraint3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def set_amount(self, index:'int'   , amount:'float'   ) -> None:
    r'''
				Sets the apply amount of the setting at `index` to `amount`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(amount, (int, float)), 'amount must be int or float'







    self._ptr.call_with_return(260,tuple([index, amount]))

  @functools.native_method
  def get_amount(self, index:'int'   ) -> typing.Union[float]:
    r'''
				Returns the apply amount of the setting at `index`.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(261,tuple([index]))
    return _ret


  @functools.native_method
  def set_apply_bone_name(self, index:'int'   , bone_name:'str'   ) -> None:
    r'''
				Sets the apply bone of the setting at `index` to `bone_name`. This bone will be modified.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not bone_name is None)
    assert isinstance(bone_name, (str, String)), 'bone_name must be str or String'





    assert(isinstance(bone_name, (str, String)))
    py_string_bone_name = bone_name if isinstance(bone_name, StringName) else c_utils.py_string_to_string(bone_name)

    self._ptr.call_with_return(262,tuple([index, py_string_bone_name._ptr]))

  @functools.native_method
  def get_apply_bone_name(self, index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the apply bone name of the setting at `index`. This bone will be modified.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(263,tuple([index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_apply_bone(self, index:'int'   , bone:'int'   ) -> None:
    r'''
				Sets the apply bone of the setting at `index` to `bone`. This bone will be modified.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(bone, (int, float)), 'bone must be int or float'







    self._ptr.call_with_return(264,tuple([index, bone]))

  @functools.native_method
  def get_apply_bone(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the apply bone of the setting at `index`. This bone will be modified.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(265,tuple([index]))
    return _ret


  @functools.native_method
  def set_reference_bone_name(self, index:'int'   , bone_name:'str'   ) -> None:
    r'''
				Sets the reference bone of the setting at `index` to `bone_name`.
				This bone will be only referenced and not modified by this modifier.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert(not bone_name is None)
    assert isinstance(bone_name, (str, String)), 'bone_name must be str or String'





    assert(isinstance(bone_name, (str, String)))
    py_string_bone_name = bone_name if isinstance(bone_name, StringName) else c_utils.py_string_to_string(bone_name)

    self._ptr.call_with_return(266,tuple([index, py_string_bone_name._ptr]))

  @functools.native_method
  def get_reference_bone_name(self, index:'int'   ) -> typing.Union[str]:
    r'''
				Returns the reference bone name of the setting at `index`.
				This bone will be only referenced and not modified by this modifier.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = String.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(267,tuple([index]))
    return utils.gd_string_to_py_string(_ret)


  @functools.native_method
  def set_reference_bone(self, index:'int'   , bone:'int'   ) -> None:
    r'''
				Sets the reference bone of the setting at `index` to `bone`.
				This bone will be only referenced and not modified by this modifier.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'
    assert isinstance(bone, (int, float)), 'bone must be int or float'







    self._ptr.call_with_return(268,tuple([index, bone]))

  @functools.native_method
  def get_reference_bone(self, index:'int'   ) -> typing.Union[int]:
    r'''
				Returns the reference bone of the setting at `index`.
				This bone will be only referenced and not modified by this modifier.
			'''

    assert isinstance(index, (int, float)), 'index must be int or float'






    _ret = 0
    _ret = self._ptr.call_with_return(269,tuple([index]))
    return _ret


  @functools.native_method
  def set_setting_count(self, count:'int'   ) -> None:
    r'''
				Sets the number of settings in the modifier.
			'''

    assert isinstance(count, (int, float)), 'count must be int or float'






    self._ptr.call_with_return(270,tuple([count]))

  @functools.native_method
  def get_setting_count(self) -> typing.Union[int]:
    r'''
				Returns the number of settings in the modifier.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(271,tuple([]))
    return _ret


  @functools.native_method
  def clear_setting(self) -> None:
    r'''
				Clear all settings.
			'''




    self._ptr.call_with_return(272,tuple([]))


register_cast_function('BoneConstraint3D', BoneConstraint3D.cast)
register_class('BoneConstraint3D', BoneConstraint3D)
