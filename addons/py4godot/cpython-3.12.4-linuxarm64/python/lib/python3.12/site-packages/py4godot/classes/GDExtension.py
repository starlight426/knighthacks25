# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Resource as py4godot_resource 
from py4godot.wrappers.wrappers import CPPGDExtensionWrapper

class InitializationLevel:
  INITIALIZATION_LEVEL_CORE = 0
  INITIALIZATION_LEVEL_SERVERS = 1
  INITIALIZATION_LEVEL_SCENE = 2
  INITIALIZATION_LEVEL_EDITOR = 3


class GDExtension(py4godot_resource.Resource):
  r'''
		The `GDExtension` resource type represents a `url=https://en.wikipedia.org/wiki/Shared_library`shared library`/url` which can expand the functionality of the engine. The `GDExtensionManager` singleton is responsible for loading, reloading, and unloading `GDExtension` resources.
		**Note:** GDExtension itself is not a scripting language and has no relation to `GDScript` resources.
	'''

  @staticmethod
  def constructor():
    class_ = GDExtension.construct_without_init()
    class_._ptr = constructor(341,0, ())
    return class_
  @staticmethod
  def new():
    class_ = GDExtension.construct_without_init()
    class_._ptr = constructor(341,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPGDExtensionWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(341,0, ())


  def generate_wrapper(self):
    return CPPGDExtensionWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = GDExtension.__new__(GDExtension)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'GDExtension'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = GDExtension.construct_without_init()
    cls._ptr = CPPGDExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = GDExtension.construct_without_init()
    cls._ptr = CPPGDExtensionWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def is_library_open(self) -> typing.Union[bool]:
    r'''
				Returns `true` if this extension's library has been opened.
			'''




    _ret = 0
    _ret = self._ptr.call_with_return(77,tuple([]))
    return _ret


  @functools.native_method
  def get_minimum_library_initialization_level(self) -> typing.Union[int]:
    r'''
				Returns the lowest level required for this extension to be properly initialized (see the `enum InitializationLevel` enum).
			'''




    _ret:int
    _ret = self._ptr.call_with_return(78,tuple([]))
    return _ret



register_cast_function('GDExtension', GDExtension.cast)
register_class('GDExtension', GDExtension)
