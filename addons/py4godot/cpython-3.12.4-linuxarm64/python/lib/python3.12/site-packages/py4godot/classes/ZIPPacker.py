# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPZIPPackerWrapper

class ZipAppend:
  APPEND_CREATE = 0
  APPEND_CREATEAFTER = 1
  APPEND_ADDINZIP = 2
class CompressionLevel:
  COMPRESSION_DEFAULT = -1
  COMPRESSION_NONE = 0
  COMPRESSION_FAST = 1
  COMPRESSION_BEST = 9


class ZIPPacker(py4godot_refcounted.RefCounted):
  r''''''

  @staticmethod
  def constructor():
    class_ = ZIPPacker.construct_without_init()
    class_._ptr = constructor(1030,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ZIPPacker.construct_without_init()
    class_._ptr = constructor(1030,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPZIPPackerWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(1030,0, ())


  def generate_wrapper(self):
    return CPPZIPPackerWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ZIPPacker.__new__(ZIPPacker)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ZIPPacker'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ZIPPacker.construct_without_init()
    cls._ptr = CPPZIPPackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ZIPPacker.construct_without_init()
    cls._ptr = CPPZIPPackerWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def compression_level(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_compression_level()
    return _ret
  @compression_level.setter
  def compression_level(self,  value:'int'):
    self.set_compression_level(value)
  @functools.native_method
  def open(self, path:'str'   , append:'int'  =0) -> typing.Union[int]:
    r''''''



    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'
    assert isinstance(append, (int, float)), 'append must be int or float'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)


    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([py_string_path._ptr, append]))
    return _ret


  @functools.native_method
  def set_compression_level(self, compression_level:'int'   ) -> None:
    r''''''

    assert isinstance(compression_level, (int, float)), 'compression_level must be int or float'

    self.py__compression_level = compression_level






    self._ptr.call_with_return(54,tuple([compression_level]))

  @functools.native_method
  def get_compression_level(self) -> typing.Union[int]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(55,tuple([]))

    return _ret


  @functools.native_method
  def start_file(self, path:'str'   ) -> typing.Union[int]:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret:int
    _ret = self._ptr.call_with_return(56,tuple([py_string_path._ptr]))
    return _ret


  @functools.native_method
  def write_file(self, data:'PackedByteArray'   ) -> typing.Union[int]:
    r''''''

    assert(not data is None)
    assert isinstance(data, PackedByteArray), 'data must be PackedByteArray'






    _ret:int
    _ret = self._ptr.call_with_return(57,tuple([data._ptr]))
    return _ret


  @functools.native_method
  def close_file(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(58,tuple([]))
    return _ret


  @functools.native_method
  def close(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(59,tuple([]))
    return _ret



register_cast_function('ZIPPacker', ZIPPacker.cast)
register_class('ZIPPacker', ZIPPacker)
