# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Light3D as py4godot_light3d 
from py4godot.wrappers.wrappers import CPPOmniLight3DWrapper

class ShadowMode:
  SHADOW_DUAL_PARABOLOID = 0
  SHADOW_CUBE = 1


class OmniLight3D(py4godot_light3d.Light3D):
  r'''
		An Omnidirectional light is a type of `Light3D` that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters.
		**Note:** When using the Mobile rendering method, only 8 omni lights can be displayed on each mesh resource. Attempting to display more than 8 omni lights on a single mesh resource will result in omni lights flickering in and out as the camera moves. When using the Compatibility rendering method, only 8 omni lights can be displayed on each mesh resource by default, but this can be increased by adjusting `ProjectSettings.rendering/limits/opengl/max_lights_per_object`.
		**Note:** When using the Mobile or Compatibility rendering methods, omni lights will only correctly affect meshes whose visibility AABB intersects with the light's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, `GeometryInstance3D.extra_cull_margin` must be increased on the mesh. Otherwise, the light may not be visible on the mesh.
	'''

  @staticmethod
  def constructor():
    class_ = OmniLight3D.construct_without_init()
    class_._ptr = constructor(530,0, ())
    return class_
  @staticmethod
  def new():
    class_ = OmniLight3D.construct_without_init()
    class_._ptr = constructor(530,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPOmniLight3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(530,0, ())


  def generate_wrapper(self):
    return CPPOmniLight3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = OmniLight3D.__new__(OmniLight3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'OmniLight3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = OmniLight3D.construct_without_init()
    cls._ptr = CPPOmniLight3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = OmniLight3D.construct_without_init()
    cls._ptr = CPPOmniLight3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def omni_range(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(4)
    return _ret
  @omni_range.setter
  def omni_range(self,  value:'float'):
    self.set_param(value)
  @property
  def omni_attenuation(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_param(6)
    return _ret
  @omni_attenuation.setter
  def omni_attenuation(self,  value:'float'):
    self.set_param(value)
  @property
  def omni_shadow_mode(self) -> typing.Union[int]:
    r''''''
    _ret = self. get_shadow_mode()
    return _ret
  @omni_shadow_mode.setter
  def omni_shadow_mode(self,  value:'int'):
    self.set_shadow_mode(value)
  @functools.native_method
  def set_shadow_mode(self, mode:'int'  ) -> None:
    r''''''

    assert isinstance(mode, (int, float)), 'mode must be int or float'

    self.py__omni_shadow_mode = mode






    self._ptr.call_with_return(295,tuple([mode]))

  @functools.native_method
  def get_shadow_mode(self) -> typing.Union[int]:
    r''''''




    _ret:int
    _ret = self._ptr.call_with_return(296,tuple([]))

    return _ret



register_cast_function('OmniLight3D', OmniLight3D.cast)
register_class('OmniLight3D', OmniLight3D)
