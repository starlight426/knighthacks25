# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.CanvasLayer as py4godot_canvaslayer 
from py4godot.wrappers.wrappers import CPPParallaxBackgroundWrapper


class ParallaxBackground(py4godot_canvaslayer.CanvasLayer):
  r'''
		A ParallaxBackground uses one or more `ParallaxLayer` child nodes to create a parallax effect. Each `ParallaxLayer` can move at a different speed using `ParallaxLayer.motion_offset`. This creates an illusion of depth in a 2D game. If not used with a `Camera2D`, you must manually calculate the `scroll_offset`.
		**Note:** Each `ParallaxBackground` is drawn on one specific `Viewport` and cannot be shared between multiple `Viewport`s, see `CanvasLayer.custom_viewport`. When using multiple `Viewport`s, for example in a split-screen game, you need create an individual `ParallaxBackground` for each `Viewport` you want it to be drawn on.
	'''

  @staticmethod
  def constructor():
    class_ = ParallaxBackground.construct_without_init()
    class_._ptr = constructor(577,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ParallaxBackground.construct_without_init()
    class_._ptr = constructor(577,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPParallaxBackgroundWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(577,0, ())


  def generate_wrapper(self):
    return CPPParallaxBackgroundWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ParallaxBackground.__new__(ParallaxBackground)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ParallaxBackground'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ParallaxBackground.construct_without_init()
    cls._ptr = CPPParallaxBackgroundWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ParallaxBackground.construct_without_init()
    cls._ptr = CPPParallaxBackgroundWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def scroll_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_scroll_offset()
    return _ret
  @scroll_offset.setter
  def scroll_offset(self,  value:'Vector2'):
    self.set_scroll_offset(value)
  @property
  def scroll_base_offset(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_scroll_base_offset()
    return _ret
  @scroll_base_offset.setter
  def scroll_base_offset(self,  value:'Vector2'):
    self.set_scroll_base_offset(value)
  @property
  def scroll_base_scale(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_scroll_base_scale()
    return _ret
  @scroll_base_scale.setter
  def scroll_base_scale(self,  value:'Vector2'):
    self.set_scroll_base_scale(value)
  @property
  def scroll_limit_begin(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_limit_begin()
    return _ret
  @scroll_limit_begin.setter
  def scroll_limit_begin(self,  value:'Vector2'):
    self.set_limit_begin(value)
  @property
  def scroll_limit_end(self) -> typing.Union['Vector2']:
    r''''''
    _ret = self. get_limit_end()
    return _ret
  @scroll_limit_end.setter
  def scroll_limit_end(self,  value:'Vector2'):
    self.set_limit_end(value)
  @property
  def scroll_ignore_camera_zoom(self) -> typing.Union[bool]:
    r''''''
    _ret = self. is_ignore_camera_zoom()
    return _ret
  @scroll_ignore_camera_zoom.setter
  def scroll_ignore_camera_zoom(self,  value:'bool'):
    self.set_ignore_camera_zoom(value)
  @functools.native_method
  def set_scroll_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__scroll_offset = offset






    self._ptr.call_with_return(202,tuple([offset._ptr]))

  @functools.native_method
  def get_scroll_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(203,tuple([]))

    return _ret


  @functools.native_method
  def set_scroll_base_offset(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__scroll_base_offset = offset






    self._ptr.call_with_return(204,tuple([offset._ptr]))

  @functools.native_method
  def get_scroll_base_offset(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(205,tuple([]))

    return _ret


  @functools.native_method
  def set_scroll_base_scale(self, scale:'Vector2'   ) -> None:
    r''''''

    assert(not scale is None)
    assert isinstance(scale, Vector2), 'scale must be Vector2'

    self.py__scroll_base_scale = scale






    self._ptr.call_with_return(206,tuple([scale._ptr]))

  @functools.native_method
  def get_scroll_base_scale(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(207,tuple([]))

    return _ret


  @functools.native_method
  def set_limit_begin(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__scroll_limit_begin = offset






    self._ptr.call_with_return(208,tuple([offset._ptr]))

  @functools.native_method
  def get_limit_begin(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(209,tuple([]))

    return _ret


  @functools.native_method
  def set_limit_end(self, offset:'Vector2'   ) -> None:
    r''''''

    assert(not offset is None)
    assert isinstance(offset, Vector2), 'offset must be Vector2'

    self.py__scroll_limit_end = offset






    self._ptr.call_with_return(210,tuple([offset._ptr]))

  @functools.native_method
  def get_limit_end(self) -> typing.Union['Vector2']:
    r''''''




    _ret = Vector2.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(211,tuple([]))

    return _ret


  @functools.native_method
  def set_ignore_camera_zoom(self, ignore:'bool'   ) -> None:
    r''''''

    assert isinstance(ignore, bool), 'ignore must be bool'

    self.py__scroll_ignore_camera_zoom = ignore






    self._ptr.call_with_return(212,tuple([ignore]))

  @functools.native_method
  def is_ignore_camera_zoom(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(213,tuple([]))

    return _ret



register_cast_function('ParallaxBackground', ParallaxBackground.cast)
register_class('ParallaxBackground', ParallaxBackground)
