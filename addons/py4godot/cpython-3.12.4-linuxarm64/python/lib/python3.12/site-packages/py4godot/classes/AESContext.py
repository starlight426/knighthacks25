# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.RefCounted as py4godot_refcounted 
from py4godot.wrappers.wrappers import CPPAESContextWrapper

class Mode:
  MODE_ECB_ENCRYPT = 0
  MODE_ECB_DECRYPT = 1
  MODE_CBC_ENCRYPT = 2
  MODE_CBC_DECRYPT = 3
  MODE_MAX = 4


class AESContext(py4godot_refcounted.RefCounted):
  r'''
		This class holds the context information required for encryption and decryption operations with AES (Advanced Encryption Standard). Both AES-ECB and AES-CBC modes are supported.
		
		```gdscript
		extends Node

		var aes = AESContext.new()

		func _ready():
			var key = "My secret key!!!" # Key must be either 16 or 32 bytes.
			var data = "My secret text!!" # Data size must be multiple of 16 bytes, apply padding if needed.
			# Encrypt ECB
			aes.start(AESContext.MODE_ECB_ENCRYPT, key.to_utf8_buffer())
			var encrypted = aes.update(data.to_utf8_buffer())
			aes.finish()
			# Decrypt ECB
			aes.start(AESContext.MODE_ECB_DECRYPT, key.to_utf8_buffer())
			var decrypted = aes.update(encrypted)
			aes.finish()
			# Check ECB
			assert(decrypted == data.to_utf8_buffer())

			var iv = "My secret iv!!!!" # IV must be of exactly 16 bytes.
			# Encrypt CBC
			aes.start(AESContext.MODE_CBC_ENCRYPT, key.to_utf8_buffer(), iv.to_utf8_buffer())
			encrypted = aes.update(data.to_utf8_buffer())
			aes.finish()
			# Decrypt CBC
			aes.start(AESContext.MODE_CBC_DECRYPT, key.to_utf8_buffer(), iv.to_utf8_buffer())
			decrypted = aes.update(encrypted)
			aes.finish()
			# Check CBC
			assert(decrypted == data.to_utf8_buffer())
		```
		
		
	'''

  @staticmethod
  def constructor():
    class_ = AESContext.construct_without_init()
    class_._ptr = constructor(61,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AESContext.construct_without_init()
    class_._ptr = constructor(61,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAESContextWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(61,0, ())


  def generate_wrapper(self):
    return CPPAESContextWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AESContext.__new__(AESContext)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AESContext'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AESContext.construct_without_init()
    cls._ptr = CPPAESContextWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AESContext.construct_without_init()
    cls._ptr = CPPAESContextWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @functools.native_method
  def start(self, mode:'int'  , key:'PackedByteArray'   , iv:'PackedByteArray' = None  ) -> typing.Union[int]:
    r'''
				Start the AES context in the given `mode`. A `key` of either 16 or 32 bytes must always be provided, while an `iv` (initialization vector) of exactly 16 bytes, is only needed when `mode` is either `constant MODE_CBC_ENCRYPT` or `constant MODE_CBC_DECRYPT`.
			'''
    if iv is None:
      iv = PackedByteArray.new0()
    if iv is None:
      iv = PackedByteArray.new0()

    assert isinstance(mode, (int, float)), 'mode must be int or float'
    assert(not key is None)
    assert isinstance(key, PackedByteArray), 'key must be PackedByteArray'








    _ret:int
    _ret = self._ptr.call_with_return(53,tuple([mode, key._ptr, iv._ptr]))
    return _ret


  @functools.native_method
  def update(self, src:'PackedByteArray'   ) -> typing.Union['PackedByteArray']:
    r'''
				Run the desired operation for this AES context. Will return a `PackedByteArray` containing the result of encrypting (or decrypting) the given `src`. See `start` for mode of operation.
				**Note:** The size of `src` must be a multiple of 16. Apply some padding if needed.
			'''

    assert(not src is None)
    assert isinstance(src, PackedByteArray), 'src must be PackedByteArray'






    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(54,tuple([src._ptr]))
    return _ret


  @functools.native_method
  def get_iv_state(self) -> typing.Union['PackedByteArray']:
    r'''
				Get the current IV state for this context (IV gets updated when calling `update`). You normally don't need this function.
				**Note:** This function only makes sense when the context is started with `constant MODE_CBC_ENCRYPT` or `constant MODE_CBC_DECRYPT`.
			'''




    _ret = PackedByteArray.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(55,tuple([]))
    return _ret


  @functools.native_method
  def finish(self) -> None:
    r'''
				Close this AES context so it can be started again. See `start`.
			'''




    self._ptr.call_with_return(56,tuple([]))


register_cast_function('AESContext', AESContext.cast)
register_class('AESContext', AESContext)
