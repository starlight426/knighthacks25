# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.AudioEffect as py4godot_audioeffect 
from py4godot.wrappers.wrappers import CPPAudioEffectPhaserWrapper


class AudioEffectPhaser(py4godot_audioeffect.AudioEffect):
  r'''
		Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a low-frequency oscillator.
	'''

  @staticmethod
  def constructor():
    class_ = AudioEffectPhaser.construct_without_init()
    class_._ptr = constructor(128,0, ())
    return class_
  @staticmethod
  def new():
    class_ = AudioEffectPhaser.construct_without_init()
    class_._ptr = constructor(128,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPAudioEffectPhaserWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(128,0, ())


  def generate_wrapper(self):
    return CPPAudioEffectPhaserWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = AudioEffectPhaser.__new__(AudioEffectPhaser)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'AudioEffectPhaser'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectPhaser.construct_without_init()
    cls._ptr = CPPAudioEffectPhaserWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = AudioEffectPhaser.construct_without_init()
    cls._ptr = CPPAudioEffectPhaserWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def range_min_hz(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_range_min_hz()
    return _ret
  @range_min_hz.setter
  def range_min_hz(self,  value:'float'):
    self.set_range_min_hz(value)
  @property
  def range_max_hz(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_range_max_hz()
    return _ret
  @range_max_hz.setter
  def range_max_hz(self,  value:'float'):
    self.set_range_max_hz(value)
  @property
  def rate_hz(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_rate_hz()
    return _ret
  @rate_hz.setter
  def rate_hz(self,  value:'float'):
    self.set_rate_hz(value)
  @property
  def feedback(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_feedback()
    return _ret
  @feedback.setter
  def feedback(self,  value:'float'):
    self.set_feedback(value)
  @property
  def depth(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_depth()
    return _ret
  @depth.setter
  def depth(self,  value:'float'):
    self.set_depth(value)
  @functools.native_method
  def set_range_min_hz(self, hz:'float'   ) -> None:
    r''''''

    assert isinstance(hz, (int, float)), 'hz must be int or float'

    self.py__range_min_hz = hz






    self._ptr.call_with_return(78,tuple([hz]))

  @functools.native_method
  def get_range_min_hz(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(79,tuple([]))

    return _ret


  @functools.native_method
  def set_range_max_hz(self, hz:'float'   ) -> None:
    r''''''

    assert isinstance(hz, (int, float)), 'hz must be int or float'

    self.py__range_max_hz = hz






    self._ptr.call_with_return(80,tuple([hz]))

  @functools.native_method
  def get_range_max_hz(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(81,tuple([]))

    return _ret


  @functools.native_method
  def set_rate_hz(self, hz:'float'   ) -> None:
    r''''''

    assert isinstance(hz, (int, float)), 'hz must be int or float'

    self.py__rate_hz = hz






    self._ptr.call_with_return(82,tuple([hz]))

  @functools.native_method
  def get_rate_hz(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_feedback(self, fbk:'float'   ) -> None:
    r''''''

    assert isinstance(fbk, (int, float)), 'fbk must be int or float'

    self.py__feedback = fbk






    self._ptr.call_with_return(84,tuple([fbk]))

  @functools.native_method
  def get_feedback(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret


  @functools.native_method
  def set_depth(self, depth:'float'   ) -> None:
    r''''''

    assert isinstance(depth, (int, float)), 'depth must be int or float'

    self.py__depth = depth






    self._ptr.call_with_return(86,tuple([depth]))

  @functools.native_method
  def get_depth(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(87,tuple([]))

    return _ret



register_cast_function('AudioEffectPhaser', AudioEffectPhaser.cast)
register_class('AudioEffectPhaser', AudioEffectPhaser)
