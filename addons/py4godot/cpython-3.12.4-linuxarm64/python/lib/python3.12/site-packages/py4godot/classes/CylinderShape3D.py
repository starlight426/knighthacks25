# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
import py4godot.classes.Shape3D as py4godot_shape3d 
from py4godot.wrappers.wrappers import CPPCylinderShape3DWrapper


class CylinderShape3D(py4godot_shape3d.Shape3D):
  r'''
		A 3D cylinder shape, intended for use in physics. Usually used to provide a shape for a `CollisionShape3D`.
		**Note:** There are several known bugs with cylinder collision shapes. Using `CapsuleShape3D` or `BoxShape3D` instead is recommended.
		**Performance:** `CylinderShape3D` is fast to check collisions against, but it is slower than `CapsuleShape3D`, `BoxShape3D`, and `SphereShape3D`.
	'''

  @staticmethod
  def constructor():
    class_ = CylinderShape3D.construct_without_init()
    class_._ptr = constructor(254,0, ())
    return class_
  @staticmethod
  def new():
    class_ = CylinderShape3D.construct_without_init()
    class_._ptr = constructor(254,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPCylinderShape3DWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(254,0, ())


  def generate_wrapper(self):
    return CPPCylinderShape3DWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = CylinderShape3D.__new__(CylinderShape3D)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'CylinderShape3D'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = CylinderShape3D.construct_without_init()
    cls._ptr = CPPCylinderShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = CylinderShape3D.construct_without_init()
    cls._ptr = CPPCylinderShape3DWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def height(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_height()
    return _ret
  @height.setter
  def height(self,  value:'float'):
    self.set_height(value)
  @property
  def radius(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_radius()
    return _ret
  @radius.setter
  def radius(self,  value:'float'):
    self.set_radius(value)
  @functools.native_method
  def set_radius(self, radius:'float'   ) -> None:
    r''''''

    assert isinstance(radius, (int, float)), 'radius must be int or float'

    self.py__radius = radius






    self._ptr.call_with_return(82,tuple([radius]))

  @functools.native_method
  def get_radius(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(83,tuple([]))

    return _ret


  @functools.native_method
  def set_height(self, height:'float'   ) -> None:
    r''''''

    assert isinstance(height, (int, float)), 'height must be int or float'

    self.py__height = height






    self._ptr.call_with_return(84,tuple([height]))

  @functools.native_method
  def get_height(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(85,tuple([]))

    return _ret



register_cast_function('CylinderShape3D', CylinderShape3D.cast)
register_class('CylinderShape3D', CylinderShape3D)
