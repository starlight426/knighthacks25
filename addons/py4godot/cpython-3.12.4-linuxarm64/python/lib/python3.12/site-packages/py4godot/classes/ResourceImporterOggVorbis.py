# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.AudioStreamOggVorbis as py4godot_audiostreamoggvorbis 
import py4godot.classes.ResourceImporter as py4godot_resourceimporter 
from py4godot.wrappers.wrappers import CPPResourceImporterOggVorbisWrapper


class ResourceImporterOggVorbis(py4godot_resourceimporter.ResourceImporter):
  r''''''

  @staticmethod
  def constructor():
    class_ = ResourceImporterOggVorbis.construct_without_init()
    class_._ptr = constructor(698,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ResourceImporterOggVorbis.construct_without_init()
    class_._ptr = constructor(698,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPResourceImporterOggVorbisWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(698,0, ())


  def generate_wrapper(self):
    return CPPResourceImporterOggVorbisWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ResourceImporterOggVorbis.__new__(ResourceImporterOggVorbis)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ResourceImporterOggVorbis'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceImporterOggVorbis.construct_without_init()
    cls._ptr = CPPResourceImporterOggVorbisWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ResourceImporterOggVorbis.construct_without_init()
    cls._ptr = CPPResourceImporterOggVorbisWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @staticmethod
  def load_from_buffer(stream_data:'PackedByteArray'   ) -> typing.Union['py4godot_audiostreamoggvorbis.AudioStreamOggVorbis']:
    r''''''

    assert(not stream_data is None)
    assert isinstance(stream_data, PackedByteArray), 'stream_data must be PackedByteArray'






    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AudioStreamOggVorbis
    _ret._ptr = static_method(698,0,tuple([stream_data._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @staticmethod
  def load_from_file(path:'str'   ) -> typing.Union['py4godot_audiostreamoggvorbis.AudioStreamOggVorbis']:
    r''''''

    assert(not path is None)
    assert isinstance(path, (str, String)), 'path must be str or String'




    assert(isinstance(path, (str, String)))
    py_string_path = path if isinstance(path, StringName) else c_utils.py_string_to_string(path)

    _ret = classes.Object.Object.construct_without_init() #Smart casted to: AudioStreamOggVorbis
    _ret._ptr = static_method(698,1,tuple([py_string_path._ptr]))
    return smart_cast(_ret) if not _ret._ptr.is_null() else None



register_cast_function('ResourceImporterOggVorbis', ResourceImporterOggVorbis.cast)
register_class('ResourceImporterOggVorbis', ResourceImporterOggVorbis)
