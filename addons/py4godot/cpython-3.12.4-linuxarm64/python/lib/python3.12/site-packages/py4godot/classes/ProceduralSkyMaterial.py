# distutils: language=c++
import py4godot.utils.functools as  functools
import py4godot.utils.utils as utils
from py4godot.classes.core import *
from py4godot.utils.smart_cast import smart_cast, register_cast_function, register_class, get_class
from py4godot.utils.CPPWrapper import CPPWrapper, constructor, static_method
import py4godot.utils.utils as c_utils
import typing
import py4godot.classes as classes
import py4godot.signals as signals

import typing
if typing.TYPE_CHECKING:
  pass
  import py4godot.classes.ImageTexture as py4godot_imagetexture 
  import py4godot.classes.GradientTexture2D as py4godot_gradienttexture2d 
  import py4godot.classes.CurveXYZTexture as py4godot_curvexyztexture 
  import py4godot.classes.CompressedTexture2D as py4godot_compressedtexture2d 
  import py4godot.classes.Texture2DRD as py4godot_texture2drd 
  import py4godot.classes.ViewportTexture as py4godot_viewporttexture 
  import py4godot.classes.AnimatedTexture as py4godot_animatedtexture 
  import py4godot.classes.CurveTexture as py4godot_curvetexture 
  import py4godot.classes.PortableCompressedTexture2D as py4godot_portablecompressedtexture2d 
  import py4godot.classes.Texture2D as py4godot_texture2d 
  import py4godot.classes.MeshTexture as py4godot_meshtexture 
  import py4godot.classes.DPITexture as py4godot_dpitexture 
  import py4godot.classes.GradientTexture1D as py4godot_gradienttexture1d 
  import py4godot.classes.AtlasTexture as py4godot_atlastexture 
  import py4godot.classes.ExternalTexture as py4godot_externaltexture 
  import py4godot.classes.PlaceholderTexture2D as py4godot_placeholdertexture2d 
  import py4godot.classes.CanvasTexture as py4godot_canvastexture 
  import py4godot.classes.NoiseTexture2D as py4godot_noisetexture2d 
  import py4godot.classes.CameraTexture as py4godot_cameratexture 
import py4godot.classes.Material as py4godot_material 
from py4godot.wrappers.wrappers import CPPProceduralSkyMaterialWrapper


class ProceduralSkyMaterial(py4godot_material.Material):
  r'''
		`ProceduralSkyMaterial` provides a way to create an effective background quickly by defining procedural parameters for the sun, the sky and the ground. The sky and ground are defined by a main color, a color at the horizon, and an easing curve to interpolate between them. Suns are described by a position in the sky, a color, and a max angle from the sun at which the easing curve ends. The max angle therefore defines the size of the sun in the sky.
		`ProceduralSkyMaterial` supports up to 4 suns, using the color, and energy, direction, and angular distance of the first four `DirectionalLight3D` nodes in the scene. This means that the suns are defined individually by the properties of their corresponding `DirectionalLight3D`s and globally by `sun_angle_max` and `sun_curve`.
		`ProceduralSkyMaterial` uses a lightweight shader to draw the sky and is therefore suited for real-time updates. This makes it a great option for a sky that is simple and computationally cheap, but unrealistic. If you need a more realistic procedural option, use `PhysicalSkyMaterial`.
	'''

  @staticmethod
  def constructor():
    class_ = ProceduralSkyMaterial.construct_without_init()
    class_._ptr = constructor(639,0, ())
    return class_
  @staticmethod
  def new():
    class_ = ProceduralSkyMaterial.construct_without_init()
    class_._ptr = constructor(639,0, ())
    return class_
  def __init__(self):
    self._ptr =  CPPProceduralSkyMaterialWrapper()
    if c_utils.shouldCreateObject:
      self._ptr = constructor(639,0, ())


  def generate_wrapper(self):
    return CPPProceduralSkyMaterialWrapper()
  def init_signals(self):
    super().init_signals()

  @staticmethod
  def construct_without_init():
    cls = ProceduralSkyMaterial.__new__(ProceduralSkyMaterial)
    cls.shouldBeDeleted = True
    cls.init_signals()
    return cls
  @staticmethod
  def get_type():
    return 'ProceduralSkyMaterial'

  def __del__(self):
    pass
  @staticmethod
  def cast(other:'Object'):
    assert other != None # Object to be casted must not be None
    cls = ProceduralSkyMaterial.construct_without_init()
    cls._ptr = CPPProceduralSkyMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    cls.casted_from = other
    return cls
  @staticmethod
  def cast_without_reference(other: 'Object'):
    assert other != None # Object to be casted must not be None
    cls = ProceduralSkyMaterial.construct_without_init()
    cls._ptr = CPPProceduralSkyMaterialWrapper()
    cls._ptr_before = other._ptr # Save pointer
    cls._ptr.copy_gdowner(cls._ptr_before)
    return cls

  @property
  def sky_top_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_sky_top_color()
    return _ret
  @sky_top_color.setter
  def sky_top_color(self,  value:'Color'):
    self.set_sky_top_color(value)
  @property
  def sky_horizon_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_sky_horizon_color()
    return _ret
  @sky_horizon_color.setter
  def sky_horizon_color(self,  value:'Color'):
    self.set_sky_horizon_color(value)
  @property
  def sky_curve(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_sky_curve()
    return _ret
  @sky_curve.setter
  def sky_curve(self,  value:'float'):
    self.set_sky_curve(value)
  @property
  def sky_energy_multiplier(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_sky_energy_multiplier()
    return _ret
  @sky_energy_multiplier.setter
  def sky_energy_multiplier(self,  value:'float'):
    self.set_sky_energy_multiplier(value)
  @property
  def sky_cover(self) -> typing.Any:
    r''''''
    _ret = self. get_sky_cover()
    return _ret
  @sky_cover.setter
  def sky_cover(self,  value:'py4godot_object.Object'):
    self.set_sky_cover(value)
  @property
  def sky_cover_modulate(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_sky_cover_modulate()
    return _ret
  @sky_cover_modulate.setter
  def sky_cover_modulate(self,  value:'Color'):
    self.set_sky_cover_modulate(value)
  @property
  def ground_bottom_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_ground_bottom_color()
    return _ret
  @ground_bottom_color.setter
  def ground_bottom_color(self,  value:'Color'):
    self.set_ground_bottom_color(value)
  @property
  def ground_horizon_color(self) -> typing.Union['Color']:
    r''''''
    _ret = self. get_ground_horizon_color()
    return _ret
  @ground_horizon_color.setter
  def ground_horizon_color(self,  value:'Color'):
    self.set_ground_horizon_color(value)
  @property
  def ground_curve(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_ground_curve()
    return _ret
  @ground_curve.setter
  def ground_curve(self,  value:'float'):
    self.set_ground_curve(value)
  @property
  def ground_energy_multiplier(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_ground_energy_multiplier()
    return _ret
  @ground_energy_multiplier.setter
  def ground_energy_multiplier(self,  value:'float'):
    self.set_ground_energy_multiplier(value)
  @property
  def sun_angle_max(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_sun_angle_max()
    return _ret
  @sun_angle_max.setter
  def sun_angle_max(self,  value:'float'):
    self.set_sun_angle_max(value)
  @property
  def sun_curve(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_sun_curve()
    return _ret
  @sun_curve.setter
  def sun_curve(self,  value:'float'):
    self.set_sun_curve(value)
  @property
  def use_debanding(self) -> typing.Union[bool]:
    r''''''
    _ret = self. get_use_debanding()
    return _ret
  @use_debanding.setter
  def use_debanding(self,  value:'bool'):
    self.set_use_debanding(value)
  @property
  def energy_multiplier(self) -> typing.Union[float]:
    r''''''
    _ret = self. get_energy_multiplier()
    return _ret
  @energy_multiplier.setter
  def energy_multiplier(self,  value:'float'):
    self.set_energy_multiplier(value)
  @functools.native_method
  def set_sky_top_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__sky_top_color = color






    self._ptr.call_with_return(87,tuple([color._ptr]))

  @functools.native_method
  def get_sky_top_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(88,tuple([]))

    return _ret


  @functools.native_method
  def set_sky_horizon_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__sky_horizon_color = color






    self._ptr.call_with_return(89,tuple([color._ptr]))

  @functools.native_method
  def get_sky_horizon_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(90,tuple([]))

    return _ret


  @functools.native_method
  def set_sky_curve(self, curve:'float'   ) -> None:
    r''''''

    assert isinstance(curve, (int, float)), 'curve must be int or float'

    self.py__sky_curve = curve






    self._ptr.call_with_return(91,tuple([curve]))

  @functools.native_method
  def get_sky_curve(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(92,tuple([]))

    return _ret


  @functools.native_method
  def set_sky_energy_multiplier(self, multiplier:'float'   ) -> None:
    r''''''

    assert isinstance(multiplier, (int, float)), 'multiplier must be int or float'

    self.py__sky_energy_multiplier = multiplier






    self._ptr.call_with_return(93,tuple([multiplier]))

  @functools.native_method
  def get_sky_energy_multiplier(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(94,tuple([]))

    return _ret


  @functools.native_method
  def set_sky_cover(self, sky_cover:'py4godot_texture2d.Texture2D'   ) -> None:
    r''''''

    assert(not sky_cover is None)
    assert isinstance(sky_cover, get_class('Texture2D')), 'sky_cover must be Texture2D'

    self.py__sky_cover = sky_cover






    self._ptr.call_with_return(95,tuple([sky_cover._ptr]))

  @functools.native_method
  def get_sky_cover(self) -> typing.Any:
    r''''''




    _ret = classes.Object.Object.construct_without_init() #Smart casted to: Texture2D
    _ret._ptr = self._ptr.call_with_return(96,tuple([]))

    return smart_cast(_ret) if not _ret._ptr.is_null() else None


  @functools.native_method
  def set_sky_cover_modulate(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__sky_cover_modulate = color






    self._ptr.call_with_return(97,tuple([color._ptr]))

  @functools.native_method
  def get_sky_cover_modulate(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(98,tuple([]))

    return _ret


  @functools.native_method
  def set_ground_bottom_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__ground_bottom_color = color






    self._ptr.call_with_return(99,tuple([color._ptr]))

  @functools.native_method
  def get_ground_bottom_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(100,tuple([]))

    return _ret


  @functools.native_method
  def set_ground_horizon_color(self, color:'Color'   ) -> None:
    r''''''

    assert(not color is None)
    assert isinstance(color, Color), 'color must be Color'

    self.py__ground_horizon_color = color






    self._ptr.call_with_return(101,tuple([color._ptr]))

  @functools.native_method
  def get_ground_horizon_color(self) -> typing.Union['Color']:
    r''''''




    _ret = Color.construct_without_init()
    _ret._ptr = self._ptr.call_with_return(102,tuple([]))

    return _ret


  @functools.native_method
  def set_ground_curve(self, curve:'float'   ) -> None:
    r''''''

    assert isinstance(curve, (int, float)), 'curve must be int or float'

    self.py__ground_curve = curve






    self._ptr.call_with_return(103,tuple([curve]))

  @functools.native_method
  def get_ground_curve(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(104,tuple([]))

    return _ret


  @functools.native_method
  def set_ground_energy_multiplier(self, energy:'float'   ) -> None:
    r''''''

    assert isinstance(energy, (int, float)), 'energy must be int or float'

    self.py__ground_energy_multiplier = energy






    self._ptr.call_with_return(105,tuple([energy]))

  @functools.native_method
  def get_ground_energy_multiplier(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(106,tuple([]))

    return _ret


  @functools.native_method
  def set_sun_angle_max(self, degrees:'float'   ) -> None:
    r''''''

    assert isinstance(degrees, (int, float)), 'degrees must be int or float'

    self.py__sun_angle_max = degrees






    self._ptr.call_with_return(107,tuple([degrees]))

  @functools.native_method
  def get_sun_angle_max(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(108,tuple([]))

    return _ret


  @functools.native_method
  def set_sun_curve(self, curve:'float'   ) -> None:
    r''''''

    assert isinstance(curve, (int, float)), 'curve must be int or float'

    self.py__sun_curve = curve






    self._ptr.call_with_return(109,tuple([curve]))

  @functools.native_method
  def get_sun_curve(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(110,tuple([]))

    return _ret


  @functools.native_method
  def set_use_debanding(self, use_debanding:'bool'   ) -> None:
    r''''''

    assert isinstance(use_debanding, bool), 'use_debanding must be bool'

    self.py__use_debanding = use_debanding






    self._ptr.call_with_return(111,tuple([use_debanding]))

  @functools.native_method
  def get_use_debanding(self) -> typing.Union[bool]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(112,tuple([]))

    return _ret


  @functools.native_method
  def set_energy_multiplier(self, multiplier:'float'   ) -> None:
    r''''''

    assert isinstance(multiplier, (int, float)), 'multiplier must be int or float'

    self.py__energy_multiplier = multiplier






    self._ptr.call_with_return(113,tuple([multiplier]))

  @functools.native_method
  def get_energy_multiplier(self) -> typing.Union[float]:
    r''''''




    _ret = 0
    _ret = self._ptr.call_with_return(114,tuple([]))

    return _ret



register_cast_function('ProceduralSkyMaterial', ProceduralSkyMaterial.cast)
register_class('ProceduralSkyMaterial', ProceduralSkyMaterial)
